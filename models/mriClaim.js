const mongoose = require('mongoose')

const Schema = mongoose.Schema

const MriClaimSchema = new Schema(
	{
		name: { type: String },
		linked: { type: Boolean },
		linkedTo: mongoose.Schema.Types.ObjectId,
		level: { type: String },
		email: { type: String },
		importWeek: Number,
		joshNotes: { type: String },
		cmn: { type: String },
		scc: { type: String },
		supplier: { type: String },
		nameCount: { type: String },
		buildNumber: { type: String },
		claimNumber: { type: String },
		claimDate: { type: String },
		model: { type: String },
		amount: { type: String },
		baseModel: { type: String },
		postCutIn: { type: String },
		internal: { type: String },
		tPeriod: { type: String },
		onVideo: { type: String },
		customer: { type: String },
		fourC: { type: String },
		outcome: { type: String },
		leak: { type: String },
		leakasd: { type: String },
		asd: { type: String },
		notes: { type: String },
		grade: { type: String },
		image: { type: String },
		image1: { type: String },
		image2: { type: String },
		image3: { type: String },
		image4: { type: String },
		image5: { type: String },
		image6: { type: String },
		image7: { type: String },
		image8: { type: String },
		image9: { type: String },
		image10: { type: String },
		description: { type: String },
		area: { type: String },
		cabs: { type: String },
		detection: { type: String },
		vetted: { type: String },
		vettedBy: { type: String },
		vettedAt: { type: Date },
		closedBy: { type: String },
		reallocatedBy: { type: String },
		containedBy: { type: String },
		hours: { type: String },
		buildDate: { type: String },
		abcd: { type: String },
		failDate: { type: String },
		failedPart: { type: String },
		partCount: { type: String },
		wasPickedUp: { type: String },
		canBePickedUp: { type: String },
		failedAt: { type: String },
		dealer: { type: String },
		cost: Number,
		country: { type: String },
		serviceRes: { type: String },
		serviceResBy: { type: String },
		serviceResAt: { type: Date },
		reOpenedAt: { type: Date },
		reOpenedBy: { type: String },
		actioned: { type: String },
		containCutIn: { type: String },
		reason: { type: String },
		closeCutIn: { type: String },
		line: { type: String },
		isAg: { type: String },
		inspector: { type: String },
		failuremode: { type: String },
		failuretype: { type: String },
		buildmonth: { type: String },
		importedDate: { type: Date },
		importDate: { type: String },
		pVal: { type: String },
		cSop: { type: String },
		sMatrix: { type: String },
		qAlert: { type: String },
		ySweep: { type: String },
		containNotes: { type: String },
		containUpdate: { type: String },
		containUpdateBy: { type: String },
		containUpdateAt: { type: Date },
		counterWhyNotes: { type: String },
		counterWhatNotes: { type: String },
		rootCause: { type: String },
		qSmart: { type: String },
		warranty: { type: String },
		sOff: { type: String },
		closeNotes: { type: String },
		sopNumber: { type: String },
		status: { type: String },
		audited: { type: String },
		tToolR: { type: String },
		tToolBu: { type: String },
		lPart: { type: String },
		ttSop: { type: String },
		ttCorrect: { type: String },
		concern: { type: String },
		rag: { type: String },
		asdJosh: { type: String },
		sccJosh: { type: String },
		containJosh: { type: String },
		action: { type: String },
		champion: { type: String },
		closureDate: { type: String },
		createdAt: { type: Date, default: Date.now },
		containedAt: { type: Date },
		closedAt: { type: Date },
		reallocatedAt: { type: Date },
		auditedBy: { type: String },
		auditedAt: { type: Date },
		division: { type: String },
		componentInternal: { type: String },
		cabsRag: { type: String },
		closureDateCabs: { type: String },
		asdCabs: { type: String },
		sccCabs: { type: String },
		actionCabs: { type: String },
		championCabs: { type: String },
		concernCabs: { type: String },
		containCabs: { type: String },
		active: { type: Boolean, default: true },
	},
	{ timestamps: true }
)

module.exports = mongoose.model('MriClaim', MriClaimSchema)
