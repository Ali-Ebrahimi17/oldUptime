const fs = require('fs')
const path = require('path')

const axios = require('axios')
const CronJob = require('cron').CronJob
const nodemailer = require('nodemailer')

const Claim = require('../models/claim')
const DOA25pt = require('../models/doa25pt')
const Doa25pt = require('../models/doa25pt')
const Machine = require('../models/machine')
const Update = require('../models/update')
const Order = require('../models/order')
const Mri = require('../models/mri')
const Qmr = require('../models/qmr')
const CabMri = require('../models/cabmri')
const Stat = require('../models/stat')
const Cabin = require('../models/cabin')
const CabsClaim = require('../models/cabsclaim')
const Cabsretail = require('../models/cabsretail')

const Throughput = require('../models/throughput')
const Retail = require('../models/retail')
const Figure = require('../models/figure')
const Graph = require('../models/graph')
const Zone = require('../models/zone')
const QSmart = require('../models/qSmart')
const Prediction = require('../models/prediction')
const Remove = require('../models/remove')
const Stage12 = require('../models/stage12')
const Stage16 = require('../models/stage16')
const Stage17 = require('../models/stage17')
const Stage19 = require('../models/stage19')

const Actual = require('../models/actual')
const moment = require('moment')

const countOccurrences = (arr, val) => arr.reduce((a, v) => (v === val ? a + 1 : a), 0)

let eightMonthsAgoNumberFormat = moment().subtract(8, 'months').format('YYYY, MM, 01')
let eightMonthsAgoNumber = moment().subtract(8, 'months').format('MM')
let eightMonthsAgoNumberY = moment().subtract(8, 'months').format('YYYY')
let sevenMonthsAgoNumber = moment().subtract(7, 'months').format('MM')
let sevenMonthsAgoNumberY = moment().subtract(7, 'months').format('YYYY')
let sixMonthsAgoNumber = moment().subtract(6, 'months').format('MM')
let sixMonthsAgoNumberY = moment().subtract(6, 'months').format('YYYY')
let fiveMonthsAgoNumber = moment().subtract(5, 'months').format('MM')
let fiveMonthsAgoNumberY = moment().subtract(5, 'months').format('YYYY')
let fourMonthsAgoNumber = moment().subtract(4, 'months').format('MM')
let fourMonthsAgoNumberY = moment().subtract(4, 'months').format('YYYY')
let threeMonthsAgoNumber = moment().subtract(3, 'months').format('MM')
let threeMonthsAgoNumberY = moment().subtract(3, 'months').format('YYYY')
let twoMonthsAgoNumber = moment().subtract(2, 'months').format('MM')
let twoMonthsAgoNumberY = moment().subtract(2, 'months').format('YYYY')
let oneMonthAgoNumber = moment().subtract(1, 'months').format('MM')
let oneMonthAgoNumberY = moment().subtract(1, 'months').format('YYYY')
let thisMonthNumber = moment().subtract(0, 'months').format('MM')
let thisMonthNumberY = moment().subtract(0, 'months').format('YYYY')

let thisMonthText = moment().subtract(0, 'months').format('MMM')
let oneMonthAgoText = moment().subtract(1, 'months').format('MMM')
let twoMonthsAgoText = moment().subtract(2, 'months').format('MMM')
let threeMonthsAgoText = moment().subtract(3, 'months').format('MMM')
let fourMonthsAgoText = moment().subtract(4, 'months').format('MMM')
let fiveMonthsAgoText = moment().subtract(5, 'months').format('MMM')
let sixMonthsAgoText = moment().subtract(6, 'months').format('MMM')
let sevenMonthsAgoText = moment().subtract(7, 'months').format('MMM')
let eightMonthsAgoText = moment().subtract(8, 'months').format('MMM')

const nineMOnthsAgo = new Date(eightMonthsAgoNumber)

// get the build months
let thisMonth = moment().subtract(0, 'months').format('MM/YYYY')
let oneMonthAgo = moment().subtract(1, 'months').format('MM/YYYY')
let twoMonthsAgo = moment().subtract(2, 'months').format('MM/YYYY')
let threeMonthsAgo = moment().subtract(3, 'months').format('MM/YYYY')
let fourMonthsAgo = moment().subtract(4, 'months').format('MM/YYYY')
let fiveMonthsAgo = moment().subtract(5, 'months').format('MM/YYYY')
let sixMonthsAgo = moment().subtract(6, 'months').format('MM/YYYY')
let sevenMonthsAgo = moment().subtract(7, 'months').format('MM/YYYY')
let eightMonthsAgo = moment().subtract(8, 'months').format('MM/YYYY')
let nineMonthsAgo = moment().subtract(9, 'months').format('MM/YYYY')
let tenMonthsAgo = moment().subtract(10, 'months').format('MM/YYYY')

// console.log(sevenMonthsAgo)

let thisWeek = parseInt(moment().subtract(0, 'weeks').format('w'), 10)
let lastWeek = parseInt(moment().subtract(1, 'weeks').format('w'), 10)
let twoWeeksAgo = parseInt(moment().subtract(2, 'weeks').format('w'), 10)
let threeWeeksAgo = parseInt(moment().subtract(3, 'weeks').format('w'), 10)
let fourWeeksAgo = parseInt(moment().subtract(4, 'weeks').format('w'), 10)
let fiveWeeksAgo = parseInt(moment().subtract(5, 'weeks').format('w'), 10)
let sixWeeksAgo = parseInt(moment().subtract(6, 'weeks').format('w'), 10)
let sevenWeeksAgo = parseInt(moment().subtract(7, 'weeks').format('w'), 10)
let eightWeeksAgo = parseInt(moment().subtract(8, 'weeks').format('w'), 10)
let nineWeeksAgo = parseInt(moment().subtract(9, 'weeks').format('w'), 10)
let tenWeeksAgo = parseInt(moment().subtract(10, 'weeks').format('w'), 10)
let elevenWeeksAgo = parseInt(moment().subtract(11, 'weeks').format('w'), 10)
let twelveWeeksAgo = parseInt(moment().subtract(12, 'weeks').format('w'), 10)
let thirteenWeeksAgo = parseInt(moment().subtract(13, 'weeks').format('w'), 10)
let fourteenWeeksAgo = parseInt(moment().subtract(14, 'weeks').format('w'), 10)
let fifteenWeeksAgo = parseInt(moment().subtract(15, 'weeks').format('w'), 10)
let sixteenWeeksAgo = parseInt(moment().subtract(16, 'weeks').format('w'), 10)

const curr = new Date()
const startOfWeek = new Date(curr.setDate(curr.getDate() - curr.getDay())) //start of this week
const startOfMonth = new Date(curr.getFullYear(), curr.getMonth(), 1) // start of this month
const startOfYear = new Date(curr.getFullYear(), 0, 1) // start of this year

module.exports.download = async (req, res, next) => {
	const downloadName = 'scc.pdf'
	const downloadPath = path.join('PDF', downloadName)

	const file = fs.createReadStream(downloadPath)
	res.setHeader('Content-Type', 'application/pdf')
	res.setHeader('Content-Disposition', 'attachment; filename="scc.pdf"')
	file.pipe(res)
}

module.exports.divFaults = async (req, res, next) => {
	const { businessUnit, division } = req.params
	const todayDB = new Date()
	todayDB.setHours(0, 0, 0, 0)

	let divForMongo = []
	let divForQ = []
	let theSipStations = []
	let allSips = []
	let removalsMongo = []
	let removes = []
	let buArr = [division]

	if (buArr.includes('HBU')) {
		divForMongo = [...allSips]
		removalsMongo.push('Hydraulic Business Unit')
	}
	if (buArr.includes('Cabs')) {
		removalsMongo.push('Cab Systems')
	}

	const removesArray = await Remove.find({ division: { $in: removalsMongo } })

	for (let r of removesArray) {
		removes.push(r.name)
	}

	const allSipArray = await QSmart.aggregate([
		{
			$group: {
				_id: '$Fault Area',
			},
		},
	])
	for (let s of allSipArray) {
		allSips.push(s._id)
	}

	if (buArr.includes('HBU')) {
		divForMongo = [...allSips]
		divForQ.push('Hydraulic Business Unit')
	}
	if (buArr.includes('Cabs')) {
		divForMongo.push('Cab Systems')
		divForQ.push('Cab Systems')
	}

	const theSipStationsArray = await QSmart.aggregate([
		{
			$match: {
				['Created Date']: { $gt: todayDB },
				['Fault Area']: { $in: divForMongo },
			},
		},
		{
			$group: {
				_id: '$Zone',
			},
		},
	])

	for (let s of theSipStationsArray) {
		theSipStations.push(s._id)
	}

	const faults = await QSmart.aggregate([
		{
			$match: {
				['Created Date']: { $gt: todayDB },
				['Business Unit']: businessUnit,
				Zone: { $in: theSipStations },
				['Fault Area']: { $in: divForQ },
				Model: { $nin: removes },
			},
		},
		{ $sort: { 'Created Date': -1 } },
	])
	res.render('dash/divFaults', {
		faults,
		division,
		businessUnit,
	})
}

module.exports.scc = async (req, res) => {
	const options = [
		{
			$match: {
				// division     : 'LDL',
				importedDate: {
					$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
				},
				importWeek: thisWeek,
				fourC: 'Yes',
				tPeriod: 'DOA',
				status: 'Open',
				outcome: {
					$nin: ['Reject', 'Z Code'],
				},
			},
		},
	]

	const claims = await Claim.aggregate(options)
	// console.log(claims);

	res.render('dash/scc', {
		claims,
		thisWeek,
		lastWeek,
		twoWeeksAgo,
		threeWeeksAgo,
		fourWeeksAgo,
		fiveWeeksAgo,
		sixWeeksAgo,
	})
}

module.exports.claimsThisYear = async (req, res) => {
	const { zones, division } = req.params
	const thePeriod = ['DOA', 'T000', 'T001', 'T002', 'T003']

	if (zones === 'Zone 2') {
		area = 'Track 1 - Zone 2'
	}
	if (zones === 'Zone 3') {
		area = 'Track 1 - Zone 3'
	}
	if (zones === 'Zone 4') {
		area = 'Track 1 - Zone 4'
	}
	if (zones === 'Zone 5') {
		area = 'Track 1 - Zone 5'
	}
	if (zones === 'Zone 6') {
		area = 'Track 1 - Zone 6'
	}
	if (zones === 'Axle Subs') {
		area = 'Axle Subs'
	}
	if (zones === 'Rad Subs') {
		area = 'Rad Subs'
	}
	if (zones === 'Booms') {
		area = 'Booms'
	}
	if (zones === 'Overheads') {
		area = 'Overheads'
	}
	if (zones === 'Shot & Paint') {
		area = 'Paint Plant'
	}
	if (zones === 'Engine Subs') {
		area = 'Engine Subs'
	}
	if (zones === 'Track 3 Zone 1') {
		area = 'Track 3 Zone 1'
	}
	if (zones === 'Track 3 Zone 2') {
		area = 'Track 3 Zone 2'
	}

	const options = [
		{
			$match: {
				division: division,
				area: area,
				importedDate: { $gte: new Date(new Date(startOfYear)) },
				vetted: 'Yes',
				tPeriod: {
					$in: thePeriod,
				},
				outcome: {
					$in: ['Accept', 'Raise on Supplier'],
				},
			},
		},
	]

	const claims = await Claim.aggregate(options)
	res.render('dash/zoneClaims', { division, claims })
}
module.exports.claimsThisMonth = async (req, res) => {
	const { zones, division } = req.params
	const thePeriod = ['DOA', 'T000', 'T001', 'T002', 'T003']

	if (zones === 'Zone 2') {
		area = 'Track 1 - Zone 2'
	}
	if (zones === 'Zone 3') {
		area = 'Track 1 - Zone 3'
	}
	if (zones === 'Zone 4') {
		area = 'Track 1 - Zone 4'
	}
	if (zones === 'Zone 5') {
		area = 'Track 1 - Zone 5'
	}
	if (zones === 'Zone 6') {
		area = 'Track 1 - Zone 6'
	}
	if (zones === 'Axle Subs') {
		area = 'Axle Subs'
	}
	if (zones === 'Rad Subs') {
		area = 'Rad Subs'
	}
	if (zones === 'Booms') {
		area = 'Booms'
	}
	if (zones === 'Overheads') {
		area = 'Overheads'
	}
	if (zones === 'Shot & Paint') {
		area = 'Paint Plant'
	}
	if (zones === 'Engine Subs') {
		area = 'Engine Subs'
	}
	if (zones === 'Track 3 Zone 1') {
		area = 'Track 3 Zone 1'
	}
	if (zones === 'Track 3 Zone 2') {
		area = 'Track 3 Zone 2'
	}
	const options = [
		{
			$match: {
				division: division,
				area: area,
				importedDate: { $gte: new Date(new Date(startOfMonth)) },
				vetted: 'Yes',
				tPeriod: {
					$in: thePeriod,
				},
				outcome: {
					$in: ['Accept', 'Raise on Supplier'],
				},
			},
		},
	]

	const claims = await Claim.aggregate(options)
	res.render('dash/zoneClaims', { division, claims })
}
module.exports.claimsThisWeek = async (req, res) => {
	const { zones, division } = req.params
	const thePeriod = ['DOA', 'T000', 'T001', 'T002', 'T003']

	if (zones === 'Zone 2') {
		area = 'Track 1 - Zone 2'
	}
	if (zones === 'Zone 3') {
		area = 'Track 1 - Zone 3'
	}
	if (zones === 'Zone 4') {
		area = 'Track 1 - Zone 4'
	}
	if (zones === 'Zone 5') {
		area = 'Track 1 - Zone 5'
	}
	if (zones === 'Zone 6') {
		area = 'Track 1 - Zone 6'
	}
	if (zones === 'Axle Subs') {
		area = 'Axle Subs'
	}
	if (zones === 'Rad Subs') {
		area = 'Rad Subs'
	}
	if (zones === 'Booms') {
		area = 'Booms'
	}
	if (zones === 'Overheads') {
		area = 'Overheads'
	}
	if (zones === 'Shot & Paint') {
		area = 'Paint Plant'
	}
	if (zones === 'Engine Subs') {
		area = 'Engine Subs'
	}
	if (zones === 'Track 3 Zone 1') {
		area = 'Track 3 Zone 1'
	}
	if (zones === 'Track 3 Zone 2') {
		area = 'Track 3 Zone 2'
	}
	const options = [
		{
			$match: {
				division: division,
				area: area,
				importedDate: { $gte: new Date(new Date(startOfWeek)) },
				vetted: 'Yes',
				tPeriod: {
					$in: thePeriod,
				},
				outcome: {
					$in: ['Accept', 'Raise on Supplier'],
				},
			},
		},
	]

	const claims = await Claim.aggregate(options)
	res.render('dash/zoneClaims', { division, claims })
}

module.exports.zone = async (req, res) => {
	const { zones, division } = req.params

	if (zones === 'Zone 2') {
		area = 'Track 1 - Zone 2'
	}
	if (zones === 'Zone 3') {
		area = 'Track 1 - Zone 3'
	}
	if (zones === 'Zone 4') {
		area = 'Track 1 - Zone 4'
	}
	if (zones === 'Zone 5') {
		area = 'Track 1 - Zone 5'
	}
	if (zones === 'Zone 6') {
		area = 'Track 1 - Zone 6'
	}
	if (zones === 'Axle Subs') {
		area = 'Axle Subs'
	}
	if (zones === 'Rad Subs') {
		area = 'Rad Subs'
	}
	if (zones === 'Booms') {
		area = 'Booms'
	}
	if (zones === 'Overheads') {
		area = 'Overheads'
	}
	if (zones === 'Shot & Paint') {
		area = 'Paint Plant'
	}
	if (zones === 'Engine Subs') {
		area = 'Engine Subs'
	}
	if (zones === 'Track 3 Zone 1') {
		area = 'Track 3 Zone 1'
	}
	if (zones === 'Track 3 Zone 2') {
		area = 'Track 3 Zone 2'
	}
	const graph = await Graph.find({ division: division })
	const figure = await Figure.find({ division: division })
	const zone = await Zone.find({ name: zones })

	const dpuMonth = moment().subtract(0, 'months').format('MMM-YY')
	// get pre t3 claims
	const rawPredictionClaims = await Claim.aggregate([
		{
			$match: {
				division: division,
				$or: [{ buildDate: { $regex: fourMonthsAgo } }, { buildDate: { $regex: threeMonthsAgo } }, { buildDate: { $regex: twoMonthsAgo } }],
				tPeriod: {
					$in: ['T000', 'T001', 'T002', 'T003'],
				},
				outcome: {
					$nin: ['Reject', 'Z Code'],
				},
			},
		},
	])
	// get reject & Z code pre t3 claims that have not been actioned
	const rawPredictionClaims1 = await Claim.aggregate([
		{
			$match: {
				division: division,
				$or: [{ buildDate: { $regex: fourMonthsAgo } }, { buildDate: { $regex: threeMonthsAgo } }, { buildDate: { $regex: twoMonthsAgo } }],
				tPeriod: {
					$in: ['T000', 'T001', 'T002', 'T003'],
				},
				actioned: { $ne: 'Yes' },
				outcome: {
					$in: ['Reject', 'Z Code'],
				},
			},
		},
	])

	/// ------------Prediction 1 --------------------///

	// get  total build for pre t3
	const totalBuildPrediction1 = await Retail.aggregate([
		{
			$match: {
				buildDate: { $regex: fourMonthsAgo },
				division: division,
			},
		},
	])
	// get  total sold for pre t3
	const totalSoldPrediction1 = await Retail.aggregate([
		{
			$match: {
				buildDate: { $regex: fourMonthsAgo },
				soldDate: { $ne: '#' },
				division: division,
			},
		},
	])

	// get total retails for pre t3
	const mriRetailsPrediction1 = await Retail.aggregate([
		{
			$match: {
				division: division,
				buildDate: { $regex: fourMonthsAgo },
				$or: [{ soldDate: { $regex: fourMonthsAgo } }, { soldDate: { $regex: threeMonthsAgo } }],
			},
		},
	])
	//work out prediction 1
	let prediction1T3Retails = []
	mriRetailsPrediction1.forEach((r) => {
		prediction1T3Retails.push(r.serialNumber)
	})

	let predictionClaims = []
	rawPredictionClaims.forEach((c) => {
		predictionClaims.push(c.name)
	})
	rawPredictionClaims1.forEach((c) => {
		predictionClaims.push(c.name)
	})

	// work out rft
	// all machines that are in T3 month 1
	let RetailsMonth1 = [prediction1T3Retails.length]
	// all claims
	let rftClaims = [...new Set(predictionClaims)]

	Compare11 = (a1, a2) => rftClaims.reduce((a, c) => a + prediction1T3Retails.includes(c), 0)
	const pre1FailedMachines = Compare11(rftClaims, prediction1T3Retails)
	const pre1GoodMachines = RetailsMonth1 - pre1FailedMachines
	const pre1RFT = Math.round((pre1GoodMachines / RetailsMonth1) * 100) || 0

	Compare1 = (a1, a2) => predictionClaims.reduce((a, c) => a + prediction1T3Retails.includes(c), 0)

	const pre1Builds = totalBuildPrediction1.length
	const pre1Sold = totalSoldPrediction1.length
	const pre1NotSold = pre1Builds - pre1Sold
	const pre1Claims = Compare1(predictionClaims, prediction1T3Retails)
	const pre1Retails = prediction1T3Retails.length
	const prediction1 = (pre1Claims / pre1Retails || 0).toFixed(3)

	/// ------------Prediction 2 --------------------///

	// get  total build for pre t3
	const totalBuildPrediction2 = await Retail.aggregate([
		{
			$match: {
				buildDate: { $regex: threeMonthsAgo },
				division: division,
			},
		},
	])
	// get  total sold for pre t3
	const totalSoldPrediction2 = await Retail.aggregate([
		{
			$match: {
				buildDate: { $regex: threeMonthsAgo },
				soldDate: { $ne: '#' },
				division: division,
			},
		},
	])

	// get total retails for pre t3
	const mriRetailsPrediction2 = await Retail.aggregate([
		{
			$match: {
				division: division,
				buildDate: { $regex: threeMonthsAgo },
				$or: [{ soldDate: { $regex: threeMonthsAgo } }, { soldDate: { $regex: twoMonthsAgo } }],
			},
		},
	])
	//work out prediction 2
	let prediction2T3Retails = []
	mriRetailsPrediction2.forEach((r) => {
		prediction2T3Retails.push(r.serialNumber)
	})

	// work out rft

	let RetailsMonth2 = [prediction2T3Retails.length]

	Compare12 = (a1, a2) => rftClaims.reduce((a, c) => a + prediction2T3Retails.includes(c), 0)
	const pre2FailedMachines = Compare12(rftClaims, prediction2T3Retails)
	const pre2GoodMachines = RetailsMonth2 - pre2FailedMachines
	const pre2RFT = Math.round((pre2GoodMachines / RetailsMonth2) * 100) || 0

	Compare2 = (a1, a2) => predictionClaims.reduce((a, c) => a + prediction2T3Retails.includes(c), 0)

	const pre2Builds = totalBuildPrediction2.length
	const pre2Sold = totalSoldPrediction2.length
	const pre2NotSold = pre2Builds - pre2Sold
	const pre2Claims = Compare2(predictionClaims, prediction2T3Retails)
	const pre2Retails = prediction2T3Retails.length
	const prediction2 = (pre2Claims / pre2Retails || 0).toFixed(3)

	/// ------------Prediction 3 --------------------///

	// get  total build for pre t3
	const totalBuildPrediction3 = await Retail.aggregate([
		{
			$match: {
				buildDate: { $regex: twoMonthsAgo },
				division: division,
			},
		},
	])
	// get  total sold for pre t3
	const totalSoldPrediction3 = await Retail.aggregate([
		{
			$match: {
				buildDate: { $regex: twoMonthsAgo },
				soldDate: { $ne: '#' },
				division: division,
			},
		},
	])

	// get total retails for pre t3
	const mriRetailsPrediction3 = await Retail.aggregate([
		{
			$match: {
				division: division,
				buildDate: { $regex: twoMonthsAgo },
				$or: [{ soldDate: { $regex: twoMonthsAgo } }, { soldDate: { $regex: oneMonthAgo } }],
			},
		},
	])
	//work out prediction 2
	let prediction3T3Retails = []
	mriRetailsPrediction3.forEach((r) => {
		prediction3T3Retails.push(r.serialNumber)
	})
	// work out rft
	let RetailsMonth3 = [prediction3T3Retails.length]

	Compare13 = (a1, a2) => rftClaims.reduce((a, c) => a + prediction3T3Retails.includes(c), 0)
	const pre3FailedMachines = Compare13(rftClaims, prediction3T3Retails)
	const pre3GoodMachines = RetailsMonth3 - pre3FailedMachines
	const pre3RFT = Math.round((pre3GoodMachines / RetailsMonth3) * 100) || 0

	Compare3 = (a1, a2) => predictionClaims.reduce((a, c) => a + prediction3T3Retails.includes(c), 0)

	const pre3Builds = totalBuildPrediction3.length
	const pre3Sold = totalSoldPrediction3.length
	const pre3NotSold = pre3Builds - pre3Sold
	const pre3Claims = Compare3(predictionClaims, prediction3T3Retails)
	const pre3Retails = prediction3T3Retails.length
	const prediction3 = (pre3Claims / pre3Retails || 0).toFixed(3)

	//  START OF RIGHT SIDE

	const thePeriod = ['DOA', 'T000', 'T001', 'T002', 'T003']
	const internal = ['Internal Techweb']

	const options = [
		{
			$match: {
				division: division,
				area: area,
				importedDate: { $gte: new Date(new Date(startOfYear)) },
				vetted: 'Yes',
				tPeriod: {
					$in: thePeriod,
				},
				outcome: {
					$in: ['Accept', 'Raise on Supplier'],
				},
			},
		},
	]

	const fullClaimsThisYear = await Claim.aggregate(options)
	// console.log(fullClaimsThisYear.length);

	const claimsThisWeek = await Claim.countDocuments({
		division: division,
		area: area,
		importedDate: { $gte: new Date(new Date(startOfWeek)) },
		tPeriod: {
			$in: thePeriod,
		},
		vetted: 'Yes',
		outcome: {
			$in: ['Accept', 'Raise on Supplier'],
		},
	})
	const claimsThisMonth = await Claim.countDocuments({
		division: division,
		area: area,
		importedDate: { $gte: new Date(new Date(startOfMonth)) },
		tPeriod: {
			$in: thePeriod,
		},
		vetted: 'Yes',
		outcome: {
			$in: ['Accept', 'Raise on Supplier'],
		},
	})
	const claimsThisYear = await Claim.countDocuments({
		division: division,
		area: area,
		importedDate: { $gte: new Date(new Date(startOfYear)) },
		tPeriod: {
			$in: thePeriod,
		},
		vetted: 'Yes',
		outcome: {
			$in: ['Accept', 'Raise on Supplier'],
		},
	})

	const intTWThisWeek = await Claim.countDocuments({
		division: division,
		fourC: 'Yes',
		area: area,
		vettedAt: { $gte: new Date(new Date(startOfWeek)) },
		claimNumber: {
			$in: internal,
		},
	})
	const intTWThisMonth = await Claim.countDocuments({
		division: division,
		fourC: 'Yes',
		area: area,
		vettedAt: { $gte: new Date(new Date(startOfMonth)) },
		claimNumber: {
			$in: internal,
		},
	})
	const intTWThisYear = await Claim.countDocuments({
		division: division,
		fourC: 'Yes',
		area: area,
		vettedAt: { $gte: new Date(new Date(startOfYear)) },
		claimNumber: {
			$in: internal,
		},
	})

	const extFourCOpenNum = await Claim.countDocuments({
		division: division,
		importedDate: { $gte: new Date(new Date(startOfYear)) },
		fourC: 'Yes',
		status: 'Open',
		tPeriod: {
			$in: thePeriod,
		},
		$or: [
			{ buildDate: { $regex: '/08/2021' } },
			{ buildDate: { $regex: '/09/2021' } },
			{ buildDate: { $regex: '/10/2021' } },
			{ buildDate: { $regex: '/11/2021' } },
			{ buildDate: { $regex: '/12/2021' } },
		],
		area: area,
	})
	const extFourCContainedNum = await Claim.countDocuments({
		division: division,
		importedDate: { $gte: new Date(new Date(startOfYear)) },
		fourC: 'Yes',
		status: 'Contained',
		tPeriod: {
			$in: thePeriod,
		},
		$or: [
			{ buildDate: { $regex: '/08/2021' } },
			{ buildDate: { $regex: '/09/2021' } },
			{ buildDate: { $regex: '/10/2021' } },
			{ buildDate: { $regex: '/11/2021' } },
			{ buildDate: { $regex: '/12/2021' } },
		],
		area: area,
	})
	const extFourCClosedNum = await Claim.countDocuments({
		division: division,
		fourC: 'Yes',
		importedDate: { $gte: new Date(new Date(startOfYear)) },
		status: 'Closed',
		tPeriod: {
			$in: thePeriod,
		},
		$or: [
			{ buildDate: { $regex: '/08/2021' } },
			{ buildDate: { $regex: '/09/2021' } },
			{ buildDate: { $regex: '/10/2021' } },
			{ buildDate: { $regex: '/11/2021' } },
			{ buildDate: { $regex: '/12/2021' } },
		],
		area: area,
	})
	const intFourCOpenNum = await Claim.countDocuments({
		division: division,
		vettedAt: { $gte: new Date(new Date(startOfYear)) },
		fourC: 'Yes',
		status: 'Open',
		claimNumber: {
			$in: internal,
		},
		area: area,
	})
	const intFourCContainedNum = await Claim.countDocuments({
		division: division,
		vettedAt: { $gte: new Date(new Date(startOfYear)) },
		fourC: 'Yes',
		status: 'Contained',
		claimNumber: {
			$in: internal,
		},
		area: area,
	})
	const intFourCClosedNum = await Claim.countDocuments({
		division: division,
		vettedAt: { $gte: new Date(new Date(startOfYear)) },
		fourC: 'Yes',
		status: 'Closed',
		claimNumber: {
			$in: internal,
		},
		area: area,
	})
	process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0'
	let startDate = moment().format('YYYY/MM/DD/00/00')
	let endDate = moment().format('YYYY/MM/DD/kk/mm')

	let response = await axios(`https://internal.jcb.local/qsmartapi/api/qsmart/faults/19/${startDate}/${endDate}/1`)

	let json = response.data

	let totalZone = []
	let inZone = []

	if (area === 'Track 1 - Zone 2') {
		for (let m of json) {
			if (m['Fault Area'] === 'Zone 2 Ldl') {
				totalZone.push(m)
			}
		}
		for (let m of json) {
			if (m['Fault Area'] === 'Zone 2 Ldl' && m.Zone === 'SIP 2 NEW') {
				inZone.push(m)
			}
		}
	}
	if (area === 'Track 1 - Zone 3') {
		for (let m of json) {
			if (m['Fault Area'] === 'Zone 3 Ldl') {
				totalZone.push(m)
			}
		}
		for (let m of json) {
			if (m['Fault Area'] === 'Zone 3 Ldl' && m.Zone === 'SIP 3 NEW') {
				inZone.push(m)
			}
		}
	}
	if (area === 'Track 1 - Zone 4') {
		for (let m of json) {
			if (m['Fault Area'] === 'Zone 4 Ldl') {
				totalZone.push(m)
			}
		}
		for (let m of json) {
			if (m['Fault Area'] === 'Zone 4 Ldl' && m.Zone === 'SIP 4 NEW') {
				inZone.push(m)
			}
		}
	}
	if (area === 'Track 1 - Zone 5') {
		for (let m of json) {
			if (m['Fault Area'] === 'Zone 5 Ldl') {
				totalZone.push(m)
			}
		}
		for (let m of json) {
			if (m['Fault Area'] === 'Zone 5 Ldl' && m.Zone === 'SIP 5 NEW') {
				inZone.push(m)
			}
		}
	}
	if (area === 'Track 1 - Zone 6') {
		for (let m of json) {
			if (m['Fault Area'] === 'Zone 6 Ldl') {
				totalZone.push(m)
			}
		}
		for (let m of json) {
			if (m['Fault Area'] === 'Zone 6 Ldl' && m.Zone === 'SIP 6 NEW') {
				inZone.push(m)
			}
		}
	}

	if (area === 'Track 3 Zone 1') {
		for (let m of json) {
			if (m['Fault Area'] === 'Track 3 Zone 1') {
				totalZone.push(m)
			}
		}
		for (let m of json) {
			if (m['Fault Area'] === 'Track 3 Zone 1' && m.Zone === 'Track 3 SIP 1') {
				inZone.push(m)
			}
		}
	}
	if (area === 'Track 3 Zone 2') {
		for (let m of json) {
			if (m['Fault Area'] === 'Track 3 Zone 2') {
				totalZone.push(m)
			}
		}
		for (let m of json) {
			if (m['Fault Area'] === 'Track 3 Zone 2' && m.Zone === 'Track 3 SIP 2') {
				inZone.push(m)
			}
		}
	}
	if (area === 'Paint Plant') {
		for (let m of json) {
			if (m['Fault Area'] === 'Shot & Paint') {
				totalZone.push(m)
			}
		}
		for (let m of json) {
			if (m['Fault Area'] === 'Shot & Paint' && m.Zone === 'Shot & Paint') {
				inZone.push(m)
			}
		}
	}
	if (area === 'Axle Subs') {
		for (let m of json) {
			if (m['Fault Area'] === 'Axle Sub Assembly') {
				totalZone.push(m)
			}
		}
		for (let m of json) {
			if (m['Fault Area'] === 'Axle Sub Assembly' && m.Zone === 'Axle Sub Assembly') {
				inZone.push(m)
			}
		}
	}
	if (area === 'Rad Subs') {
		for (let m of json) {
			if (m['Fault Area'] === 'Cooling Pack Sub Assembly') {
				totalZone.push(m)
			}
		}
		for (let m of json) {
			if (m['Fault Area'] === 'Cooling Pack Sub Assembly' && m.Zone === 'Cooling Pack Sub Assembly') {
				inZone.push(m)
			}
		}
	}
	if (area === 'Engine Subs') {
		for (let m of json) {
			if (m['Fault Area'] === 'Engine Sub Assembly') {
				totalZone.push(m)
			}
		}
		for (let m of json) {
			if (m['Fault Area'] === 'Engine Sub Assembly' && m.Zone === 'Engine Sub Assembly') {
				inZone.push(m)
			}
		}
	}
	if (area === 'Overheads') {
		for (let m of json) {
			if (m['Fault Area'] === 'Zone 1 Ldl') {
				totalZone.push(m)
			}
		}
		for (let m of json) {
			if (m['Fault Area'] === 'Zone 1 Ldl' && m.Zone === 'Zone 1 Ldl') {
				inZone.push(m)
			}
		}
	}
	if (area === 'Booms') {
		for (let m of json) {
			if (m['Fault Area'] === 'Boom Sub Assembly') {
				totalZone.push(m)
			}
		}
		for (let m of json) {
			if (m['Fault Area'] === 'Boom Sub Assembly' && m.Zone === 'Boom Sub Assembly LDL') {
				inZone.push(m)
			}
		}
	}

	if (totalZone.length > 0) {
		inspEff = Math.round((inZone.length / totalZone.length) * 100)
	}
	if (totalZone.length < 1) {
		inspEff = 100
	}

	res.render('dash/area', {
		division,
		graph,
		figure,
		zone,
		zones,
		dpuMonth,
		prediction1,
		prediction2,
		prediction3,
		pre1RFT,
		pre2RFT,
		pre3RFT,
		intFourCOpenNum,
		intFourCContainedNum,
		intFourCClosedNum,
		extFourCOpenNum,
		extFourCContainedNum,
		extFourCClosedNum,
		claimsThisWeek,
		claimsThisMonth,
		claimsThisYear,
		intTWThisWeek,
		intTWThisMonth,
		intTWThisYear,
		inspEff,
	})
}

module.exports.dashQSmart = async (req, res) => {
	const { area, division } = req.params
	process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0'
	let startDate = moment().format('YYYY/MM/DD/00/00')
	let endDate = moment().format('YYYY/MM/DD/kk/mm')

	let response = await axios(`https://internal.jcb.local/qsmartapi/api/qsmart/faults/19/${startDate}/${endDate}/1`)

	let json = response.data

	let totalZone = []
	let inZone = []
	if (area === 'Track 1 - Zone 2') {
		for (let m of json) {
			if (m['Fault Area'] === 'Zone 2 Ldl') {
				totalZone.push(m)
			}
		}
		for (let m of json) {
			if (m['Fault Area'] === 'Zone 2 Ldl' && m.Zone === 'SIP 2 NEW') {
				inZone.push(m)
			}
		}
	}
	if (area === 'Track 1 - Zone 3') {
		for (let m of json) {
			if (m['Fault Area'] === 'Zone 3 Ldl') {
				totalZone.push(m)
			}
		}
		for (let m of json) {
			if (m['Fault Area'] === 'Zone 3 Ldl' && m.Zone === 'SIP 3 NEW') {
				inZone.push(m)
			}
		}
	}
	if (area === 'Track 1 - Zone 4') {
		for (let m of json) {
			if (m['Fault Area'] === 'Zone 4 Ldl') {
				totalZone.push(m)
			}
		}
		for (let m of json) {
			if (m['Fault Area'] === 'Zone 4 Ldl' && m.Zone === 'SIP 4 NEW') {
				inZone.push(m)
			}
		}
	}
	if (area === 'Track 1 - Zone 5') {
		for (let m of json) {
			if (m['Fault Area'] === 'Zone 5 Ldl') {
				totalZone.push(m)
			}
		}
		for (let m of json) {
			if (m['Fault Area'] === 'Zone 5 Ldl' && m.Zone === 'SIP 5 NEW') {
				inZone.push(m)
			}
		}
	}
	if (area === 'Track 1 - Zone 6') {
		for (let m of json) {
			if (m['Fault Area'] === 'Zone 6 Ldl') {
				totalZone.push(m)
			}
		}
		for (let m of json) {
			if (m['Fault Area'] === 'Zone 6 Ldl' && m.Zone === 'SIP 6 NEW') {
				inZone.push(m)
			}
		}
	}

	if (area === 'Track 3 Zone 1') {
		for (let m of json) {
			if (m['Fault Area'] === 'Track 3 Zone 1') {
				totalZone.push(m)
			}
		}
		for (let m of json) {
			if (m['Fault Area'] === 'Track 3 Zone 1' && m.Zone === 'Track 3 SIP 1') {
				inZone.push(m)
			}
		}
	}
	if (area === 'Track 3 Zone 2') {
		for (let m of json) {
			if (m['Fault Area'] === 'Track 3 Zone 2') {
				totalZone.push(m)
			}
		}
		for (let m of json) {
			if (m['Fault Area'] === 'Track 3 Zone 2' && m.Zone === 'Track 3 SIP 2') {
				inZone.push(m)
			}
		}
	}
	if (area === 'Paint Plant') {
		for (let m of json) {
			if (m['Fault Area'] === 'Shot & Paint') {
				totalZone.push(m)
			}
		}
		for (let m of json) {
			if (m['Fault Area'] === 'Shot & Paint' && m.Zone === 'Shot & Paint') {
				inZone.push(m)
			}
		}
	}
	if (area === 'Axle Subs') {
		for (let m of json) {
			if (m['Fault Area'] === 'Axle Sub Assembly') {
				totalZone.push(m)
			}
		}
		for (let m of json) {
			if (m['Fault Area'] === 'Axle Sub Assembly' && m.Zone === 'Axle Sub Assembly') {
				inZone.push(m)
			}
		}
	}
	if (area === 'Rad Subs') {
		for (let m of json) {
			if (m['Fault Area'] === 'Cooling Pack Sub Assembly') {
				totalZone.push(m)
			}
		}
		for (let m of json) {
			if (m['Fault Area'] === 'Cooling Pack Sub Assembly' && m.Zone === 'Cooling Pack Sub Assembly') {
				inZone.push(m)
			}
		}
	}
	if (area === 'Engine Subs') {
		for (let m of json) {
			if (m['Fault Area'] === 'Engine Sub Assembly') {
				totalZone.push(m)
			}
		}
		for (let m of json) {
			if (m['Fault Area'] === 'Engine Sub Assembly' && m.Zone === 'Engine Sub Assembly') {
				inZone.push(m)
			}
		}
	}
	if (area === 'Overheads') {
		for (let m of json) {
			if (m['Fault Area'] === 'Zone 1 Ldl') {
				totalZone.push(m)
			}
		}
		for (let m of json) {
			if (m['Fault Area'] === 'Zone 1 Ldl' && m.Zone === 'Zone 1 Ldl') {
				inZone.push(m)
			}
		}
	}
	if (area === 'Booms') {
		for (let m of json) {
			if (m['Fault Area'] === 'Boom Sub Assembly') {
				totalZone.push(m)
			}
		}
		for (let m of json) {
			if (m['Fault Area'] === 'Boom Sub Assembly' && m.Zone === 'Boom Sub Assembly LDL') {
				inZone.push(m)
			}
		}
	}
	if (totalZone.length > 0) {
		inspEff = Math.round((inZone.length / totalZone.length) * 100)
	}
	if (totalZone.length < 1) {
		inspEff = 100
	}

	res.render('dash/qSmart', { division, json, totalZone, inZone, inspEff })
}

const makePrediction = async (divisions, monthYear, periods) => {
	// return `${month} ${period} predcition for ${division}`

	const toThreePlaces = (num) => {
		let formattedNum = num.toFixed(3)

		if (isNaN(formattedNum)) formattedNum = 0
		return formattedNum
	}

	//get momth number from month name in Mmm format
	const getMonthNumberFromName = (month) => {
		return 'JanFebMarAprMayJunJulAugSepOctNovDec'.indexOf(month) / 3 + 1
	}

	const soldSerials = await Retail.distinct('serialNumber', {
		division: { $in: divisions },
		buildDate: { $regex: monthYear },
		soldDate: { $ne: '#' },
	})

	const claims = await Claim.find({
		division: { $in: divisions },
		name: { $in: soldSerials },
		tPeriod: { $in: periods },
		$or: [
			{
				outcome: { $in: ['Reject', 'Z Code'] },
				actioned: { $in: ['', 'No'] },
			},
			{
				outcome: { $nin: ['Reject', 'Z Code'] },
			},
		],
	})

	const totalOpenClaims = claims.filter((claim) => claim.status === 'Open').length
	const totalOpenData = claims.filter((claim) => claim.status === 'Open')
	const totalOpenClaimsDataNumbers = totalOpenData.map((c) => c.claimNumber)

	const openClaims = totalOpenData.filter((claim) => claim.linked || claim.fourC === 'Yes').length
	const openClaimsData = totalOpenData.filter((claim) => claim.linked || claim.fourC === 'Yes')
	const actionedOpenClaimsDataNumbers = openClaimsData.map((c) => c.claimNumber)
	const containedClaims = claims.filter((claim) => claim.status === 'Contained').length
	const closedClaims = claims.filter((claim) => claim.status === 'Closed').length

	// console.log(actionedOpenClaimsDataNumbers)

	const unActionedClaims = totalOpenClaims - openClaims

	const allFailedSerials = claims.map((claim) => claim.name)
	const uniqueFailedSerials = [...new Set(allFailedSerials)]
	const totalFailed = uniqueFailedSerials.length
	const totalMachines = soldSerials.length
	const totalClaims = claims.length

	let unActionedDpu = toThreePlaces(unActionedClaims / totalMachines)
	let openDpu = toThreePlaces(openClaims / totalMachines)
	let containedDpu = toThreePlaces(containedClaims / totalMachines)
	let closedDpu = toThreePlaces(closedClaims / totalMachines)

	let totalDpu = toThreePlaces(totalClaims / totalMachines)

	let rft = 100 - Math.round((totalFailed / totalMachines) * 100)

	if (isNaN(rft)) rft = 0

	// console.log(monthYear)
	// console.log(soldSerials.length)
	// console.log('TOTAL OPEN NUMBERS =>', totalOpenClaimsDataNumbers)
	// console.log('ACTIONED OPEN NUMBERS =>', actionedOpenClaimsDataNumbers)
	// console.log('UNACTIONED CLAIMS =>', unActionedClaims)
	// console.log('UNACTIONED DPU  =>', unActionedDpu)
	// console.log('OPEN CLAIMS =>', openClaims)
	// console.log('OPEN DPU =>', openDpu)
	// console.log('CONTAINED CLAIMS =>', containedClaims)
	// console.log('CONTAINED DPU =>', containedDpu)
	// console.log('CLOSED CLAIMS =>', closedClaims)
	// console.log('CLOSED CLAIMS =>', closedDpu)

	return {
		monthYear,
		unActionedDpu,
		openDpu,
		containedDpu,
		closedDpu,
		totalDpu,
		rft,
	}
}

const getLastItemInArray = (arr) => {
	const noUndefined = arr.filter((item) => item)

	return noUndefined[noUndefined.length - 1]
}

const getMonthNumberFromName = (month) => {
	return 'JanFebMarAprMayJunJulAugSepOctNovDec'.indexOf(month) / 3 + 1
}

const toZeroPlaces = (num) => {
	let formattedNum = Math.round(num)

	if (isNaN(formattedNum)) formattedNum = 0
	return formattedNum
}
const toThreePlaces = (num) => {
	let formattedNum = num.toFixed(3)

	if (isNaN(formattedNum)) formattedNum = 0
	return formattedNum
}

const getPercentage = (percent, total) => {
	return ((percent / 100) * total).toFixed(3)
}

const dateLessDays = (date, num) => {
	let formatetdDate = moment(date).subtract(num, 'days').format('YYYY, MM, DD')
	let fullDate = new Date(formatetdDate)
	return fullDate
}
const dateAddMOnthsFull = (date, num) => {
	let formatetdDate = moment(date).add(num, 'months').format('YYYY, MM, DD, 13:00:00')
	let fullDate = new Date(formatetdDate)
	return fullDate
}

const getNewDataDOA = async (divisions, monthYear) => {
	let year = 20 + monthYear.substr(4)
	let month = getMonthNumberFromName(monthYear.substr(0, 3))
	let day = 01

	if (month < 10) month = `0${month}`

	await Claim.updateMany({ division: { $in: divisions }, fourC: { $ne: 'Yes' }, rag: 'Closed' }, { status: 'Closed' })
	await Claim.updateMany({ division: { $in: divisions }, fourC: { $ne: 'Yes' }, rag: 'Contained' }, { status: 'Contained' })

	// console.log(monthYear)
	// console.log('start')

	// let firstOfMonth = new Date(`${year}/${month}/${day}`)
	// let firstOfNextMonth = new Date(moment(firstOfMonth).add(1, 'months').format('YYYY, MM, DD'))

	const soldSerials = await Retail.distinct('serialNumber', {
		division: { $in: divisions },
		buildDate: { $regex: `/${month}/${year}` },
		soldDate: { $ne: '#' },
	})

	const claims = await Claim.find({
		division: { $in: divisions },
		name: { $in: soldSerials },
		tPeriod: 'DOA',
		$or: [
			{
				outcome: { $in: ['Reject', 'Z Code'] },
				actioned: { $ne: 'Yes' },
			},
			{
				outcome: { $nin: ['Reject', 'Z Code'] },
			},
		],
	})

	const totalOpenData = claims.filter((claim) => claim.rag === 'Open' || claim.status === 'Open')

	const totalOpenClaims = totalOpenData.length

	const openClaims = totalOpenData.filter((claim) => claim.linked || claim.fourC === 'Yes').length
	const containedClaims = claims.filter((claim) => claim.status === 'Contained').length
	const closedClaims = claims.filter((claim) => claim.status === 'Closed').length

	const unActionedClaims = totalOpenClaims - openClaims

	const allClaimsNumber = openClaims + containedClaims + closedClaims + unActionedClaims

	let data = {}
	let openPercent = 0
	let containedPercent = 0
	let closedPercent = 0
	let unActionedPercent = 0
	let unActionedDpu = 0
	let openDpu = 0
	let containedDpu = 0
	let closedDpu = 0
	let rft = 0
	let totalDPU = 0
	let doaDpuTarget
	let doaRftTarget
	let unActionedColor = 'rgba(54, 162, 235, 0.6)'

	const allFailedSerials = claims.map((claim) => claim.name)
	const uniqueFailedSerials = [...new Set(allFailedSerials)]
	const totalFailed = uniqueFailedSerials.length
	const totalMachines = soldSerials.length
	const totalClaims = claims.length

	if (openClaims > 0) openPercent = toZeroPlaces((openClaims / allClaimsNumber) * 100)
	if (containedClaims > 0) containedPercent = toZeroPlaces((containedClaims / allClaimsNumber) * 100)
	if (closedClaims > 0) closedPercent = toZeroPlaces((closedClaims / allClaimsNumber) * 100)
	if (unActionedClaims > 0) unActionedPercent = toZeroPlaces((unActionedClaims / allClaimsNumber) * 100)

	if (divisions.length > 1) {
		actualData = await Actual.findOne({ division: 'GROUP', month_year: monthYear })
	} else {
		actualData = await Actual.findOne({ division: { $in: divisions }, month_year: monthYear })
	}

	if (actualData && actualData.doa_dpu) {
		totalDPU = toThreePlaces(actualData.doa_dpu)
		inDoa = true
		rft = toZeroPlaces(actualData.doa_rft)
		if (actualData && actualData.doa_dpu_target) {
			doaDpuTarget = toThreePlaces(actualData.doa_dpu_target)
			doaRftTarget = toZeroPlaces(actualData.doa_rft_target)
		}
	} else {
		totalDPU = toThreePlaces(totalClaims / totalMachines)
		inDoa = false
		rft = 100 - Math.round((totalFailed / totalMachines) * 100)
		unActionedColor = 'rgba(255, 255, 255, 0.6)'
		if (actualData && actualData.doa_dpu_target) {
			doaDpuTarget = toThreePlaces(actualData.doa_dpu_target)
			doaRftTarget = toZeroPlaces(actualData.doa_rft_target)
		}

		if (isNaN(rft)) rft = 100
	}

	if (openClaims > 0) openDpu = getPercentage(openPercent, totalDPU)
	if (containedClaims > 0) containedDpu = getPercentage(containedPercent, totalDPU)
	if (closedClaims > 0) closedDpu = getPercentage(closedPercent, totalDPU)
	if (unActionedClaims > 0) unActionedDpu = getPercentage(unActionedPercent, totalDPU)

	const monthYearDPU = `${monthYear} ${totalDPU}`

	data = {
		monthYear,
		monthYearDPU,
		totalDPU,
		doaDpuTarget,
		doaRftTarget,
		rft,
		openPercent,
		containedPercent,
		closedPercent,
		unActionedPercent,
		openDpu,
		containedDpu,
		closedDpu,
		unActionedDpu,
		unActionedColor,
		claims: claims.length,
		machines: soldSerials.length,
		openClaimsDoa: openClaims,
		containedClaimsDoa: containedClaims,
		closedClaimsDoa: closedClaims,
		unActionedClaimsDoa: unActionedClaims,
		inDoa,
	}
	// console.log(data)
	return data
}

const getNewDataT3 = async (divisions, monthYear) => {
	let year = 20 + monthYear.substr(4)
	let month = getMonthNumberFromName(monthYear.substr(0, 3))
	let day = 01

	if (month < 10) month = `0${month}`

	let firstOfBuildMonth = new Date(`${year}, ${month}, ${day} 13:00:00`)

	let t3ReportDate = dateAddMOnthsFull(firstOfBuildMonth, 5)

	if (t3ReportDate > new Date()) {
		t3SoldByDate = dateLessDays(t3ReportDate, 90)
	} else {
		t3SoldByDate = dateLessDays(new Date(), 90)
	}

	const retails = await Retail.aggregate([
		{
			$match: {
				division: { $in: divisions },
				// soldDate: { $ne: '#' },
			},
		},
		{
			$project: {
				_id: 1,
				buildDate: 1,
				serialNumber: 1,
				soldDate: {
					$cond: [{ $eq: ['$soldDate', '#'] }, '01/01/3099', '$soldDate'],
				},
			},
		},
		{
			$addFields: {
				formattedBuild: {
					$dateFromString: {
						dateString: '$buildDate',
						format: '%d/%m/%Y',
					},
				},
			},
		},
		{
			$addFields: {
				formattedSold: {
					$dateFromString: {
						dateString: '$soldDate',
						format: '%d/%m/%Y',
					},
				},
			},
		},
		{
			$addFields: {
				buildMonth: {
					$month: {
						date: '$formattedBuild',
						timezone: 'Europe/London',
					},
				},
				buildYear: {
					$year: {
						date: '$formattedBuild',
						timezone: 'Europe/London',
					},
				},
			},
		},
		{
			$match: {
				buildMonth: +month,
				buildYear: +year,
				// formattedSold: { $lt: t3SoldByDate },
			},
		},
		{
			$addFields: {
				t3SoldByDate: t3SoldByDate,
			},
		},
		{
			$addFields: {
				in_t3: {
					$cond: [{ $lt: ['$formattedSold', '$t3SoldByDate'] }, 'Yes', 'No'],
				},
			},
		},
		{
			$addFields: {
				soldMachine: {
					$cond: [{ $lt: ['$formattedSold', new Date()] }, 'Yes', 'No'],
				},
			},
		},
	])

	const soldSerials = retails.filter((item) => item.in_t3 === 'Yes').map((item) => item.serialNumber)
	const allSoldSerials = retails.filter((item) => item.soldMachine === 'Yes')

	const claims = await Claim.find({
		division: { $in: divisions },
		name: { $in: soldSerials },
		tPeriod: { $in: ['T000', 'T001', 'T002', 'T003'] },
		$or: [
			{
				outcome: { $in: ['Reject', 'Z Code'] },
				actioned: { $ne: 'Yes' },
			},
			{
				outcome: { $nin: ['Reject', 'Z Code'] },
			},
		],
	})

	const totalOpenData = claims.filter((claim) => claim.status === 'Open' || claim.rag === 'Open')

	const totalOpenClaims = totalOpenData.length

	const openClaims = totalOpenData.filter((claim) => claim.linked || claim.fourC === 'Yes').length
	const containedClaims = claims.filter((claim) => claim.status === 'Contained').length
	const closedClaims = claims.filter((claim) => claim.status === 'Closed').length

	const unActionedClaims = totalOpenClaims - openClaims

	const allClaimsNumber = openClaims + containedClaims + closedClaims + unActionedClaims

	let data = {}
	let openPercent = 0
	let containedPercent = 0
	let closedPercent = 0
	let unActionedPercent = 0
	let unActionedDpu = 0
	let openDpu = 0
	let containedDpu = 0
	let closedDpu = 0
	let rft = 100
	let totalDPU = 0
	let totalFailed = 0
	let totalGood = 0
	let totalBuiltMachines = retails.length
	let unActionedColor = 'rgba(54, 162, 235, 0.6)'
	let inMriPercent = 0
	let t3DpuTarget
	let t3RftTarget
	let t1Leak
	let t3Leak

	const totalMriMachines = soldSerials.length

	if (openClaims > 0) openPercent = toZeroPlaces((openClaims / allClaimsNumber) * 100)
	if (containedClaims > 0) containedPercent = toZeroPlaces((containedClaims / allClaimsNumber) * 100)
	if (closedClaims > 0) closedPercent = toZeroPlaces((closedClaims / allClaimsNumber) * 100)
	if (unActionedClaims > 0) unActionedPercent = toZeroPlaces((unActionedClaims / allClaimsNumber) * 100)

	if (divisions.length > 1) {
		actualData = await Actual.findOne({ division: 'GROUP', month_year: monthYear })
	} else {
		actualData = await Actual.findOne({ division: { $in: divisions }, month_year: monthYear })
	}

	if (actualData && actualData.t1_leak_dpu) {
		t1Leak = toThreePlaces(actualData.t1_leak_dpu)
	}
	if (actualData && actualData.t3_leak_dpu) {
		t3Leak = toThreePlaces(actualData.t3_leak_dpu)
	}

	if (actualData && actualData.t3_dpu) {
		totalDPU = toThreePlaces(actualData.t3_dpu)
		inT3 = true

		rft = toZeroPlaces(actualData.t3_rft)
		if (actualData && actualData.t3_dpu_target) {
			t3DpuTarget = toThreePlaces(actualData.t3_dpu_target)
			t3RftTarget = toZeroPlaces(actualData.t3_rft_target)
		}
	} else {
		const allFailedSerials = claims.map((claim) => claim.name)
		const uniqueFailedSerials = [...new Set(allFailedSerials)]
		totalFailed = uniqueFailedSerials.length
		totalGood = totalMriMachines - totalFailed
		unActionedColor = 'rgba(255, 255, 255, 0.6)'
		inT3 = false

		const totalClaims = claims.length
		totalDPU = toThreePlaces(totalClaims / totalMriMachines)

		if (actualData && actualData.t3_dpu_target) {
			t3DpuTarget = toThreePlaces(actualData.t3_dpu_target)
			t3RftTarget = toZeroPlaces(actualData.t3_rft_target)
		}

		inMriPercent = Math.round((soldSerials.length / retails.length) * 100)
		rft = 100 - Math.round((totalFailed / totalMriMachines) * 100)

		if (isNaN(rft)) rft = 100
	}

	if (openClaims > 0) openDpu = getPercentage(openPercent, totalDPU)
	if (containedClaims > 0) containedDpu = getPercentage(containedPercent, totalDPU)
	if (closedClaims > 0) closedDpu = getPercentage(closedPercent, totalDPU)
	if (unActionedClaims > 0) unActionedDpu = getPercentage(unActionedPercent, totalDPU)

	const monthYearDPU = `${monthYear} ${totalDPU}`

	const totalRetailedPercent = Math.round((allSoldSerials.length / retails.length) * 100)

	data = {
		monthYear,
		monthYearDPU,
		totalBuiltMachines,
		totalDPU,
		inMriPercent,
		rft,
		openPercent,
		containedPercent,
		closedPercent,
		unActionedPercent,
		unActionedColor,
		openDpu,
		containedDpu,
		closedDpu,
		unActionedDpu,
		claims: claims.length,
		totalRetails: allSoldSerials.length,
		mriMachines: soldSerials.length,
		notRftNumber: totalFailed,
		rftNumber: totalGood,
		t3DpuTarget,
		t3RftTarget,
		openClaimsT3: openClaims,
		containedClaimsT3: containedClaims,
		closedClaimsT3: closedClaims,
		unActionedClaimsT3: unActionedClaims,
		t1Leak,
		t3Leak,
		totalRetailedPercent,
		inT3,
	}

	return data
}

const getNewDataDOAUsa = async (divisions, monthYear) => {
	let year = 20 + monthYear.substr(4)
	let month = getMonthNumberFromName(monthYear.substr(0, 3))
	let day = 01

	if (month < 10) month = `0${month}`

	// console.log(monthYear)
	// console.log('start')

	// let firstOfMonth = new Date(`${year}/${month}/${day}`)
	// let firstOfNextMonth = new Date(moment(firstOfMonth).add(1, 'months').format('YYYY, MM, DD'))

	const soldSerials = await Retail.distinct('serialNumber', {
		division: { $in: divisions },
		buildDate: { $regex: `/${month}/${year}` },
		soldDate: { $ne: '#' },
	})

	const claims = await Claim.find({
		division: { $in: divisions },
		name: { $in: soldSerials },
		tPeriod: 'DOA',
		$or: [
			{
				outcome: { $in: ['Reject', 'Z Code'] },
				actioned: { $ne: 'Yes' },
			},
			{
				outcome: { $nin: ['Reject', 'Z Code'] },
			},
		],
	})

	const openClaims = claims.filter((claim) => claim.rag === 'Open').length

	// totalOpenClaims = totalOpenData.length

	// openClaims = totalOpenData.filter((claim) => claim.linked || claim.fourC === 'Yes').length
	const containedClaims = claims.filter((claim) => claim.rag === 'Contained').length
	const closedClaims = claims.filter((claim) => claim.rag === 'Closed').length

	const unActionedClaims = claims.filter((claim) => claim.rag === null).length

	const allClaimsNumber = openClaims + containedClaims + closedClaims + unActionedClaims

	let data = {}
	let openPercent = 0
	let containedPercent = 0
	let closedPercent = 0
	let unActionedPercent = 0
	let unActionedDpu = 0
	let openDpu = 0
	let containedDpu = 0
	let closedDpu = 0
	let rft = 0
	let totalDPU = 0
	let doaDpuTarget
	let doaRftTarget
	let unActionedColor = 'rgba(54, 162, 235, 0.6)'

	const allFailedSerials = claims.map((claim) => claim.name)
	const uniqueFailedSerials = [...new Set(allFailedSerials)]
	const totalFailed = uniqueFailedSerials.length
	const totalMachines = soldSerials.length
	const totalClaims = claims.length

	if (openClaims > 0) openPercent = toZeroPlaces((openClaims / allClaimsNumber) * 100)
	if (containedClaims > 0) containedPercent = toZeroPlaces((containedClaims / allClaimsNumber) * 100)
	if (closedClaims > 0) closedPercent = toZeroPlaces((closedClaims / allClaimsNumber) * 100)
	if (unActionedClaims > 0) unActionedPercent = toZeroPlaces((unActionedClaims / allClaimsNumber) * 100)

	if (divisions.length > 1) {
		actualData = await Actual.findOne({ division: 'GROUP', month_year: monthYear })
	} else {
		actualData = await Actual.findOne({ division: { $in: divisions }, month_year: monthYear })
	}

	if (actualData && actualData.doa_dpu) {
		inDoa = true
		totalDPU = toThreePlaces(actualData.doa_dpu)
		rft = toZeroPlaces(actualData.doa_rft)
		if (actualData && actualData.doa_dpu_target) {
			doaDpuTarget = toThreePlaces(actualData.doa_dpu_target)
			doaRftTarget = toZeroPlaces(actualData.doa_rft_target)
		}
	} else {
		inDoa = false
		totalDPU = toThreePlaces(totalClaims / totalMachines)
		rft = 100 - Math.round((totalFailed / totalMachines) * 100)
		unActionedColor = 'rgba(255, 255, 255, 0.6)'
		if (actualData && actualData.doa_dpu_target) {
			doaDpuTarget = toThreePlaces(actualData.doa_dpu_target)
			doaRftTarget = toZeroPlaces(actualData.doa_rft_target)
		}

		if (isNaN(rft)) rft = 100
	}

	if (openClaims > 0) openDpu = getPercentage(openPercent, totalDPU)
	if (containedClaims > 0) containedDpu = getPercentage(containedPercent, totalDPU)
	if (closedClaims > 0) closedDpu = getPercentage(closedPercent, totalDPU)
	if (unActionedClaims > 0) unActionedDpu = getPercentage(unActionedPercent, totalDPU)

	const monthYearDPU = `${monthYear} ${totalDPU}`

	data = {
		monthYear,
		monthYearDPU,
		totalDPU,
		doaDpuTarget,
		doaRftTarget,
		rft,
		openPercent,
		containedPercent,
		closedPercent,
		unActionedPercent,
		openDpu,
		containedDpu,
		closedDpu,
		unActionedDpu,
		unActionedColor,
		claims: claims.length,
		machines: soldSerials.length,
		openClaimsDoa: openClaims,
		containedClaimsDoa: containedClaims,
		closedClaimsDoa: closedClaims,
		unActionedClaimsDoa: unActionedClaims,
		inDoa,
	}
	// console.log(data)
	return data
}

const getNewDataT3Usa = async (divisions, monthYear) => {
	let year = 20 + monthYear.substr(4)
	let month = getMonthNumberFromName(monthYear.substr(0, 3))
	let day = 01

	if (month < 10) month = `0${month}`

	let firstOfBuildMonth = new Date(`${year}, ${month}, ${day} 13:00:00`)

	let t3ReportDate = dateAddMOnthsFull(firstOfBuildMonth, 5)

	if (t3ReportDate > new Date()) {
		t3SoldByDate = dateLessDays(t3ReportDate, 90)
	} else {
		t3SoldByDate = dateLessDays(new Date(), 90)
	}

	const retails = await Retail.aggregate([
		{
			$match: {
				division: { $in: divisions },
				// soldDate: { $ne: '#' },
			},
		},
		{
			$project: {
				_id: 1,
				buildDate: 1,
				serialNumber: 1,
				soldDate: {
					$cond: [{ $eq: ['$soldDate', '#'] }, '01/01/3099', '$soldDate'],
				},
			},
		},
		{
			$addFields: {
				formattedBuild: {
					$dateFromString: {
						dateString: '$buildDate',
						format: '%d/%m/%Y',
					},
				},
			},
		},
		{
			$addFields: {
				formattedSold: {
					$dateFromString: {
						dateString: '$soldDate',
						format: '%d/%m/%Y',
					},
				},
			},
		},
		{
			$addFields: {
				buildMonth: {
					$month: {
						date: '$formattedBuild',
						timezone: 'Europe/London',
					},
				},
				buildYear: {
					$year: {
						date: '$formattedBuild',
						timezone: 'Europe/London',
					},
				},
			},
		},
		{
			$match: {
				buildMonth: +month,
				buildYear: +year,
				// formattedSold: { $lt: t3SoldByDate },
			},
		},
		{
			$addFields: {
				t3SoldByDate: t3SoldByDate,
			},
		},
		{
			$addFields: {
				in_t3: {
					$cond: [{ $lt: ['$formattedSold', '$t3SoldByDate'] }, 'Yes', 'No'],
				},
			},
		},
		{
			$addFields: {
				soldMachine: {
					$cond: [{ $lt: ['$formattedSold', new Date()] }, 'Yes', 'No'],
				},
			},
		},
	])

	const soldSerials = retails.filter((item) => item.in_t3 === 'Yes').map((item) => item.serialNumber)
	const allSoldSerials = retails.filter((item) => item.soldMachine === 'Yes')

	const claims = await Claim.find({
		division: { $in: divisions },
		name: { $in: soldSerials },
		tPeriod: { $in: ['T000', 'T001', 'T002', 'T003'] },
		$or: [
			{
				outcome: { $in: ['Reject', 'Z Code'] },
				actioned: { $ne: 'Yes' },
			},
			{
				outcome: { $nin: ['Reject', 'Z Code'] },
			},
		],
	})

	const openClaims = claims.filter((claim) => claim.rag === 'Open').length

	// totalOpenClaims = totalOpenData.length

	// openClaims = totalOpenData.filter((claim) => claim.linked || claim.fourC === 'Yes').length
	const containedClaims = claims.filter((claim) => claim.rag === 'Contained').length
	const closedClaims = claims.filter((claim) => claim.rag === 'Closed').length

	const unActionedClaims = claims.filter((claim) => claim.rag === null).length

	const allClaimsNumber = openClaims + containedClaims + closedClaims + unActionedClaims

	let data = {}
	let openPercent = 0
	let containedPercent = 0
	let closedPercent = 0
	let unActionedPercent = 0
	let unActionedDpu = 0
	let openDpu = 0
	let containedDpu = 0
	let closedDpu = 0
	let rft = 100
	let totalDPU = 0
	let totalFailed = 0
	let totalGood = 0
	let totalBuiltMachines = retails.length
	let unActionedColor = 'rgba(54, 162, 235, 0.6)'
	let inMriPercent = 0
	let t3DpuTarget
	let t3RftTarget
	let t1Leak
	let t3Leak

	const totalMriMachines = soldSerials.length

	if (openClaims > 0) openPercent = toZeroPlaces((openClaims / allClaimsNumber) * 100)
	if (containedClaims > 0) containedPercent = toZeroPlaces((containedClaims / allClaimsNumber) * 100)
	if (closedClaims > 0) closedPercent = toZeroPlaces((closedClaims / allClaimsNumber) * 100)
	if (unActionedClaims > 0) unActionedPercent = toZeroPlaces((unActionedClaims / allClaimsNumber) * 100)

	if (divisions.length > 1) {
		actualData = await Actual.findOne({ division: 'GROUP', month_year: monthYear })
	} else {
		actualData = await Actual.findOne({ division: { $in: divisions }, month_year: monthYear })
	}

	if (actualData && actualData.t1_leak_dpu) {
		t1Leak = toThreePlaces(actualData.t1_leak_dpu)
	}
	if (actualData && actualData.t3_leak_dpu) {
		t3Leak = toThreePlaces(actualData.t3_leak_dpu)
	}

	if (actualData && actualData.t3_dpu) {
		totalDPU = toThreePlaces(actualData.t3_dpu)
		inT3 = true

		rft = toZeroPlaces(actualData.t3_rft)
		if (actualData && actualData.t3_dpu_target) {
			t3DpuTarget = toThreePlaces(actualData.t3_dpu_target)
			t3RftTarget = toZeroPlaces(actualData.t3_rft_target)
		}
	} else {
		inT3 = false
		const allFailedSerials = claims.map((claim) => claim.name)
		const uniqueFailedSerials = [...new Set(allFailedSerials)]
		totalFailed = uniqueFailedSerials.length
		totalGood = totalMriMachines - totalFailed
		unActionedColor = 'rgba(255, 255, 255, 0.6)'

		const totalClaims = claims.length
		totalDPU = toThreePlaces(totalClaims / totalMriMachines)

		if (actualData && actualData.t3_dpu_target) {
			t3DpuTarget = toThreePlaces(actualData.t3_dpu_target)
			t3RftTarget = toZeroPlaces(actualData.t3_rft_target)
		}

		inMriPercent = Math.round((soldSerials.length / retails.length) * 100)
		rft = 100 - Math.round((totalFailed / totalMriMachines) * 100)

		if (isNaN(rft)) rft = 100
	}

	if (openClaims > 0) openDpu = getPercentage(openPercent, totalDPU)
	if (containedClaims > 0) containedDpu = getPercentage(containedPercent, totalDPU)
	if (closedClaims > 0) closedDpu = getPercentage(closedPercent, totalDPU)
	if (unActionedClaims > 0) unActionedDpu = getPercentage(unActionedPercent, totalDPU)

	const monthYearDPU = `${monthYear} ${totalDPU}`

	data = {
		monthYear,
		monthYearDPU,
		totalBuiltMachines,
		totalDPU,
		inMriPercent,
		rft,
		openPercent,
		containedPercent,
		closedPercent,
		unActionedPercent,
		unActionedColor,
		openDpu,
		containedDpu,
		closedDpu,
		unActionedDpu,
		claims: claims.length,
		totalRetails: allSoldSerials.length,
		mriMachines: soldSerials.length,
		notRftNumber: totalFailed,
		rftNumber: totalGood,
		t3DpuTarget,
		t3RftTarget,
		openClaimsT3: openClaims,
		containedClaimsT3: containedClaims,
		closedClaimsT3: closedClaims,
		unActionedClaimsT3: unActionedClaims,
		t1Leak,
		t3Leak,
		inT3,
	}

	return data
}

module.exports.single = async (req, res) => {
	let { division } = req.params
	if (division === 'GROUP') {
		division = ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL']
	} else {
		division = [division]
	}

	// new dash stuff //

	const actuals = await Actual.find({ division: { $in: division } }).limit(15)

	const actualLabels = actuals.map((a) => a.month_year)

	const lastMonth = getLastItemInArray(actualLabels)

	const day = 03
	const year = lastMonth.substring(4, 8)
	const monthNumber = getMonthNumberFromName(lastMonth.substring(0, 3))

	const lastDate = new Date(`${monthNumber}/${day}/${year}`)

	// const lastDatePlusOne = moment(lastDate).add(1, 'months').format('MMM-YY')
	// const lastDatePlusTwo = moment(lastDate).add(2, 'months').format('MMM-YY')
	// const lastDatePlusThree = moment(lastDate).add(3, 'months').format('MMM-YY')

	const fullDOALabels = actualLabels //.slice(1, -1) // lastDatePlusOne, lastDatePlusTwo, lastDatePlusThree]
	const fullT3Labels = actualLabels //.slice(0, -2) // lastDatePlusOne]

	let newDOAArr = []
	let newT3Arr = []

	////////////////////////// start here //////////////////////////

	for (let d of fullDOALabels) {
		const data = await getNewDataDOA(division, d)
		newDOAArr.push(data)
	}

	for (let t of fullT3Labels) {
		const data = await getNewDataT3(division, t)
		newT3Arr.push(data)
	}

	const getLastItemsInArrayByPosition = (arr, key, position) => {
		const noUndefined = arr.filter((item) => item && !item[key])

		return noUndefined[position]
	}

	const getLastItemsInArrayByPositionFromEnd = (arr, key, positionFromEnd) => {
		const noUndefined = arr.filter((item) => item && item[key])

		return noUndefined[noUndefined.length - positionFromEnd]
	}

	// console.log(newT3Arr)

	const newT3PrevLastStat = getLastItemsInArrayByPositionFromEnd(newT3Arr, 'inT3', 2)
	const newT3LastStat = getLastItemsInArrayByPositionFromEnd(newT3Arr, 'inT3', 1)
	const newT3Prediction1 = getLastItemsInArrayByPosition(newT3Arr, 'inT3', 0)
	const newT3Prediction2 = getLastItemsInArrayByPosition(newT3Arr, 'inT3', 1)
	const newT3Prediction3 = getLastItemsInArrayByPosition(newT3Arr, 'inT3', 2)

	const newDOALastStat = getLastItemsInArrayByPositionFromEnd(newDOAArr, 'inDoa', 2)
	const newDOAStat = getLastItemsInArrayByPositionFromEnd(newDOAArr, 'inDoa', 1)


  

	const newDOAOpenArr = newDOAArr.map((d) => d.openDpu)
	const newDOAContainedArr = newDOAArr.map((d) => d.containedDpu)
	const newDOAClosedArr = newDOAArr.map((d) => d.closedDpu)
	const newDOAUnactionedArr = newDOAArr.map((d) => d.unActionedDpu)
	const newDOAUnactionedColorArr = newDOAArr.map((d) => d.unActionedColor)
	const newDOARFTArr = newDOAArr.map((d) => d.rft)
	const newDOADPUTargetArr = newDOAArr.map((d) => d.doaDpuTarget)
	const newDOARFTTargetArr = newDOAArr.map((d) => d.doaRftTarget)

	const newT3OpenArr = newT3Arr.map((d) => d.openDpu)
	const newT3ContainedArr = newT3Arr.map((d) => d.containedDpu)
	const newT3ClosedArr = newT3Arr.map((d) => d.closedDpu)
	const newT3UnactionedArr = newT3Arr.map((d) => d.unActionedDpu)
	const newT3UnactionedColorArr = newT3Arr.map((d) => d.unActionedColor)
	const newT3RFTArr = newT3Arr.map((d) => d.rft)

	const newT3DPUTargetArr = newT3Arr.map((d) => d.t3DpuTarget)
	const newT3RFTTargetArr = newT3Arr.map((d) => d.t3RftTarget)

	const openClaimsT3Arr = newT3Arr.map((d) => d.openClaimsT3)
	const containedClaimsT3Arr = newT3Arr.map((d) => d.containedClaimsT3)
	const closedClaimsT3Arr = newT3Arr.map((d) => d.closedClaimsT3)
	const unActionedClaimsT3Arr = newT3Arr.map((d) => d.unActionedClaimsT3)

	const openClaimsDoaArr = newDOAArr.map((d) => d.openClaimsDoa)
	const containedClaimsDoaArr = newDOAArr.map((d) => d.containedClaimsDoa)
	const closedClaimsDoaArr = newDOAArr.map((d) => d.closedClaimsDoa)
	const unActionedClaimsDoaArr = newDOAArr.map((d) => d.unActionedClaimsDoa)

	// end of new dash stuff //

	let graphOptions = []

	if (division.length < 2) {
		graphOptions = [...division]
	}
	if (division.length > 1) {
		graphOptions = ['GROUP']
	}

	// get the division figures
	const dpuMonth = moment().subtract(0, 'months').format('MMM-YY')
	const figure = await Figure.find({
		division: {
			$in: graphOptions,
		},
	})
	const graph = await Graph.find({
		division: {
			$in: graphOptions,
		},
	})

	// open DOA 4C's
	const doaOpenNum = await Claim.countDocuments({
		division: {
			$in: division,
		},
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Open',
		tPeriod: 'DOA',
	})
	// contained DOA 4C's
	const doaContainedNum = await Claim.countDocuments({
		division: {
			$in: division,
		},
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Contained',
		tPeriod: 'DOA',
	})
	// closed DOA 4C's
	const doaClosedNum = await Claim.countDocuments({
		division: {
			$in: division,
		},
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Closed',
		tPeriod: 'DOA',
	})

	// open T3 4C's
	const t3OpenNum = await Claim.countDocuments({
		division: {
			$in: division,
		},
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Open',
		tPeriod: {
			$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
		},
	})
	// Contained T3 4C's
	const t3ContainedNum = await Claim.countDocuments({
		division: {
			$in: division,
		},
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Contained',
		tPeriod: {
			$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
		},
	})

	// Closed T3 4C's
	const t3ClosedNum = await Claim.countDocuments({
		division: {
			$in: division,
		},
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Closed',
		tPeriod: {
			$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
		},
	})

	// open internal 4C's
	const intOpenNum = await Claim.countDocuments({
		division: {
			$in: division,
		},
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Open',
		claimNumber: {
			$in: ['Internal Techweb', 'Leak Techweb'],
		},
	})
	// contained internal 4C's
	const intContainedNum = await Claim.countDocuments({
		division: {
			$in: division,
		},
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Contained',
		claimNumber: {
			$in: ['Internal Techweb', 'Leak Techweb'],
		},
	})

	// closed internal 4C's
	const intClosedNum = await Claim.countDocuments({
		division: {
			$in: division,
		},
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Closed',
		claimNumber: {
			$in: ['Internal Techweb', 'Leak Techweb'],
		},
	})

	// signed out last 90 days
	const signOutLast90Days = await Throughput.countDocuments({
		division: {
			$in: division,
		},
		signedOutAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
	})

	// dealer claims on machines built last 90 days
	const claimsLast90Days = await Claim.countDocuments({
		division: {
			$in: division,
		},
		$or: [
			{ buildDate: { $regex: threeMonthsAgo } },
			{ buildDate: { $regex: twoMonthsAgo } },
			{ buildDate: { $regex: oneMonthAgo } },
			{ buildDate: { $regex: thisMonth } },
		],
		tPeriod: 'DOA',
		outcome: {
			$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier', ''],
		},
	})

	// dealer claims received last 90 days
	const dealerClaimsInLast90Days = await Claim.countDocuments({
		division: {
			$in: division,
		},
		importedDate: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		outcome: {
			$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier', ''],
		},
		tPeriod: 'DOA',
	})

	// TTop 10 dealers claims in last 90 days under 15 hours
	const top10DealersInLast90Days = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				importedDate: {
					$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
				},
				tPeriod: 'DOA',
				outcome: {
					$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier', ''],
				},
			},
		},
		{
			$group: {
				_id: '$dealer',
				count: { $sum: 1 },
			},
		},
		{ $sort: { count: -1, _id: 1 } },
		{ $limit: 10 },
	])

	let top10DealersInLast90DaysCount = 0
	top10DealersInLast90Days.forEach((m) => {
		top10DealersInLast90DaysCount += m.count
	})
	const dealerTop10Percent = Math.round((top10DealersInLast90DaysCount / dealerClaimsInLast90Days) * 100)

	const totFourC =
		doaOpenNum + doaContainedNum + doaClosedNum + t3OpenNum + t3ContainedNum + t3ClosedNum + intOpenNum + intContainedNum + intClosedNum

	////////////////////////////////////// START OF RIGHT SIDE   ////////////////////////////////////////////////////////////////////////////////////////
	// Top 10 pre T3 claims assembly sorted by part number
	let preT3PartsAssembly = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				asd: 'Assembly',
				tPeriod: {
					$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
				},
				outcome: {
					$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
				},
				$or: [
					{ buildDate: { $regex: fourMonthsAgo } },
					{ buildDate: { $regex: threeMonthsAgo } },
					{ buildDate: { $regex: twoMonthsAgo } },
					{ buildDate: { $regex: oneMonthAgo } },
					{ buildDate: { $regex: thisMonth } },
				],
			},
		},
		{
			$group: {
				_id: {
					$substrCP: ['$failedPart', 0, 20],
				},
				status: { $addToSet: '$status' },
				rag: { $addToSet: '$rag' },
				count: { $sum: 1 },
			},
		},
		{ $sort: { count: -1, _id: 1 } },
		{ $limit: 10 },
	])

	// console.log(preT3PartsAssembly)
	// Top 10 pre T3 claims supplier sorted by part number
	let preT3PartsSupplier = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				asd: 'Supplier',
				tPeriod: {
					$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
				},
				outcome: {
					$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
				},
				$or: [
					{ buildDate: { $regex: fourMonthsAgo } },
					{ buildDate: { $regex: threeMonthsAgo } },
					{ buildDate: { $regex: twoMonthsAgo } },
					{ buildDate: { $regex: oneMonthAgo } },
					{ buildDate: { $regex: thisMonth } },
				],
			},
		},
		{
			$group: {
				_id: {
					$substrCP: ['$failedPart', 0, 20],
				},
				status: { $addToSet: '$status' },
				rag: { $addToSet: '$rag' },
				count: { $sum: 1 },
			},
		},
		{ $sort: { count: -1, _id: 1 } },
		{ $limit: 10 },
	])
	// Top 10 pre T3 claims sorted by part number
	let preT3PartsDesign = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				asd: 'Design',
				tPeriod: {
					$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
				},
				outcome: {
					$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
				},
				$or: [
					{ buildDate: { $regex: fourMonthsAgo } },
					{ buildDate: { $regex: threeMonthsAgo } },
					{ buildDate: { $regex: twoMonthsAgo } },
					{ buildDate: { $regex: oneMonthAgo } },
					{ buildDate: { $regex: thisMonth } },
				],
			},
		},
		{
			$group: {
				_id: {
					$substrCP: ['$failedPart', 0, 20],
				},
				status: { $addToSet: '$status' },
				rag: { $addToSet: '$rag' },
				count: { $sum: 1 },
			},
		},
		{ $sort: { count: -1, _id: 1 } },
		{ $limit: 10 },
	])

	// Top 10 pre T3 claims sorted by model
	let preT3Model = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				tPeriod: {
					$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
				},
				outcome: {
					$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
				},
				$or: [
					{ buildDate: { $regex: fourMonthsAgo } },
					{ buildDate: { $regex: threeMonthsAgo } },
					{ buildDate: { $regex: twoMonthsAgo } },
					{ buildDate: { $regex: oneMonthAgo } },
					{ buildDate: { $regex: thisMonth } },
				],
			},
		},
		{
			$group: {
				_id: '$baseModel',
				count: { $sum: 1 },
			},
		},
		{ $sort: { count: -1, _id: 1 } },
		{ $limit: 10 },
	])
	// Top 10 pre T3 claims sorted by stamp
	let preT3Stamping = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				tPeriod: {
					$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
				},
				failuretype: { $ne: '' },
				outcome: {
					$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
				},
				$or: [
					{ buildDate: { $regex: fourMonthsAgo } },
					{ buildDate: { $regex: threeMonthsAgo } },
					{ buildDate: { $regex: twoMonthsAgo } },
					{ buildDate: { $regex: oneMonthAgo } },
					{ buildDate: { $regex: thisMonth } },
				],
			},
		},
		{
			$group: {
				_id: '$failuretype',
				count: { $sum: 1 },
			},
		},
		{ $sort: { count: -1, _id: 1 } },
		{ $limit: 10 },
	])

	let asdTotal = {
		division: {
			$in: division,
		},
		tPeriod: {
			$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
		},
		outcome: {
			$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
		},
		$or: [
			{ buildDate: { $regex: fourMonthsAgo } },
			{ buildDate: { $regex: threeMonthsAgo } },
			{ buildDate: { $regex: twoMonthsAgo } },
			{ buildDate: { $regex: oneMonthAgo } },
			{ buildDate: { $regex: thisMonth } },
		],
	}
	let asdAssembly = {
		division: {
			$in: division,
		},
		asd: 'Assembly',
		tPeriod: {
			$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
		},
		outcome: {
			$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
		},
		$or: [
			{ buildDate: { $regex: fourMonthsAgo } },
			{ buildDate: { $regex: threeMonthsAgo } },
			{ buildDate: { $regex: twoMonthsAgo } },
			{ buildDate: { $regex: oneMonthAgo } },
			{ buildDate: { $regex: thisMonth } },
		],
	}
	let asdSupplier = {
		division: {
			$in: division,
		},
		asd: 'Supplier',
		tPeriod: {
			$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
		},
		outcome: {
			$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
		},
		$or: [
			{ buildDate: { $regex: fourMonthsAgo } },
			{ buildDate: { $regex: threeMonthsAgo } },
			{ buildDate: { $regex: twoMonthsAgo } },
			{ buildDate: { $regex: oneMonthAgo } },
			{ buildDate: { $regex: thisMonth } },
		],
	}
	let asdDesign = {
		division: {
			$in: division,
		},
		asd: 'Design',
		tPeriod: {
			$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
		},
		outcome: {
			$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
		},
		$or: [
			{ buildDate: { $regex: fourMonthsAgo } },
			{ buildDate: { $regex: threeMonthsAgo } },
			{ buildDate: { $regex: twoMonthsAgo } },
			{ buildDate: { $regex: oneMonthAgo } },
			{ buildDate: { $regex: thisMonth } },
		],
	}

	let allClaimsForAsd = await Claim.countDocuments(asdTotal)
	let allClaimsForAssembly = await Claim.countDocuments(asdAssembly)
	let allClaimsForSupplier = await Claim.countDocuments(asdSupplier)
	let allClaimsForDesign = allClaimsForAsd - allClaimsForAssembly - allClaimsForSupplier

	let assemblyPercent = Math.round((allClaimsForAssembly / allClaimsForAsd) * 100)
	let supplierPercent = Math.round((allClaimsForSupplier / allClaimsForAsd) * 100)
	let designPercent = Math.round((allClaimsForDesign / allClaimsForAsd) * 100)

	// get claims for doa rft & prediction 1

	if (Array.isArray(division) && division.length > 1) {
		division = 'GROUP'
	}

	res.render('dash/division', {
		fullDOALabels,
		fullT3Labels,

		openClaimsT3Arr,
		containedClaimsT3Arr,
		closedClaimsT3Arr,
		unActionedClaimsT3Arr,

		openClaimsDoaArr,
		containedClaimsDoaArr,
		closedClaimsDoaArr,
		unActionedClaimsDoaArr,

		newT3PrevLastStat,
		newT3LastStat,
		newT3Prediction1,
		newT3Prediction2,
		newT3Prediction3,
		newDOALastStat,
		newDOAStat,

		newDOADPUTargetArr,
		newDOARFTTargetArr,
		newT3DPUTargetArr,
		newT3RFTTargetArr,

		newDOAOpenArr,
		newDOAContainedArr,
		newDOAClosedArr,
		newDOAUnactionedArr,
		newDOARFTArr,
		newDOAUnactionedColorArr,

		newT3OpenArr,
		newT3ContainedArr,
		newT3ClosedArr,
		newT3UnactionedArr,
		newT3RFTArr,
		newT3UnactionedColorArr,

		division,

		figure,

		doaOpenNum,
		doaContainedNum,
		doaClosedNum,
		t3OpenNum,
		t3ContainedNum,
		t3ClosedNum,
		intOpenNum,
		intContainedNum,
		intClosedNum,
		totFourC,
		signOutLast90Days,
		claimsLast90Days,
		dealerClaimsInLast90Days,
		top10DealersInLast90DaysCount,
		dealerTop10Percent,
		dpuMonth,

		preT3Stamping,
		preT3Model,
		preT3PartsAssembly,
		preT3PartsSupplier,
		preT3PartsDesign,
		assemblyPercent,
		supplierPercent,
		designPercent,
	})
}

module.exports.singleDealer = async (req, res) => {
	let { division } = req.params
	if (division === 'GROUP') {
		division = ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL']
	} else {
		division = [division]
	}
	let graphOptions = []

	if (division.length < 2) {
		graphOptions = [...division]
	}
	if (division.length > 1) {
		graphOptions = ['GROUP']
	}

	const janDOA = await makePrediction(division, '01/2022', ['DOA'])
	const febDOA = await makePrediction(division, '02/2022', ['DOA'])
	const marDOA = await makePrediction(division, '03/2022', ['DOA'])

	const janDOAOpen = janDOA.openDpu
	const janDOAContained = janDOA.containedDpu
	const janDOAClosed = janDOA.closedDpu
	const janDOARft = janDOA.rft

	const febDOAOpen = febDOA.openDpu
	const febDOAContained = febDOA.containedDpu
	const febDOAClosed = febDOA.closedDpu
	const febDOARft = febDOA.rft

	const marDOAOpen = marDOA.openDpu
	const marDOAContained = marDOA.containedDpu
	const marDOAClosed = marDOA.closedDpu
	const marDOARft = marDOA.rft

	// get the division figures
	const dpuMonth = moment().subtract(0, 'months').format('MMM-YY')

	const figure = await Figure.find({
		division: {
			$in: graphOptions,
		},
	})
	const graph = await Graph.find({
		division: {
			$in: graphOptions,
		},
	})

	// get list of part numbers to generate repeating submitted this year
	const doaClaimsSubmittedThisYear = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				importedDate: {
					$gte: new Date('2021-01-01T00:00:00.000Z'),
				},
				tPeriod: 'DOA',
				outcome: {
					$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier', ''],
				},
			},
		},
		{
			$group: {
				_id: '$failedPart',
				count: { $sum: 1 },
			},
		},
		{ $sort: { count: -1, _id: 1 } },
	])

	// get list of part numbers to generate repeating submitted last 30 days
	const doaClaimsSubmittedLast30Days = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				importedDate: {
					$gte: new Date(new Date().getTime() - 30 * 24 * 60 * 60 * 1000),
				},
				tPeriod: 'DOA',
				outcome: {
					$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier', ''],
				},
			},
		},
	])
	// get list of part numbers to generate repeating submitted before last 30 days
	const doaClaimsSubmittedBeforeLast30Days = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				importedDate: {
					$gte: new Date(new Date().getTime() - 60 * 24 * 60 * 60 * 1000),
					$lte: new Date(new Date().getTime() - 30 * 24 * 60 * 60 * 1000),
				},
				tPeriod: 'DOA',
				outcome: {
					$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier', ''],
				},
			},
		},
	])

	let listOfPartsThisYear = []
	for (let p of doaClaimsSubmittedThisYear) {
		if (p.count > 1) {
			listOfPartsThisYear.push(p._id)
		}
	}
	let listOfPartsLast30Days = []
	for (let p of doaClaimsSubmittedLast30Days) {
		listOfPartsLast30Days.push(p.failedPart)
	}
	let listOfPartsBeforeLast30Days = []
	for (let p of doaClaimsSubmittedBeforeLast30Days) {
		listOfPartsBeforeLast30Days.push(p.failedPart)
	}

	let countOfRepeatsLast30Days = 0
	for (let p of listOfPartsLast30Days) {
		if (listOfPartsThisYear.indexOf(p) > -1) {
			countOfRepeatsLast30Days++
		}
	}
	let countOfRepeatsBeforeLast30Days = 0
	for (let p of listOfPartsBeforeLast30Days) {
		if (listOfPartsThisYear.indexOf(p) > -1) {
			countOfRepeatsBeforeLast30Days++
		}
	}

	// open DOA 4C's
	const doaOpenNum = await Claim.countDocuments({
		division: {
			$in: division,
		},
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Open',
		tPeriod: 'DOA',
	})
	// contained DOA 4C's
	const doaContainedNum = await Claim.countDocuments({
		division: {
			$in: division,
		},
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Contained',
		tPeriod: 'DOA',
	})
	// closed DOA 4C's
	const doaClosedNum = await Claim.countDocuments({
		division: {
			$in: division,
		},
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Closed',
		tPeriod: 'DOA',
	})

	// open T3 4C's
	const t3OpenNum = await Claim.countDocuments({
		division: {
			$in: division,
		},
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Open',
		tPeriod: {
			$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
		},
	})
	// Contained T3 4C's
	const t3ContainedNum = await Claim.countDocuments({
		division: {
			$in: division,
		},
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Contained',
		tPeriod: {
			$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
		},
	})

	// Closed T3 4C's
	const t3ClosedNum = await Claim.countDocuments({
		division: {
			$in: division,
		},
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Closed',
		tPeriod: {
			$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
		},
	})

	// open internal 4C's
	const intOpenNum = await Claim.countDocuments({
		division: {
			$in: division,
		},
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Open',
		claimNumber: {
			$in: ['Internal Techweb', 'Leak Techweb'],
		},
	})
	// contained internal 4C's
	const intContainedNum = await Claim.countDocuments({
		division: {
			$in: division,
		},
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Contained',
		claimNumber: {
			$in: ['Internal Techweb', 'Leak Techweb'],
		},
	})

	// closed internal 4C's
	const intClosedNum = await Claim.countDocuments({
		division: {
			$in: division,
		},
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Closed',
		claimNumber: {
			$in: ['Internal Techweb', 'Leak Techweb'],
		},
	})

	// signed out last 90 days
	const signOutLast90Days = await Throughput.countDocuments({
		division: {
			$in: division,
		},
		signedOutAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
	})

	// dealer claims on machines built last 90 days
	const claimsLast90Days = await Claim.countDocuments({
		division: {
			$in: division,
		},
		$or: [
			{ buildDate: { $regex: threeMonthsAgo } },
			{ buildDate: { $regex: twoMonthsAgo } },
			{ buildDate: { $regex: oneMonthAgo } },
			{ buildDate: { $regex: thisMonth } },
		],
		tPeriod: 'DOA',
		outcome: {
			$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier', ''],
		},
	})

	// dealer claims received last 90 days
	const dealerClaimsInLast90Days = await Claim.countDocuments({
		division: {
			$in: division,
		},
		importedDate: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		outcome: {
			$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
		},
		tPeriod: 'DOA',
	})

	// TTop 10 dealers claims in last 90 days under 15 hours
	const top10DealersInLast90Days = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				importedDate: {
					$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
				},
				tPeriod: 'DOA',
				outcome: {
					$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
				},
			},
		},
		{
			$group: {
				_id: '$dealer',
				count: { $sum: 1 },
			},
		},
		{ $sort: { count: -1, _id: 1 } },
		{ $limit: 10 },
	])

	let top10DealersInLast90DaysCount = 0
	top10DealersInLast90Days.forEach((m) => {
		top10DealersInLast90DaysCount += m.count
	})
	const dealerTop10Percent = Math.round((top10DealersInLast90DaysCount / dealerClaimsInLast90Days) * 100)

	const totFourC =
		doaOpenNum + doaContainedNum + doaClosedNum + t3OpenNum + t3ContainedNum + t3ClosedNum + intOpenNum + intContainedNum + intClosedNum

	// get pre t3 claims
	let rawPredictionClaims = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				$or: [{ buildDate: { $regex: fourMonthsAgo } }, { buildDate: { $regex: threeMonthsAgo } }, { buildDate: { $regex: twoMonthsAgo } }],
				tPeriod: {
					$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
				},
				outcome: {
					$nin: ['Reject', 'Z Code'],
				},
			},
		},
	])
	// get reject & Z code pre t3 claims that have not been actioned
	let rawPredictionClaims1 = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				$or: [{ buildDate: { $regex: fourMonthsAgo } }, { buildDate: { $regex: threeMonthsAgo } }, { buildDate: { $regex: twoMonthsAgo } }],
				tPeriod: {
					$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
				},
				actioned: { $ne: 'Yes' },
				outcome: {
					$in: ['Reject', 'Z Code'],
				},
			},
		},
	])

	/// ------------Prediction 1 --------------------///

	// get  total build for pre t3
	let totalBuildPrediction1 = await Retail.aggregate([
		{
			$match: {
				buildDate: { $regex: fourMonthsAgo },
				division: {
					$in: division,
				},
			},
		},
	])
	// get  total sold for pre t3
	let totalSoldPrediction1 = await Retail.aggregate([
		{
			$match: {
				buildDate: { $regex: fourMonthsAgo },
				soldDate: { $ne: '#' },
				division: {
					$in: division,
				},
			},
		},
	])

	// get total retails for pre t3
	let mriRetailsPrediction1 = await Retail.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				buildDate: { $regex: fourMonthsAgo },
				$or: [{ soldDate: { $regex: fourMonthsAgo } }, { soldDate: { $regex: threeMonthsAgo } }],
			},
		},
	])
	//work out prediction 1
	let prediction1T3Retails = []
	mriRetailsPrediction1.forEach((r) => {
		prediction1T3Retails.push(r.serialNumber)
	})

	let predictionClaims = []
	rawPredictionClaims.forEach((c) => {
		predictionClaims.push(c.name)
	})
	rawPredictionClaims1.forEach((c) => {
		predictionClaims.push(c.name)
	})

	// work out rft
	// all machines that are in T3 month 1
	let RetailsMonth1 = [prediction1T3Retails.length]
	// all claims
	let rftClaims = [...new Set(predictionClaims)]

	Compare11 = (a1, a2) => rftClaims.reduce((a, c) => a + prediction1T3Retails.includes(c), 0)
	let pre1FailedMachines = Compare11(rftClaims, prediction1T3Retails)
	let pre1GoodMachines = RetailsMonth1 - pre1FailedMachines
	let pre1RFT = Math.round((pre1GoodMachines / RetailsMonth1) * 100) || 0

	Compare1 = (a1, a2) => predictionClaims.reduce((a, c) => a + prediction1T3Retails.includes(c), 0)

	let pre1Builds = totalBuildPrediction1.length
	let pre1Sold = totalSoldPrediction1.length
	let pre1NotSold = pre1Builds - pre1Sold
	let pre1Claims = Compare1(predictionClaims, prediction1T3Retails)
	let pre1Retails = prediction1T3Retails.length
	let prediction1 = (pre1Claims / pre1Retails || 0).toFixed(3)

	/// ------------Prediction 2 --------------------///

	// get  total build for pre t3
	let totalBuildPrediction2 = await Retail.aggregate([
		{
			$match: {
				buildDate: { $regex: threeMonthsAgo },
				division: {
					$in: division,
				},
			},
		},
	])
	// get  total sold for pre t3
	let totalSoldPrediction2 = await Retail.aggregate([
		{
			$match: {
				buildDate: { $regex: threeMonthsAgo },
				soldDate: { $ne: '#' },
				division: {
					$in: division,
				},
			},
		},
	])

	// get total retails for pre t3
	let mriRetailsPrediction2 = await Retail.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				buildDate: { $regex: threeMonthsAgo },
				$or: [{ soldDate: { $regex: threeMonthsAgo } }, { soldDate: { $regex: twoMonthsAgo } }],
			},
		},
	])
	//work out prediction 2
	let prediction2T3Retails = []
	mriRetailsPrediction2.forEach((r) => {
		prediction2T3Retails.push(r.serialNumber)
	})

	// work out rft

	let RetailsMonth2 = [prediction2T3Retails.length]

	Compare12 = (a1, a2) => rftClaims.reduce((a, c) => a + prediction2T3Retails.includes(c), 0)
	let pre2FailedMachines = Compare12(rftClaims, prediction2T3Retails)
	let pre2GoodMachines = RetailsMonth2 - pre2FailedMachines
	let pre2RFT = Math.round((pre2GoodMachines / RetailsMonth2) * 100) || 0

	Compare2 = (a1, a2) => predictionClaims.reduce((a, c) => a + prediction2T3Retails.includes(c), 0)

	let pre2Builds = totalBuildPrediction2.length
	let pre2Sold = totalSoldPrediction2.length
	let pre2NotSold = pre2Builds - pre2Sold
	let pre2Claims = Compare2(predictionClaims, prediction2T3Retails)
	let pre2Retails = prediction2T3Retails.length
	let prediction2 = (pre2Claims / pre2Retails || 0).toFixed(3)

	/// ------------Prediction 3 --------------------///

	// get  total build for pre t3
	let totalBuildPrediction3 = await Retail.aggregate([
		{
			$match: {
				buildDate: { $regex: twoMonthsAgo },
				division: {
					$in: division,
				},
			},
		},
	])
	// get  total sold for pre t3
	let totalSoldPrediction3 = await Retail.aggregate([
		{
			$match: {
				buildDate: { $regex: twoMonthsAgo },
				soldDate: { $ne: '#' },
				division: {
					$in: division,
				},
			},
		},
	])

	// get total retails for pre t3
	let mriRetailsPrediction3 = await Retail.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				buildDate: { $regex: twoMonthsAgo },
				$or: [{ soldDate: { $regex: twoMonthsAgo } }, { soldDate: { $regex: oneMonthAgo } }],
			},
		},
	])
	//work out prediction 2
	let prediction3T3Retails = []
	mriRetailsPrediction3.forEach((r) => {
		prediction3T3Retails.push(r.serialNumber)
	})
	// work out rft
	let RetailsMonth3 = [prediction3T3Retails.length]

	Compare13 = (a1, a2) => rftClaims.reduce((a, c) => a + prediction3T3Retails.includes(c), 0)
	let pre3FailedMachines = Compare13(rftClaims, prediction3T3Retails)
	let pre3GoodMachines = RetailsMonth3 - pre3FailedMachines
	let pre3RFT = Math.round((pre3GoodMachines / RetailsMonth3) * 100) || 0

	Compare3 = (a1, a2) => predictionClaims.reduce((a, c) => a + prediction3T3Retails.includes(c), 0)

	let pre3Builds = totalBuildPrediction3.length
	let pre3Sold = totalSoldPrediction3.length
	let pre3NotSold = pre3Builds - pre3Sold
	let pre3Claims = Compare3(predictionClaims, prediction3T3Retails)
	let pre3Retails = prediction3T3Retails.length
	let prediction3 = (pre3Claims / pre3Retails || 0).toFixed(3)

	//HBU///

	if (division.includes('HBU')) {
		// get pre t3 claims
		let area = 'HBU'

		rawPredictionClaims = await Claim.aggregate([
			{
				$match: {
					area: area,
					$or: [{ buildDate: { $regex: fourMonthsAgo } }, { buildDate: { $regex: threeMonthsAgo } }, { buildDate: { $regex: twoMonthsAgo } }],
					tPeriod: {
						$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
					},
					outcome: {
						$nin: ['Reject', 'Z Code'],
					},
				},
			},
		])
		// get reject & Z code pre t3 claims that have not been actioned
		rawPredictionClaims1 = await Claim.aggregate([
			{
				$match: {
					area: area,
					$or: [{ buildDate: { $regex: fourMonthsAgo } }, { buildDate: { $regex: threeMonthsAgo } }, { buildDate: { $regex: twoMonthsAgo } }],
					tPeriod: {
						$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
					},
					actioned: { $ne: 'Yes' },
					outcome: {
						$in: ['Reject', 'Z Code'],
					},
				},
			},
		])

		/// ------------Prediction 1 --------------------///

		// get  total build for pre t3
		totalBuildPrediction1 = await Retail.aggregate([
			{
				$match: {
					buildDate: { $regex: fourMonthsAgo },
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
				},
			},
		])
		// get  total sold for pre t3
		totalSoldPrediction1 = await Retail.aggregate([
			{
				$match: {
					buildDate: { $regex: fourMonthsAgo },
					soldDate: { $ne: '#' },
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
				},
			},
		])

		// get total retails for pre t3
		mriRetailsPrediction1 = await Retail.aggregate([
			{
				$match: {
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
					buildDate: { $regex: fourMonthsAgo },
					$or: [{ soldDate: { $regex: fourMonthsAgo } }, { soldDate: { $regex: threeMonthsAgo } }],
				},
			},
		])
		//work out prediction 1
		prediction1T3Retails = []
		mriRetailsPrediction1.forEach((r) => {
			prediction1T3Retails.push(r.serialNumber)
		})

		predictionClaims = []
		rawPredictionClaims.forEach((c) => {
			predictionClaims.push(c.name)
		})
		rawPredictionClaims1.forEach((c) => {
			predictionClaims.push(c.name)
		})

		// work out rft
		// all machines that are in T3 month 1
		RetailsMonth1 = [prediction1T3Retails.length]
		// all claims
		let rftClaims = [...new Set(predictionClaims)]

		Compare11 = (a1, a2) => rftClaims.reduce((a, c) => a + prediction1T3Retails.includes(c), 0)
		pre1FailedMachines = Compare11(rftClaims, prediction1T3Retails)
		pre1GoodMachines = RetailsMonth1 - pre1FailedMachines
		pre1RFT = Math.round((pre1GoodMachines / RetailsMonth1) * 100) || 0

		Compare1 = (a1, a2) => predictionClaims.reduce((a, c) => a + prediction1T3Retails.includes(c), 0)

		pre1Builds = totalBuildPrediction1.length
		pre1Sold = totalSoldPrediction1.length
		pre1NotSold = pre1Builds - pre1Sold
		pre1Claims = Compare1(predictionClaims, prediction1T3Retails)
		pre1Retails = prediction1T3Retails.length
		prediction1 = (pre1Claims / pre1Retails || 0).toFixed(3)

		/// ------------Prediction 2 --------------------///

		// get  total build for pre t3
		totalBuildPrediction2 = await Retail.aggregate([
			{
				$match: {
					buildDate: { $regex: threeMonthsAgo },
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
				},
			},
		])
		// get  total sold for pre t3
		totalSoldPrediction2 = await Retail.aggregate([
			{
				$match: {
					buildDate: { $regex: threeMonthsAgo },
					soldDate: { $ne: '#' },
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
				},
			},
		])

		// get total retails for pre t3
		mriRetailsPrediction2 = await Retail.aggregate([
			{
				$match: {
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
					buildDate: { $regex: threeMonthsAgo },
					$or: [{ soldDate: { $regex: threeMonthsAgo } }, { soldDate: { $regex: twoMonthsAgo } }],
				},
			},
		])
		//work out prediction 2
		prediction2T3Retails = []
		mriRetailsPrediction2.forEach((r) => {
			prediction2T3Retails.push(r.serialNumber)
		})

		// work out rft

		RetailsMonth2 = [prediction2T3Retails.length]

		Compare12 = (a1, a2) => rftClaims.reduce((a, c) => a + prediction2T3Retails.includes(c), 0)
		pre2FailedMachines = Compare12(rftClaims, prediction2T3Retails)
		pre2GoodMachines = RetailsMonth2 - pre2FailedMachines
		pre2RFT = Math.round((pre2GoodMachines / RetailsMonth2) * 100) || 0

		Compare2 = (a1, a2) => predictionClaims.reduce((a, c) => a + prediction2T3Retails.includes(c), 0)

		pre2Builds = totalBuildPrediction2.length
		pre2Sold = totalSoldPrediction2.length
		pre2NotSold = pre2Builds - pre2Sold
		pre2Claims = Compare2(predictionClaims, prediction2T3Retails)
		pre2Retails = prediction2T3Retails.length
		prediction2 = (pre2Claims / pre2Retails || 0).toFixed(3)

		/// ------------Prediction 3 --------------------///

		// get  total build for pre t3
		totalBuildPrediction3 = await Retail.aggregate([
			{
				$match: {
					buildDate: { $regex: twoMonthsAgo },
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
				},
			},
		])
		// get  total sold for pre t3
		totalSoldPrediction3 = await Retail.aggregate([
			{
				$match: {
					buildDate: { $regex: twoMonthsAgo },
					soldDate: { $ne: '#' },
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
				},
			},
		])

		// get total retails for pre t3
		mriRetailsPrediction3 = await Retail.aggregate([
			{
				$match: {
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
					buildDate: { $regex: twoMonthsAgo },
					$or: [{ soldDate: { $regex: twoMonthsAgo } }, { soldDate: { $regex: oneMonthAgo } }],
				},
			},
		])
		//work out prediction 2
		prediction3T3Retails = []
		mriRetailsPrediction3.forEach((r) => {
			prediction3T3Retails.push(r.serialNumber)
		})
		// work out rft
		RetailsMonth3 = [prediction3T3Retails.length]

		Compare13 = (a1, a2) => rftClaims.reduce((a, c) => a + prediction3T3Retails.includes(c), 0)
		pre3FailedMachines = Compare13(rftClaims, prediction3T3Retails)
		pre3GoodMachines = RetailsMonth3 - pre3FailedMachines
		pre3RFT = Math.round((pre3GoodMachines / RetailsMonth3) * 100) || 0

		Compare3 = (a1, a2) => predictionClaims.reduce((a, c) => a + prediction3T3Retails.includes(c), 0)

		pre3Builds = totalBuildPrediction3.length
		pre3Sold = totalSoldPrediction3.length
		pre3NotSold = pre3Builds - pre3Sold
		pre3Claims = Compare3(predictionClaims, prediction3T3Retails)
		pre3Retails = prediction3T3Retails.length
		prediction3 = (pre3Claims / pre3Retails || 0).toFixed(3)
	}

	//HBU///

	if (division.includes('Cabs')) {
		// get pre t3 claims
		let area = 'Cabs Systems'

		rawPredictionClaims = await Claim.aggregate([
			{
				$match: {
					area: area,
					$or: [{ buildDate: { $regex: fourMonthsAgo } }, { buildDate: { $regex: threeMonthsAgo } }, { buildDate: { $regex: twoMonthsAgo } }],
					tPeriod: {
						$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
					},
					outcome: {
						$nin: ['Reject', 'Z Code'],
					},
				},
			},
		])
		// get reject & Z code pre t3 claims that have not been actioned
		rawPredictionClaims1 = await Claim.aggregate([
			{
				$match: {
					area: area,
					$or: [{ buildDate: { $regex: fourMonthsAgo } }, { buildDate: { $regex: threeMonthsAgo } }, { buildDate: { $regex: twoMonthsAgo } }],
					tPeriod: {
						$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
					},
					actioned: { $ne: 'Yes' },
					outcome: {
						$in: ['Reject', 'Z Code'],
					},
				},
			},
		])

		/// ------------Prediction 1 --------------------///

		// get  total build for pre t3
		totalBuildPrediction1 = await Retail.aggregate([
			{
				$match: {
					buildDate: { $regex: fourMonthsAgo },
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
				},
			},
		])
		// get  total sold for pre t3
		totalSoldPrediction1 = await Retail.aggregate([
			{
				$match: {
					buildDate: { $regex: fourMonthsAgo },
					soldDate: { $ne: '#' },
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
				},
			},
		])

		// get total retails for pre t3
		mriRetailsPrediction1 = await Retail.aggregate([
			{
				$match: {
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
					buildDate: { $regex: fourMonthsAgo },
					$or: [{ soldDate: { $regex: fourMonthsAgo } }, { soldDate: { $regex: threeMonthsAgo } }],
				},
			},
		])
		//work out prediction 1
		prediction1T3Retails = []
		mriRetailsPrediction1.forEach((r) => {
			prediction1T3Retails.push(r.serialNumber)
		})

		predictionClaims = []
		rawPredictionClaims.forEach((c) => {
			predictionClaims.push(c.name)
		})
		rawPredictionClaims1.forEach((c) => {
			predictionClaims.push(c.name)
		})

		// work out rft
		// all machines that are in T3 month 1
		RetailsMonth1 = [prediction1T3Retails.length]
		// all claims
		let rftClaims = [...new Set(predictionClaims)]

		Compare11 = (a1, a2) => rftClaims.reduce((a, c) => a + prediction1T3Retails.includes(c), 0)
		pre1FailedMachines = Compare11(rftClaims, prediction1T3Retails)
		pre1GoodMachines = RetailsMonth1 - pre1FailedMachines
		pre1RFT = Math.round((pre1GoodMachines / RetailsMonth1) * 100) || 0

		Compare1 = (a1, a2) => predictionClaims.reduce((a, c) => a + prediction1T3Retails.includes(c), 0)

		pre1Builds = totalBuildPrediction1.length
		pre1Sold = totalSoldPrediction1.length
		pre1NotSold = pre1Builds - pre1Sold
		pre1Claims = Compare1(predictionClaims, prediction1T3Retails)
		pre1Retails = prediction1T3Retails.length
		prediction1 = (pre1Claims / pre1Retails || 0).toFixed(3)

		/// ------------Prediction 2 --------------------///

		// get  total build for pre t3
		totalBuildPrediction2 = await Retail.aggregate([
			{
				$match: {
					buildDate: { $regex: threeMonthsAgo },
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
				},
			},
		])
		// get  total sold for pre t3
		totalSoldPrediction2 = await Retail.aggregate([
			{
				$match: {
					buildDate: { $regex: threeMonthsAgo },
					soldDate: { $ne: '#' },
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
				},
			},
		])

		// get total retails for pre t3
		mriRetailsPrediction2 = await Retail.aggregate([
			{
				$match: {
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
					buildDate: { $regex: threeMonthsAgo },
					$or: [{ soldDate: { $regex: threeMonthsAgo } }, { soldDate: { $regex: twoMonthsAgo } }],
				},
			},
		])
		//work out prediction 2
		prediction2T3Retails = []
		mriRetailsPrediction2.forEach((r) => {
			prediction2T3Retails.push(r.serialNumber)
		})

		// work out rft

		RetailsMonth2 = [prediction2T3Retails.length]

		Compare12 = (a1, a2) => rftClaims.reduce((a, c) => a + prediction2T3Retails.includes(c), 0)
		pre2FailedMachines = Compare12(rftClaims, prediction2T3Retails)
		pre2GoodMachines = RetailsMonth2 - pre2FailedMachines
		pre2RFT = Math.round((pre2GoodMachines / RetailsMonth2) * 100) || 0

		Compare2 = (a1, a2) => predictionClaims.reduce((a, c) => a + prediction2T3Retails.includes(c), 0)

		pre2Builds = totalBuildPrediction2.length
		pre2Sold = totalSoldPrediction2.length
		pre2NotSold = pre2Builds - pre2Sold
		pre2Claims = Compare2(predictionClaims, prediction2T3Retails)
		pre2Retails = prediction2T3Retails.length
		prediction2 = (pre2Claims / pre2Retails || 0).toFixed(3)

		/// ------------Prediction 3 --------------------///

		// get  total build for pre t3
		totalBuildPrediction3 = await Retail.aggregate([
			{
				$match: {
					buildDate: { $regex: twoMonthsAgo },
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
				},
			},
		])
		// get  total sold for pre t3
		totalSoldPrediction3 = await Retail.aggregate([
			{
				$match: {
					buildDate: { $regex: twoMonthsAgo },
					soldDate: { $ne: '#' },
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
				},
			},
		])

		// get total retails for pre t3
		mriRetailsPrediction3 = await Retail.aggregate([
			{
				$match: {
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
					buildDate: { $regex: twoMonthsAgo },
					$or: [{ soldDate: { $regex: twoMonthsAgo } }, { soldDate: { $regex: oneMonthAgo } }],
				},
			},
		])
		//work out prediction 2
		prediction3T3Retails = []
		mriRetailsPrediction3.forEach((r) => {
			prediction3T3Retails.push(r.serialNumber)
		})
		// work out rft
		RetailsMonth3 = [prediction3T3Retails.length]

		Compare13 = (a1, a2) => rftClaims.reduce((a, c) => a + prediction3T3Retails.includes(c), 0)
		pre3FailedMachines = Compare13(rftClaims, prediction3T3Retails)
		pre3GoodMachines = RetailsMonth3 - pre3FailedMachines
		pre3RFT = Math.round((pre3GoodMachines / RetailsMonth3) * 100) || 0

		Compare3 = (a1, a2) => predictionClaims.reduce((a, c) => a + prediction3T3Retails.includes(c), 0)

		pre3Builds = totalBuildPrediction3.length
		pre3Sold = totalSoldPrediction3.length
		pre3NotSold = pre3Builds - pre3Sold
		pre3Claims = Compare3(predictionClaims, prediction3T3Retails)
		pre3Retails = prediction3T3Retails.length
		prediction3 = (pre3Claims / pre3Retails || 0).toFixed(3)
	}
	////////////////////////////////////// START OF RIGHT SIDE   ////////////////////////////////////////////////////////////////////////////////////////
	// Top 10 pre T3 claims assembly sorted by part number
	const preT3PartsAssembly = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				country: {
					$in: ['UNITED KINGDOM', 'United Kingdom', 'U. K. MISC.'],
				},
				tPeriod: {
					$in: ['T000', 'T0', 'DOA'],
				},
				outcome: {
					$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
				},
				vettedAt: {
					$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
				},
			},
		},
		{
			$group: {
				_id: '$dealer',
				count: { $sum: 1 },
			},
		},
		{ $sort: { count: -1, _id: 1 } },
		{ $limit: 10 },
	])
	// Top 10 pre T3 claims supplier sorted by part number
	const preT3PartsSupplier = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				asd: 'Supplier',
				tPeriod: {
					$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
				},
				outcome: {
					$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
				},
				$or: [
					{ buildDate: { $regex: fourMonthsAgo } },
					{ buildDate: { $regex: threeMonthsAgo } },
					{ buildDate: { $regex: twoMonthsAgo } },
					{ buildDate: { $regex: oneMonthAgo } },
					{ buildDate: { $regex: thisMonth } },
				],
			},
		},
		{
			$group: {
				_id: '$failedPart',
				status: { $addToSet: '$status' },
				rag: { $addToSet: '$rag' },
				count: { $sum: 1 },
			},
		},
		{ $sort: { count: -1, _id: 1 } },
		{ $limit: 10 },
	])
	// Top 10 pre T3 claims sorted by part number
	const preT3PartsDesign = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				asd: 'Design',
				tPeriod: {
					$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
				},
				outcome: {
					$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
				},
				$or: [
					{ buildDate: { $regex: fourMonthsAgo } },
					{ buildDate: { $regex: threeMonthsAgo } },
					{ buildDate: { $regex: twoMonthsAgo } },
					{ buildDate: { $regex: oneMonthAgo } },
					{ buildDate: { $regex: thisMonth } },
				],
			},
		},
		{
			$group: {
				_id: '$failedPart',
				status: { $addToSet: '$status' },
				rag: { $addToSet: '$rag' },
				count: { $sum: 1 },
			},
		},
		{ $sort: { count: -1, _id: 1 } },
		{ $limit: 10 },
	])

	// Top 10 pre T3 claims sorted by model
	const preT3Model = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				tPeriod: {
					$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
				},
				outcome: {
					$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
				},
				$or: [
					{ buildDate: { $regex: fourMonthsAgo } },
					{ buildDate: { $regex: threeMonthsAgo } },
					{ buildDate: { $regex: twoMonthsAgo } },
					{ buildDate: { $regex: oneMonthAgo } },
					{ buildDate: { $regex: thisMonth } },
				],
			},
		},
		{
			$group: {
				_id: '$baseModel',
				count: { $sum: 1 },
			},
		},
		{ $sort: { count: -1, _id: 1 } },
		{ $limit: 10 },
	])
	// Top 10 pre T3 claims sorted by stamp
	const preT3Stamping = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				tPeriod: {
					$in: ['T000', 'T0', 'DOA'],
				},
				outcome: {
					$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
				},
				vettedAt: {
					$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
				},
			},
		},
		{
			$group: {
				_id: '$dealer',
				count: { $sum: 1 },
			},
		},
		{ $sort: { count: -1, _id: 1 } },
		{ $limit: 10 },
	])

	let asdTotal = {
		division: {
			$in: division,
		},
		tPeriod: {
			$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
		},
		outcome: {
			$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
		},
		$or: [
			{ buildDate: { $regex: fourMonthsAgo } },
			{ buildDate: { $regex: threeMonthsAgo } },
			{ buildDate: { $regex: twoMonthsAgo } },
			{ buildDate: { $regex: oneMonthAgo } },
			{ buildDate: { $regex: thisMonth } },
		],
	}
	let asdAssembly = {
		division: {
			$in: division,
		},
		asd: 'Assembly',
		tPeriod: {
			$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
		},
		outcome: {
			$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
		},
		$or: [
			{ buildDate: { $regex: fourMonthsAgo } },
			{ buildDate: { $regex: threeMonthsAgo } },
			{ buildDate: { $regex: twoMonthsAgo } },
			{ buildDate: { $regex: oneMonthAgo } },
			{ buildDate: { $regex: thisMonth } },
		],
	}
	let asdSupplier = {
		division: {
			$in: division,
		},
		asd: 'Supplier',
		tPeriod: {
			$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
		},
		outcome: {
			$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
		},
		$or: [
			{ buildDate: { $regex: fourMonthsAgo } },
			{ buildDate: { $regex: threeMonthsAgo } },
			{ buildDate: { $regex: twoMonthsAgo } },
			{ buildDate: { $regex: oneMonthAgo } },
			{ buildDate: { $regex: thisMonth } },
		],
	}
	let asdDesign = {
		division: {
			$in: division,
		},
		asd: 'Design',
		tPeriod: {
			$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
		},
		outcome: {
			$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
		},
		$or: [
			{ buildDate: { $regex: fourMonthsAgo } },
			{ buildDate: { $regex: threeMonthsAgo } },
			{ buildDate: { $regex: twoMonthsAgo } },
			{ buildDate: { $regex: oneMonthAgo } },
			{ buildDate: { $regex: thisMonth } },
		],
	}

	const allClaimsForAsd = await Claim.countDocuments(asdTotal)
	const allClaimsForAssembly = await Claim.countDocuments(asdAssembly)
	const allClaimsForSupplier = await Claim.countDocuments(asdSupplier)
	const allClaimsForDesign = allClaimsForAsd - allClaimsForAssembly - allClaimsForSupplier

	const assemblyPercent = Math.round((allClaimsForAssembly / allClaimsForAsd) * 100)
	const supplierPercent = Math.round((allClaimsForSupplier / allClaimsForAsd) * 100)
	const designPercent = Math.round((allClaimsForDesign / allClaimsForAsd) * 100)

	// get claims for doa rft & prediction 1

	// get  total build for doa prediction
	const totalPrediction1DOABuilds = await Retail.aggregate([
		{
			$match: {
				buildDate: { $regex: twoMonthsAgo },
				soldDate: { $ne: '#' },
				division: {
					$in: division,
				},
			},
		},
	])

	// get  total build for doa prediction
	const totalPrediction1DOABuilds2 = await Retail.aggregate([
		{
			$match: {
				buildDate: { $regex: oneMonthAgo },
				soldDate: { $ne: '#' },
				division: {
					$in: division,
				},
			},
		},
	])

	totalPrediction1DOABuildsOne = []
	totalPrediction1DOABuildsTwo = []

	for (let b of totalPrediction1DOABuilds) {
		totalPrediction1DOABuildsOne.push(b.serialNumber)
	}
	for (let b of totalPrediction1DOABuilds2) {
		totalPrediction1DOABuildsTwo.push(b.serialNumber)
	}

	// get pre t3 claims
	const rawPredictionClaimsDOA = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				name: {
					$in: totalPrediction1DOABuildsOne,
				},
				$or: [{ buildDate: { $regex: twoMonthsAgo } }],
				tPeriod: {
					$in: ['DOA'],
				},
				outcome: {
					$nin: ['Reject', 'Z Code'],
				},
			},
		},
	])
	// get reject & Z code pre t3 claims that have not been actioned
	const rawPredictionClaims1DOA = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				name: {
					$in: totalPrediction1DOABuildsOne,
				},
				$or: [{ buildDate: { $regex: twoMonthsAgo } }],
				tPeriod: {
					$in: ['DOA'],
				},
				actioned: { $ne: 'Yes' },
				outcome: {
					$in: ['Reject', 'Z Code'],
				},
			},
		},
	])

	let prediction1DOABuilds = []
	totalPrediction1DOABuilds.forEach((r) => {
		prediction1DOABuilds.push(r.serialNumber)
	})

	let predictionClaimsDOA = []
	rawPredictionClaimsDOA.forEach((c) => {
		predictionClaimsDOA.push(c.name)
	})
	rawPredictionClaims1DOA.forEach((c) => {
		predictionClaimsDOA.push(c.name)
	})

	let doaNoDuplicates = [...new Set(predictionClaimsDOA)]

	const pred1DOA = (predictionClaimsDOA.length / prediction1DOABuilds.length).toFixed(3)
	const pred1DOARft = 100 - Math.round((doaNoDuplicates.length / prediction1DOABuilds.length) * 100) || 0
	// get claims for doa rft & prediction 1

	// get claims for prediction 2 doa
	const rawPredictionClaimsDOA2 = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				name: {
					$in: totalPrediction1DOABuildsTwo,
				},
				$or: [{ buildDate: { $regex: oneMonthAgo } }],
				tPeriod: {
					$in: ['DOA'],
				},
				outcome: {
					$nin: ['Reject', 'Z Code'],
				},
			},
		},
	])
	// get reject & Z code pre t3 claims that have not been actioned
	const rawPredictionClaims1DOA2 = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				name: {
					$in: totalPrediction1DOABuildsTwo,
				},
				$or: [{ buildDate: { $regex: oneMonthAgo } }],
				tPeriod: {
					$in: ['DOA'],
				},
				actioned: { $ne: 'Yes' },
				outcome: {
					$in: ['Reject', 'Z Code'],
				},
			},
		},
	])

	let prediction1DOABuilds2 = []
	totalPrediction1DOABuilds2.forEach((r) => {
		prediction1DOABuilds2.push(r.serialNumber)
	})

	let predictionClaimsDOA2 = []
	rawPredictionClaimsDOA2.forEach((c) => {
		predictionClaimsDOA2.push(c.name)
	})
	rawPredictionClaims1DOA2.forEach((c) => {
		predictionClaimsDOA2.push(c.name)
	})

	let doaNoDuplicates2 = [...new Set(predictionClaimsDOA2)]

	const pred2DOA = (predictionClaimsDOA2.length / prediction1DOABuilds2.length).toFixed(3)
	const pred2DOARft = 100 - Math.round((doaNoDuplicates2.length / prediction1DOABuilds2.length) * 100) || 0

	const fourCParts = await Claim.find(
		{
			fourC: 'Yes',
			status: 'Open',
			// tPeriod  : {
			// 	$in : [ 'DOA', 'T000', 'T001', 'T002', 'T003' ],
			// },
			division: {
				$in: division,
			},
			outcome: {
				$nin: ['Reject', 'Z Code'],
			},
		},
		{ failedPart: 1, _id: 0 }
	)

	const fourCPartNumbers = fourCParts.map((claim) => claim.failedPart)

	const doaPartsForGraph = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				failedPart: { $nin: fourCPartNumbers },
				tPeriod: 'DOA',
				outcome: {
					$nin: ['Reject', 'Z Code'],
				},
				vettedAt: { $gte: nineMOnthsAgo },
			},
		},
		{
			$project: {
				_id: {
					year: {
						$substrCP: ['$buildDate', 6, 4],
					},
					month: {
						$substrCP: ['$buildDate', 3, 2],
					},

					// failedPart : '$failedPart',
				},
				status: 1,
			},
		},
		{
			$group: {
				_id: '$_id',
				status: { $push: '$status' },
				count: {
					$sum: 1,
				},
			},
		},
	])

	eightMonthsAgoClaimsDOA = await Claim.countDocuments({
		division: {
			$in: division,
		},
		tPeriod: 'DOA',
		buildDate: { $regex: eightMonthsAgo },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})

	sevenMonthsAgoClaimsDOA = await Claim.countDocuments({
		division: {
			$in: division,
		},
		tPeriod: 'DOA',
		buildDate: { $regex: sevenMonthsAgo },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})

	sixMonthsAgoClaimsDOA = await Claim.countDocuments({
		division: {
			$in: division,
		},
		tPeriod: 'DOA',
		buildDate: { $regex: sixMonthsAgo },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})

	fiveMonthsAgoClaimsDOA = await Claim.countDocuments({
		division: {
			$in: division,
		},
		tPeriod: 'DOA',
		buildDate: { $regex: fiveMonthsAgo },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})
	fourMonthsAgoClaimsDOA = await Claim.countDocuments({
		division: {
			$in: division,
		},
		tPeriod: 'DOA',
		buildDate: { $regex: fourMonthsAgo },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})
	threeMonthsAgoClaimsDOA = await Claim.countDocuments({
		division: {
			$in: division,
		},
		tPeriod: 'DOA',
		buildDate: { $regex: threeMonthsAgo },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})

	twoMonthsAgoClaimsDOA = await Claim.countDocuments({
		division: {
			$in: division,
		},
		tPeriod: 'DOA',
		buildDate: { $regex: twoMonthsAgo },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})

	oneMonthAgoClaimsDOA = await Claim.countDocuments({
		division: {
			$in: division,
		},
		tPeriod: 'DOA',
		buildDate: { $regex: oneMonthAgo },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})

	let eightMonthAgoClosedDPU = 0
	let eightMonthAgoContainedDPU = 0
	let eightMonthAgoMissedDPU = 0

	let sevenMonthAgoClosedDPU = 0
	let sevenMonthAgoContainedDPU = 0
	let sevenMonthAgoMissedDPU = 0

	let sixMonthAgoClosedDPU = 0
	let sixMonthAgoContainedDPU = 0
	let sixMonthAgoMissedDPU = 0

	let fiveMonthAgoClosedDPU = 0
	let fiveMonthAgoContainedDPU = 0
	let fiveMonthAgoMissedDPU = 0

	let fourMonthAgoClosedDPU = 0
	let fourMonthAgoContainedDPU = 0
	let fourMonthAgoMissedDPU = 0

	let threeMonthAgoClosedDPU = 0
	let threeMonthAgoContainedDPU = 0
	let threeMonthAgoMissedDPU = 0

	let twoMonthAgoClosedDPU = 0
	let twoMonthAgoContainedDPU = 0
	let twoMonthAgoMissedDPU = 0

	let oneMonthAgoClosedDPU = 0
	let oneMonthAgoContainedDPU = 0
	let oneMonthAgoMissedDPU = 0

	for (let p of doaPartsForGraph) {
		if (p._id.month === eightMonthsAgoNumber && p._id.year === eightMonthsAgoNumberY) {
			eightMonthAgoClosedDPU = ((+graph[4].stat / 100) * ((countOccurrences(p.status, 'Closed') / eightMonthsAgoClaimsDOA) * 100)).toFixed(3)
			eightMonthAgoContainedDPU = ((+graph[4].stat / 100) * ((countOccurrences(p.status, 'Contained') / eightMonthsAgoClaimsDOA) * 100)).toFixed(3)
			eightMonthAgoMissedDPU = ((+graph[4].stat / 100) * ((countOccurrences(p.status, 'Open') / eightMonthsAgoClaimsDOA) * 100)).toFixed(3)
		}
		if (p._id.month === sevenMonthsAgoNumber && p._id.year === sevenMonthsAgoNumberY) {
			sevenMonthAgoClosedDPU = ((+graph[5].stat / 100) * ((countOccurrences(p.status, 'Closed') / sevenMonthsAgoClaimsDOA) * 100)).toFixed(3)
			sevenMonthAgoContainedDPU = ((+graph[5].stat / 100) * ((countOccurrences(p.status, 'Contained') / sevenMonthsAgoClaimsDOA) * 100)).toFixed(3)
			sevenMonthAgoMissedDPU = ((+graph[5].stat / 100) * ((countOccurrences(p.status, 'Open') / sevenMonthsAgoClaimsDOA) * 100)).toFixed(3)
		}
		if (p._id.month === sixMonthsAgoNumber && p._id.year === sixMonthsAgoNumberY) {
			sixMonthAgoClosedDPU = ((+graph[6].stat / 100) * ((countOccurrences(p.status, 'Closed') / sixMonthsAgoClaimsDOA) * 100)).toFixed(3)
			sixMonthAgoContainedDPU = ((+graph[6].stat / 100) * ((countOccurrences(p.status, 'Contained') / sixMonthsAgoClaimsDOA) * 100)).toFixed(3)
			sixMonthAgoMissedDPU = ((+graph[6].stat / 100) * ((countOccurrences(p.status, 'Open') / sixMonthsAgoClaimsDOA) * 100)).toFixed(3)
		}
		if (p._id.month === fiveMonthsAgoNumber && p._id.year === fiveMonthsAgoNumberY) {
			fiveMonthAgoClosedDPU = ((+graph[7].stat / 100) * ((countOccurrences(p.status, 'Closed') / fiveMonthsAgoClaimsDOA) * 100)).toFixed(3)
			fiveMonthAgoContainedDPU = ((+graph[7].stat / 100) * ((countOccurrences(p.status, 'Contained') / fiveMonthsAgoClaimsDOA) * 100)).toFixed(3)
			fiveMonthAgoMissedDPU = ((+graph[7].stat / 100) * ((countOccurrences(p.status, 'Open') / fiveMonthsAgoClaimsDOA) * 100)).toFixed(3)
		}
		if (p._id.month === fourMonthsAgoNumber && p._id.year === fourMonthsAgoNumberY) {
			fourMonthAgoClosedDPU = ((+graph[8].stat / 100) * ((countOccurrences(p.status, 'Closed') / fourMonthsAgoClaimsDOA) * 100)).toFixed(3)
			fourMonthAgoContainedDPU = ((+graph[8].stat / 100) * ((countOccurrences(p.status, 'Contained') / fourMonthsAgoClaimsDOA) * 100)).toFixed(3)
			fourMonthAgoMissedDPU = ((+graph[8].stat / 100) * ((countOccurrences(p.status, 'Open') / fourMonthsAgoClaimsDOA) * 100)).toFixed(3)
		}
		if (p._id.month === threeMonthsAgoNumber && p._id.year === threeMonthsAgoNumberY) {
			threeMonthAgoClosedDPU = ((+graph[9].stat / 100) * ((countOccurrences(p.status, 'Closed') / threeMonthsAgoClaimsDOA) * 100)).toFixed(3)
			threeMonthAgoContainedDPU = ((+graph[9].stat / 100) * ((countOccurrences(p.status, 'Contained') / threeMonthsAgoClaimsDOA) * 100)).toFixed(3)
			threeMonthAgoMissedDPU = ((+graph[9].stat / 100) * ((countOccurrences(p.status, 'Open') / threeMonthsAgoClaimsDOA) * 100)).toFixed(3)
		}
		if (p._id.month === twoMonthsAgoNumber && p._id.year === twoMonthsAgoNumberY) {
			twoMonthAgoClosedDPU = ((+pred1DOA / 100) * ((countOccurrences(p.status, 'Closed') / twoMonthsAgoClaimsDOA) * 100)).toFixed(3)
			twoMonthAgoContainedDPU = ((+pred1DOA / 100) * ((countOccurrences(p.status, 'Contained') / twoMonthsAgoClaimsDOA) * 100)).toFixed(3)
			twoMonthAgoMissedDPU = ((+pred1DOA / 100) * ((countOccurrences(p.status, 'Open') / twoMonthsAgoClaimsDOA) * 100)).toFixed(3)
		}
		if (p._id.month === oneMonthAgoNumber && p._id.year === oneMonthAgoNumberY) {
			oneMonthAgoClosedDPU = ((+pred2DOA / 100) * ((countOccurrences(p.status, 'Closed') / oneMonthAgoClaimsDOA) * 100)).toFixed(3)
			oneMonthAgoContainedDPU = ((+pred2DOA / 100) * ((countOccurrences(p.status, 'Contained') / oneMonthAgoClaimsDOA) * 100)).toFixed(3)
			oneMonthAgoMissedDPU = ((+pred2DOA / 100) * ((countOccurrences(p.status, 'Open') / oneMonthAgoClaimsDOA) * 100)).toFixed(3)
		}
	}

	const eightMonthAgoOpenDPU = (+graph[4].stat - eightMonthAgoClosedDPU - eightMonthAgoContainedDPU - eightMonthAgoMissedDPU).toFixed(3)

	const sevenMonthAgoOpenDPU = (+graph[5].stat - sevenMonthAgoClosedDPU - sevenMonthAgoContainedDPU - sevenMonthAgoMissedDPU).toFixed(3)

	const sixMonthAgoOpenDPU = (+graph[6].stat - sixMonthAgoClosedDPU - sixMonthAgoContainedDPU - sixMonthAgoMissedDPU).toFixed(3)

	const fiveMonthAgoOpenDPU = (+graph[7].stat - fiveMonthAgoClosedDPU - fiveMonthAgoContainedDPU - fiveMonthAgoMissedDPU).toFixed(3)

	const fourMonthAgoOpenDPU = (+graph[8].stat - fourMonthAgoClosedDPU - fourMonthAgoContainedDPU - fourMonthAgoMissedDPU).toFixed(3)

	const threeMonthAgoOpenDPU = (+graph[9].stat - threeMonthAgoClosedDPU - threeMonthAgoContainedDPU - threeMonthAgoMissedDPU).toFixed(3)

	const twoMonthAgoOpenDPU = (+pred1DOA - twoMonthAgoClosedDPU - twoMonthAgoContainedDPU - twoMonthAgoMissedDPU).toFixed(3)

	const oneMonthAgoOpenDPU = (+pred2DOA - oneMonthAgoClosedDPU - oneMonthAgoContainedDPU - oneMonthAgoMissedDPU).toFixed(3)

	//T3 split

	let t3Periods = ['T000', 'T001', 'T002', 'T003']

	const t3PartsForGraph = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				failedPart: { $nin: fourCPartNumbers },
				tPeriod: { $in: t3Periods },
				outcome: {
					$nin: ['Reject', 'Z Code'],
				},
				vettedAt: { $gte: nineMOnthsAgo },
			},
		},
		{
			$project: {
				_id: {
					year: {
						$substrCP: ['$buildDate', 6, 4],
					},
					month: {
						$substrCP: ['$buildDate', 3, 2],
					},
				},
				status: 1,
			},
		},
		{
			$group: {
				_id: '$_id',
				status: { $push: '$status' },
				count: {
					$sum: 1,
				},
			},
		},
	])

	// sep-20
	eightMonthsAgoClaimsT3 = await Claim.countDocuments({
		division: {
			$in: division,
		},
		tPeriod: { $in: t3Periods },
		buildDate: { $regex: eightMonthsAgo },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})

	sevenMonthsAgoClaimsT3 = await Claim.countDocuments({
		division: {
			$in: division,
		},
		tPeriod: { $in: t3Periods },
		buildDate: { $regex: sevenMonthsAgo },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})
	sixMonthsAgoClaimsT3 = await Claim.countDocuments({
		division: {
			$in: division,
		},
		tPeriod: { $ne: 'DOA' },
		buildDate: { $regex: sixMonthsAgo },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})
	fiveMonthsAgoClaimsT3 = await Claim.countDocuments({
		division: {
			$in: division,
		},
		tPeriod: { $ne: 'DOA' },
		buildDate: { $regex: fiveMonthsAgo },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})
	fourMonthsAgoClaimsT3 = await Claim.countDocuments({
		division: {
			$in: division,
		},
		tPeriod: { $ne: 'DOA' },
		buildDate: { $regex: fourMonthsAgo },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})
	threeMonthsAgoClaimsT3 = await Claim.countDocuments({
		division: {
			$in: division,
		},
		tPeriod: { $ne: 'DOA' },
		buildDate: { $regex: threeMonthsAgo },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})
	twoMonthsAgoClaimsT3 = await Claim.countDocuments({
		division: {
			$in: division,
		},
		tPeriod: { $ne: 'DOA' },
		buildDate: { $regex: twoMonthsAgo },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})

	let eightMonthAgoClosedDPUT3 = 0
	let eightMonthAgoContainedDPUT3 = 0
	let eightMonthAgoMissedDPUT3 = 0

	let sevenMonthAgoClosedDPUT3 = 0
	let sevenMonthAgoContainedDPUT3 = 0
	let sevenMonthAgoMissedDPUT3 = 0

	let sixMonthAgoClosedDPUT3 = 0
	let sixMonthAgoContainedDPUT3 = 0
	let sixMonthAgoMissedDPUT3 = 0

	let fiveMonthAgoClosedDPUT3 = 0
	let fiveMonthAgoContainedDPUT3 = 0
	let fiveMonthAgoMissedDPUT3 = 0

	let fourMonthAgoClosedDPUT3 = 0
	let fourMonthAgoContainedDPUT3 = 0
	let fourMonthAgoMissedDPUT3 = 0

	let threeMonthAgoClosedDPUT3 = 0
	let threeMonthAgoContainedDPUT3 = 0
	let threeMonthAgoMissedDPUT3 = 0

	let twoMonthAgoClosedDPUT3 = 0
	let twoMonthAgoContainedDPUT3 = 0
	let twoMonthAgoMissedDPUT3 = 0

	for (let p of t3PartsForGraph) {
		if (p._id.month === eightMonthsAgoNumber && p._id.year === eightMonthsAgoNumberY) {
			eightMonthAgoClosedDPUT3 = ((+graph[40].stat / 100) * ((countOccurrences(p.status, 'Closed') / eightMonthsAgoClaimsT3) * 100)).toFixed(3)
			eightMonthAgoContainedDPUT3 = ((+graph[40].stat / 100) * ((countOccurrences(p.status, 'Contained') / eightMonthsAgoClaimsT3) * 100)).toFixed(3)
			eightMonthAgoMissedDPUT3 = ((+graph[40].stat / 100) * ((countOccurrences(p.status, 'Open') / eightMonthsAgoClaimsT3) * 100)).toFixed(3)
		}
		if (p._id.month === sevenMonthsAgoNumber && p._id.year === sevenMonthsAgoNumberY) {
			sevenMonthAgoClosedDPUT3 = ((+graph[41].stat / 100) * ((countOccurrences(p.status, 'Closed') / sevenMonthsAgoClaimsT3) * 100)).toFixed(3)
			sevenMonthAgoContainedDPUT3 = ((+graph[41].stat / 100) * ((countOccurrences(p.status, 'Contained') / sevenMonthsAgoClaimsT3) * 100)).toFixed(3)
			sevenMonthAgoMissedDPUT3 = ((+graph[41].stat / 100) * ((countOccurrences(p.status, 'Open') / sevenMonthsAgoClaimsT3) * 100)).toFixed(3)
		}
		if (p._id.month === sixMonthsAgoNumber && p._id.year === sixMonthsAgoNumberY) {
			sixMonthAgoClosedDPUT3 = ((+graph[42].stat / 100) * ((countOccurrences(p.status, 'Closed') / sixMonthsAgoClaimsT3) * 100)).toFixed(3)
			sixMonthAgoContainedDPUT3 = ((+graph[42].stat / 100) * ((countOccurrences(p.status, 'Contained') / sixMonthsAgoClaimsT3) * 100)).toFixed(3)
			sixMonthAgoMissedDPUT3 = ((+graph[42].stat / 100) * ((countOccurrences(p.status, 'Open') / sixMonthsAgoClaimsT3) * 100)).toFixed(3)
		}
		if (p._id.month === fiveMonthsAgoNumber && p._id.year === fiveMonthsAgoNumberY) {
			fiveMonthAgoClosedDPUT3 = ((+graph[43].stat / 100) * ((countOccurrences(p.status, 'Closed') / fiveMonthsAgoClaimsT3) * 100)).toFixed(3)
			fiveMonthAgoContainedDPUT3 = ((+graph[43].stat / 100) * ((countOccurrences(p.status, 'Contained') / fiveMonthsAgoClaimsT3) * 100)).toFixed(3)
			fiveMonthAgoMissedDPUT3 = ((+graph[43].stat / 100) * ((countOccurrences(p.status, 'Open') / fiveMonthsAgoClaimsT3) * 100)).toFixed(3)
		}
		if (p._id.month === fourMonthsAgoNumber && p._id.year === fourMonthsAgoNumberY) {
			fourMonthAgoClosedDPUT3 = ((+prediction1 / 100) * ((countOccurrences(p.status, 'Closed') / fourMonthsAgoClaimsT3) * 100)).toFixed(3)
			fourMonthAgoContainedDPUT3 = ((+prediction1 / 100) * ((countOccurrences(p.status, 'Contained') / fourMonthsAgoClaimsT3) * 100)).toFixed(3)
			fourMonthAgoMissedDPUT3 = ((+prediction1 / 100) * ((countOccurrences(p.status, 'Open') / fourMonthsAgoClaimsT3) * 100)).toFixed(3)
		}
		if (p._id.month === threeMonthsAgoNumber && p._id.year === threeMonthsAgoNumberY) {
			threeMonthAgoClosedDPUT3 = ((+prediction2 / 100) * ((countOccurrences(p.status, 'Closed') / threeMonthsAgoClaimsT3) * 100)).toFixed(3)
			threeMonthAgoContainedDPUT3 = ((+prediction2 / 100) * ((countOccurrences(p.status, 'Contained') / threeMonthsAgoClaimsT3) * 100)).toFixed(3)
			threeMonthAgoMissedDPUT3 = ((+prediction2 / 100) * ((countOccurrences(p.status, 'Open') / threeMonthsAgoClaimsT3) * 100)).toFixed(3)
		}
		if (p._id.month === twoMonthsAgoNumber && p._id.year === twoMonthsAgoNumberY) {
			twoMonthAgoClosedDPUT3 = ((+prediction3 / 100) * ((countOccurrences(p.status, 'Closed') / twoMonthsAgoClaimsT3) * 100)).toFixed(3)
			twoMonthAgoContainedDPUT3 = ((+prediction3 / 100) * ((countOccurrences(p.status, 'Contained') / twoMonthsAgoClaimsT3) * 100)).toFixed(3)
			twoMonthAgoMissedDPUT3 = ((+prediction3 / 100) * ((countOccurrences(p.status, 'Open') / twoMonthsAgoClaimsT3) * 100)).toFixed(3)
		}
	}

	const eightMonthAgoOpenDPUT3 = (+graph[40].stat - eightMonthAgoClosedDPUT3 - eightMonthAgoContainedDPUT3 - eightMonthAgoMissedDPUT3).toFixed(3)

	const sevenMonthAgoOpenDPUT3 = (+graph[41].stat - sevenMonthAgoClosedDPUT3 - sevenMonthAgoContainedDPUT3 - sevenMonthAgoMissedDPUT3).toFixed(3)

	const sixMonthAgoOpenDPUT3 = (+graph[42].stat - sixMonthAgoClosedDPUT3 - sixMonthAgoContainedDPUT3 - sixMonthAgoMissedDPUT3).toFixed(3)

	const fiveMonthAgoOpenDPUT3 = (+graph[43].stat - fiveMonthAgoClosedDPUT3 - fiveMonthAgoContainedDPUT3 - fiveMonthAgoMissedDPUT3).toFixed(3)

	const fourMonthAgoOpenDPUT3 = (prediction1 - fourMonthAgoClosedDPUT3 - fourMonthAgoContainedDPUT3 - fourMonthAgoMissedDPUT3).toFixed(3)

	const threeMonthAgoOpenDPUT3 = (prediction2 - threeMonthAgoClosedDPUT3 - threeMonthAgoContainedDPUT3 - threeMonthAgoMissedDPUT3).toFixed(3)

	const twoMonthAgoOpenDPUT3 = (prediction3 - twoMonthAgoClosedDPUT3 - twoMonthAgoContainedDPUT3 - twoMonthAgoMissedDPUT3).toFixed(3)
	// ----------------------------------------------------- rft --------------------------------------------------

	const todayDB = new Date()
	todayDB.setHours(0, 0, 0, 0)

	let divForMongo = []
	let divForQ = []
	let theSipStations = []
	let allSips = []
	let removalsMongo = []
	let removes = []

	if (division.includes('HBU')) {
		divForMongo = [...allSips]
		removalsMongo.push('Hydraulic Business Unit')
	}
	if (division.includes('Cabs')) {
		removalsMongo.push('Cab Systems')
	}

	const removesArray = await Remove.find({ division: { $in: removalsMongo } })

	for (let r of removesArray) {
		removes.push(r.name)
	}

	const allSipArray = await QSmart.aggregate([
		{
			$group: {
				_id: '$Fault Area',
			},
		},
	])
	for (let s of allSipArray) {
		allSips.push(s._id)
	}

	if (division.includes('HBU')) {
		divForMongo = [...allSips]
		divForQ.push('Hydraulic Business Unit')
	}
	if (division.includes('Cabs')) {
		divForMongo.push('Cab Systems')
		divForQ.push('Cab Systems')
	}

	const theSipStationsArray = await QSmart.aggregate([
		{
			$match: {
				['Created Date']: { $gt: todayDB },
				['Fault Area']: { $in: divForMongo },
			},
		},
		{
			$group: {
				_id: '$Zone',
			},
		},
	])

	for (let s of theSipStationsArray) {
		theSipStations.push(s._id)
	}

	// Backhoe

	const allFaultsTodayBHL = await QSmart.aggregate([
		{
			$match: {
				['Created Date']: { $gt: todayDB },
				['Business Unit']: 'Backhoe Loader',
				Zone: { $in: theSipStations },
				Model: { $nin: removes },
			},
		},
		{
			$group: {
				_id: '$Build Number',
			},
		},
	])
	const allFaultsTodayForDivBHL = await QSmart.aggregate([
		{
			$match: {
				['Created Date']: { $gt: todayDB },
				['Business Unit']: 'Backhoe Loader',
				Zone: { $in: theSipStations },
				['Fault Area']: { $in: divForQ },
				Model: { $nin: removes },
			},
		},
		{
			$group: {
				_id: '$Build Number',
			},
		},
	])

	if (allFaultsTodayBHL.length > 0) {
		rftBHL = Math.round(100 - (allFaultsTodayForDivBHL.length / allFaultsTodayBHL.length) * 100)
	} else {
		rftBHL = 0
	}

	// Compact Products

	const allFaultsTodayCP = await QSmart.aggregate([
		{
			$match: {
				['Created Date']: { $gt: todayDB },
				['Business Unit']: 'Compact Products',
				Zone: { $in: theSipStations },
				Model: { $nin: removes },
			},
		},
		{
			$group: {
				_id: '$Build Number',
			},
		},
	])
	const allFaultsTodayForDivCP = await QSmart.aggregate([
		{
			$match: {
				['Created Date']: { $gt: todayDB },
				['Business Unit']: 'Compact Products',
				Zone: { $in: theSipStations },
				['Fault Area']: { $in: divForQ },
				Model: { $nin: removes },
			},
		},
		{
			$group: {
				_id: '$Build Number',
			},
		},
	])

	if (allFaultsTodayCP.length > 0) {
		rftCP = Math.round(100 - (allFaultsTodayForDivCP.length / allFaultsTodayCP.length) * 100)
	} else {
		rftCP = 0
	}

	//  heavy products

	const allFaultsTodayHP = await QSmart.aggregate([
		{
			$match: {
				['Created Date']: { $gt: todayDB },
				['Business Unit']: 'Heavy Products',
				Zone: { $in: theSipStations },
				Model: { $nin: removes },
			},
		},
		{
			$group: {
				_id: '$Build Number',
			},
		},
	])
	const allFaultsTodayForDivHP = await QSmart.aggregate([
		{
			$match: {
				['Created Date']: { $gt: todayDB },
				['Business Unit']: 'Heavy Products',
				Zone: { $in: theSipStations },
				['Fault Area']: { $in: divForQ },
				Model: { $nin: removes },
			},
		},
		{
			$group: {
				_id: '$Build Number',
			},
		},
	])

	if (allFaultsTodayHP.length > 0) {
		rftHP = Math.round(100 - (allFaultsTodayForDivHP.length / allFaultsTodayHP.length) * 100)
	} else {
		rftHP = 0
	}

	// loadall

	const allFaultsTodayLDL = await QSmart.aggregate([
		{
			$match: {
				['Created Date']: { $gt: todayDB },
				['Business Unit']: 'Loadall',
				Zone: { $in: theSipStations },
				Model: { $nin: removes },
			},
		},
		{
			$group: {
				_id: '$Build Number',
			},
		},
	])
	const allFaultsTodayForDivLDL = await QSmart.aggregate([
		{
			$match: {
				['Created Date']: { $gt: todayDB },
				['Business Unit']: 'Loadall',
				Zone: { $in: theSipStations },
				['Fault Area']: { $in: divForQ },
				Model: { $nin: removes },
			},
		},
		{
			$group: {
				_id: '$Build Number',
			},
		},
	])

	if (allFaultsTodayLDL.length > 0) {
		rftLDL = Math.round(100 - (allFaultsTodayForDivLDL.length / allFaultsTodayLDL.length) * 100)
	} else {
		rftLDL = 0
	}

	// site dumper

	const allFaultsTodaySD = await QSmart.aggregate([
		{
			$match: {
				['Created Date']: { $gt: todayDB },
				['Business Unit']: 'Site Dumper',
				Zone: { $in: theSipStations },
				Model: { $nin: removes },
			},
		},
		{
			$group: {
				_id: '$Build Number',
			},
		},
	])
	const allFaultsTodayForDivSD = await QSmart.aggregate([
		{
			$match: {
				['Created Date']: { $gt: todayDB },
				['Business Unit']: 'Site Dumper',
				Zone: { $in: theSipStations },
				['Fault Area']: { $in: divForQ },
				Model: { $nin: removes },
			},
		},
		{
			$group: {
				_id: '$Build Number',
			},
		},
	])

	if (allFaultsTodaySD.length > 0) {
		rftSD = Math.round(100 - (allFaultsTodayForDivSD.length / allFaultsTodaySD.length) * 100)
	} else {
		rftSD = 0
	}

	const allAtBHL = allFaultsTodayBHL.length
	const machinesRftAtBHL = allFaultsTodayBHL.length - allFaultsTodayForDivBHL.length
	const allAtCP = allFaultsTodayCP.length
	const machinesRftAtCP = allFaultsTodayCP.length - allFaultsTodayForDivCP.length
	const allAtHP = allFaultsTodayHP.length
	const machinesRftAtHP = allFaultsTodayHP.length - allFaultsTodayForDivHP.length
	const allAtLDL = allFaultsTodayLDL.length
	const machinesRftAtLDL = allFaultsTodayLDL.length - allFaultsTodayForDivLDL.length
	const allAtSD = allFaultsTodaySD.length
	const machinesRftAtSD = allFaultsTodaySD.length - allFaultsTodayForDivSD.length

	let allMachines = allAtBHL + allAtCP + allAtHP + allAtLDL + allAtSD
	let rftMachines = machinesRftAtBHL + machinesRftAtCP + machinesRftAtHP + machinesRftAtLDL + machinesRftAtSD

	if (division.includes('HBU')) {
		allMachines = allAtBHL + allAtCP + allAtHP + allAtLDL
		rftMachines = machinesRftAtBHL + machinesRftAtCP + machinesRftAtHP + machinesRftAtLDL
	}

	if (allMachines > 0) {
		rftGroup = Math.round((rftMachines / allMachines) * 100)
	} else {
		rftGroup = 0
	}

	const predictions = await Prediction.find({ division: { $in: division } })
	// console.log(predictions)

	if (Array.isArray(division) && division.length > 1) {
		division = 'GROUP'
	}

	res.render('dash/divisionDealer', {
		janDOAOpen,
		janDOAContained,
		janDOAClosed,
		janDOARft,

		febDOAOpen,
		febDOAContained,
		febDOAClosed,
		febDOARft,

		marDOAOpen,
		marDOAContained,
		marDOAClosed,
		marDOARft,

		predictions,
		allAtBHL,
		machinesRftAtBHL,
		rftBHL,
		allAtCP,
		machinesRftAtCP,
		rftCP,
		allAtHP,
		machinesRftAtHP,
		rftHP,
		allAtLDL,
		machinesRftAtLDL,
		rftLDL,
		allAtSD,
		machinesRftAtSD,
		rftSD,
		allMachines,
		rftMachines,
		rftGroup,
		//
		division,
		pred1DOA,
		pred1DOARft,
		pred2DOA,
		pred2DOARft,
		countOfRepeatsLast30Days,
		countOfRepeatsBeforeLast30Days,
		graph,
		figure,
		doaOpenNum,
		doaContainedNum,
		doaClosedNum,
		t3OpenNum,
		t3ContainedNum,
		t3ClosedNum,
		intOpenNum,
		intContainedNum,
		intClosedNum,
		totFourC,
		signOutLast90Days,
		claimsLast90Days,
		dealerClaimsInLast90Days,
		top10DealersInLast90DaysCount,
		dealerTop10Percent,
		dpuMonth,
		pre1FailedMachines,
		pre1GoodMachines,
		pre1RFT,
		pre2FailedMachines,
		pre2GoodMachines,
		pre2RFT,
		pre3FailedMachines,
		pre3GoodMachines,
		pre3RFT,
		pre1Builds,
		pre1Sold,
		pre1NotSold,
		pre1Claims,
		pre1Retails,
		prediction1,
		pre2Builds,
		pre2Sold,
		pre2NotSold,
		pre2Claims,
		pre2Retails,
		prediction2,
		pre3Builds,
		pre3Sold,
		pre3NotSold,
		pre3Claims,
		pre3Retails,
		prediction3,
		////////start of left side////////////////////
		preT3Stamping,
		preT3Model,
		preT3PartsAssembly,
		preT3PartsSupplier,
		preT3PartsDesign,
		assemblyPercent,
		supplierPercent,
		designPercent,
		// new graph
		eightMonthAgoClosedDPU,
		eightMonthAgoContainedDPU,
		eightMonthAgoOpenDPU,
		eightMonthAgoMissedDPU,
		sevenMonthAgoClosedDPU,
		sevenMonthAgoContainedDPU,
		sevenMonthAgoOpenDPU,
		sevenMonthAgoMissedDPU,
		sixMonthAgoClosedDPU,
		sixMonthAgoContainedDPU,
		sixMonthAgoOpenDPU,
		sixMonthAgoMissedDPU,
		fiveMonthAgoClosedDPU,
		fiveMonthAgoContainedDPU,
		fiveMonthAgoOpenDPU,
		fiveMonthAgoMissedDPU,
		fourMonthAgoClosedDPU,
		fourMonthAgoContainedDPU,
		fourMonthAgoOpenDPU,
		fourMonthAgoMissedDPU,
		threeMonthAgoClosedDPU,
		threeMonthAgoContainedDPU,
		threeMonthAgoOpenDPU,
		threeMonthAgoMissedDPU,
		eightMonthAgoClosedDPUT3,
		eightMonthAgoContainedDPUT3,
		eightMonthAgoOpenDPUT3,
		eightMonthAgoMissedDPUT3,
		sevenMonthAgoClosedDPUT3,
		sevenMonthAgoContainedDPUT3,
		sevenMonthAgoOpenDPUT3,
		sevenMonthAgoMissedDPUT3,
		sixMonthAgoClosedDPUT3,
		sixMonthAgoContainedDPUT3,
		sixMonthAgoOpenDPUT3,
		sixMonthAgoMissedDPUT3,
		fiveMonthAgoClosedDPUT3,
		fiveMonthAgoContainedDPUT3,
		fiveMonthAgoOpenDPUT3,
		fiveMonthAgoMissedDPUT3,

		twoMonthAgoMissedDPU,
		twoMonthAgoOpenDPU,
		twoMonthAgoContainedDPU,
		twoMonthAgoClosedDPU,
		oneMonthAgoMissedDPU,
		oneMonthAgoOpenDPU,
		oneMonthAgoContainedDPU,
		oneMonthAgoClosedDPU,

		twoMonthAgoMissedDPUT3,
		twoMonthAgoContainedDPUT3,
		twoMonthAgoOpenDPUT3,
		twoMonthAgoClosedDPUT3,
		threeMonthAgoMissedDPUT3,
		threeMonthAgoContainedDPUT3,
		threeMonthAgoOpenDPUT3,
		threeMonthAgoClosedDPUT3,
		fourMonthAgoMissedDPUT3,
		fourMonthAgoContainedDPUT3,
		fourMonthAgoOpenDPUT3,
		fourMonthAgoClosedDPUT3,
	})
}

module.exports.group = async (req, res) => {
	const figure = await Figure.find({})
	// post cut in doa
	const bhlDoaClaimsPostCutIn = await Claim.countDocuments({
		division: 'BHL',
		tPeriod: 'DOA',
		postCutIn: 'Yes',
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})
	const cpDoaClaimsPostCutIn = await Claim.countDocuments({
		division: 'CP',
		tPeriod: 'DOA',
		postCutIn: 'Yes',
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})
	const emDoaClaimsPostCutIn = await Claim.countDocuments({
		division: 'EM',
		tPeriod: 'DOA',
		postCutIn: 'Yes',
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})
	const hpDoaClaimsPostCutIn = await Claim.countDocuments({
		division: 'HP',
		tPeriod: 'DOA',
		postCutIn: 'Yes',
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})
	const lpDoaClaimsPostCutIn = await Claim.countDocuments({
		division: 'LP',
		tPeriod: 'DOA',
		postCutIn: 'Yes',
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})
	const ldlDoaClaimsPostCutIn = await Claim.countDocuments({
		division: 'LDL',
		tPeriod: 'DOA',
		postCutIn: 'Yes',
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})
	const sdDoaClaimsPostCutIn = await Claim.countDocuments({
		division: 'SD',
		tPeriod: 'DOA',
		postCutIn: 'Yes',
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})

	// pre t3 claims

	const bhlDoaClaimsPreT3 = await Claim.countDocuments({
		division: 'BHL',
		tPeriod: { $ne: 'DOA' },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
		$or: [
			{ buildDate: { $regex: fourMonthsAgo } },
			{ buildDate: { $regex: threeMonthsAgo } },
			{ buildDate: { $regex: twoMonthsAgo } },
			{ buildDate: { $regex: oneMonthAgo } },
			{ buildDate: { $regex: thisMonth } },
		],
	})
	const cpDoaClaimsPreT3 = await Claim.countDocuments({
		division: 'CP',
		tPeriod: { $ne: 'DOA' },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
		$or: [
			{ buildDate: { $regex: fourMonthsAgo } },
			{ buildDate: { $regex: threeMonthsAgo } },
			{ buildDate: { $regex: twoMonthsAgo } },
			{ buildDate: { $regex: oneMonthAgo } },
			{ buildDate: { $regex: thisMonth } },
		],
	})
	const emDoaClaimsPreT3 = await Claim.countDocuments({
		division: 'EM',
		tPeriod: { $ne: 'DOA' },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
		$or: [
			{ buildDate: { $regex: fourMonthsAgo } },
			{ buildDate: { $regex: threeMonthsAgo } },
			{ buildDate: { $regex: twoMonthsAgo } },
			{ buildDate: { $regex: oneMonthAgo } },
			{ buildDate: { $regex: thisMonth } },
		],
	})
	const hpDoaClaimsPreT3 = await Claim.countDocuments({
		division: 'HP',
		tPeriod: { $ne: 'DOA' },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
		$or: [
			{ buildDate: { $regex: fourMonthsAgo } },
			{ buildDate: { $regex: threeMonthsAgo } },
			{ buildDate: { $regex: twoMonthsAgo } },
			{ buildDate: { $regex: oneMonthAgo } },
			{ buildDate: { $regex: thisMonth } },
		],
	})
	const lpDoaClaimsPreT3 = await Claim.countDocuments({
		division: 'LP',
		tPeriod: { $ne: 'DOA' },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
		$or: [
			{ buildDate: { $regex: fourMonthsAgo } },
			{ buildDate: { $regex: threeMonthsAgo } },
			{ buildDate: { $regex: twoMonthsAgo } },
			{ buildDate: { $regex: oneMonthAgo } },
			{ buildDate: { $regex: thisMonth } },
		],
	})
	const ldlDoaClaimsPreT3 = await Claim.countDocuments({
		division: 'LDL',
		tPeriod: { $ne: 'DOA' },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
		$or: [
			{ buildDate: { $regex: fourMonthsAgo } },
			{ buildDate: { $regex: threeMonthsAgo } },
			{ buildDate: { $regex: twoMonthsAgo } },
			{ buildDate: { $regex: oneMonthAgo } },
			{ buildDate: { $regex: thisMonth } },
		],
	})
	const sdDoaClaimsPreT3 = await Claim.countDocuments({
		division: 'SD',
		tPeriod: { $ne: 'DOA' },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
		$or: [
			{ buildDate: { $regex: fourMonthsAgo } },
			{ buildDate: { $regex: threeMonthsAgo } },
			{ buildDate: { $regex: twoMonthsAgo } },
			{ buildDate: { $regex: oneMonthAgo } },
			{ buildDate: { $regex: thisMonth } },
		],
	})

	// claims this week
	const bhlDoaClaimsThisWeek = await Claim.countDocuments({
		division: 'BHL',
		importedDate: { $gte: new Date(new Date(startOfWeek)) },
		tPeriod: 'DOA',
		postCutIn: 'Yes',
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})
	const cpDoaClaimsThisWeek = await Claim.countDocuments({
		division: 'CP',
		importedDate: { $gte: new Date(new Date(startOfWeek)) },
		tPeriod: 'DOA',
		postCutIn: 'Yes',
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})
	const emDoaClaimsThisWeek = await Claim.countDocuments({
		division: 'EM',
		importedDate: { $gte: new Date(new Date(startOfWeek)) },
		tPeriod: 'DOA',
		postCutIn: 'Yes',
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})
	const hpDoaClaimsThisWeek = await Claim.countDocuments({
		division: 'HP',
		importedDate: { $gte: new Date(new Date(startOfWeek)) },
		tPeriod: 'DOA',
		postCutIn: 'Yes',
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})
	const lpDoaClaimsThisWeek = await Claim.countDocuments({
		division: 'LP',
		importedDate: { $gte: new Date(new Date(startOfWeek)) },
		tPeriod: 'DOA',
		postCutIn: 'Yes',
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})
	const ldlDoaClaimsThisWeek = await Claim.countDocuments({
		division: 'LDL',
		importedDate: { $gte: new Date(new Date(startOfWeek)) },
		tPeriod: 'DOA',
		postCutIn: 'Yes',
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})
	const sdDoaClaimsThisWeek = await Claim.countDocuments({
		division: 'SD',
		importedDate: { $gte: new Date(new Date(startOfWeek)) },
		tPeriod: 'DOA',
		postCutIn: 'Yes',
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})

	const bhlDoaClaimsPreT3ThisWeek = await Claim.countDocuments({
		division: 'BHL',
		importedDate: { $gte: new Date(new Date(startOfWeek)) },
		tPeriod: { $ne: 'DOA' },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
		$or: [
			{ buildDate: { $regex: fourMonthsAgo } },
			{ buildDate: { $regex: threeMonthsAgo } },
			{ buildDate: { $regex: twoMonthsAgo } },
			{ buildDate: { $regex: oneMonthAgo } },
			{ buildDate: { $regex: thisMonth } },
		],
	})
	const cpDoaClaimsPreT3ThisWeek = await Claim.countDocuments({
		division: 'CP',
		importedDate: { $gte: new Date(new Date(startOfWeek)) },
		tPeriod: { $ne: 'DOA' },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
		$or: [
			{ buildDate: { $regex: fourMonthsAgo } },
			{ buildDate: { $regex: threeMonthsAgo } },
			{ buildDate: { $regex: twoMonthsAgo } },
			{ buildDate: { $regex: oneMonthAgo } },
			{ buildDate: { $regex: thisMonth } },
		],
	})
	const emDoaClaimsPreT3ThisWeek = await Claim.countDocuments({
		division: 'EM',
		importedDate: { $gte: new Date(new Date(startOfWeek)) },
		tPeriod: { $ne: 'DOA' },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
		$or: [
			{ buildDate: { $regex: fourMonthsAgo } },
			{ buildDate: { $regex: threeMonthsAgo } },
			{ buildDate: { $regex: twoMonthsAgo } },
			{ buildDate: { $regex: oneMonthAgo } },
			{ buildDate: { $regex: thisMonth } },
		],
	})
	const hpDoaClaimsPreT3ThisWeek = await Claim.countDocuments({
		division: 'HP',
		importedDate: { $gte: new Date(new Date(startOfWeek)) },
		tPeriod: { $ne: 'DOA' },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
		$or: [
			{ buildDate: { $regex: fourMonthsAgo } },
			{ buildDate: { $regex: threeMonthsAgo } },
			{ buildDate: { $regex: twoMonthsAgo } },
			{ buildDate: { $regex: oneMonthAgo } },
			{ buildDate: { $regex: thisMonth } },
		],
	})
	const lpDoaClaimsPreT3ThisWeek = await Claim.countDocuments({
		division: 'LP',
		importedDate: { $gte: new Date(new Date(startOfWeek)) },
		tPeriod: { $ne: 'DOA' },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
		$or: [
			{ buildDate: { $regex: fourMonthsAgo } },
			{ buildDate: { $regex: threeMonthsAgo } },
			{ buildDate: { $regex: twoMonthsAgo } },
			{ buildDate: { $regex: oneMonthAgo } },
			{ buildDate: { $regex: thisMonth } },
		],
	})
	const ldlDoaClaimsPreT3ThisWeek = await Claim.countDocuments({
		division: 'LDL',
		importedDate: { $gte: new Date(new Date(startOfWeek)) },
		tPeriod: { $ne: 'DOA' },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
		$or: [
			{ buildDate: { $regex: fourMonthsAgo } },
			{ buildDate: { $regex: threeMonthsAgo } },
			{ buildDate: { $regex: twoMonthsAgo } },
			{ buildDate: { $regex: oneMonthAgo } },
			{ buildDate: { $regex: thisMonth } },
		],
	})
	const sdDoaClaimsPreT3ThisWeek = await Claim.countDocuments({
		division: 'SD',
		importedDate: { $gte: new Date(new Date(startOfWeek)) },
		tPeriod: { $ne: 'DOA' },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
		$or: [
			{ buildDate: { $regex: fourMonthsAgo } },
			{ buildDate: { $regex: threeMonthsAgo } },
			{ buildDate: { $regex: twoMonthsAgo } },
			{ buildDate: { $regex: oneMonthAgo } },
			{ buildDate: { $regex: thisMonth } },
		],
	})

	// bhl
	// open DOA 4C's
	const bhlDoaOpenNum = await Claim.countDocuments({
		division: 'BHL',
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Open',
		tPeriod: 'DOA',
	})
	// contained DOA 4C's
	const bhlDoaContainedNum = await Claim.countDocuments({
		division: 'BHL',
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Contained',
		tPeriod: 'DOA',
	})
	// closed DOA 4C's
	const bhlDoaClosedNum = await Claim.countDocuments({
		division: 'BHL',
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Closed',
		tPeriod: 'DOA',
	})

	// open T3 4C's
	const bhlT3OpenNum = await Claim.countDocuments({
		division: 'BHL',
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Open',
		tPeriod: {
			$in: ['T000', 'T001', 'T002', 'T003'],
		},
	})
	// contained T3 4C's
	const bhlT3ContainedNum = await Claim.countDocuments({
		division: 'BHL',
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Contained',
		tPeriod: {
			$in: ['T000', 'T001', 'T002', 'T003'],
		},
	})
	// closed T3 4C's
	const bhlT3ClosedNum = await Claim.countDocuments({
		division: 'BHL',
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Closed',
		tPeriod: {
			$in: ['T000', 'T001', 'T002', 'T003'],
		},
	})

	// cp
	// open DOA 4C's
	const cpDoaOpenNum = await Claim.countDocuments({
		division: 'CP',
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Open',
		tPeriod: 'DOA',
	})
	// contained DOA 4C's
	const cpDoaContainedNum = await Claim.countDocuments({
		division: 'CP',
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Contained',
		tPeriod: 'DOA',
	})
	// closed DOA 4C's
	const cpDoaClosedNum = await Claim.countDocuments({
		division: 'CP',
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Closed',
		tPeriod: 'DOA',
	})

	// open T3 4C's
	const cpT3OpenNum = await Claim.countDocuments({
		division: 'CP',
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Open',
		tPeriod: {
			$in: ['T000', 'T001', 'T002', 'T003'],
		},
	})
	// contained T3 4C's
	const cpT3ContainedNum = await Claim.countDocuments({
		division: 'CP',
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Contained',
		tPeriod: {
			$in: ['T000', 'T001', 'T002', 'T003'],
		},
	})
	// closed T3 4C's
	const cpT3ClosedNum = await Claim.countDocuments({
		division: 'CP',
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Closed',
		tPeriod: {
			$in: ['T000', 'T001', 'T002', 'T003'],
		},
	})

	// em
	// open DOA 4C's
	const emDoaOpenNum = await Claim.countDocuments({
		division: 'EM',
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Open',
		tPeriod: 'DOA',
	})
	// contained DOA 4C's
	const emDoaContainedNum = await Claim.countDocuments({
		division: 'EM',
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Contained',
		tPeriod: 'DOA',
	})
	// closed DOA 4C's
	const emDoaClosedNum = await Claim.countDocuments({
		division: 'EM',
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Closed',
		tPeriod: 'DOA',
	})

	// open T3 4C's
	const emT3OpenNum = await Claim.countDocuments({
		division: 'EM',
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Open',
		tPeriod: {
			$in: ['T000', 'T001', 'T002', 'T003'],
		},
	})
	// contained T3 4C's
	const emT3ContainedNum = await Claim.countDocuments({
		division: 'EM',
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Contained',
		tPeriod: {
			$in: ['T000', 'T001', 'T002', 'T003'],
		},
	})
	// closed T3 4C's
	const emT3ClosedNum = await Claim.countDocuments({
		division: 'EM',
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Closed',
		tPeriod: {
			$in: ['T000', 'T001', 'T002', 'T003'],
		},
	})

	// hp
	// open DOA 4C's
	const hpDoaOpenNum = await Claim.countDocuments({
		division: 'HP',
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Open',
		tPeriod: 'DOA',
	})
	// contained DOA 4C's
	const hpDoaContainedNum = await Claim.countDocuments({
		division: 'HP',
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Contained',
		tPeriod: 'DOA',
	})
	// closed DOA 4C's
	const hpDoaClosedNum = await Claim.countDocuments({
		division: 'HP',
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Closed',
		tPeriod: 'DOA',
	})

	// open T3 4C's
	const hpT3OpenNum = await Claim.countDocuments({
		division: 'HP',
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Open',
		tPeriod: {
			$in: ['T000', 'T001', 'T002', 'T003'],
		},
	})
	// contained T3 4C's
	const hpT3ContainedNum = await Claim.countDocuments({
		division: 'HP',
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Contained',
		tPeriod: {
			$in: ['T000', 'T001', 'T002', 'T003'],
		},
	})
	// closed T3 4C's
	const hpT3ClosedNum = await Claim.countDocuments({
		division: 'HP',
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Closed',
		tPeriod: {
			$in: ['T000', 'T001', 'T002', 'T003'],
		},
	})

	// lp
	// open DOA 4C's
	const lpDoaOpenNum = await Claim.countDocuments({
		division: 'LP',
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Open',
		tPeriod: 'DOA',
	})
	// contained DOA 4C's
	const lpDoaContainedNum = await Claim.countDocuments({
		division: 'LP',
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Contained',
		tPeriod: 'DOA',
	})
	// closed DOA 4C's
	const lpDoaClosedNum = await Claim.countDocuments({
		division: 'LP',
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Closed',
		tPeriod: 'DOA',
	})

	// open T3 4C's
	const lpT3OpenNum = await Claim.countDocuments({
		division: 'LP',
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Open',
		tPeriod: {
			$in: ['T000', 'T001', 'T002', 'T003'],
		},
	})
	// contained T3 4C's
	const lpT3ContainedNum = await Claim.countDocuments({
		division: 'LP',
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Contained',
		tPeriod: {
			$in: ['T000', 'T001', 'T002', 'T003'],
		},
	})
	// closed T3 4C's
	const lpT3ClosedNum = await Claim.countDocuments({
		division: 'LP',
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Closed',
		tPeriod: {
			$in: ['T000', 'T001', 'T002', 'T003'],
		},
	})

	// ldl
	// open DOA 4C's
	const ldlDoaOpenNum = await Claim.countDocuments({
		division: 'LDL',
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Open',
		tPeriod: 'DOA',
	})
	// contained DOA 4C's
	const ldlDoaContainedNum = await Claim.countDocuments({
		division: 'LDL',
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Contained',
		tPeriod: 'DOA',
	})
	// closed DOA 4C's
	const ldlDoaClosedNum = await Claim.countDocuments({
		division: 'LDL',
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Closed',
		tPeriod: 'DOA',
	})

	// open T3 4C's
	const ldlT3OpenNum = await Claim.countDocuments({
		division: 'LDL',
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Open',
		tPeriod: {
			$in: ['T000', 'T001', 'T002', 'T003'],
		},
	})
	// contained T3 4C's
	const ldlT3ContainedNum = await Claim.countDocuments({
		division: 'LDL',
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Contained',
		tPeriod: {
			$in: ['T000', 'T001', 'T002', 'T003'],
		},
	})
	// closed T3 4C's
	const ldlT3ClosedNum = await Claim.countDocuments({
		division: 'LDL',
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Closed',
		tPeriod: {
			$in: ['T000', 'T001', 'T002', 'T003'],
		},
	})

	// sd
	// open DOA 4C's
	const sdDoaOpenNum = await Claim.countDocuments({
		division: 'SD',
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Open',
		tPeriod: 'DOA',
	})
	// contained DOA 4C's
	const sdDoaContainedNum = await Claim.countDocuments({
		division: 'SD',
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Contained',
		tPeriod: 'DOA',
	})
	// closed DOA 4C's
	const sdDoaClosedNum = await Claim.countDocuments({
		division: 'SD',
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Closed',
		tPeriod: 'DOA',
	})

	// open T3 4C's
	const sdT3OpenNum = await Claim.countDocuments({
		division: 'SD',
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Open',
		tPeriod: {
			$in: ['T000', 'T001', 'T002', 'T003'],
		},
	})
	// contained T3 4C's
	const sdT3ContainedNum = await Claim.countDocuments({
		division: 'SD',
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Contained',
		tPeriod: {
			$in: ['T000', 'T001', 'T002', 'T003'],
		},
	})
	// closed T3 4C's
	const sdT3ClosedNum = await Claim.countDocuments({
		division: 'SD',
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Closed',
		tPeriod: {
			$in: ['T000', 'T001', 'T002', 'T003'],
		},
	})

	// doa 25pt+
	const bhlDoa25pThisWeek = await DOA25pt.countDocuments({
		division: 'BHL',
		createdAt: { $gte: new Date(new Date(startOfWeek)) },
		status: { $ne: 'Rejected' },
	})
	const cpDoa25pThisWeek = await DOA25pt.countDocuments({
		division: 'CP',
		createdAt: { $gte: new Date(new Date(startOfWeek)) },
		status: { $ne: 'Rejected' },
	})
	const emDoa25pThisWeek = await DOA25pt.countDocuments({
		division: 'EM',
		createdAt: { $gte: new Date(new Date(startOfWeek)) },
		status: { $ne: 'Rejected' },
	})
	const hpDoa25pThisWeek = await DOA25pt.countDocuments({
		division: 'HP',
		createdAt: { $gte: new Date(new Date(startOfWeek)) },
		status: { $ne: 'Rejected' },
	})
	const lpDoa25pThisWeek = await DOA25pt.countDocuments({
		division: 'LP',
		createdAt: { $gte: new Date(new Date(startOfWeek)) },
		status: { $ne: 'Rejected' },
	})
	const ldlDoa25pThisWeek = await DOA25pt.countDocuments({
		division: 'LDL',
		createdAt: { $gte: new Date(new Date(startOfWeek)) },
		status: { $ne: 'Rejected' },
	})
	const sdDoa25pThisWeek = await DOA25pt.countDocuments({
		division: 'SD',
		createdAt: { $gte: new Date(new Date(startOfWeek)) },
		status: { $ne: 'Rejected' },
	})

	const bhlCutIn = new Date('2020-09-01T00:00:00.007Z')
	const cpCutIn = new Date('2020-09-01T00:00:00.007Z')
	const emCutIn = new Date('2020-09-01T00:00:00.007Z')
	const hpCutIn = new Date('2020-09-01T00:00:00.007Z')
	const lpCutIn = new Date('2020-10-01T00:00:00.007Z')
	const ldlCutIn = new Date('2020-02-01T00:00:00.007Z')
	const sdCutIn = new Date('2020-09-01T00:00:00.007Z')

	// post cut in throughput
	const bhlPostCutInThroughput =
		(await Throughput.countDocuments({
			division: 'BHL',
			createdAt: { $gte: new Date(new Date(bhlCutIn)) },
		})) + 300

	const cpPostCutInThroughput = await Throughput.countDocuments({
		division: 'CP',
		createdAt: { $gte: new Date(new Date(cpCutIn)) },
	})

	const emPostCutInThroughput =
		(await Throughput.countDocuments({
			division: 'EM',
			createdAt: { $gte: new Date(new Date(emCutIn)) },
		})) + 1637

	// console.log(emPostCutInThroughput)

	const hpPostCutInThroughput =
		(await Throughput.countDocuments({
			division: 'HP',
			createdAt: { $gte: new Date(new Date(hpCutIn)) },
		})) + 329

	const lpPostCutInThroughput =
		(await Throughput.countDocuments({
			division: 'LP',
			createdAt: { $gte: new Date(new Date(lpCutIn)) },
		})) + 390

	// console.log(lpPostCutInThroughput)

	const ldlPostCutInThroughput =
		(await Throughput.countDocuments({
			division: 'LDL',
			createdAt: { $gte: new Date(new Date(ldlCutIn)) },
		})) + 3500

	const sdPostCutInThroughput = await Throughput.countDocuments({
		division: 'SD',
		createdAt: { $gte: new Date(new Date(sdCutIn)) },
	})

	const bhlDPU = (bhlDoaClaimsPostCutIn / bhlPostCutInThroughput).toFixed(3)
	const cpDPU = (cpDoaClaimsPostCutIn / cpPostCutInThroughput).toFixed(3)
	const emDPU = (emDoaClaimsPostCutIn / emPostCutInThroughput).toFixed(3)
	const hpDPU = (hpDoaClaimsPostCutIn / hpPostCutInThroughput).toFixed(3)
	const lpDPU = (lpDoaClaimsPostCutIn / lpPostCutInThroughput).toFixed(3)
	const ldlDPU = (ldlDoaClaimsPostCutIn / ldlPostCutInThroughput).toFixed(3)
	const sdDPU = (sdDoaClaimsPostCutIn / sdPostCutInThroughput).toFixed(3)

	// console.log(lpPostCutInThroughput);

	// get pre t3 claims
	const rawPredictionClaims = await Claim.aggregate([
		{
			$match: {
				$or: [{ buildDate: { $regex: fourMonthsAgo } }, { buildDate: { $regex: threeMonthsAgo } }, { buildDate: { $regex: twoMonthsAgo } }],
				tPeriod: {
					$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
				},
				outcome: {
					$nin: ['Reject', 'Z Code'],
				},
			},
		},
	])
	// get reject & Z code pre t3 claims that have not been actioned
	const rawPredictionClaims1 = await Claim.aggregate([
		{
			$match: {
				$or: [{ buildDate: { $regex: fourMonthsAgo } }, { buildDate: { $regex: threeMonthsAgo } }, { buildDate: { $regex: twoMonthsAgo } }],
				tPeriod: {
					$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
				},
				actioned: { $ne: 'Yes' },
				outcome: {
					$in: ['Reject', 'Z Code'],
				},
			},
		},
	])

	// bhl

	/// ------------Prediction 1 --------------------///

	// get total retails for pre t3
	const bhlMriRetailsPrediction1 = await Retail.aggregate([
		{
			$match: {
				division: 'BHL',
				buildDate: { $regex: fourMonthsAgo },
				$or: [{ soldDate: { $regex: fourMonthsAgo } }, { soldDate: { $regex: threeMonthsAgo } }],
			},
		},
	])
	//work out prediction 1
	let bhlPrediction1T3Retails = []
	bhlMriRetailsPrediction1.forEach((r) => {
		bhlPrediction1T3Retails.push(r.serialNumber)
	})

	let bhlPredictionClaims = []
	rawPredictionClaims.forEach((c) => {
		bhlPredictionClaims.push(c.name)
	})
	rawPredictionClaims1.forEach((c) => {
		bhlPredictionClaims.push(c.name)
	})

	bhlCompare1 = (a1, a2) => bhlPredictionClaims.reduce((a, c) => a + bhlPrediction1T3Retails.includes(c), 0)

	const bhlPre1Claims = bhlCompare1(bhlPredictionClaims, bhlPrediction1T3Retails)
	const bhlPre1Retails = bhlPrediction1T3Retails.length
	const bhlPrediction1 = (bhlPre1Claims / bhlPre1Retails || 0).toFixed(3)

	/// ------------Prediction 2 --------------------///

	// get total retails for pre t3
	const bhlMriRetailsPrediction2 = await Retail.aggregate([
		{
			$match: {
				division: 'BHL',
				buildDate: { $regex: threeMonthsAgo },
				$or: [{ soldDate: { $regex: threeMonthsAgo } }, { soldDate: { $regex: twoMonthsAgo } }],
			},
		},
	])
	//work out prediction 2
	let bhlPrediction2T3Retails = []
	bhlMriRetailsPrediction2.forEach((r) => {
		bhlPrediction2T3Retails.push(r.serialNumber)
	})

	bhlCompare2 = (a1, a2) => bhlPredictionClaims.reduce((a, c) => a + bhlPrediction2T3Retails.includes(c), 0)

	const bhlPre2Claims = bhlCompare2(bhlPredictionClaims, bhlPrediction2T3Retails)
	const bhlPre2Retails = bhlPrediction2T3Retails.length
	const bhlPrediction2 = (bhlPre2Claims / bhlPre2Retails || 0).toFixed(3)

	/// ------------Prediction 3 --------------------///

	// get total retails for pre t3
	const bhlMriRetailsPrediction3 = await Retail.aggregate([
		{
			$match: {
				division: 'BHL',
				buildDate: { $regex: twoMonthsAgo },
				$or: [{ soldDate: { $regex: twoMonthsAgo } }, { soldDate: { $regex: oneMonthAgo } }],
			},
		},
	])
	//work out prediction 3
	let bhlPrediction3T3Retails = []
	bhlMriRetailsPrediction3.forEach((r) => {
		bhlPrediction3T3Retails.push(r.serialNumber)
	})

	bhlCompare3 = (a1, a2) => bhlPredictionClaims.reduce((a, c) => a + bhlPrediction3T3Retails.includes(c), 0)

	const bhlPre3Claims = bhlCompare3(bhlPredictionClaims, bhlPrediction3T3Retails)
	const bhlPre3Retails = bhlPrediction3T3Retails.length
	const bhlPrediction3 = (bhlPre3Claims / bhlPre3Retails || 0).toFixed(3)

	//cp
	/// ------------Prediction 1 --------------------///

	// get total retails for pre t3
	const cpMriRetailsPrediction1 = await Retail.aggregate([
		{
			$match: {
				division: 'CP',
				buildDate: { $regex: fourMonthsAgo },
				$or: [{ soldDate: { $regex: fourMonthsAgo } }, { soldDate: { $regex: threeMonthsAgo } }],
			},
		},
	])
	//work out prediction 1
	let cpPrediction1T3Retails = []
	cpMriRetailsPrediction1.forEach((r) => {
		cpPrediction1T3Retails.push(r.serialNumber)
	})

	let cpPredictionClaims = []
	rawPredictionClaims.forEach((c) => {
		cpPredictionClaims.push(c.name)
	})
	rawPredictionClaims1.forEach((c) => {
		cpPredictionClaims.push(c.name)
	})

	cpCompare1 = (a1, a2) => cpPredictionClaims.reduce((a, c) => a + cpPrediction1T3Retails.includes(c), 0)

	const cpPre1Claims = cpCompare1(cpPredictionClaims, cpPrediction1T3Retails)
	const cpPre1Retails = cpPrediction1T3Retails.length
	const cpPrediction1 = (cpPre1Claims / cpPre1Retails || 0).toFixed(3)

	/// ------------Prediction 2 --------------------///

	// get total retails for pre t3
	const cpMriRetailsPrediction2 = await Retail.aggregate([
		{
			$match: {
				division: 'CP',
				buildDate: { $regex: threeMonthsAgo },
				$or: [{ soldDate: { $regex: threeMonthsAgo } }, { soldDate: { $regex: twoMonthsAgo } }],
			},
		},
	])
	//work out prediction 2
	let cpPrediction2T3Retails = []
	cpMriRetailsPrediction2.forEach((r) => {
		cpPrediction2T3Retails.push(r.serialNumber)
	})

	cpCompare2 = (a1, a2) => cpPredictionClaims.reduce((a, c) => a + cpPrediction2T3Retails.includes(c), 0)

	const cpPre2Claims = cpCompare2(cpPredictionClaims, cpPrediction2T3Retails)
	const cpPre2Retails = cpPrediction2T3Retails.length
	const cpPrediction2 = (cpPre2Claims / cpPre2Retails || 0).toFixed(3)

	/// ------------Prediction 3 --------------------///

	// get total retails for pre t3
	const cpMriRetailsPrediction3 = await Retail.aggregate([
		{
			$match: {
				division: 'CP',
				buildDate: { $regex: twoMonthsAgo },
				$or: [{ soldDate: { $regex: twoMonthsAgo } }, { soldDate: { $regex: oneMonthAgo } }],
			},
		},
	])
	//work out prediction 3
	let cpPrediction3T3Retails = []
	cpMriRetailsPrediction3.forEach((r) => {
		cpPrediction3T3Retails.push(r.serialNumber)
	})

	cpCompare3 = (a1, a2) => cpPredictionClaims.reduce((a, c) => a + cpPrediction3T3Retails.includes(c), 0)

	const cpPre3Claims = cpCompare3(cpPredictionClaims, cpPrediction3T3Retails)
	const cpPre3Retails = cpPrediction3T3Retails.length
	const cpPrediction3 = (cpPre3Claims / cpPre3Retails || 0).toFixed(3)

	// em

	/// ------------Prediction 1 --------------------///

	// get total retails for pre t3
	const emMriRetailsPrediction1 = await Retail.aggregate([
		{
			$match: {
				division: 'EM',
				buildDate: { $regex: fourMonthsAgo },
				$or: [{ soldDate: { $regex: fourMonthsAgo } }, { soldDate: { $regex: threeMonthsAgo } }],
			},
		},
	])
	//work out prediction 1
	let emPrediction1T3Retails = []
	emMriRetailsPrediction1.forEach((r) => {
		emPrediction1T3Retails.push(r.serialNumber)
	})

	let emPredictionClaims = []
	rawPredictionClaims.forEach((c) => {
		emPredictionClaims.push(c.name)
	})
	rawPredictionClaims1.forEach((c) => {
		emPredictionClaims.push(c.name)
	})

	emCompare1 = (a1, a2) => emPredictionClaims.reduce((a, c) => a + emPrediction1T3Retails.includes(c), 0)

	const emPre1Claims = emCompare1(emPredictionClaims, emPrediction1T3Retails)
	const emPre1Retails = emPrediction1T3Retails.length
	const emPrediction1 = (emPre1Claims / emPre1Retails || 0).toFixed(3)

	/// ------------Prediction 2 --------------------///

	// get total retails for pre t3
	const emMriRetailsPrediction2 = await Retail.aggregate([
		{
			$match: {
				division: 'EM',
				buildDate: { $regex: threeMonthsAgo },
				$or: [{ soldDate: { $regex: threeMonthsAgo } }, { soldDate: { $regex: twoMonthsAgo } }],
			},
		},
	])
	//work out prediction 2
	let emPrediction2T3Retails = []
	emMriRetailsPrediction2.forEach((r) => {
		emPrediction2T3Retails.push(r.serialNumber)
	})

	emCompare2 = (a1, a2) => emPredictionClaims.reduce((a, c) => a + emPrediction2T3Retails.includes(c), 0)

	const emPre2Claims = emCompare2(emPredictionClaims, emPrediction2T3Retails)
	const emPre2Retails = emPrediction2T3Retails.length
	const emPrediction2 = (emPre2Claims / emPre2Retails || 0).toFixed(3)

	/// ------------Prediction 3 --------------------///

	// get total retails for pre t3
	const emMriRetailsPrediction3 = await Retail.aggregate([
		{
			$match: {
				division: 'EM',
				buildDate: { $regex: twoMonthsAgo },
				$or: [{ soldDate: { $regex: twoMonthsAgo } }, { soldDate: { $regex: oneMonthAgo } }],
			},
		},
	])
	//work out prediction 3
	let emPrediction3T3Retails = []
	emMriRetailsPrediction3.forEach((r) => {
		emPrediction3T3Retails.push(r.serialNumber)
	})

	emCompare3 = (a1, a2) => emPredictionClaims.reduce((a, c) => a + emPrediction3T3Retails.includes(c), 0)

	const emPre3Claims = emCompare3(emPredictionClaims, emPrediction3T3Retails)
	const emPre3Retails = emPrediction3T3Retails.length
	const emPrediction3 = (emPre3Claims / emPre3Retails || 0).toFixed(3)

	// hp
	/// ------------Prediction 1 --------------------///

	// get total retails for pre t3
	const hpMriRetailsPrediction1 = await Retail.aggregate([
		{
			$match: {
				division: 'HP',
				buildDate: { $regex: fourMonthsAgo },
				$or: [{ soldDate: { $regex: fourMonthsAgo } }, { soldDate: { $regex: threeMonthsAgo } }],
			},
		},
	])
	//work out prediction 1
	let hpPrediction1T3Retails = []
	hpMriRetailsPrediction1.forEach((r) => {
		hpPrediction1T3Retails.push(r.serialNumber)
	})

	let hpPredictionClaims = []
	rawPredictionClaims.forEach((c) => {
		hpPredictionClaims.push(c.name)
	})
	rawPredictionClaims1.forEach((c) => {
		hpPredictionClaims.push(c.name)
	})

	hpCompare1 = (a1, a2) => hpPredictionClaims.reduce((a, c) => a + hpPrediction1T3Retails.includes(c), 0)

	const hpPre1Claims = hpCompare1(hpPredictionClaims, hpPrediction1T3Retails)
	const hpPre1Retails = hpPrediction1T3Retails.length
	const hpPrediction1 = (hpPre1Claims / hpPre1Retails || 0).toFixed(3)

	/// ------------Prediction 2 --------------------///

	// get total retails for pre t3
	const hpMriRetailsPrediction2 = await Retail.aggregate([
		{
			$match: {
				division: 'HP',
				buildDate: { $regex: threeMonthsAgo },
				$or: [{ soldDate: { $regex: threeMonthsAgo } }, { soldDate: { $regex: twoMonthsAgo } }],
			},
		},
	])
	//work out prediction 2
	let hpPrediction2T3Retails = []
	hpMriRetailsPrediction2.forEach((r) => {
		hpPrediction2T3Retails.push(r.serialNumber)
	})

	hpCompare2 = (a1, a2) => hpPredictionClaims.reduce((a, c) => a + hpPrediction2T3Retails.includes(c), 0)

	const hpPre2Claims = hpCompare2(hpPredictionClaims, hpPrediction2T3Retails)
	const hpPre2Retails = hpPrediction2T3Retails.length
	const hpPrediction2 = (hpPre2Claims / hpPre2Retails || 0).toFixed(3)

	/// ------------Prediction 3 --------------------///

	// get total retails for pre t3
	const hpMriRetailsPrediction3 = await Retail.aggregate([
		{
			$match: {
				division: 'HP',
				buildDate: { $regex: twoMonthsAgo },
				$or: [{ soldDate: { $regex: twoMonthsAgo } }, { soldDate: { $regex: oneMonthAgo } }],
			},
		},
	])
	//work out prediction 3
	let hpPrediction3T3Retails = []
	hpMriRetailsPrediction3.forEach((r) => {
		hpPrediction3T3Retails.push(r.serialNumber)
	})

	hpCompare3 = (a1, a2) => hpPredictionClaims.reduce((a, c) => a + hpPrediction3T3Retails.includes(c), 0)

	const hpPre3Claims = hpCompare3(hpPredictionClaims, hpPrediction3T3Retails)
	const hpPre3Retails = hpPrediction3T3Retails.length
	const hpPrediction3 = (hpPre3Claims / hpPre3Retails || 0).toFixed(3)

	// lp

	/// ------------Prediction 1 --------------------///

	// get total retails for pre t3
	const lpMriRetailsPrediction1 = await Retail.aggregate([
		{
			$match: {
				division: 'LP',
				buildDate: { $regex: fourMonthsAgo },
				$or: [{ soldDate: { $regex: fourMonthsAgo } }, { soldDate: { $regex: threeMonthsAgo } }],
			},
		},
	])
	//work out prediction 1
	let lpPrediction1T3Retails = []
	lpMriRetailsPrediction1.forEach((r) => {
		lpPrediction1T3Retails.push(r.serialNumber)
	})

	let lpPredictionClaims = []
	rawPredictionClaims.forEach((c) => {
		lpPredictionClaims.push(c.name)
	})
	rawPredictionClaims1.forEach((c) => {
		lpPredictionClaims.push(c.name)
	})

	lpCompare1 = (a1, a2) => lpPredictionClaims.reduce((a, c) => a + lpPrediction1T3Retails.includes(c), 0)

	const lpPre1Claims = lpCompare1(lpPredictionClaims, lpPrediction1T3Retails)
	const lpPre1Retails = lpPrediction1T3Retails.length
	const lpPrediction1 = (lpPre1Claims / lpPre1Retails || 0).toFixed(3)

	/// ------------Prediction 2 --------------------///

	// get total retails for pre t3
	const lpMriRetailsPrediction2 = await Retail.aggregate([
		{
			$match: {
				division: 'LP',
				buildDate: { $regex: threeMonthsAgo },
				$or: [{ soldDate: { $regex: threeMonthsAgo } }, { soldDate: { $regex: twoMonthsAgo } }],
			},
		},
	])
	//work out prediction 2
	let lpPrediction2T3Retails = []
	lpMriRetailsPrediction2.forEach((r) => {
		lpPrediction2T3Retails.push(r.serialNumber)
	})

	lpCompare2 = (a1, a2) => lpPredictionClaims.reduce((a, c) => a + lpPrediction2T3Retails.includes(c), 0)

	const lpPre2Claims = lpCompare2(lpPredictionClaims, lpPrediction2T3Retails)
	const lpPre2Retails = lpPrediction2T3Retails.length
	const lpPrediction2 = (lpPre2Claims / lpPre2Retails || 0).toFixed(3)

	/// ------------Prediction 3 --------------------///

	// get total retails for pre t3
	const lpMriRetailsPrediction3 = await Retail.aggregate([
		{
			$match: {
				division: 'LP',
				buildDate: { $regex: twoMonthsAgo },
				$or: [{ soldDate: { $regex: twoMonthsAgo } }, { soldDate: { $regex: oneMonthAgo } }],
			},
		},
	])
	//work out prediction 3
	let lpPrediction3T3Retails = []
	lpMriRetailsPrediction3.forEach((r) => {
		lpPrediction3T3Retails.push(r.serialNumber)
	})

	lpCompare3 = (a1, a2) => lpPredictionClaims.reduce((a, c) => a + lpPrediction3T3Retails.includes(c), 0)

	const lpPre3Claims = lpCompare3(lpPredictionClaims, lpPrediction3T3Retails)
	const lpPre3Retails = lpPrediction3T3Retails.length
	const lpPrediction3 = (lpPre3Claims / lpPre3Retails || 0).toFixed(3)

	// ldl

	/// ------------Prediction 1 --------------------///

	// get total retails for pre t3
	const ldlMriRetailsPrediction1 = await Retail.aggregate([
		{
			$match: {
				division: 'LDL',
				buildDate: { $regex: fourMonthsAgo },
				$or: [{ soldDate: { $regex: fourMonthsAgo } }, { soldDate: { $regex: threeMonthsAgo } }],
			},
		},
	])
	//work out prediction 1
	let ldlPrediction1T3Retails = []
	ldlMriRetailsPrediction1.forEach((r) => {
		ldlPrediction1T3Retails.push(r.serialNumber)
	})

	let ldlPredictionClaims = []
	rawPredictionClaims.forEach((c) => {
		ldlPredictionClaims.push(c.name)
	})
	rawPredictionClaims1.forEach((c) => {
		ldlPredictionClaims.push(c.name)
	})

	ldlCompare1 = (a1, a2) => ldlPredictionClaims.reduce((a, c) => a + ldlPrediction1T3Retails.includes(c), 0)

	const ldlPre1Claims = ldlCompare1(ldlPredictionClaims, ldlPrediction1T3Retails)
	const ldlPre1Retails = ldlPrediction1T3Retails.length
	const ldlPrediction1 = (ldlPre1Claims / ldlPre1Retails || 0).toFixed(3)

	/// ------------Prediction 2 --------------------///

	// get total retails for pre t3
	const ldlMriRetailsPrediction2 = await Retail.aggregate([
		{
			$match: {
				division: 'LDL',
				buildDate: { $regex: threeMonthsAgo },
				$or: [{ soldDate: { $regex: threeMonthsAgo } }, { soldDate: { $regex: twoMonthsAgo } }],
			},
		},
	])
	//work out prediction 2
	let ldlPrediction2T3Retails = []
	ldlMriRetailsPrediction2.forEach((r) => {
		ldlPrediction2T3Retails.push(r.serialNumber)
	})

	ldlCompare2 = (a1, a2) => ldlPredictionClaims.reduce((a, c) => a + ldlPrediction2T3Retails.includes(c), 0)

	const ldlPre2Claims = ldlCompare2(ldlPredictionClaims, ldlPrediction2T3Retails)
	const ldlPre2Retails = ldlPrediction2T3Retails.length
	const ldlPrediction2 = (ldlPre2Claims / ldlPre2Retails || 0).toFixed(3)

	/// ------------Prediction 3 --------------------///

	// get total retails for pre t3
	const ldlMriRetailsPrediction3 = await Retail.aggregate([
		{
			$match: {
				division: 'LDL',
				buildDate: { $regex: twoMonthsAgo },
				$or: [{ soldDate: { $regex: twoMonthsAgo } }, { soldDate: { $regex: oneMonthAgo } }],
			},
		},
	])
	//work out prediction 3
	let ldlPrediction3T3Retails = []
	ldlMriRetailsPrediction3.forEach((r) => {
		ldlPrediction3T3Retails.push(r.serialNumber)
	})

	ldlCompare3 = (a1, a2) => ldlPredictionClaims.reduce((a, c) => a + ldlPrediction3T3Retails.includes(c), 0)

	const ldlPre3Claims = ldlCompare3(ldlPredictionClaims, ldlPrediction3T3Retails)
	const ldlPre3Retails = ldlPrediction3T3Retails.length
	const ldlPrediction3 = (ldlPre3Claims / ldlPre3Retails || 0).toFixed(3)

	// sd

	/// ------------Prediction 1 --------------------///

	// get total retails for pre t3
	const sdMriRetailsPrediction1 = await Retail.aggregate([
		{
			$match: {
				division: 'SD',
				buildDate: { $regex: fourMonthsAgo },
				$or: [{ soldDate: { $regex: fourMonthsAgo } }, { soldDate: { $regex: threeMonthsAgo } }],
			},
		},
	])
	//work out prediction 1
	let sdPrediction1T3Retails = []
	sdMriRetailsPrediction1.forEach((r) => {
		sdPrediction1T3Retails.push(r.serialNumber)
	})

	let sdPredictionClaims = []
	rawPredictionClaims.forEach((c) => {
		sdPredictionClaims.push(c.name)
	})
	rawPredictionClaims1.forEach((c) => {
		sdPredictionClaims.push(c.name)
	})

	sdCompare1 = (a1, a2) => sdPredictionClaims.reduce((a, c) => a + sdPrediction1T3Retails.includes(c), 0)

	const sdPre1Claims = sdCompare1(sdPredictionClaims, sdPrediction1T3Retails)
	const sdPre1Retails = sdPrediction1T3Retails.length
	const sdPrediction1 = (sdPre1Claims / sdPre1Retails || 0).toFixed(3)

	/// ------------Prediction 2 --------------------///

	// get total retails for pre t3
	const sdMriRetailsPrediction2 = await Retail.aggregate([
		{
			$match: {
				division: 'SD',
				buildDate: { $regex: threeMonthsAgo },
				$or: [{ soldDate: { $regex: threeMonthsAgo } }, { soldDate: { $regex: twoMonthsAgo } }],
			},
		},
	])
	//work out prediction 2
	let sdPrediction2T3Retails = []
	sdMriRetailsPrediction2.forEach((r) => {
		sdPrediction2T3Retails.push(r.serialNumber)
	})

	sdCompare2 = (a1, a2) => sdPredictionClaims.reduce((a, c) => a + sdPrediction2T3Retails.includes(c), 0)

	const sdPre2Claims = sdCompare2(ldlPredictionClaims, sdPrediction2T3Retails)
	const sdPre2Retails = sdPrediction2T3Retails.length
	const sdPrediction2 = (sdPre2Claims / sdPre2Retails || 0).toFixed(3)

	/// ------------Prediction 3 --------------------///

	// get total retails for pre t3
	const sdMriRetailsPrediction3 = await Retail.aggregate([
		{
			$match: {
				division: 'SD',
				buildDate: { $regex: twoMonthsAgo },
				$or: [{ soldDate: { $regex: twoMonthsAgo } }, { soldDate: { $regex: oneMonthAgo } }],
			},
		},
	])
	//work out prediction 3
	let sdPrediction3T3Retails = []
	sdMriRetailsPrediction3.forEach((r) => {
		sdPrediction3T3Retails.push(r.serialNumber)
	})

	sdCompare3 = (a1, a2) => sdPredictionClaims.reduce((a, c) => a + sdPrediction3T3Retails.includes(c), 0)

	const sdPre3Claims = sdCompare3(ldlPredictionClaims, sdPrediction3T3Retails)
	const sdPre3Retails = sdPrediction3T3Retails.length
	const sdPrediction3 = (sdPre3Claims / sdPre3Retails || 0).toFixed(3)
	const graph = await Graph.find({})

	// console.log(ldlPostCutInThroughput);

	res.render('dash/ukgroup', {
		figure,
		graph,
		bhlDoaClaimsPostCutIn,
		cpDoaClaimsPostCutIn,
		emDoaClaimsPostCutIn,
		hpDoaClaimsPostCutIn,
		lpDoaClaimsPostCutIn,
		ldlDoaClaimsPostCutIn,
		sdDoaClaimsPostCutIn,
		bhlDoaClaimsPreT3,
		cpDoaClaimsPreT3,
		emDoaClaimsPreT3,
		hpDoaClaimsPreT3,
		lpDoaClaimsPreT3,
		ldlDoaClaimsPreT3,
		sdDoaClaimsPreT3,
		bhlDoaClaimsThisWeek,
		cpDoaClaimsThisWeek,
		emDoaClaimsThisWeek,
		hpDoaClaimsThisWeek,
		lpDoaClaimsThisWeek,
		ldlDoaClaimsThisWeek,
		sdDoaClaimsThisWeek,
		bhlDoaClaimsPreT3ThisWeek,
		cpDoaClaimsPreT3ThisWeek,
		emDoaClaimsPreT3ThisWeek,
		hpDoaClaimsPreT3ThisWeek,
		lpDoaClaimsPreT3ThisWeek,
		ldlDoaClaimsPreT3ThisWeek,
		sdDoaClaimsPreT3ThisWeek,
		bhlDoaOpenNum,
		bhlDoaContainedNum,
		bhlDoaClosedNum,
		bhlT3OpenNum,
		bhlT3ContainedNum,
		bhlT3ClosedNum,
		bhlDoa25pThisWeek,
		cpDoaOpenNum,
		cpDoaContainedNum,
		cpDoaClosedNum,
		cpT3OpenNum,
		cpT3ContainedNum,
		cpT3ClosedNum,
		cpDoa25pThisWeek,
		emDoaOpenNum,
		emDoaContainedNum,
		emDoaClosedNum,
		emT3OpenNum,
		emT3ContainedNum,
		emT3ClosedNum,
		emDoa25pThisWeek,
		hpDoaOpenNum,
		hpDoaContainedNum,
		hpDoaClosedNum,
		hpT3OpenNum,
		hpT3ContainedNum,
		hpT3ClosedNum,
		hpDoa25pThisWeek,
		lpDoaOpenNum,
		lpDoaContainedNum,
		lpDoaClosedNum,
		lpT3OpenNum,
		lpT3ContainedNum,
		lpT3ClosedNum,
		lpDoa25pThisWeek,
		ldlDoaOpenNum,
		ldlDoaContainedNum,
		ldlDoaClosedNum,
		ldlT3OpenNum,
		ldlT3ContainedNum,
		ldlT3ClosedNum,
		ldlDoa25pThisWeek,
		sdDoaOpenNum,
		sdDoaContainedNum,
		sdDoaClosedNum,
		sdT3OpenNum,
		sdT3ContainedNum,
		sdT3ClosedNum,
		sdDoa25pThisWeek,
		bhlDPU,
		cpDPU,
		emDPU,
		hpDPU,
		lpDPU,
		ldlDPU,
		sdDPU,
		bhlPrediction1,
		bhlPrediction2,
		bhlPrediction3,
		cpPrediction1,
		cpPrediction2,
		cpPrediction3,
		emPrediction1,
		emPrediction2,
		emPrediction3,
		hpPrediction1,
		hpPrediction2,
		hpPrediction3,
		lpPrediction1,
		lpPrediction2,
		lpPrediction3,
		ldlPrediction1,
		ldlPrediction2,
		ldlPrediction3,
		sdPrediction1,
		sdPrediction2,
		sdPrediction3,
	})
	// console.log(ldlDOA);
}

module.exports.singleDoa = async (req, res) => {
	let { division } = req.params
	if (division === 'GROUP') {
		division = ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL']
	} else {
		division = [division]
	}

	let graphOptions = []

	if (division.length < 2) {
		graphOptions = [...division]
	}
	if (division.length > 1) {
		graphOptions = ['GROUP']
	}
	// get the division figures
	const dpuMonth = moment().subtract(0, 'months').format('MMM-YY')
	const figure = await Figure.find({
		division: {
			$in: graphOptions,
		},
	})
	const graph = await Graph.find({
		division: {
			$in: graphOptions,
		},
	})

	// get list of part numbers to generate repeating submitted this year
	const doaClaimsSubmittedThisYear = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				importedDate: {
					$gte: new Date('2021-01-01T00:00:00.000Z'),
				},
				tPeriod: 'DOA',
				outcome: {
					$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier', ''],
				},
			},
		},
		{
			$group: {
				_id: '$failedPart',
				count: { $sum: 1 },
			},
		},
		{ $sort: { count: -1, _id: 1 } },
	])

	// get list of part numbers to generate repeating submitted last 30 days
	const doaClaimsSubmittedLast30Days = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				importedDate: {
					$gte: new Date(new Date().getTime() - 30 * 24 * 60 * 60 * 1000),
				},
				tPeriod: 'DOA',
				outcome: {
					$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier', ''],
				},
			},
		},
	])
	// get list of part numbers to generate repeating submitted before last 30 days
	const doaClaimsSubmittedBeforeLast30Days = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				importedDate: {
					$gte: new Date(new Date().getTime() - 60 * 24 * 60 * 60 * 1000),
					$lte: new Date(new Date().getTime() - 30 * 24 * 60 * 60 * 1000),
				},
				tPeriod: 'DOA',
				outcome: {
					$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier', ''],
				},
			},
		},
	])

	let listOfPartsThisYear = []
	for (let p of doaClaimsSubmittedThisYear) {
		if (p.count > 1) {
			listOfPartsThisYear.push(p._id)
		}
	}
	let listOfPartsLast30Days = []
	for (let p of doaClaimsSubmittedLast30Days) {
		listOfPartsLast30Days.push(p.failedPart)
	}
	let listOfPartsBeforeLast30Days = []
	for (let p of doaClaimsSubmittedBeforeLast30Days) {
		listOfPartsBeforeLast30Days.push(p.failedPart)
	}

	let countOfRepeatsLast30Days = 0
	for (let p of listOfPartsLast30Days) {
		if (listOfPartsThisYear.indexOf(p) > -1) {
			countOfRepeatsLast30Days++
		}
	}
	let countOfRepeatsBeforeLast30Days = 0
	for (let p of listOfPartsBeforeLast30Days) {
		if (listOfPartsThisYear.indexOf(p) > -1) {
			countOfRepeatsBeforeLast30Days++
		}
	}

	// open DOA 4C's
	const doaOpenNum = await Claim.countDocuments({
		division: {
			$in: division,
		},
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Open',
		tPeriod: 'DOA',
	})
	// contained DOA 4C's
	const doaContainedNum = await Claim.countDocuments({
		division: {
			$in: division,
		},
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Contained',
		tPeriod: 'DOA',
	})
	// closed DOA 4C's
	const doaClosedNum = await Claim.countDocuments({
		division: {
			$in: division,
		},
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Closed',
		tPeriod: 'DOA',
	})

	// open T3 4C's
	const t3OpenNum = await Claim.countDocuments({
		division: {
			$in: division,
		},
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Open',
		tPeriod: {
			$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
		},
	})
	// Contained T3 4C's
	const t3ContainedNum = await Claim.countDocuments({
		division: {
			$in: division,
		},
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Contained',
		tPeriod: {
			$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
		},
	})

	// Closed T3 4C's
	const t3ClosedNum = await Claim.countDocuments({
		division: {
			$in: division,
		},
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Closed',
		tPeriod: {
			$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
		},
	})

	// open internal 4C's
	const intOpenNum = await Claim.countDocuments({
		division: {
			$in: division,
		},
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Open',
		claimNumber: {
			$in: ['Internal Techweb', 'Leak Techweb'],
		},
	})
	// contained internal 4C's
	const intContainedNum = await Claim.countDocuments({
		division: {
			$in: division,
		},
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Contained',
		claimNumber: {
			$in: ['Internal Techweb', 'Leak Techweb'],
		},
	})

	// closed internal 4C's
	const intClosedNum = await Claim.countDocuments({
		division: {
			$in: division,
		},
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Closed',
		claimNumber: {
			$in: ['Internal Techweb', 'Leak Techweb'],
		},
	})

	// signed out last 90 days
	const signOutLast90Days = await Throughput.countDocuments({
		division: {
			$in: division,
		},
		signedOutAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
	})

	// dealer claims on machines built last 90 days
	const claimsLast90Days = await Claim.countDocuments({
		division: {
			$in: division,
		},
		$or: [
			{ buildDate: { $regex: threeMonthsAgo } },
			{ buildDate: { $regex: twoMonthsAgo } },
			{ buildDate: { $regex: oneMonthAgo } },
			{ buildDate: { $regex: thisMonth } },
		],
		tPeriod: 'DOA',
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})

	// dealer claims received last 90 days
	const dealerClaimsInLast90Days = await Claim.countDocuments({
		division: {
			$in: division,
		},
		importedDate: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
		tPeriod: 'DOA',
	})

	// TTop 10 dealers claims in last 90 days under 15 hours
	const top10DealersInLast90Days = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				importedDate: {
					$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
				},
				tPeriod: 'DOA',
				outcome: {
					$nin: ['Reject', 'Z Code'],
				},
			},
		},
		{
			$group: {
				_id: '$dealer',
				count: { $sum: 1 },
			},
		},
		{ $sort: { count: -1, _id: 1 } },
		{ $limit: 10 },
	])

	let top10DealersInLast90DaysCount = 0
	top10DealersInLast90Days.forEach((m) => {
		top10DealersInLast90DaysCount += m.count
	})
	const dealerTop10Percent = Math.round((top10DealersInLast90DaysCount / dealerClaimsInLast90Days) * 100)

	const totFourC =
		doaOpenNum + doaContainedNum + doaClosedNum + t3OpenNum + t3ContainedNum + t3ClosedNum + intOpenNum + intContainedNum + intClosedNum

	// get pre t3 claims
	let rawPredictionClaims = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				$or: [{ buildDate: { $regex: fourMonthsAgo } }, { buildDate: { $regex: threeMonthsAgo } }, { buildDate: { $regex: twoMonthsAgo } }],
				tPeriod: {
					$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
				},
				outcome: {
					$nin: ['Reject', 'Z Code'],
				},
			},
		},
	])
	// get reject & Z code pre t3 claims that have not been actioned
	let rawPredictionClaims1 = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				$or: [{ buildDate: { $regex: fourMonthsAgo } }, { buildDate: { $regex: threeMonthsAgo } }, { buildDate: { $regex: twoMonthsAgo } }],
				tPeriod: {
					$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
				},
				actioned: { $ne: 'Yes' },
				outcome: {
					$in: ['Reject', 'Z Code'],
				},
			},
		},
	])

	/// ------------Prediction 1 --------------------///

	// get  total build for pre t3
	let totalBuildPrediction1 = await Retail.aggregate([
		{
			$match: {
				buildDate: { $regex: fourMonthsAgo },
				division: {
					$in: division,
				},
			},
		},
	])
	// get  total sold for pre t3
	let totalSoldPrediction1 = await Retail.aggregate([
		{
			$match: {
				buildDate: { $regex: fourMonthsAgo },
				soldDate: { $ne: '#' },
				division: {
					$in: division,
				},
			},
		},
	])

	// get total retails for pre t3
	let mriRetailsPrediction1 = await Retail.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				buildDate: { $regex: fourMonthsAgo },
				$or: [{ soldDate: { $regex: fourMonthsAgo } }, { soldDate: { $regex: threeMonthsAgo } }],
			},
		},
	])
	//work out prediction 1
	let prediction1T3Retails = []
	mriRetailsPrediction1.forEach((r) => {
		prediction1T3Retails.push(r.serialNumber)
	})

	let predictionClaims = []
	rawPredictionClaims.forEach((c) => {
		predictionClaims.push(c.name)
	})
	rawPredictionClaims1.forEach((c) => {
		predictionClaims.push(c.name)
	})

	// work out rft
	// all machines that are in T3 month 1
	let RetailsMonth1 = [prediction1T3Retails.length]
	// all claims
	let rftClaims = [...new Set(predictionClaims)]

	Compare11 = (a1, a2) => rftClaims.reduce((a, c) => a + prediction1T3Retails.includes(c), 0)
	let pre1FailedMachines = Compare11(rftClaims, prediction1T3Retails)
	let pre1GoodMachines = RetailsMonth1 - pre1FailedMachines
	let pre1RFT = Math.round((pre1GoodMachines / RetailsMonth1) * 100) || 0

	Compare1 = (a1, a2) => predictionClaims.reduce((a, c) => a + prediction1T3Retails.includes(c), 0)

	let pre1Builds = totalBuildPrediction1.length
	let pre1Sold = totalSoldPrediction1.length
	let pre1NotSold = pre1Builds - pre1Sold
	let pre1Claims = Compare1(predictionClaims, prediction1T3Retails)
	let pre1Retails = prediction1T3Retails.length
	let prediction1 = (pre1Claims / pre1Retails || 0).toFixed(3)

	/// ------------Prediction 2 --------------------///

	// get  total build for pre t3
	let totalBuildPrediction2 = await Retail.aggregate([
		{
			$match: {
				buildDate: { $regex: threeMonthsAgo },
				division: {
					$in: division,
				},
			},
		},
	])
	// get  total sold for pre t3
	let totalSoldPrediction2 = await Retail.aggregate([
		{
			$match: {
				buildDate: { $regex: threeMonthsAgo },
				soldDate: { $ne: '#' },
				division: {
					$in: division,
				},
			},
		},
	])

	// get total retails for pre t3
	let mriRetailsPrediction2 = await Retail.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				buildDate: { $regex: threeMonthsAgo },
				$or: [{ soldDate: { $regex: threeMonthsAgo } }, { soldDate: { $regex: twoMonthsAgo } }],
			},
		},
	])
	//work out prediction 2
	let prediction2T3Retails = []
	mriRetailsPrediction2.forEach((r) => {
		prediction2T3Retails.push(r.serialNumber)
	})

	// work out rft

	let RetailsMonth2 = [prediction2T3Retails.length]

	Compare12 = (a1, a2) => rftClaims.reduce((a, c) => a + prediction2T3Retails.includes(c), 0)
	let pre2FailedMachines = Compare12(rftClaims, prediction2T3Retails)
	let pre2GoodMachines = RetailsMonth2 - pre2FailedMachines
	let pre2RFT = Math.round((pre2GoodMachines / RetailsMonth2) * 100) || 0

	Compare2 = (a1, a2) => predictionClaims.reduce((a, c) => a + prediction2T3Retails.includes(c), 0)

	let pre2Builds = totalBuildPrediction2.length
	let pre2Sold = totalSoldPrediction2.length
	let pre2NotSold = pre2Builds - pre2Sold
	let pre2Claims = Compare2(predictionClaims, prediction2T3Retails)
	let pre2Retails = prediction2T3Retails.length
	let prediction2 = (pre2Claims / pre2Retails || 0).toFixed(3)

	/// ------------Prediction 3 --------------------///

	// get  total build for pre t3
	let totalBuildPrediction3 = await Retail.aggregate([
		{
			$match: {
				buildDate: { $regex: twoMonthsAgo },
				division: {
					$in: division,
				},
			},
		},
	])
	// get  total sold for pre t3
	let totalSoldPrediction3 = await Retail.aggregate([
		{
			$match: {
				buildDate: { $regex: twoMonthsAgo },
				soldDate: { $ne: '#' },
				division: {
					$in: division,
				},
			},
		},
	])

	// get total retails for pre t3
	let mriRetailsPrediction3 = await Retail.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				buildDate: { $regex: twoMonthsAgo },
				$or: [{ soldDate: { $regex: twoMonthsAgo } }, { soldDate: { $regex: oneMonthAgo } }],
			},
		},
	])
	//work out prediction 2
	let prediction3T3Retails = []
	mriRetailsPrediction3.forEach((r) => {
		prediction3T3Retails.push(r.serialNumber)
	})
	// work out rft
	let RetailsMonth3 = [prediction3T3Retails.length]

	Compare13 = (a1, a2) => rftClaims.reduce((a, c) => a + prediction3T3Retails.includes(c), 0)
	let pre3FailedMachines = Compare13(rftClaims, prediction3T3Retails)
	let pre3GoodMachines = RetailsMonth3 - pre3FailedMachines
	let pre3RFT = Math.round((pre3GoodMachines / RetailsMonth3) * 100) || 0

	Compare3 = (a1, a2) => predictionClaims.reduce((a, c) => a + prediction3T3Retails.includes(c), 0)

	let pre3Builds = totalBuildPrediction3.length
	let pre3Sold = totalSoldPrediction3.length
	let pre3NotSold = pre3Builds - pre3Sold
	let pre3Claims = Compare3(predictionClaims, prediction3T3Retails)
	let pre3Retails = prediction3T3Retails.length
	let prediction3 = (pre3Claims / pre3Retails || 0).toFixed(3)

	//HBU///

	if (division.includes('HBU')) {
		// get pre t3 claims
		let area = 'HBU'

		rawPredictionClaims = await Claim.aggregate([
			{
				$match: {
					area: area,
					$or: [{ buildDate: { $regex: fourMonthsAgo } }, { buildDate: { $regex: threeMonthsAgo } }, { buildDate: { $regex: twoMonthsAgo } }],
					tPeriod: {
						$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
					},
					outcome: {
						$nin: ['Reject', 'Z Code'],
					},
				},
			},
		])
		// get reject & Z code pre t3 claims that have not been actioned
		rawPredictionClaims1 = await Claim.aggregate([
			{
				$match: {
					area: area,
					$or: [{ buildDate: { $regex: fourMonthsAgo } }, { buildDate: { $regex: threeMonthsAgo } }, { buildDate: { $regex: twoMonthsAgo } }],
					tPeriod: {
						$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
					},
					actioned: { $ne: 'Yes' },
					outcome: {
						$in: ['Reject', 'Z Code'],
					},
				},
			},
		])

		/// ------------Prediction 1 --------------------///

		// get  total build for pre t3
		totalBuildPrediction1 = await Retail.aggregate([
			{
				$match: {
					buildDate: { $regex: fourMonthsAgo },
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
				},
			},
		])
		// get  total sold for pre t3
		totalSoldPrediction1 = await Retail.aggregate([
			{
				$match: {
					buildDate: { $regex: fourMonthsAgo },
					soldDate: { $ne: '#' },
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
				},
			},
		])

		// get total retails for pre t3
		mriRetailsPrediction1 = await Retail.aggregate([
			{
				$match: {
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
					buildDate: { $regex: fourMonthsAgo },
					$or: [{ soldDate: { $regex: fourMonthsAgo } }, { soldDate: { $regex: threeMonthsAgo } }],
				},
			},
		])
		//work out prediction 1
		prediction1T3Retails = []
		mriRetailsPrediction1.forEach((r) => {
			prediction1T3Retails.push(r.serialNumber)
		})

		predictionClaims = []
		rawPredictionClaims.forEach((c) => {
			predictionClaims.push(c.name)
		})
		rawPredictionClaims1.forEach((c) => {
			predictionClaims.push(c.name)
		})

		// work out rft
		// all machines that are in T3 month 1
		RetailsMonth1 = [prediction1T3Retails.length]
		// all claims
		let rftClaims = [...new Set(predictionClaims)]

		Compare11 = (a1, a2) => rftClaims.reduce((a, c) => a + prediction1T3Retails.includes(c), 0)
		pre1FailedMachines = Compare11(rftClaims, prediction1T3Retails)
		pre1GoodMachines = RetailsMonth1 - pre1FailedMachines
		pre1RFT = Math.round((pre1GoodMachines / RetailsMonth1) * 100) || 0

		Compare1 = (a1, a2) => predictionClaims.reduce((a, c) => a + prediction1T3Retails.includes(c), 0)

		pre1Builds = totalBuildPrediction1.length
		pre1Sold = totalSoldPrediction1.length
		pre1NotSold = pre1Builds - pre1Sold
		pre1Claims = Compare1(predictionClaims, prediction1T3Retails)
		pre1Retails = prediction1T3Retails.length
		prediction1 = (pre1Claims / pre1Retails || 0).toFixed(3)

		/// ------------Prediction 2 --------------------///

		// get  total build for pre t3
		totalBuildPrediction2 = await Retail.aggregate([
			{
				$match: {
					buildDate: { $regex: threeMonthsAgo },
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
				},
			},
		])
		// get  total sold for pre t3
		totalSoldPrediction2 = await Retail.aggregate([
			{
				$match: {
					buildDate: { $regex: threeMonthsAgo },
					soldDate: { $ne: '#' },
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
				},
			},
		])

		// get total retails for pre t3
		mriRetailsPrediction2 = await Retail.aggregate([
			{
				$match: {
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
					buildDate: { $regex: threeMonthsAgo },
					$or: [{ soldDate: { $regex: threeMonthsAgo } }, { soldDate: { $regex: twoMonthsAgo } }],
				},
			},
		])
		//work out prediction 2
		prediction2T3Retails = []
		mriRetailsPrediction2.forEach((r) => {
			prediction2T3Retails.push(r.serialNumber)
		})

		// work out rft

		RetailsMonth2 = [prediction2T3Retails.length]

		Compare12 = (a1, a2) => rftClaims.reduce((a, c) => a + prediction2T3Retails.includes(c), 0)
		pre2FailedMachines = Compare12(rftClaims, prediction2T3Retails)
		pre2GoodMachines = RetailsMonth2 - pre2FailedMachines
		pre2RFT = Math.round((pre2GoodMachines / RetailsMonth2) * 100) || 0

		Compare2 = (a1, a2) => predictionClaims.reduce((a, c) => a + prediction2T3Retails.includes(c), 0)

		pre2Builds = totalBuildPrediction2.length
		pre2Sold = totalSoldPrediction2.length
		pre2NotSold = pre2Builds - pre2Sold
		pre2Claims = Compare2(predictionClaims, prediction2T3Retails)
		pre2Retails = prediction2T3Retails.length
		prediction2 = (pre2Claims / pre2Retails || 0).toFixed(3)

		/// ------------Prediction 3 --------------------///

		// get  total build for pre t3
		totalBuildPrediction3 = await Retail.aggregate([
			{
				$match: {
					buildDate: { $regex: twoMonthsAgo },
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
				},
			},
		])
		// get  total sold for pre t3
		totalSoldPrediction3 = await Retail.aggregate([
			{
				$match: {
					buildDate: { $regex: twoMonthsAgo },
					soldDate: { $ne: '#' },
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
				},
			},
		])

		// get total retails for pre t3
		mriRetailsPrediction3 = await Retail.aggregate([
			{
				$match: {
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
					buildDate: { $regex: twoMonthsAgo },
					$or: [{ soldDate: { $regex: twoMonthsAgo } }, { soldDate: { $regex: oneMonthAgo } }],
				},
			},
		])
		//work out prediction 2
		prediction3T3Retails = []
		mriRetailsPrediction3.forEach((r) => {
			prediction3T3Retails.push(r.serialNumber)
		})
		// work out rft
		RetailsMonth3 = [prediction3T3Retails.length]

		Compare13 = (a1, a2) => rftClaims.reduce((a, c) => a + prediction3T3Retails.includes(c), 0)
		pre3FailedMachines = Compare13(rftClaims, prediction3T3Retails)
		pre3GoodMachines = RetailsMonth3 - pre3FailedMachines
		pre3RFT = Math.round((pre3GoodMachines / RetailsMonth3) * 100) || 0

		Compare3 = (a1, a2) => predictionClaims.reduce((a, c) => a + prediction3T3Retails.includes(c), 0)

		pre3Builds = totalBuildPrediction3.length
		pre3Sold = totalSoldPrediction3.length
		pre3NotSold = pre3Builds - pre3Sold
		pre3Claims = Compare3(predictionClaims, prediction3T3Retails)
		pre3Retails = prediction3T3Retails.length
		prediction3 = (pre3Claims / pre3Retails || 0).toFixed(3)
	}

	//HBU///

	if (division.includes('Cabs')) {
		// get pre t3 claims
		let area = 'Cabs Systems'

		rawPredictionClaims = await Claim.aggregate([
			{
				$match: {
					area: area,
					$or: [{ buildDate: { $regex: fourMonthsAgo } }, { buildDate: { $regex: threeMonthsAgo } }, { buildDate: { $regex: twoMonthsAgo } }],
					tPeriod: {
						$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
					},
					outcome: {
						$nin: ['Reject', 'Z Code'],
					},
				},
			},
		])
		// get reject & Z code pre t3 claims that have not been actioned
		rawPredictionClaims1 = await Claim.aggregate([
			{
				$match: {
					area: area,
					$or: [{ buildDate: { $regex: fourMonthsAgo } }, { buildDate: { $regex: threeMonthsAgo } }, { buildDate: { $regex: twoMonthsAgo } }],
					tPeriod: {
						$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
					},
					actioned: { $ne: 'Yes' },
					outcome: {
						$in: ['Reject', 'Z Code'],
					},
				},
			},
		])

		/// ------------Prediction 1 --------------------///

		// get  total build for pre t3
		totalBuildPrediction1 = await Retail.aggregate([
			{
				$match: {
					buildDate: { $regex: fourMonthsAgo },
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
				},
			},
		])
		// get  total sold for pre t3
		totalSoldPrediction1 = await Retail.aggregate([
			{
				$match: {
					buildDate: { $regex: fourMonthsAgo },
					soldDate: { $ne: '#' },
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
				},
			},
		])

		// get total retails for pre t3
		mriRetailsPrediction1 = await Retail.aggregate([
			{
				$match: {
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
					buildDate: { $regex: fourMonthsAgo },
					$or: [{ soldDate: { $regex: fourMonthsAgo } }, { soldDate: { $regex: threeMonthsAgo } }],
				},
			},
		])
		//work out prediction 1
		prediction1T3Retails = []
		mriRetailsPrediction1.forEach((r) => {
			prediction1T3Retails.push(r.serialNumber)
		})

		predictionClaims = []
		rawPredictionClaims.forEach((c) => {
			predictionClaims.push(c.name)
		})
		rawPredictionClaims1.forEach((c) => {
			predictionClaims.push(c.name)
		})

		// work out rft
		// all machines that are in T3 month 1
		RetailsMonth1 = [prediction1T3Retails.length]
		// all claims
		let rftClaims = [...new Set(predictionClaims)]

		Compare11 = (a1, a2) => rftClaims.reduce((a, c) => a + prediction1T3Retails.includes(c), 0)
		pre1FailedMachines = Compare11(rftClaims, prediction1T3Retails)
		pre1GoodMachines = RetailsMonth1 - pre1FailedMachines
		pre1RFT = Math.round((pre1GoodMachines / RetailsMonth1) * 100) || 0

		Compare1 = (a1, a2) => predictionClaims.reduce((a, c) => a + prediction1T3Retails.includes(c), 0)

		pre1Builds = totalBuildPrediction1.length
		pre1Sold = totalSoldPrediction1.length
		pre1NotSold = pre1Builds - pre1Sold
		pre1Claims = Compare1(predictionClaims, prediction1T3Retails)
		pre1Retails = prediction1T3Retails.length
		prediction1 = (pre1Claims / pre1Retails || 0).toFixed(3)

		/// ------------Prediction 2 --------------------///

		// get  total build for pre t3
		totalBuildPrediction2 = await Retail.aggregate([
			{
				$match: {
					buildDate: { $regex: threeMonthsAgo },
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
				},
			},
		])
		// get  total sold for pre t3
		totalSoldPrediction2 = await Retail.aggregate([
			{
				$match: {
					buildDate: { $regex: threeMonthsAgo },
					soldDate: { $ne: '#' },
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
				},
			},
		])

		// get total retails for pre t3
		mriRetailsPrediction2 = await Retail.aggregate([
			{
				$match: {
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
					buildDate: { $regex: threeMonthsAgo },
					$or: [{ soldDate: { $regex: threeMonthsAgo } }, { soldDate: { $regex: twoMonthsAgo } }],
				},
			},
		])
		//work out prediction 2
		prediction2T3Retails = []
		mriRetailsPrediction2.forEach((r) => {
			prediction2T3Retails.push(r.serialNumber)
		})

		// work out rft

		RetailsMonth2 = [prediction2T3Retails.length]

		Compare12 = (a1, a2) => rftClaims.reduce((a, c) => a + prediction2T3Retails.includes(c), 0)
		pre2FailedMachines = Compare12(rftClaims, prediction2T3Retails)
		pre2GoodMachines = RetailsMonth2 - pre2FailedMachines
		pre2RFT = Math.round((pre2GoodMachines / RetailsMonth2) * 100) || 0

		Compare2 = (a1, a2) => predictionClaims.reduce((a, c) => a + prediction2T3Retails.includes(c), 0)

		pre2Builds = totalBuildPrediction2.length
		pre2Sold = totalSoldPrediction2.length
		pre2NotSold = pre2Builds - pre2Sold
		pre2Claims = Compare2(predictionClaims, prediction2T3Retails)
		pre2Retails = prediction2T3Retails.length
		prediction2 = (pre2Claims / pre2Retails || 0).toFixed(3)

		/// ------------Prediction 3 --------------------///

		// get  total build for pre t3
		totalBuildPrediction3 = await Retail.aggregate([
			{
				$match: {
					buildDate: { $regex: twoMonthsAgo },
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
				},
			},
		])
		// get  total sold for pre t3
		totalSoldPrediction3 = await Retail.aggregate([
			{
				$match: {
					buildDate: { $regex: twoMonthsAgo },
					soldDate: { $ne: '#' },
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
				},
			},
		])

		// get total retails for pre t3
		mriRetailsPrediction3 = await Retail.aggregate([
			{
				$match: {
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
					buildDate: { $regex: twoMonthsAgo },
					$or: [{ soldDate: { $regex: twoMonthsAgo } }, { soldDate: { $regex: oneMonthAgo } }],
				},
			},
		])
		//work out prediction 2
		prediction3T3Retails = []
		mriRetailsPrediction3.forEach((r) => {
			prediction3T3Retails.push(r.serialNumber)
		})
		// work out rft
		RetailsMonth3 = [prediction3T3Retails.length]

		Compare13 = (a1, a2) => rftClaims.reduce((a, c) => a + prediction3T3Retails.includes(c), 0)
		pre3FailedMachines = Compare13(rftClaims, prediction3T3Retails)
		pre3GoodMachines = RetailsMonth3 - pre3FailedMachines
		pre3RFT = Math.round((pre3GoodMachines / RetailsMonth3) * 100) || 0

		Compare3 = (a1, a2) => predictionClaims.reduce((a, c) => a + prediction3T3Retails.includes(c), 0)

		pre3Builds = totalBuildPrediction3.length
		pre3Sold = totalSoldPrediction3.length
		pre3NotSold = pre3Builds - pre3Sold
		pre3Claims = Compare3(predictionClaims, prediction3T3Retails)
		pre3Retails = prediction3T3Retails.length
		prediction3 = (pre3Claims / pre3Retails || 0).toFixed(3)
	}

	////////////////////////////////////// START OF RIGHT SIDE   ////////////////////////////////////////////////////////////////////////////////////////
	// Top 10 pre T3 claims assembly sorted by part number
	let preT3PartsAssembly = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				scc: 'Should',
				tPeriod: 'DOA',
				outcome: {
					$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
				},
				$or: [
					{ buildDate: { $regex: fourMonthsAgo } },
					{ buildDate: { $regex: threeMonthsAgo } },
					{ buildDate: { $regex: twoMonthsAgo } },
					{ buildDate: { $regex: oneMonthAgo } },
					{ buildDate: { $regex: thisMonth } },
				],
			},
		},
		{
			$group: {
				_id: {
					$substrCP: ['$failedPart', 0, 20],
				},
				status: { $addToSet: '$status' },
				rag: { $addToSet: '$rag' },
				count: { $sum: 1 },
			},
		},
		{ $sort: { count: -1, _id: 1 } },
		{ $limit: 10 },
	])
	// Top 10 pre T3 claims supplier sorted by part number
	let preT3PartsSupplier = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				scc: 'Could',
				tPeriod: 'DOA',
				outcome: {
					$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
				},
				$or: [
					{ buildDate: { $regex: fourMonthsAgo } },
					{ buildDate: { $regex: threeMonthsAgo } },
					{ buildDate: { $regex: twoMonthsAgo } },
					{ buildDate: { $regex: oneMonthAgo } },
					{ buildDate: { $regex: thisMonth } },
				],
			},
		},
		{
			$group: {
				_id: {
					$substrCP: ['$failedPart', 0, 20],
				},
				status: { $addToSet: '$status' },
				rag: { $addToSet: '$rag' },
				count: { $sum: 1 },
			},
		},
		{ $sort: { count: -1, _id: 1 } },
		{ $limit: 10 },
	])
	// Top 10 pre T3 claims sorted by part number
	let preT3PartsDesign = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				scc: 'Cannot',
				tPeriod: 'DOA',
				outcome: {
					$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
				},
				$or: [
					{ buildDate: { $regex: fourMonthsAgo } },
					{ buildDate: { $regex: threeMonthsAgo } },
					{ buildDate: { $regex: twoMonthsAgo } },
					{ buildDate: { $regex: oneMonthAgo } },
					{ buildDate: { $regex: thisMonth } },
				],
			},
		},
		{
			$group: {
				_id: {
					$substrCP: ['$failedPart', 0, 20],
				},
				status: { $addToSet: '$status' },
				rag: { $addToSet: '$rag' },
				count: { $sum: 1 },
			},
		},
		{ $sort: { count: -1, _id: 1 } },
		{ $limit: 10 },
	])

	// Top 10 pre T3 claims sorted by model
	let preT3Model = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				tPeriod: 'DOA',
				outcome: {
					$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
				},
				$or: [
					{ buildDate: { $regex: fourMonthsAgo } },
					{ buildDate: { $regex: threeMonthsAgo } },
					{ buildDate: { $regex: twoMonthsAgo } },
					{ buildDate: { $regex: oneMonthAgo } },
					{ buildDate: { $regex: thisMonth } },
				],
			},
		},

		{
			$group: {
				_id: '$baseModel',
				count: { $sum: 1 },
			},
		},
		{ $sort: { count: -1, _id: 1 } },
		{ $limit: 10 },
	])
	// Top 10 pre T3 claims sorted by stamp
	let preT3Stamping = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				tPeriod: 'DOA',
				failuretype: { $ne: '' },
				outcome: {
					$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
				},
				$or: [
					{ buildDate: { $regex: fourMonthsAgo } },
					{ buildDate: { $regex: threeMonthsAgo } },
					{ buildDate: { $regex: twoMonthsAgo } },
					{ buildDate: { $regex: oneMonthAgo } },
					{ buildDate: { $regex: thisMonth } },
				],
			},
		},
		{
			$group: {
				_id: '$failuretype',
				count: { $sum: 1 },
			},
		},
		{ $sort: { count: -1, _id: 1 } },
		{ $limit: 10 },
	])

	let asdTotal = {
		division: {
			$in: division,
		},
		tPeriod: 'DOA',
		outcome: {
			$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
		},
		$or: [
			{ buildDate: { $regex: fourMonthsAgo } },
			{ buildDate: { $regex: threeMonthsAgo } },
			{ buildDate: { $regex: twoMonthsAgo } },
			{ buildDate: { $regex: oneMonthAgo } },
			{ buildDate: { $regex: thisMonth } },
		],
	}
	let asdAssembly = {
		division: {
			$in: division,
		},
		asd: 'Assembly',
		tPeriod: 'DOA',
		outcome: {
			$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
		},
		$or: [
			{ buildDate: { $regex: fourMonthsAgo } },
			{ buildDate: { $regex: threeMonthsAgo } },
			{ buildDate: { $regex: twoMonthsAgo } },
			{ buildDate: { $regex: oneMonthAgo } },
			{ buildDate: { $regex: thisMonth } },
		],
	}
	let asdSupplier = {
		division: {
			$in: division,
		},
		asd: 'Supplier',
		tPeriod: 'DOA',
		outcome: {
			$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
		},
		$or: [
			{ buildDate: { $regex: fourMonthsAgo } },
			{ buildDate: { $regex: threeMonthsAgo } },
			{ buildDate: { $regex: twoMonthsAgo } },
			{ buildDate: { $regex: oneMonthAgo } },
			{ buildDate: { $regex: thisMonth } },
		],
	}
	let asdDesign = {
		division: {
			$in: division,
		},
		asd: 'Design',
		tPeriod: 'DOA',
		outcome: {
			$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
		},
		$or: [
			{ buildDate: { $regex: fourMonthsAgo } },
			{ buildDate: { $regex: threeMonthsAgo } },
			{ buildDate: { $regex: twoMonthsAgo } },
			{ buildDate: { $regex: oneMonthAgo } },
			{ buildDate: { $regex: thisMonth } },
		],
	}

	let allClaimsForAsd = await Claim.countDocuments(asdTotal)
	let allClaimsForAssembly = await Claim.countDocuments(asdAssembly)
	let allClaimsForSupplier = await Claim.countDocuments(asdSupplier)
	let allClaimsForDesign = allClaimsForAsd - allClaimsForAssembly - allClaimsForSupplier

	let assemblyPercent = Math.round((allClaimsForAssembly / allClaimsForAsd) * 100)
	let supplierPercent = Math.round((allClaimsForSupplier / allClaimsForAsd) * 100)
	let designPercent = Math.round((allClaimsForDesign / allClaimsForAsd) * 100)

	// get claims for doa rft & prediction 1

	// get  total build for doa prediction
	let totalPrediction1DOABuilds2 = await Retail.aggregate([
		{
			$match: {
				buildDate: { $regex: oneMonthAgo },
				soldDate: { $ne: '#' },
				division: {
					$in: division,
				},
			},
		},
	])

	// get  total build for doa prediction
	let totalPrediction1DOABuilds = await Retail.aggregate([
		{
			$match: {
				buildDate: { $regex: twoMonthsAgo },
				soldDate: { $ne: '#' },
				division: {
					$in: division,
				},
			},
		},
	])

	totalPrediction1DOABuildsOne = []
	totalPrediction1DOABuildsTwo = []

	for (let b of totalPrediction1DOABuilds) {
		totalPrediction1DOABuildsOne.push(b.serialNumber)
	}
	for (let b of totalPrediction1DOABuilds2) {
		totalPrediction1DOABuildsTwo.push(b.serialNumber)
	}

	// get pre t3 claims
	let rawPredictionClaimsDOA = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				name: {
					$in: totalPrediction1DOABuildsOne,
				},
				$or: [{ buildDate: { $regex: twoMonthsAgo } }],
				tPeriod: {
					$in: ['DOA'],
				},
				outcome: {
					$nin: ['Reject', 'Z Code'],
				},
			},
		},
	])
	// get reject & Z code pre t3 claims that have not been actioned
	let rawPredictionClaims1DOA = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				name: {
					$in: totalPrediction1DOABuildsOne,
				},
				$or: [{ buildDate: { $regex: twoMonthsAgo } }],
				tPeriod: {
					$in: ['DOA'],
				},
				actioned: { $ne: 'Yes' },
				outcome: {
					$in: ['Reject', 'Z Code'],
				},
			},
		},
	])

	let prediction1DOABuilds = []
	totalPrediction1DOABuilds.forEach((r) => {
		prediction1DOABuilds.push(r.serialNumber)
	})

	let predictionClaimsDOA = []
	rawPredictionClaimsDOA.forEach((c) => {
		predictionClaimsDOA.push(c.name)
	})
	rawPredictionClaims1DOA.forEach((c) => {
		predictionClaimsDOA.push(c.name)
	})

	let doaNoDuplicates = [...new Set(predictionClaimsDOA)]

	let pred1DOA = (predictionClaimsDOA.length / prediction1DOABuilds.length).toFixed(3)
	let pred1DOARft = 100 - Math.round((doaNoDuplicates.length / prediction1DOABuilds.length) * 100) || 0
	// get claims for doa rft & prediction 1

	// get claims for prediction 2 doa
	let rawPredictionClaimsDOA2 = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				name: {
					$in: totalPrediction1DOABuildsTwo,
				},
				$or: [{ buildDate: { $regex: oneMonthAgo } }],
				tPeriod: {
					$in: ['DOA'],
				},
				outcome: {
					$nin: ['Reject', 'Z Code'],
				},
			},
		},
	])
	// get reject & Z code pre t3 claims that have not been actioned
	let rawPredictionClaims1DOA2 = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				name: {
					$in: totalPrediction1DOABuildsTwo,
				},
				$or: [{ buildDate: { $regex: oneMonthAgo } }],
				tPeriod: {
					$in: ['DOA'],
				},
				actioned: { $ne: 'Yes' },
				outcome: {
					$in: ['Reject', 'Z Code'],
				},
			},
		},
	])

	let prediction1DOABuilds2 = []
	totalPrediction1DOABuilds2.forEach((r) => {
		prediction1DOABuilds2.push(r.serialNumber)
	})

	let predictionClaimsDOA2 = []
	rawPredictionClaimsDOA2.forEach((c) => {
		predictionClaimsDOA2.push(c.name)
	})
	rawPredictionClaims1DOA2.forEach((c) => {
		predictionClaimsDOA2.push(c.name)
	})

	let doaNoDuplicates2 = [...new Set(predictionClaimsDOA2)]

	let pred2DOA = (predictionClaimsDOA2.length / prediction1DOABuilds2.length).toFixed(3)
	let pred2DOARft = 100 - Math.round((doaNoDuplicates2.length / prediction1DOABuilds2.length) * 100) || 0

	///////////start of right side HBU /////////////////////////////

	if (division.includes('HBU')) {
		let area = 'HBU'
		// Top 10 pre T3 claims assembly sorted by part number
		preT3PartsAssembly = await Claim.aggregate([
			{
				$match: {
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
					area: area,
					scc: 'Should',
					tPeriod: 'DOA',
					outcome: {
						$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
					},
					$or: [
						{ buildDate: { $regex: fourMonthsAgo } },
						{ buildDate: { $regex: threeMonthsAgo } },
						{ buildDate: { $regex: twoMonthsAgo } },
						{ buildDate: { $regex: oneMonthAgo } },
						{ buildDate: { $regex: thisMonth } },
					],
				},
			},
			{
				$group: {
					_id: {
						$substrCP: ['$failedPart', 0, 20],
					},
					status: { $addToSet: '$status' },
					rag: { $addToSet: '$rag' },
					count: { $sum: 1 },
				},
			},
			{ $sort: { count: -1, _id: 1 } },
			{ $limit: 10 },
		])
		// Top 10 pre T3 claims supplier sorted by part number
		preT3PartsSupplier = await Claim.aggregate([
			{
				$match: {
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
					area: area,
					scc: 'Could',
					tPeriod: 'DOA',
					outcome: {
						$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
					},
					$or: [
						{ buildDate: { $regex: fourMonthsAgo } },
						{ buildDate: { $regex: threeMonthsAgo } },
						{ buildDate: { $regex: twoMonthsAgo } },
						{ buildDate: { $regex: oneMonthAgo } },
						{ buildDate: { $regex: thisMonth } },
					],
				},
			},
			{
				$group: {
					_id: {
						$substrCP: ['$failedPart', 0, 20],
					},
					status: { $addToSet: '$status' },
					rag: { $addToSet: '$rag' },
					count: { $sum: 1 },
				},
			},
			{ $sort: { count: -1, _id: 1 } },
			{ $limit: 10 },
		])
		// Top 10 pre T3 claims sorted by part number
		preT3PartsDesign = await Claim.aggregate([
			{
				$match: {
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
					area: area,
					scc: 'Cannot',
					tPeriod: 'DOA',
					outcome: {
						$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
					},
					$or: [
						{ buildDate: { $regex: fourMonthsAgo } },
						{ buildDate: { $regex: threeMonthsAgo } },
						{ buildDate: { $regex: twoMonthsAgo } },
						{ buildDate: { $regex: oneMonthAgo } },
						{ buildDate: { $regex: thisMonth } },
					],
				},
			},
			{
				$group: {
					_id: {
						$substrCP: ['$failedPart', 0, 20],
					},
					status: { $addToSet: '$status' },
					rag: { $addToSet: '$rag' },
					count: { $sum: 1 },
				},
			},
			{ $sort: { count: -1, _id: 1 } },
			{ $limit: 10 },
		])

		// Top 10 pre T3 claims sorted by model
		preT3Model = await Claim.aggregate([
			{
				$match: {
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
					area: area,
					tPeriod: 'DOA',
					outcome: {
						$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
					},
					$or: [
						{ buildDate: { $regex: fourMonthsAgo } },
						{ buildDate: { $regex: threeMonthsAgo } },
						{ buildDate: { $regex: twoMonthsAgo } },
						{ buildDate: { $regex: oneMonthAgo } },
						{ buildDate: { $regex: thisMonth } },
					],
				},
			},

			{
				$group: {
					_id: '$baseModel',
					count: { $sum: 1 },
				},
			},
			{ $sort: { count: -1, _id: 1 } },
			{ $limit: 10 },
		])
		// Top 10 pre T3 claims sorted by stamp
		preT3Stamping = await Claim.aggregate([
			{
				$match: {
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
					area: area,
					tPeriod: 'DOA',
					failuretype: { $ne: '' },
					outcome: {
						$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
					},
					$or: [
						{ buildDate: { $regex: fourMonthsAgo } },
						{ buildDate: { $regex: threeMonthsAgo } },
						{ buildDate: { $regex: twoMonthsAgo } },
						{ buildDate: { $regex: oneMonthAgo } },
						{ buildDate: { $regex: thisMonth } },
					],
				},
			},
			{
				$group: {
					_id: '$failuretype',
					count: { $sum: 1 },
				},
			},
			{ $sort: { count: -1, _id: 1 } },
			{ $limit: 10 },
		])

		asdTotal = {
			division: {
				$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
			},
			area: area,
			tPeriod: 'DOA',
			outcome: {
				$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
			},
			$or: [
				{ buildDate: { $regex: fourMonthsAgo } },
				{ buildDate: { $regex: threeMonthsAgo } },
				{ buildDate: { $regex: twoMonthsAgo } },
				{ buildDate: { $regex: oneMonthAgo } },
				{ buildDate: { $regex: thisMonth } },
			],
		}
		asdAssembly = {
			division: {
				$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
			},
			area: area,
			asd: 'Assembly',
			tPeriod: 'DOA',
			outcome: {
				$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
			},
			$or: [
				{ buildDate: { $regex: fourMonthsAgo } },
				{ buildDate: { $regex: threeMonthsAgo } },
				{ buildDate: { $regex: twoMonthsAgo } },
				{ buildDate: { $regex: oneMonthAgo } },
				{ buildDate: { $regex: thisMonth } },
			],
		}
		asdSupplier = {
			division: {
				$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
			},
			area: area,
			asd: 'Supplier',
			tPeriod: 'DOA',
			outcome: {
				$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
			},
			$or: [
				{ buildDate: { $regex: fourMonthsAgo } },
				{ buildDate: { $regex: threeMonthsAgo } },
				{ buildDate: { $regex: twoMonthsAgo } },
				{ buildDate: { $regex: oneMonthAgo } },
				{ buildDate: { $regex: thisMonth } },
			],
		}
		asdDesign = {
			division: {
				$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
			},
			area: area,
			asd: 'Design',
			tPeriod: 'DOA',
			outcome: {
				$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
			},
			$or: [
				{ buildDate: { $regex: fourMonthsAgo } },
				{ buildDate: { $regex: threeMonthsAgo } },
				{ buildDate: { $regex: twoMonthsAgo } },
				{ buildDate: { $regex: oneMonthAgo } },
				{ buildDate: { $regex: thisMonth } },
			],
		}

		allClaimsForAsd = await Claim.countDocuments(asdTotal)
		allClaimsForAssembly = await Claim.countDocuments(asdAssembly)
		allClaimsForSupplier = await Claim.countDocuments(asdSupplier)
		allClaimsForDesign = allClaimsForAsd - allClaimsForAssembly - allClaimsForSupplier

		assemblyPercent = Math.round((allClaimsForAssembly / allClaimsForAsd) * 100)
		supplierPercent = Math.round((allClaimsForSupplier / allClaimsForAsd) * 100)
		designPercent = Math.round((allClaimsForDesign / allClaimsForAsd) * 100)

		// get claims for doa rft & prediction 1

		// get  total build for doa prediction
		totalPrediction1DOABuilds = await Retail.aggregate([
			{
				$match: {
					buildDate: { $regex: twoMonthsAgo },
					soldDate: { $ne: '#' },
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
				},
			},
		])

		// get  total build for doa prediction
		totalPrediction1DOABuilds2 = await Retail.aggregate([
			{
				$match: {
					buildDate: { $regex: oneMonthAgo },
					soldDate: { $ne: '#' },
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
				},
			},
		])

		totalPrediction1DOABuildsOne = []
		totalPrediction1DOABuildsTwo = []

		for (let b of totalPrediction1DOABuilds) {
			totalPrediction1DOABuildsOne.push(b.serialNumber)
		}
		for (let b of totalPrediction1DOABuilds2) {
			totalPrediction1DOABuildsTwo.push(b.serialNumber)
		}

		// get pre t3 claims
		rawPredictionClaimsDOA = await Claim.aggregate([
			{
				$match: {
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
					name: {
						$in: totalPrediction1DOABuildsOne,
					},
					area: area,
					$or: [{ buildDate: { $regex: twoMonthsAgo } }],
					tPeriod: {
						$in: ['DOA'],
					},
					outcome: {
						$nin: ['Reject', 'Z Code'],
					},
				},
			},
		])
		// get reject & Z code pre t3 claims that have not been actioned
		rawPredictionClaims1DOA = await Claim.aggregate([
			{
				$match: {
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
					name: {
						$in: totalPrediction1DOABuildsOne,
					},
					area: area,
					$or: [{ buildDate: { $regex: twoMonthsAgo } }],
					tPeriod: {
						$in: ['DOA'],
					},
					actioned: { $ne: 'Yes' },
					outcome: {
						$in: ['Reject', 'Z Code'],
					},
				},
			},
		])

		prediction1DOABuilds = []
		totalPrediction1DOABuilds.forEach((r) => {
			prediction1DOABuilds.push(r.serialNumber)
		})

		predictionClaimsDOA = []
		rawPredictionClaimsDOA.forEach((c) => {
			predictionClaimsDOA.push(c.name)
		})
		rawPredictionClaims1DOA.forEach((c) => {
			predictionClaimsDOA.push(c.name)
		})

		doaNoDuplicates = [...new Set(predictionClaimsDOA)]

		pred1DOA = (predictionClaimsDOA.length / prediction1DOABuilds.length).toFixed(3)
		pred1DOARft = 100 - Math.round((doaNoDuplicates.length / prediction1DOABuilds.length) * 100) || 0
		// get claims for doa rft & prediction 1

		// get claims for prediction 2 doa
		rawPredictionClaimsDOA2 = await Claim.aggregate([
			{
				$match: {
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
					name: {
						$in: totalPrediction1DOABuildsTwo,
					},
					area: area,
					$or: [{ buildDate: { $regex: oneMonthAgo } }],
					tPeriod: {
						$in: ['DOA'],
					},
					outcome: {
						$nin: ['Reject', 'Z Code'],
					},
				},
			},
		])
		// get reject & Z code pre t3 claims that have not been actioned
		rawPredictionClaims1DOA2 = await Claim.aggregate([
			{
				$match: {
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
					name: {
						$in: totalPrediction1DOABuildsTwo,
					},
					area: area,
					$or: [{ buildDate: { $regex: oneMonthAgo } }],
					tPeriod: {
						$in: ['DOA'],
					},
					actioned: { $ne: 'Yes' },
					outcome: {
						$in: ['Reject', 'Z Code'],
					},
				},
			},
		])

		prediction1DOABuilds2 = []
		totalPrediction1DOABuilds2.forEach((r) => {
			prediction1DOABuilds2.push(r.serialNumber)
		})

		let predictionClaimsDOA2 = []
		rawPredictionClaimsDOA2.forEach((c) => {
			predictionClaimsDOA2.push(c.name)
		})
		rawPredictionClaims1DOA2.forEach((c) => {
			predictionClaimsDOA2.push(c.name)
		})

		doaNoDuplicates2 = [...new Set(predictionClaimsDOA2)]

		pred2DOA = (predictionClaimsDOA2.length / prediction1DOABuilds2.length).toFixed(3)
		pred2DOARft = 100 - Math.round((doaNoDuplicates2.length / prediction1DOABuilds2.length) * 100) || 0
	}
	///////////start of right side HBU /////////////////////////////

	if (division.includes('Cabs')) {
		let area = 'Cabs Systems'
		// Top 10 pre T3 claims assembly sorted by part number
		preT3PartsAssembly = await Claim.aggregate([
			{
				$match: {
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
					area: area,
					scc: 'Should',
					tPeriod: 'DOA',
					outcome: {
						$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
					},
					$or: [
						{ buildDate: { $regex: fourMonthsAgo } },
						{ buildDate: { $regex: threeMonthsAgo } },
						{ buildDate: { $regex: twoMonthsAgo } },
						{ buildDate: { $regex: oneMonthAgo } },
						{ buildDate: { $regex: thisMonth } },
					],
				},
			},
			{
				$group: {
					_id: {
						$substrCP: ['$failedPart', 0, 20],
					},
					status: { $addToSet: '$status' },
					rag: { $addToSet: '$rag' },
					count: { $sum: 1 },
				},
			},
			{ $sort: { count: -1, _id: 1 } },
			{ $limit: 10 },
		])
		// Top 10 pre T3 claims supplier sorted by part number
		preT3PartsSupplier = await Claim.aggregate([
			{
				$match: {
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
					area: area,
					scc: 'Could',
					tPeriod: 'DOA',
					outcome: {
						$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
					},
					$or: [
						{ buildDate: { $regex: fourMonthsAgo } },
						{ buildDate: { $regex: threeMonthsAgo } },
						{ buildDate: { $regex: twoMonthsAgo } },
						{ buildDate: { $regex: oneMonthAgo } },
						{ buildDate: { $regex: thisMonth } },
					],
				},
			},
			{
				$group: {
					_id: {
						$substrCP: ['$failedPart', 0, 20],
					},
					status: { $addToSet: '$status' },
					rag: { $addToSet: '$rag' },
					count: { $sum: 1 },
				},
			},
			{ $sort: { count: -1, _id: 1 } },
			{ $limit: 10 },
		])
		// Top 10 pre T3 claims sorted by part number
		preT3PartsDesign = await Claim.aggregate([
			{
				$match: {
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
					area: area,
					scc: 'Cannot',
					tPeriod: 'DOA',
					outcome: {
						$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
					},
					$or: [
						{ buildDate: { $regex: fourMonthsAgo } },
						{ buildDate: { $regex: threeMonthsAgo } },
						{ buildDate: { $regex: twoMonthsAgo } },
						{ buildDate: { $regex: oneMonthAgo } },
						{ buildDate: { $regex: thisMonth } },
					],
				},
			},
			{
				$group: {
					_id: {
						$substrCP: ['$failedPart', 0, 20],
					},
					status: { $addToSet: '$status' },
					rag: { $addToSet: '$rag' },
					count: { $sum: 1 },
				},
			},
			{ $sort: { count: -1, _id: 1 } },
			{ $limit: 10 },
		])

		// Top 10 pre T3 claims sorted by model
		preT3Model = await Claim.aggregate([
			{
				$match: {
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
					area: area,
					tPeriod: 'DOA',
					outcome: {
						$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
					},
					$or: [
						{ buildDate: { $regex: fourMonthsAgo } },
						{ buildDate: { $regex: threeMonthsAgo } },
						{ buildDate: { $regex: twoMonthsAgo } },
						{ buildDate: { $regex: oneMonthAgo } },
						{ buildDate: { $regex: thisMonth } },
					],
				},
			},

			{
				$group: {
					_id: '$baseModel',
					count: { $sum: 1 },
				},
			},
			{ $sort: { count: -1, _id: 1 } },
			{ $limit: 10 },
		])
		// Top 10 pre T3 claims sorted by stamp
		preT3Stamping = await Claim.aggregate([
			{
				$match: {
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
					area: area,
					tPeriod: 'DOA',
					failuretype: { $ne: '' },
					outcome: {
						$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
					},
					$or: [
						{ buildDate: { $regex: fourMonthsAgo } },
						{ buildDate: { $regex: threeMonthsAgo } },
						{ buildDate: { $regex: twoMonthsAgo } },
						{ buildDate: { $regex: oneMonthAgo } },
						{ buildDate: { $regex: thisMonth } },
					],
				},
			},
			{
				$group: {
					_id: '$failuretype',
					count: { $sum: 1 },
				},
			},
			{ $sort: { count: -1, _id: 1 } },
			{ $limit: 10 },
		])

		asdTotal = {
			division: {
				$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
			},
			area: area,
			tPeriod: 'DOA',
			outcome: {
				$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
			},
			$or: [
				{ buildDate: { $regex: fourMonthsAgo } },
				{ buildDate: { $regex: threeMonthsAgo } },
				{ buildDate: { $regex: twoMonthsAgo } },
				{ buildDate: { $regex: oneMonthAgo } },
				{ buildDate: { $regex: thisMonth } },
			],
		}
		asdAssembly = {
			division: {
				$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
			},
			area: area,
			asd: 'Assembly',
			tPeriod: 'DOA',
			outcome: {
				$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
			},
			$or: [
				{ buildDate: { $regex: fourMonthsAgo } },
				{ buildDate: { $regex: threeMonthsAgo } },
				{ buildDate: { $regex: twoMonthsAgo } },
				{ buildDate: { $regex: oneMonthAgo } },
				{ buildDate: { $regex: thisMonth } },
			],
		}
		asdSupplier = {
			division: {
				$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
			},
			area: area,
			asd: 'Supplier',
			tPeriod: 'DOA',
			outcome: {
				$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
			},
			$or: [
				{ buildDate: { $regex: fourMonthsAgo } },
				{ buildDate: { $regex: threeMonthsAgo } },
				{ buildDate: { $regex: twoMonthsAgo } },
				{ buildDate: { $regex: oneMonthAgo } },
				{ buildDate: { $regex: thisMonth } },
			],
		}
		asdDesign = {
			division: {
				$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
			},
			area: area,
			asd: 'Design',
			tPeriod: 'DOA',
			outcome: {
				$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
			},
			$or: [
				{ buildDate: { $regex: fourMonthsAgo } },
				{ buildDate: { $regex: threeMonthsAgo } },
				{ buildDate: { $regex: twoMonthsAgo } },
				{ buildDate: { $regex: oneMonthAgo } },
				{ buildDate: { $regex: thisMonth } },
			],
		}

		allClaimsForAsd = await Claim.countDocuments(asdTotal)
		allClaimsForAssembly = await Claim.countDocuments(asdAssembly)
		allClaimsForSupplier = await Claim.countDocuments(asdSupplier)
		allClaimsForDesign = allClaimsForAsd - allClaimsForAssembly - allClaimsForSupplier

		assemblyPercent = Math.round((allClaimsForAssembly / allClaimsForAsd) * 100)
		supplierPercent = Math.round((allClaimsForSupplier / allClaimsForAsd) * 100)
		designPercent = Math.round((allClaimsForDesign / allClaimsForAsd) * 100)

		// get claims for doa rft & prediction 1

		// get  total build for doa prediction
		totalPrediction1DOABuilds = await Retail.aggregate([
			{
				$match: {
					buildDate: { $regex: twoMonthsAgo },
					soldDate: { $ne: '#' },
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
				},
			},
		])

		// get  total build for doa prediction
		totalPrediction1DOABuilds2 = await Retail.aggregate([
			{
				$match: {
					buildDate: { $regex: oneMonthAgo },
					soldDate: { $ne: '#' },
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
				},
			},
		])

		totalPrediction1DOABuildsOne = []
		totalPrediction1DOABuildsTwo = []

		for (let b of totalPrediction1DOABuilds) {
			totalPrediction1DOABuildsOne.push(b.serialNumber)
		}
		for (let b of totalPrediction1DOABuilds2) {
			totalPrediction1DOABuildsTwo.push(b.serialNumber)
		}

		// get pre t3 claims
		rawPredictionClaimsDOA = await Claim.aggregate([
			{
				$match: {
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
					name: {
						$in: totalPrediction1DOABuildsOne,
					},
					area: area,
					$or: [{ buildDate: { $regex: twoMonthsAgo } }],
					tPeriod: {
						$in: ['DOA'],
					},
					outcome: {
						$nin: ['Reject', 'Z Code'],
					},
				},
			},
		])
		// get reject & Z code pre t3 claims that have not been actioned
		rawPredictionClaims1DOA = await Claim.aggregate([
			{
				$match: {
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
					name: {
						$in: totalPrediction1DOABuildsOne,
					},
					area: area,
					$or: [{ buildDate: { $regex: twoMonthsAgo } }],
					tPeriod: {
						$in: ['DOA'],
					},
					actioned: { $ne: 'Yes' },
					outcome: {
						$in: ['Reject', 'Z Code'],
					},
				},
			},
		])

		prediction1DOABuilds = []
		totalPrediction1DOABuilds.forEach((r) => {
			prediction1DOABuilds.push(r.serialNumber)
		})

		predictionClaimsDOA = []
		rawPredictionClaimsDOA.forEach((c) => {
			predictionClaimsDOA.push(c.name)
		})
		rawPredictionClaims1DOA.forEach((c) => {
			predictionClaimsDOA.push(c.name)
		})

		doaNoDuplicates = [...new Set(predictionClaimsDOA)]

		pred1DOA = (predictionClaimsDOA.length / prediction1DOABuilds.length).toFixed(3)
		pred1DOARft = 100 - Math.round((doaNoDuplicates.length / prediction1DOABuilds.length) * 100) || 0
		// get claims for doa rft & prediction 1

		// get claims for prediction 2 doa
		rawPredictionClaimsDOA2 = await Claim.aggregate([
			{
				$match: {
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
					name: {
						$in: totalPrediction1DOABuildsTwo,
					},
					area: area,
					$or: [{ buildDate: { $regex: oneMonthAgo } }],
					tPeriod: {
						$in: ['DOA'],
					},
					outcome: {
						$nin: ['Reject', 'Z Code'],
					},
				},
			},
		])
		// get reject & Z code pre t3 claims that have not been actioned
		rawPredictionClaims1DOA2 = await Claim.aggregate([
			{
				$match: {
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
					name: {
						$in: totalPrediction1DOABuildsTwo,
					},
					area: area,
					$or: [{ buildDate: { $regex: oneMonthAgo } }],
					tPeriod: {
						$in: ['DOA'],
					},
					actioned: { $ne: 'Yes' },
					outcome: {
						$in: ['Reject', 'Z Code'],
					},
				},
			},
		])

		prediction1DOABuilds2 = []
		totalPrediction1DOABuilds2.forEach((r) => {
			prediction1DOABuilds2.push(r.serialNumber)
		})

		let predictionClaimsDOA2 = []
		rawPredictionClaimsDOA2.forEach((c) => {
			predictionClaimsDOA2.push(c.name)
		})
		rawPredictionClaims1DOA2.forEach((c) => {
			predictionClaimsDOA2.push(c.name)
		})

		doaNoDuplicates2 = [...new Set(predictionClaimsDOA2)]

		pred2DOA = (predictionClaimsDOA2.length / prediction1DOABuilds2.length).toFixed(3)
		pred2DOARft = 100 - Math.round((doaNoDuplicates2.length / prediction1DOABuilds2.length) * 100) || 0
	}

	const fourCParts = await Claim.find(
		{
			fourC: 'Yes',
			status: 'Open',
			// tPeriod  : {
			// 	$in : [ 'DOA', 'T000', 'T001', 'T002', 'T003' ],
			// },
			division: {
				$in: division,
			},
			outcome: {
				$nin: ['Reject', 'Z Code'],
			},
		},
		{ failedPart: 1, _id: 0 }
	)

	const fourCPartNumbers = fourCParts.map((claim) => claim.failedPart)

	const doaPartsForGraph = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				failedPart: { $nin: fourCPartNumbers },
				tPeriod: 'DOA',
				outcome: {
					$nin: ['Reject', 'Z Code'],
				},
				vettedAt: { $gte: nineMOnthsAgo },
			},
		},
		{
			$project: {
				_id: {
					year: {
						$substrCP: ['$buildDate', 6, 4],
					},
					month: {
						$substrCP: ['$buildDate', 3, 2],
					},

					// failedPart : '$failedPart',
				},
				status: 1,
			},
		},
		{
			$group: {
				_id: '$_id',
				status: { $push: '$status' },
				count: {
					$sum: 1,
				},
			},
		},
	])

	eightMonthsAgoClaimsDOA = await Claim.countDocuments({
		division: {
			$in: division,
		},
		tPeriod: 'DOA',
		buildDate: { $regex: eightMonthsAgo },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})

	sevenMonthsAgoClaimsDOA = await Claim.countDocuments({
		division: {
			$in: division,
		},
		tPeriod: 'DOA',
		buildDate: { $regex: sevenMonthsAgo },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})

	sixMonthsAgoClaimsDOA = await Claim.countDocuments({
		division: {
			$in: division,
		},
		tPeriod: 'DOA',
		buildDate: { $regex: sixMonthsAgo },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})

	fiveMonthsAgoClaimsDOA = await Claim.countDocuments({
		division: {
			$in: division,
		},
		tPeriod: 'DOA',
		buildDate: { $regex: fiveMonthsAgo },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})
	fourMonthsAgoClaimsDOA = await Claim.countDocuments({
		division: {
			$in: division,
		},
		tPeriod: 'DOA',
		buildDate: { $regex: fourMonthsAgo },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})
	threeMonthsAgoClaimsDOA = await Claim.countDocuments({
		division: {
			$in: division,
		},
		tPeriod: 'DOA',
		buildDate: { $regex: threeMonthsAgo },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})

	twoMonthsAgoClaimsDOA = await Claim.countDocuments({
		division: {
			$in: division,
		},
		tPeriod: 'DOA',
		buildDate: { $regex: twoMonthsAgo },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})

	oneMonthAgoClaimsDOA = await Claim.countDocuments({
		division: {
			$in: division,
		},
		tPeriod: 'DOA',
		buildDate: { $regex: oneMonthAgo },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})

	let eightMonthAgoClosedDPU = 0
	let eightMonthAgoContainedDPU = 0
	let eightMonthAgoMissedDPU = 0

	let sevenMonthAgoClosedDPU = 0
	let sevenMonthAgoContainedDPU = 0
	let sevenMonthAgoMissedDPU = 0

	let sixMonthAgoClosedDPU = 0
	let sixMonthAgoContainedDPU = 0
	let sixMonthAgoMissedDPU = 0

	let fiveMonthAgoClosedDPU = 0
	let fiveMonthAgoContainedDPU = 0
	let fiveMonthAgoMissedDPU = 0

	let fourMonthAgoClosedDPU = 0
	let fourMonthAgoContainedDPU = 0
	let fourMonthAgoMissedDPU = 0

	let threeMonthAgoClosedDPU = 0
	let threeMonthAgoContainedDPU = 0
	let threeMonthAgoMissedDPU = 0

	let twoMonthAgoClosedDPU = 0
	let twoMonthAgoContainedDPU = 0
	let twoMonthAgoMissedDPU = 0

	let oneMonthAgoClosedDPU = 0
	let oneMonthAgoContainedDPU = 0
	let oneMonthAgoMissedDPU = 0

	for (let p of doaPartsForGraph) {
		if (p._id.month === eightMonthsAgoNumber && p._id.year === eightMonthsAgoNumberY) {
			eightMonthAgoClosedDPU = ((+graph[4].stat / 100) * ((countOccurrences(p.status, 'Closed') / eightMonthsAgoClaimsDOA) * 100)).toFixed(3)
			eightMonthAgoContainedDPU = ((+graph[4].stat / 100) * ((countOccurrences(p.status, 'Contained') / eightMonthsAgoClaimsDOA) * 100)).toFixed(3)
			eightMonthAgoMissedDPU = ((+graph[4].stat / 100) * ((countOccurrences(p.status, 'Open') / eightMonthsAgoClaimsDOA) * 100)).toFixed(3)
		}
		if (p._id.month === sevenMonthsAgoNumber && p._id.year === sevenMonthsAgoNumberY) {
			sevenMonthAgoClosedDPU = ((+graph[5].stat / 100) * ((countOccurrences(p.status, 'Closed') / sevenMonthsAgoClaimsDOA) * 100)).toFixed(3)
			sevenMonthAgoContainedDPU = ((+graph[5].stat / 100) * ((countOccurrences(p.status, 'Contained') / sevenMonthsAgoClaimsDOA) * 100)).toFixed(3)
			sevenMonthAgoMissedDPU = ((+graph[5].stat / 100) * ((countOccurrences(p.status, 'Open') / sevenMonthsAgoClaimsDOA) * 100)).toFixed(3)
		}
		if (p._id.month === sixMonthsAgoNumber && p._id.year === sixMonthsAgoNumberY) {
			sixMonthAgoClosedDPU = ((+graph[6].stat / 100) * ((countOccurrences(p.status, 'Closed') / sixMonthsAgoClaimsDOA) * 100)).toFixed(3)
			sixMonthAgoContainedDPU = ((+graph[6].stat / 100) * ((countOccurrences(p.status, 'Contained') / sixMonthsAgoClaimsDOA) * 100)).toFixed(3)
			sixMonthAgoMissedDPU = ((+graph[6].stat / 100) * ((countOccurrences(p.status, 'Open') / sixMonthsAgoClaimsDOA) * 100)).toFixed(3)
		}
		if (p._id.month === fiveMonthsAgoNumber && p._id.year === fiveMonthsAgoNumberY) {
			fiveMonthAgoClosedDPU = ((+graph[7].stat / 100) * ((countOccurrences(p.status, 'Closed') / fiveMonthsAgoClaimsDOA) * 100)).toFixed(3)
			fiveMonthAgoContainedDPU = ((+graph[7].stat / 100) * ((countOccurrences(p.status, 'Contained') / fiveMonthsAgoClaimsDOA) * 100)).toFixed(3)
			fiveMonthAgoMissedDPU = ((+graph[7].stat / 100) * ((countOccurrences(p.status, 'Open') / fiveMonthsAgoClaimsDOA) * 100)).toFixed(3)
		}
		if (p._id.month === fourMonthsAgoNumber && p._id.year === fourMonthsAgoNumberY) {
			fourMonthAgoClosedDPU = ((+graph[8].stat / 100) * ((countOccurrences(p.status, 'Closed') / fourMonthsAgoClaimsDOA) * 100)).toFixed(3)
			fourMonthAgoContainedDPU = ((+graph[8].stat / 100) * ((countOccurrences(p.status, 'Contained') / fourMonthsAgoClaimsDOA) * 100)).toFixed(3)
			fourMonthAgoMissedDPU = ((+graph[8].stat / 100) * ((countOccurrences(p.status, 'Open') / fourMonthsAgoClaimsDOA) * 100)).toFixed(3)
		}
		if (p._id.month === threeMonthsAgoNumber && p._id.year === threeMonthsAgoNumberY) {
			threeMonthAgoClosedDPU = ((+graph[9].stat / 100) * ((countOccurrences(p.status, 'Closed') / threeMonthsAgoClaimsDOA) * 100)).toFixed(3)
			threeMonthAgoContainedDPU = ((+graph[9].stat / 100) * ((countOccurrences(p.status, 'Contained') / threeMonthsAgoClaimsDOA) * 100)).toFixed(3)
			threeMonthAgoMissedDPU = ((+graph[9].stat / 100) * ((countOccurrences(p.status, 'Open') / threeMonthsAgoClaimsDOA) * 100)).toFixed(3)
		}
		if (p._id.month === twoMonthsAgoNumber && p._id.year === twoMonthsAgoNumberY) {
			twoMonthAgoClosedDPU = ((+pred1DOA / 100) * ((countOccurrences(p.status, 'Closed') / twoMonthsAgoClaimsDOA) * 100)).toFixed(3)
			twoMonthAgoContainedDPU = ((+pred1DOA / 100) * ((countOccurrences(p.status, 'Contained') / twoMonthsAgoClaimsDOA) * 100)).toFixed(3)
			twoMonthAgoMissedDPU = ((+pred1DOA / 100) * ((countOccurrences(p.status, 'Open') / twoMonthsAgoClaimsDOA) * 100)).toFixed(3)
		}
		if (p._id.month === oneMonthAgoNumber && p._id.year === oneMonthAgoNumberY) {
			oneMonthAgoClosedDPU = ((+pred2DOA / 100) * ((countOccurrences(p.status, 'Closed') / oneMonthAgoClaimsDOA) * 100)).toFixed(3)
			oneMonthAgoContainedDPU = ((+pred2DOA / 100) * ((countOccurrences(p.status, 'Contained') / oneMonthAgoClaimsDOA) * 100)).toFixed(3)
			oneMonthAgoMissedDPU = ((+pred2DOA / 100) * ((countOccurrences(p.status, 'Open') / oneMonthAgoClaimsDOA) * 100)).toFixed(3)
		}
	}

	const eightMonthAgoOpenDPU = (+graph[4].stat - eightMonthAgoClosedDPU - eightMonthAgoContainedDPU - eightMonthAgoMissedDPU).toFixed(3)

	const sevenMonthAgoOpenDPU = (+graph[5].stat - sevenMonthAgoClosedDPU - sevenMonthAgoContainedDPU - sevenMonthAgoMissedDPU).toFixed(3)

	const sixMonthAgoOpenDPU = (+graph[6].stat - sixMonthAgoClosedDPU - sixMonthAgoContainedDPU - sixMonthAgoMissedDPU).toFixed(3)

	const fiveMonthAgoOpenDPU = (+graph[7].stat - fiveMonthAgoClosedDPU - fiveMonthAgoContainedDPU - fiveMonthAgoMissedDPU).toFixed(3)

	const fourMonthAgoOpenDPU = (+graph[8].stat - fourMonthAgoClosedDPU - fourMonthAgoContainedDPU - fourMonthAgoMissedDPU).toFixed(3)

	const threeMonthAgoOpenDPU = (+graph[9].stat - threeMonthAgoClosedDPU - threeMonthAgoContainedDPU - threeMonthAgoMissedDPU).toFixed(3)

	const twoMonthAgoOpenDPU = (+pred1DOA - twoMonthAgoClosedDPU - twoMonthAgoContainedDPU - twoMonthAgoMissedDPU).toFixed(3)

	const oneMonthAgoOpenDPU = (+pred2DOA - oneMonthAgoClosedDPU - oneMonthAgoContainedDPU - oneMonthAgoMissedDPU).toFixed(3)

	//T3 split

	let t3Periods = ['T000', 'T001', 'T002', 'T003']

	const t3PartsForGraph = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				failedPart: { $nin: fourCPartNumbers },
				tPeriod: { $in: t3Periods },
				outcome: {
					$nin: ['Reject', 'Z Code'],
				},
				vettedAt: { $gte: nineMOnthsAgo },
			},
		},
		{
			$project: {
				_id: {
					year: {
						$substrCP: ['$buildDate', 6, 4],
					},
					month: {
						$substrCP: ['$buildDate', 3, 2],
					},
				},
				status: 1,
			},
		},
		{
			$group: {
				_id: '$_id',
				status: { $push: '$status' },
				count: {
					$sum: 1,
				},
			},
		},
	])

	// sep-20
	eightMonthsAgoClaimsT3 = await Claim.countDocuments({
		division: {
			$in: division,
		},
		tPeriod: { $in: t3Periods },
		buildDate: { $regex: eightMonthsAgo },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})

	sevenMonthsAgoClaimsT3 = await Claim.countDocuments({
		division: {
			$in: division,
		},
		tPeriod: { $in: t3Periods },
		buildDate: { $regex: sevenMonthsAgo },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})
	sixMonthsAgoClaimsT3 = await Claim.countDocuments({
		division: {
			$in: division,
		},
		tPeriod: { $ne: 'DOA' },
		buildDate: { $regex: sixMonthsAgo },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})
	fiveMonthsAgoClaimsT3 = await Claim.countDocuments({
		division: {
			$in: division,
		},
		tPeriod: { $ne: 'DOA' },
		buildDate: { $regex: fiveMonthsAgo },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})
	fourMonthsAgoClaimsT3 = await Claim.countDocuments({
		division: {
			$in: division,
		},
		tPeriod: { $ne: 'DOA' },
		buildDate: { $regex: fourMonthsAgo },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})
	threeMonthsAgoClaimsT3 = await Claim.countDocuments({
		division: {
			$in: division,
		},
		tPeriod: { $ne: 'DOA' },
		buildDate: { $regex: threeMonthsAgo },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})
	twoMonthsAgoClaimsT3 = await Claim.countDocuments({
		division: {
			$in: division,
		},
		tPeriod: { $ne: 'DOA' },
		buildDate: { $regex: twoMonthsAgo },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})

	let eightMonthAgoClosedDPUT3 = 0
	let eightMonthAgoContainedDPUT3 = 0
	let eightMonthAgoMissedDPUT3 = 0

	let sevenMonthAgoClosedDPUT3 = 0
	let sevenMonthAgoContainedDPUT3 = 0
	let sevenMonthAgoMissedDPUT3 = 0

	let sixMonthAgoClosedDPUT3 = 0
	let sixMonthAgoContainedDPUT3 = 0
	let sixMonthAgoMissedDPUT3 = 0

	let fiveMonthAgoClosedDPUT3 = 0
	let fiveMonthAgoContainedDPUT3 = 0
	let fiveMonthAgoMissedDPUT3 = 0

	let fourMonthAgoClosedDPUT3 = 0
	let fourMonthAgoContainedDPUT3 = 0
	let fourMonthAgoMissedDPUT3 = 0

	let threeMonthAgoClosedDPUT3 = 0
	let threeMonthAgoContainedDPUT3 = 0
	let threeMonthAgoMissedDPUT3 = 0

	let twoMonthAgoClosedDPUT3 = 0
	let twoMonthAgoContainedDPUT3 = 0
	let twoMonthAgoMissedDPUT3 = 0

	for (let p of t3PartsForGraph) {
		if (p._id.month === eightMonthsAgoNumber && p._id.year === eightMonthsAgoNumberY) {
			eightMonthAgoClosedDPUT3 = ((+graph[40].stat / 100) * ((countOccurrences(p.status, 'Closed') / eightMonthsAgoClaimsT3) * 100)).toFixed(3)
			eightMonthAgoContainedDPUT3 = ((+graph[40].stat / 100) * ((countOccurrences(p.status, 'Contained') / eightMonthsAgoClaimsT3) * 100)).toFixed(3)
			eightMonthAgoMissedDPUT3 = ((+graph[40].stat / 100) * ((countOccurrences(p.status, 'Open') / eightMonthsAgoClaimsT3) * 100)).toFixed(3)
		}
		if (p._id.month === sevenMonthsAgoNumber && p._id.year === sevenMonthsAgoNumberY) {
			sevenMonthAgoClosedDPUT3 = ((+graph[41].stat / 100) * ((countOccurrences(p.status, 'Closed') / sevenMonthsAgoClaimsT3) * 100)).toFixed(3)
			sevenMonthAgoContainedDPUT3 = ((+graph[41].stat / 100) * ((countOccurrences(p.status, 'Contained') / sevenMonthsAgoClaimsT3) * 100)).toFixed(3)
			sevenMonthAgoMissedDPUT3 = ((+graph[41].stat / 100) * ((countOccurrences(p.status, 'Open') / sevenMonthsAgoClaimsT3) * 100)).toFixed(3)
		}
		if (p._id.month === sixMonthsAgoNumber && p._id.year === sixMonthsAgoNumberY) {
			sixMonthAgoClosedDPUT3 = ((+graph[42].stat / 100) * ((countOccurrences(p.status, 'Closed') / sixMonthsAgoClaimsT3) * 100)).toFixed(3)
			sixMonthAgoContainedDPUT3 = ((+graph[42].stat / 100) * ((countOccurrences(p.status, 'Contained') / sixMonthsAgoClaimsT3) * 100)).toFixed(3)
			sixMonthAgoMissedDPUT3 = ((+graph[42].stat / 100) * ((countOccurrences(p.status, 'Open') / sixMonthsAgoClaimsT3) * 100)).toFixed(3)
		}
		if (p._id.month === fiveMonthsAgoNumber && p._id.year === fiveMonthsAgoNumberY) {
			fiveMonthAgoClosedDPUT3 = ((+graph[43].stat / 100) * ((countOccurrences(p.status, 'Closed') / fiveMonthsAgoClaimsT3) * 100)).toFixed(3)
			fiveMonthAgoContainedDPUT3 = ((+graph[43].stat / 100) * ((countOccurrences(p.status, 'Contained') / fiveMonthsAgoClaimsT3) * 100)).toFixed(3)
			fiveMonthAgoMissedDPUT3 = ((+graph[43].stat / 100) * ((countOccurrences(p.status, 'Open') / fiveMonthsAgoClaimsT3) * 100)).toFixed(3)
		}
		if (p._id.month === fourMonthsAgoNumber && p._id.year === fourMonthsAgoNumberY) {
			fourMonthAgoClosedDPUT3 = ((+prediction1 / 100) * ((countOccurrences(p.status, 'Closed') / fourMonthsAgoClaimsT3) * 100)).toFixed(3)
			fourMonthAgoContainedDPUT3 = ((+prediction1 / 100) * ((countOccurrences(p.status, 'Contained') / fourMonthsAgoClaimsT3) * 100)).toFixed(3)
			fourMonthAgoMissedDPUT3 = ((+prediction1 / 100) * ((countOccurrences(p.status, 'Open') / fourMonthsAgoClaimsT3) * 100)).toFixed(3)
		}
		if (p._id.month === threeMonthsAgoNumber && p._id.year === threeMonthsAgoNumberY) {
			threeMonthAgoClosedDPUT3 = ((+prediction2 / 100) * ((countOccurrences(p.status, 'Closed') / threeMonthsAgoClaimsT3) * 100)).toFixed(3)
			threeMonthAgoContainedDPUT3 = ((+prediction2 / 100) * ((countOccurrences(p.status, 'Contained') / threeMonthsAgoClaimsT3) * 100)).toFixed(3)
			threeMonthAgoMissedDPUT3 = ((+prediction2 / 100) * ((countOccurrences(p.status, 'Open') / threeMonthsAgoClaimsT3) * 100)).toFixed(3)
		}
		if (p._id.month === twoMonthsAgoNumber && p._id.year === twoMonthsAgoNumberY) {
			twoMonthAgoClosedDPUT3 = ((+prediction3 / 100) * ((countOccurrences(p.status, 'Closed') / twoMonthsAgoClaimsT3) * 100)).toFixed(3)
			twoMonthAgoContainedDPUT3 = ((+prediction3 / 100) * ((countOccurrences(p.status, 'Contained') / twoMonthsAgoClaimsT3) * 100)).toFixed(3)
			twoMonthAgoMissedDPUT3 = ((+prediction3 / 100) * ((countOccurrences(p.status, 'Open') / twoMonthsAgoClaimsT3) * 100)).toFixed(3)
		}
	}

	const eightMonthAgoOpenDPUT3 = (+graph[40].stat - eightMonthAgoClosedDPUT3 - eightMonthAgoContainedDPUT3 - eightMonthAgoMissedDPUT3).toFixed(3)

	const sevenMonthAgoOpenDPUT3 = (+graph[41].stat - sevenMonthAgoClosedDPUT3 - sevenMonthAgoContainedDPUT3 - sevenMonthAgoMissedDPUT3).toFixed(3)

	const sixMonthAgoOpenDPUT3 = (+graph[42].stat - sixMonthAgoClosedDPUT3 - sixMonthAgoContainedDPUT3 - sixMonthAgoMissedDPUT3).toFixed(3)

	const fiveMonthAgoOpenDPUT3 = (+graph[43].stat - fiveMonthAgoClosedDPUT3 - fiveMonthAgoContainedDPUT3 - fiveMonthAgoMissedDPUT3).toFixed(3)

	const fourMonthAgoOpenDPUT3 = (prediction1 - fourMonthAgoClosedDPUT3 - fourMonthAgoContainedDPUT3 - fourMonthAgoMissedDPUT3).toFixed(3)

	const threeMonthAgoOpenDPUT3 = (prediction2 - threeMonthAgoClosedDPUT3 - threeMonthAgoContainedDPUT3 - threeMonthAgoMissedDPUT3).toFixed(3)

	const twoMonthAgoOpenDPUT3 = (prediction3 - twoMonthAgoClosedDPUT3 - twoMonthAgoContainedDPUT3 - twoMonthAgoMissedDPUT3).toFixed(3)

	// ----------------------------------------------------- rft --------------------------------------------------

	const todayDB = new Date()
	todayDB.setHours(0, 0, 0, 0)

	let divForMongo = []
	let divForQ = []
	let theSipStations = []
	let allSips = []
	let removalsMongo = []
	let removes = []

	if (division.includes('HBU')) {
		divForMongo = [...allSips]
		removalsMongo.push('Hydraulic Business Unit')
	}
	if (division.includes('Cabs')) {
		removalsMongo.push('Cab Systems')
	}

	const removesArray = await Remove.find({ division: { $in: removalsMongo } })

	for (let r of removesArray) {
		removes.push(r.name)
	}

	const allSipArray = await QSmart.aggregate([
		{
			$group: {
				_id: '$Fault Area',
			},
		},
	])
	for (let s of allSipArray) {
		allSips.push(s._id)
	}

	if (division.includes('HBU')) {
		divForMongo = [...allSips]
		divForQ.push('Hydraulic Business Unit')
	}
	if (division.includes('Cabs')) {
		divForMongo.push('Cab Systems')
		divForQ.push('Cab Systems')
	}

	const theSipStationsArray = await QSmart.aggregate([
		{
			$match: {
				['Created Date']: { $gt: todayDB },
				['Fault Area']: { $in: divForMongo },
			},
		},
		{
			$group: {
				_id: '$Zone',
			},
		},
	])

	for (let s of theSipStationsArray) {
		theSipStations.push(s._id)
	}

	// Backhoe

	const allFaultsTodayBHL = await QSmart.aggregate([
		{
			$match: {
				['Created Date']: { $gt: todayDB },
				['Business Unit']: 'Backhoe Loader',
				Zone: { $in: theSipStations },
				Model: { $nin: removes },
			},
		},
		{
			$group: {
				_id: '$Build Number',
			},
		},
	])
	const allFaultsTodayForDivBHL = await QSmart.aggregate([
		{
			$match: {
				['Created Date']: { $gt: todayDB },
				['Business Unit']: 'Backhoe Loader',
				Zone: { $in: theSipStations },
				['Fault Area']: { $in: divForQ },
				Model: { $nin: removes },
			},
		},
		{
			$group: {
				_id: '$Build Number',
			},
		},
	])

	if (allFaultsTodayBHL.length > 0) {
		rftBHL = Math.round(100 - (allFaultsTodayForDivBHL.length / allFaultsTodayBHL.length) * 100)
	} else {
		rftBHL = 0
	}

	// Compact Products

	const allFaultsTodayCP = await QSmart.aggregate([
		{
			$match: {
				['Created Date']: { $gt: todayDB },
				['Business Unit']: 'Compact Products',
				Zone: { $in: theSipStations },
				Model: { $nin: removes },
			},
		},
		{
			$group: {
				_id: '$Build Number',
			},
		},
	])
	const allFaultsTodayForDivCP = await QSmart.aggregate([
		{
			$match: {
				['Created Date']: { $gt: todayDB },
				['Business Unit']: 'Compact Products',
				Zone: { $in: theSipStations },
				['Fault Area']: { $in: divForQ },
				Model: { $nin: removes },
			},
		},
		{
			$group: {
				_id: '$Build Number',
			},
		},
	])

	if (allFaultsTodayCP.length > 0) {
		rftCP = Math.round(100 - (allFaultsTodayForDivCP.length / allFaultsTodayCP.length) * 100)
	} else {
		rftCP = 0
	}

	//  heavy products

	const allFaultsTodayHP = await QSmart.aggregate([
		{
			$match: {
				['Created Date']: { $gt: todayDB },
				['Business Unit']: 'Heavy Products',
				Zone: { $in: theSipStations },
				Model: { $nin: removes },
			},
		},
		{
			$group: {
				_id: '$Build Number',
			},
		},
	])
	const allFaultsTodayForDivHP = await QSmart.aggregate([
		{
			$match: {
				['Created Date']: { $gt: todayDB },
				['Business Unit']: 'Heavy Products',
				Zone: { $in: theSipStations },
				['Fault Area']: { $in: divForQ },
				Model: { $nin: removes },
			},
		},
		{
			$group: {
				_id: '$Build Number',
			},
		},
	])

	if (allFaultsTodayHP.length > 0) {
		rftHP = Math.round(100 - (allFaultsTodayForDivHP.length / allFaultsTodayHP.length) * 100)
	} else {
		rftHP = 0
	}

	// loadall

	const allFaultsTodayLDL = await QSmart.aggregate([
		{
			$match: {
				['Created Date']: { $gt: todayDB },
				['Business Unit']: 'Loadall',
				Zone: { $in: theSipStations },
				Model: { $nin: removes },
			},
		},
		{
			$group: {
				_id: '$Build Number',
			},
		},
	])
	const allFaultsTodayForDivLDL = await QSmart.aggregate([
		{
			$match: {
				['Created Date']: { $gt: todayDB },
				['Business Unit']: 'Loadall',
				Zone: { $in: theSipStations },
				['Fault Area']: { $in: divForQ },
				Model: { $nin: removes },
			},
		},
		{
			$group: {
				_id: '$Build Number',
			},
		},
	])

	if (allFaultsTodayLDL.length > 0) {
		rftLDL = Math.round(100 - (allFaultsTodayForDivLDL.length / allFaultsTodayLDL.length) * 100)
	} else {
		rftLDL = 0
	}

	// site dumper

	const allFaultsTodaySD = await QSmart.aggregate([
		{
			$match: {
				['Created Date']: { $gt: todayDB },
				['Business Unit']: 'Site Dumper',
				Zone: { $in: theSipStations },
				Model: { $nin: removes },
			},
		},
		{
			$group: {
				_id: '$Build Number',
			},
		},
	])
	const allFaultsTodayForDivSD = await QSmart.aggregate([
		{
			$match: {
				['Created Date']: { $gt: todayDB },
				['Business Unit']: 'Site Dumper',
				Zone: { $in: theSipStations },
				['Fault Area']: { $in: divForQ },
				Model: { $nin: removes },
			},
		},
		{
			$group: {
				_id: '$Build Number',
			},
		},
	])

	if (allFaultsTodaySD.length > 0) {
		rftSD = Math.round(100 - (allFaultsTodayForDivSD.length / allFaultsTodaySD.length) * 100)
	} else {
		rftSD = 0
	}

	const allAtBHL = allFaultsTodayBHL.length
	const machinesRftAtBHL = allFaultsTodayBHL.length - allFaultsTodayForDivBHL.length
	const allAtCP = allFaultsTodayCP.length
	const machinesRftAtCP = allFaultsTodayCP.length - allFaultsTodayForDivCP.length
	const allAtHP = allFaultsTodayHP.length
	const machinesRftAtHP = allFaultsTodayHP.length - allFaultsTodayForDivHP.length
	const allAtLDL = allFaultsTodayLDL.length
	const machinesRftAtLDL = allFaultsTodayLDL.length - allFaultsTodayForDivLDL.length
	const allAtSD = allFaultsTodaySD.length
	const machinesRftAtSD = allFaultsTodaySD.length - allFaultsTodayForDivSD.length

	let allMachines = allAtBHL + allAtCP + allAtHP + allAtLDL + allAtSD
	let rftMachines = machinesRftAtBHL + machinesRftAtCP + machinesRftAtHP + machinesRftAtLDL + machinesRftAtSD

	if (division.includes('HBU')) {
		allMachines = allAtBHL + allAtCP + allAtHP + allAtLDL
		rftMachines = machinesRftAtBHL + machinesRftAtCP + machinesRftAtHP + machinesRftAtLDL
	}

	if (allMachines > 0) {
		rftGroup = Math.round((rftMachines / allMachines) * 100)
	} else {
		rftGroup = 0
	}

	const predictions = await Prediction.find({ division: { $in: division } })
	// console.log(predictions)

	if (Array.isArray(division) && division.length > 1) {
		division = 'GROUP'
	}

	res.render('dash/divisionDoa', {
		predictions,
		allAtBHL,
		machinesRftAtBHL,
		rftBHL,
		allAtCP,
		machinesRftAtCP,
		rftCP,
		allAtHP,
		machinesRftAtHP,
		rftHP,
		allAtLDL,
		machinesRftAtLDL,
		rftLDL,
		allAtSD,
		machinesRftAtSD,
		rftSD,
		allMachines,
		rftMachines,
		rftGroup,
		//
		division,
		figure,
		pred2DOA,
		pred1DOARft,
		pred1DOA,
		pred2DOARft,
		countOfRepeatsLast30Days,
		countOfRepeatsBeforeLast30Days,
		graph,
		doaOpenNum,
		doaContainedNum,
		doaClosedNum,
		t3OpenNum,
		t3ContainedNum,
		t3ClosedNum,
		intOpenNum,
		intContainedNum,
		intClosedNum,
		totFourC,
		signOutLast90Days,
		claimsLast90Days,
		dealerClaimsInLast90Days,
		top10DealersInLast90DaysCount,
		dealerTop10Percent,
		dpuMonth,
		pre1FailedMachines,
		pre1GoodMachines,
		pre1RFT,
		pre2FailedMachines,
		pre2GoodMachines,
		pre2RFT,
		pre3FailedMachines,
		pre3GoodMachines,
		pre3RFT,
		pre1Builds,
		pre1Sold,
		pre1NotSold,
		pre1Claims,
		pre1Retails,
		prediction1,
		pre2Builds,
		pre2Sold,
		pre2NotSold,
		pre2Claims,
		pre2Retails,
		prediction2,
		pre3Builds,
		pre3Sold,
		pre3NotSold,
		pre3Claims,
		pre3Retails,
		prediction3,
		////////start of left side////////////////////
		preT3Stamping,
		preT3Model,
		preT3PartsAssembly,
		preT3PartsSupplier,
		preT3PartsDesign,
		assemblyPercent,
		supplierPercent,
		designPercent,
		// new graph
		eightMonthAgoClosedDPU,
		eightMonthAgoContainedDPU,
		eightMonthAgoOpenDPU,
		eightMonthAgoMissedDPU,
		sevenMonthAgoClosedDPU,
		sevenMonthAgoContainedDPU,
		sevenMonthAgoOpenDPU,
		sevenMonthAgoMissedDPU,
		sixMonthAgoClosedDPU,
		sixMonthAgoContainedDPU,
		sixMonthAgoOpenDPU,
		sixMonthAgoMissedDPU,
		fiveMonthAgoClosedDPU,
		fiveMonthAgoContainedDPU,
		fiveMonthAgoOpenDPU,
		fiveMonthAgoMissedDPU,
		fourMonthAgoClosedDPU,
		fourMonthAgoContainedDPU,
		fourMonthAgoOpenDPU,
		fourMonthAgoMissedDPU,
		threeMonthAgoClosedDPU,
		threeMonthAgoContainedDPU,
		threeMonthAgoOpenDPU,
		threeMonthAgoMissedDPU,
		eightMonthAgoClosedDPUT3,
		eightMonthAgoContainedDPUT3,
		eightMonthAgoOpenDPUT3,
		eightMonthAgoMissedDPUT3,
		sevenMonthAgoClosedDPUT3,
		sevenMonthAgoContainedDPUT3,
		sevenMonthAgoOpenDPUT3,
		sevenMonthAgoMissedDPUT3,
		sixMonthAgoClosedDPUT3,
		sixMonthAgoContainedDPUT3,
		sixMonthAgoOpenDPUT3,
		sixMonthAgoMissedDPUT3,
		fiveMonthAgoClosedDPUT3,
		fiveMonthAgoContainedDPUT3,
		fiveMonthAgoOpenDPUT3,
		fiveMonthAgoMissedDPUT3,

		twoMonthAgoMissedDPU,
		twoMonthAgoOpenDPU,
		twoMonthAgoContainedDPU,
		twoMonthAgoClosedDPU,
		oneMonthAgoMissedDPU,
		oneMonthAgoOpenDPU,
		oneMonthAgoContainedDPU,
		oneMonthAgoClosedDPU,

		twoMonthAgoMissedDPUT3,
		twoMonthAgoContainedDPUT3,
		twoMonthAgoOpenDPUT3,
		twoMonthAgoClosedDPUT3,
		threeMonthAgoMissedDPUT3,
		threeMonthAgoContainedDPUT3,
		threeMonthAgoOpenDPUT3,
		threeMonthAgoClosedDPUT3,
		fourMonthAgoMissedDPUT3,
		fourMonthAgoContainedDPUT3,
		fourMonthAgoOpenDPUT3,
		fourMonthAgoClosedDPUT3,
	})
}

// inspector

module.exports.inspector = async (req, res) => {
	let { division } = req.params
	if (division === 'GROUP') {
		division = ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL']
	} else {
		division = [division]
	}

	let graphOptions = []

	if (division.length < 2) {
		graphOptions = [...division]
	}
	if (division.length > 1) {
		graphOptions = ['GROUP']
	}

	// console.log(graphOptions);

	// console.log(division.length);

	// get the division figures
	const dpuMonth = moment().subtract(0, 'months').format('MMM-YY')
	const figure = await Figure.find({
		division: {
			$in: graphOptions,
		},
	})
	const graph = await Graph.find({
		division: {
			$in: graphOptions,
		},
	})

	// open DOA 4C's
	const doaOpenNum = await Claim.countDocuments({
		division: {
			$in: division,
		},
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Open',
		tPeriod: 'DOA',
	})
	// contained DOA 4C's
	const doaContainedNum = await Claim.countDocuments({
		division: {
			$in: division,
		},
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Contained',
		tPeriod: 'DOA',
	})
	// closed DOA 4C's
	const doaClosedNum = await Claim.countDocuments({
		division: {
			$in: division,
		},
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Closed',
		tPeriod: 'DOA',
	})

	// open T3 4C's
	const t3OpenNum = await Claim.countDocuments({
		division: {
			$in: division,
		},
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Open',
		tPeriod: {
			$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
		},
	})
	// Contained T3 4C's
	const t3ContainedNum = await Claim.countDocuments({
		division: {
			$in: division,
		},
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Contained',
		tPeriod: {
			$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
		},
	})

	// Closed T3 4C's
	const t3ClosedNum = await Claim.countDocuments({
		division: {
			$in: division,
		},
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Closed',
		tPeriod: {
			$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
		},
	})

	// open internal 4C's
	const intOpenNum = await Claim.countDocuments({
		division: {
			$in: division,
		},
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Open',
		claimNumber: {
			$in: ['Internal Techweb', 'Leak Techweb'],
		},
	})
	// contained internal 4C's
	const intContainedNum = await Claim.countDocuments({
		division: {
			$in: division,
		},
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Contained',
		claimNumber: {
			$in: ['Internal Techweb', 'Leak Techweb'],
		},
	})

	// closed internal 4C's
	const intClosedNum = await Claim.countDocuments({
		division: {
			$in: division,
		},
		vettedAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		fourC: 'Yes',
		status: 'Closed',
		claimNumber: {
			$in: ['Internal Techweb', 'Leak Techweb'],
		},
	})

	// signed out last 90 days
	const signOutLast90Days = await Throughput.countDocuments({
		division: {
			$in: division,
		},
		signedOutAt: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
	})

	// dealer claims on machines built last 90 days
	const claimsLast90Days = await Claim.countDocuments({
		division: {
			$in: division,
		},
		$or: [
			{ buildDate: { $regex: threeMonthsAgo } },
			{ buildDate: { $regex: twoMonthsAgo } },
			{ buildDate: { $regex: oneMonthAgo } },
			{ buildDate: { $regex: thisMonth } },
		],
		tPeriod: 'DOA',
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})

	// dealer claims received last 90 days
	const dealerClaimsInLast90Days = await Claim.countDocuments({
		division: {
			$in: division,
		},
		importedDate: {
			$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
		},
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
		tPeriod: 'DOA',
	})

	// TTop 10 dealers claims in last 90 days under 15 hours
	const top10DealersInLast90Days = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				importedDate: {
					$gte: new Date(new Date().getTime() - 90 * 24 * 60 * 60 * 1000),
				},
				tPeriod: 'DOA',
				outcome: {
					$nin: ['Reject', 'Z Code'],
				},
			},
		},
		{
			$group: {
				_id: '$dealer',
				count: { $sum: 1 },
			},
		},
		{ $sort: { count: -1, _id: 1 } },
		{ $limit: 10 },
	])

	// get list of part numbers to generate repeating submitted this year
	const doaClaimsSubmittedThisYear = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				importedDate: {
					$gte: new Date('2021-01-01T00:00:00.000Z'),
				},
				tPeriod: 'DOA',
				outcome: {
					$nin: ['Reject', 'Z Code'],
				},
			},
		},
		{
			$group: {
				_id: '$failedPart',
				count: { $sum: 1 },
			},
		},
		{ $sort: { count: -1, _id: 1 } },
	])

	// get list of part numbers to generate repeating submitted last 30 days
	const doaClaimsSubmittedLast30Days = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				importedDate: {
					$gte: new Date(new Date().getTime() - 30 * 24 * 60 * 60 * 1000),
				},
				tPeriod: 'DOA',
				outcome: {
					$nin: ['Reject', 'Z Code'],
				},
			},
		},
	])
	// get list of part numbers to generate repeating submitted before last 30 days
	const doaClaimsSubmittedBeforeLast30Days = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				importedDate: {
					$gte: new Date(new Date().getTime() - 60 * 24 * 60 * 60 * 1000),
					$lte: new Date(new Date().getTime() - 30 * 24 * 60 * 60 * 1000),
				},
				tPeriod: 'DOA',
				outcome: {
					$nin: ['Reject', 'Z Code'],
				},
			},
		},
	])

	let listOfPartsThisYear = []
	for (let p of doaClaimsSubmittedThisYear) {
		if (p.count > 1) {
			listOfPartsThisYear.push(p._id)
		}
	}
	let listOfPartsLast30Days = []
	for (let p of doaClaimsSubmittedLast30Days) {
		listOfPartsLast30Days.push(p.failedPart)
	}
	let listOfPartsBeforeLast30Days = []
	for (let p of doaClaimsSubmittedBeforeLast30Days) {
		listOfPartsBeforeLast30Days.push(p.failedPart)
	}

	let countOfRepeatsLast30Days = 0
	for (let p of listOfPartsLast30Days) {
		if (listOfPartsThisYear.indexOf(p) > -1) {
			countOfRepeatsLast30Days++
		}
	}
	let countOfRepeatsBeforeLast30Days = 0
	for (let p of listOfPartsBeforeLast30Days) {
		if (listOfPartsThisYear.indexOf(p) > -1) {
			countOfRepeatsBeforeLast30Days++
		}
	}

	let top10DealersInLast90DaysCount = 0
	top10DealersInLast90Days.forEach((m) => {
		top10DealersInLast90DaysCount += m.count
	})
	const dealerTop10Percent = Math.round((top10DealersInLast90DaysCount / dealerClaimsInLast90Days) * 100)

	const totFourC =
		doaOpenNum + doaContainedNum + doaClosedNum + t3OpenNum + t3ContainedNum + t3ClosedNum + intOpenNum + intContainedNum + intClosedNum

	// get pre t3 claims
	let rawPredictionClaims = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				$or: [{ buildDate: { $regex: fourMonthsAgo } }, { buildDate: { $regex: threeMonthsAgo } }, { buildDate: { $regex: twoMonthsAgo } }],
				tPeriod: {
					$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
				},
				outcome: {
					$nin: ['Reject', 'Z Code'],
				},
			},
		},
	])
	// get reject & Z code pre t3 claims that have not been actioned
	let rawPredictionClaims1 = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				$or: [{ buildDate: { $regex: fourMonthsAgo } }, { buildDate: { $regex: threeMonthsAgo } }, { buildDate: { $regex: twoMonthsAgo } }],
				tPeriod: {
					$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
				},
				actioned: { $ne: 'Yes' },
				outcome: {
					$in: ['Reject', 'Z Code'],
				},
			},
		},
	])

	/// ------------Prediction 1 --------------------///

	// get  total build for pre t3
	let totalBuildPrediction1 = await Retail.aggregate([
		{
			$match: {
				buildDate: { $regex: fourMonthsAgo },
				division: {
					$in: division,
				},
			},
		},
	])
	// get  total sold for pre t3
	let totalSoldPrediction1 = await Retail.aggregate([
		{
			$match: {
				buildDate: { $regex: fourMonthsAgo },
				soldDate: { $ne: '#' },
				division: {
					$in: division,
				},
			},
		},
	])

	// get total retails for pre t3
	let mriRetailsPrediction1 = await Retail.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				buildDate: { $regex: fourMonthsAgo },
				$or: [{ soldDate: { $regex: fourMonthsAgo } }, { soldDate: { $regex: threeMonthsAgo } }],
			},
		},
	])
	//work out prediction 1
	let prediction1T3Retails = []
	mriRetailsPrediction1.forEach((r) => {
		prediction1T3Retails.push(r.serialNumber)
	})

	let predictionClaims = []
	rawPredictionClaims.forEach((c) => {
		predictionClaims.push(c.name)
	})
	rawPredictionClaims1.forEach((c) => {
		predictionClaims.push(c.name)
	})

	// work out rft
	// all machines that are in T3 month 1
	let RetailsMonth1 = [prediction1T3Retails.length]
	// all claims
	let rftClaims = [...new Set(predictionClaims)]

	Compare11 = (a1, a2) => rftClaims.reduce((a, c) => a + prediction1T3Retails.includes(c), 0)
	let pre1FailedMachines = Compare11(rftClaims, prediction1T3Retails)
	let pre1GoodMachines = RetailsMonth1 - pre1FailedMachines
	let pre1RFT = Math.round((pre1GoodMachines / RetailsMonth1) * 100) || 0

	Compare1 = (a1, a2) => predictionClaims.reduce((a, c) => a + prediction1T3Retails.includes(c), 0)

	let pre1Builds = totalBuildPrediction1.length
	let pre1Sold = totalSoldPrediction1.length
	let pre1NotSold = pre1Builds - pre1Sold
	let pre1Claims = Compare1(predictionClaims, prediction1T3Retails)
	let pre1Retails = prediction1T3Retails.length
	let prediction1 = (pre1Claims / pre1Retails || 0).toFixed(3)

	/// ------------Prediction 2 --------------------///

	// get  total build for pre t3
	let totalBuildPrediction2 = await Retail.aggregate([
		{
			$match: {
				buildDate: { $regex: threeMonthsAgo },
				division: {
					$in: division,
				},
			},
		},
	])
	// get  total sold for pre t3
	let totalSoldPrediction2 = await Retail.aggregate([
		{
			$match: {
				buildDate: { $regex: threeMonthsAgo },
				soldDate: { $ne: '#' },
				division: {
					$in: division,
				},
			},
		},
	])

	// get total retails for pre t3
	let mriRetailsPrediction2 = await Retail.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				buildDate: { $regex: threeMonthsAgo },
				$or: [{ soldDate: { $regex: threeMonthsAgo } }, { soldDate: { $regex: twoMonthsAgo } }],
			},
		},
	])
	//work out prediction 2
	let prediction2T3Retails = []
	mriRetailsPrediction2.forEach((r) => {
		prediction2T3Retails.push(r.serialNumber)
	})

	// work out rft

	let RetailsMonth2 = [prediction2T3Retails.length]

	Compare12 = (a1, a2) => rftClaims.reduce((a, c) => a + prediction2T3Retails.includes(c), 0)
	let pre2FailedMachines = Compare12(rftClaims, prediction2T3Retails)
	let pre2GoodMachines = RetailsMonth2 - pre2FailedMachines
	let pre2RFT = Math.round((pre2GoodMachines / RetailsMonth2) * 100) || 0

	Compare2 = (a1, a2) => predictionClaims.reduce((a, c) => a + prediction2T3Retails.includes(c), 0)

	let pre2Builds = totalBuildPrediction2.length
	let pre2Sold = totalSoldPrediction2.length
	let pre2NotSold = pre2Builds - pre2Sold
	let pre2Claims = Compare2(predictionClaims, prediction2T3Retails)
	let pre2Retails = prediction2T3Retails.length
	let prediction2 = (pre2Claims / pre2Retails || 0).toFixed(3)

	/// ------------Prediction 3 --------------------///

	// get  total build for pre t3
	let totalBuildPrediction3 = await Retail.aggregate([
		{
			$match: {
				buildDate: { $regex: twoMonthsAgo },
				division: {
					$in: division,
				},
			},
		},
	])
	// get  total sold for pre t3
	let totalSoldPrediction3 = await Retail.aggregate([
		{
			$match: {
				buildDate: { $regex: twoMonthsAgo },
				soldDate: { $ne: '#' },
				division: {
					$in: division,
				},
			},
		},
	])

	// get total retails for pre t3
	let mriRetailsPrediction3 = await Retail.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				buildDate: { $regex: twoMonthsAgo },
				$or: [{ soldDate: { $regex: twoMonthsAgo } }, { soldDate: { $regex: oneMonthAgo } }],
			},
		},
	])
	//work out prediction 2
	let prediction3T3Retails = []
	mriRetailsPrediction3.forEach((r) => {
		prediction3T3Retails.push(r.serialNumber)
	})
	// work out rft
	let RetailsMonth3 = [prediction3T3Retails.length]

	Compare13 = (a1, a2) => rftClaims.reduce((a, c) => a + prediction3T3Retails.includes(c), 0)
	let pre3FailedMachines = Compare13(rftClaims, prediction3T3Retails)
	let pre3GoodMachines = RetailsMonth3 - pre3FailedMachines
	let pre3RFT = Math.round((pre3GoodMachines / RetailsMonth3) * 100) || 0

	Compare3 = (a1, a2) => predictionClaims.reduce((a, c) => a + prediction3T3Retails.includes(c), 0)

	let pre3Builds = totalBuildPrediction3.length
	let pre3Sold = totalSoldPrediction3.length
	let pre3NotSold = pre3Builds - pre3Sold
	let pre3Claims = Compare3(predictionClaims, prediction3T3Retails)
	let pre3Retails = prediction3T3Retails.length
	let prediction3 = (pre3Claims / pre3Retails || 0).toFixed(3)

	//HBU///

	if (division.includes('Cabs')) {
		// get pre t3 claims
		let area = 'Cabs Systems'

		rawPredictionClaims = await Claim.aggregate([
			{
				$match: {
					area: area,
					$or: [{ buildDate: { $regex: fourMonthsAgo } }, { buildDate: { $regex: threeMonthsAgo } }, { buildDate: { $regex: twoMonthsAgo } }],
					tPeriod: {
						$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
					},
					outcome: {
						$nin: ['Reject', 'Z Code'],
					},
				},
			},
		])
		// get reject & Z code pre t3 claims that have not been actioned
		rawPredictionClaims1 = await Claim.aggregate([
			{
				$match: {
					area: area,
					$or: [{ buildDate: { $regex: fourMonthsAgo } }, { buildDate: { $regex: threeMonthsAgo } }, { buildDate: { $regex: twoMonthsAgo } }],
					tPeriod: {
						$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
					},
					actioned: { $ne: 'Yes' },
					outcome: {
						$in: ['Reject', 'Z Code'],
					},
				},
			},
		])

		/// ------------Prediction 1 --------------------///

		// get  total build for pre t3
		totalBuildPrediction1 = await Retail.aggregate([
			{
				$match: {
					buildDate: { $regex: fourMonthsAgo },
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
				},
			},
		])
		// get  total sold for pre t3
		totalSoldPrediction1 = await Retail.aggregate([
			{
				$match: {
					buildDate: { $regex: fourMonthsAgo },
					soldDate: { $ne: '#' },
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
				},
			},
		])

		// get total retails for pre t3
		mriRetailsPrediction1 = await Retail.aggregate([
			{
				$match: {
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
					buildDate: { $regex: fourMonthsAgo },
					$or: [{ soldDate: { $regex: fourMonthsAgo } }, { soldDate: { $regex: threeMonthsAgo } }],
				},
			},
		])
		//work out prediction 1
		prediction1T3Retails = []
		mriRetailsPrediction1.forEach((r) => {
			prediction1T3Retails.push(r.serialNumber)
		})

		predictionClaims = []
		rawPredictionClaims.forEach((c) => {
			predictionClaims.push(c.name)
		})
		rawPredictionClaims1.forEach((c) => {
			predictionClaims.push(c.name)
		})

		// work out rft
		// all machines that are in T3 month 1
		RetailsMonth1 = [prediction1T3Retails.length]
		// all claims
		let rftClaims = [...new Set(predictionClaims)]

		Compare11 = (a1, a2) => rftClaims.reduce((a, c) => a + prediction1T3Retails.includes(c), 0)
		pre1FailedMachines = Compare11(rftClaims, prediction1T3Retails)
		pre1GoodMachines = RetailsMonth1 - pre1FailedMachines
		pre1RFT = Math.round((pre1GoodMachines / RetailsMonth1) * 100) || 0

		Compare1 = (a1, a2) => predictionClaims.reduce((a, c) => a + prediction1T3Retails.includes(c), 0)

		pre1Builds = totalBuildPrediction1.length
		pre1Sold = totalSoldPrediction1.length
		pre1NotSold = pre1Builds - pre1Sold
		pre1Claims = Compare1(predictionClaims, prediction1T3Retails)
		pre1Retails = prediction1T3Retails.length
		prediction1 = (pre1Claims / pre1Retails || 0).toFixed(3)

		/// ------------Prediction 2 --------------------///

		// get  total build for pre t3
		totalBuildPrediction2 = await Retail.aggregate([
			{
				$match: {
					buildDate: { $regex: threeMonthsAgo },
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
				},
			},
		])
		// get  total sold for pre t3
		totalSoldPrediction2 = await Retail.aggregate([
			{
				$match: {
					buildDate: { $regex: threeMonthsAgo },
					soldDate: { $ne: '#' },
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
				},
			},
		])

		// get total retails for pre t3
		mriRetailsPrediction2 = await Retail.aggregate([
			{
				$match: {
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
					buildDate: { $regex: threeMonthsAgo },
					$or: [{ soldDate: { $regex: threeMonthsAgo } }, { soldDate: { $regex: twoMonthsAgo } }],
				},
			},
		])
		//work out prediction 2
		prediction2T3Retails = []
		mriRetailsPrediction2.forEach((r) => {
			prediction2T3Retails.push(r.serialNumber)
		})

		// work out rft

		RetailsMonth2 = [prediction2T3Retails.length]

		Compare12 = (a1, a2) => rftClaims.reduce((a, c) => a + prediction2T3Retails.includes(c), 0)
		pre2FailedMachines = Compare12(rftClaims, prediction2T3Retails)
		pre2GoodMachines = RetailsMonth2 - pre2FailedMachines
		pre2RFT = Math.round((pre2GoodMachines / RetailsMonth2) * 100) || 0

		Compare2 = (a1, a2) => predictionClaims.reduce((a, c) => a + prediction2T3Retails.includes(c), 0)

		pre2Builds = totalBuildPrediction2.length
		pre2Sold = totalSoldPrediction2.length
		pre2NotSold = pre2Builds - pre2Sold
		pre2Claims = Compare2(predictionClaims, prediction2T3Retails)
		pre2Retails = prediction2T3Retails.length
		prediction2 = (pre2Claims / pre2Retails || 0).toFixed(3)

		/// ------------Prediction 3 --------------------///

		// get  total build for pre t3
		totalBuildPrediction3 = await Retail.aggregate([
			{
				$match: {
					buildDate: { $regex: twoMonthsAgo },
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
				},
			},
		])
		// get  total sold for pre t3
		totalSoldPrediction3 = await Retail.aggregate([
			{
				$match: {
					buildDate: { $regex: twoMonthsAgo },
					soldDate: { $ne: '#' },
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
				},
			},
		])

		// get total retails for pre t3
		mriRetailsPrediction3 = await Retail.aggregate([
			{
				$match: {
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
					buildDate: { $regex: twoMonthsAgo },
					$or: [{ soldDate: { $regex: twoMonthsAgo } }, { soldDate: { $regex: oneMonthAgo } }],
				},
			},
		])
		//work out prediction 2
		prediction3T3Retails = []
		mriRetailsPrediction3.forEach((r) => {
			prediction3T3Retails.push(r.serialNumber)
		})
		// work out rft
		RetailsMonth3 = [prediction3T3Retails.length]

		Compare13 = (a1, a2) => rftClaims.reduce((a, c) => a + prediction3T3Retails.includes(c), 0)
		pre3FailedMachines = Compare13(rftClaims, prediction3T3Retails)
		pre3GoodMachines = RetailsMonth3 - pre3FailedMachines
		pre3RFT = Math.round((pre3GoodMachines / RetailsMonth3) * 100) || 0

		Compare3 = (a1, a2) => predictionClaims.reduce((a, c) => a + prediction3T3Retails.includes(c), 0)

		pre3Builds = totalBuildPrediction3.length
		pre3Sold = totalSoldPrediction3.length
		pre3NotSold = pre3Builds - pre3Sold
		pre3Claims = Compare3(predictionClaims, prediction3T3Retails)
		pre3Retails = prediction3T3Retails.length
		prediction3 = (pre3Claims / pre3Retails || 0).toFixed(3)
	}

	//HBU///

	if (division.includes('HBU')) {
		// get pre t3 claims
		let area = 'HBU'

		rawPredictionClaims = await Claim.aggregate([
			{
				$match: {
					area: area,
					$or: [{ buildDate: { $regex: fourMonthsAgo } }, { buildDate: { $regex: threeMonthsAgo } }, { buildDate: { $regex: twoMonthsAgo } }],
					tPeriod: {
						$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
					},
					outcome: {
						$nin: ['Reject', 'Z Code'],
					},
				},
			},
		])
		// get reject & Z code pre t3 claims that have not been actioned
		rawPredictionClaims1 = await Claim.aggregate([
			{
				$match: {
					area: area,
					$or: [{ buildDate: { $regex: fourMonthsAgo } }, { buildDate: { $regex: threeMonthsAgo } }, { buildDate: { $regex: twoMonthsAgo } }],
					tPeriod: {
						$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
					},
					actioned: { $ne: 'Yes' },
					outcome: {
						$in: ['Reject', 'Z Code'],
					},
				},
			},
		])

		/// ------------Prediction 1 --------------------///

		// get  total build for pre t3
		totalBuildPrediction1 = await Retail.aggregate([
			{
				$match: {
					buildDate: { $regex: fourMonthsAgo },
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
				},
			},
		])
		// get  total sold for pre t3
		totalSoldPrediction1 = await Retail.aggregate([
			{
				$match: {
					buildDate: { $regex: fourMonthsAgo },
					soldDate: { $ne: '#' },
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
				},
			},
		])

		// get total retails for pre t3
		mriRetailsPrediction1 = await Retail.aggregate([
			{
				$match: {
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
					buildDate: { $regex: fourMonthsAgo },
					$or: [{ soldDate: { $regex: fourMonthsAgo } }, { soldDate: { $regex: threeMonthsAgo } }],
				},
			},
		])
		//work out prediction 1
		prediction1T3Retails = []
		mriRetailsPrediction1.forEach((r) => {
			prediction1T3Retails.push(r.serialNumber)
		})

		predictionClaims = []
		rawPredictionClaims.forEach((c) => {
			predictionClaims.push(c.name)
		})
		rawPredictionClaims1.forEach((c) => {
			predictionClaims.push(c.name)
		})

		// work out rft
		// all machines that are in T3 month 1
		RetailsMonth1 = [prediction1T3Retails.length]
		// all claims
		let rftClaims = [...new Set(predictionClaims)]

		Compare11 = (a1, a2) => rftClaims.reduce((a, c) => a + prediction1T3Retails.includes(c), 0)
		pre1FailedMachines = Compare11(rftClaims, prediction1T3Retails)
		pre1GoodMachines = RetailsMonth1 - pre1FailedMachines
		pre1RFT = Math.round((pre1GoodMachines / RetailsMonth1) * 100) || 0

		Compare1 = (a1, a2) => predictionClaims.reduce((a, c) => a + prediction1T3Retails.includes(c), 0)

		pre1Builds = totalBuildPrediction1.length
		pre1Sold = totalSoldPrediction1.length
		pre1NotSold = pre1Builds - pre1Sold
		pre1Claims = Compare1(predictionClaims, prediction1T3Retails)
		pre1Retails = prediction1T3Retails.length
		prediction1 = (pre1Claims / pre1Retails || 0).toFixed(3)

		/// ------------Prediction 2 --------------------///

		// get  total build for pre t3
		totalBuildPrediction2 = await Retail.aggregate([
			{
				$match: {
					buildDate: { $regex: threeMonthsAgo },
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
				},
			},
		])
		// get  total sold for pre t3
		totalSoldPrediction2 = await Retail.aggregate([
			{
				$match: {
					buildDate: { $regex: threeMonthsAgo },
					soldDate: { $ne: '#' },
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
				},
			},
		])

		// get total retails for pre t3
		mriRetailsPrediction2 = await Retail.aggregate([
			{
				$match: {
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
					buildDate: { $regex: threeMonthsAgo },
					$or: [{ soldDate: { $regex: threeMonthsAgo } }, { soldDate: { $regex: twoMonthsAgo } }],
				},
			},
		])
		//work out prediction 2
		prediction2T3Retails = []
		mriRetailsPrediction2.forEach((r) => {
			prediction2T3Retails.push(r.serialNumber)
		})

		// work out rft

		RetailsMonth2 = [prediction2T3Retails.length]

		Compare12 = (a1, a2) => rftClaims.reduce((a, c) => a + prediction2T3Retails.includes(c), 0)
		pre2FailedMachines = Compare12(rftClaims, prediction2T3Retails)
		pre2GoodMachines = RetailsMonth2 - pre2FailedMachines
		pre2RFT = Math.round((pre2GoodMachines / RetailsMonth2) * 100) || 0

		Compare2 = (a1, a2) => predictionClaims.reduce((a, c) => a + prediction2T3Retails.includes(c), 0)

		pre2Builds = totalBuildPrediction2.length
		pre2Sold = totalSoldPrediction2.length
		pre2NotSold = pre2Builds - pre2Sold
		pre2Claims = Compare2(predictionClaims, prediction2T3Retails)
		pre2Retails = prediction2T3Retails.length
		prediction2 = (pre2Claims / pre2Retails || 0).toFixed(3)

		/// ------------Prediction 3 --------------------///

		// get  total build for pre t3
		totalBuildPrediction3 = await Retail.aggregate([
			{
				$match: {
					buildDate: { $regex: twoMonthsAgo },
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
				},
			},
		])
		// get  total sold for pre t3
		totalSoldPrediction3 = await Retail.aggregate([
			{
				$match: {
					buildDate: { $regex: twoMonthsAgo },
					soldDate: { $ne: '#' },
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
				},
			},
		])

		// get total retails for pre t3
		mriRetailsPrediction3 = await Retail.aggregate([
			{
				$match: {
					division: {
						$in: ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL'],
					},
					buildDate: { $regex: twoMonthsAgo },
					$or: [{ soldDate: { $regex: twoMonthsAgo } }, { soldDate: { $regex: oneMonthAgo } }],
				},
			},
		])
		//work out prediction 2
		prediction3T3Retails = []
		mriRetailsPrediction3.forEach((r) => {
			prediction3T3Retails.push(r.serialNumber)
		})
		// work out rft
		RetailsMonth3 = [prediction3T3Retails.length]

		Compare13 = (a1, a2) => rftClaims.reduce((a, c) => a + prediction3T3Retails.includes(c), 0)
		pre3FailedMachines = Compare13(rftClaims, prediction3T3Retails)
		pre3GoodMachines = RetailsMonth3 - pre3FailedMachines
		pre3RFT = Math.round((pre3GoodMachines / RetailsMonth3) * 100) || 0

		Compare3 = (a1, a2) => predictionClaims.reduce((a, c) => a + prediction3T3Retails.includes(c), 0)

		pre3Builds = totalBuildPrediction3.length
		pre3Sold = totalSoldPrediction3.length
		pre3NotSold = pre3Builds - pre3Sold
		pre3Claims = Compare3(predictionClaims, prediction3T3Retails)
		pre3Retails = prediction3T3Retails.length
		prediction3 = (pre3Claims / pre3Retails || 0).toFixed(3)
	}

	////////////////////////////////////// START OF RIGHT SIDE   ////////////////////////////////////////////////////////////////////////////////////////
	// Top 10 pre T3 claims assembly sorted by part number
	const allFaultsNumber = await Throughput.countDocuments({
		division: {
			$in: division,
		},
		inspector: { $nin: [null, 'Unknown'] },
		createdAt: {
			$gte: new Date(new Date().getTime() - 60 * 24 * 60 * 60 * 1000),
		},
	})

	if (division.includes('LDL')) {
		inspectorsTable = await Throughput.aggregate([
			{
				$match: {
					division: {
						$in: division,
					},
					inspector: { $nin: [null, 'Unknown'] },
					createdAt: {
						$gte: new Date(new Date().getTime() - 60 * 24 * 60 * 60 * 1000),
					},
				},
			},
			{
				$group: {
					_id: '$inspector',
					count: { $sum: 1 },
					cosmetic: { $sum: '$cosmetic' },
					functional: { $sum: '$functional' },
					buildNumbers: { $push: '$buildNumber' },
				},
			},
			{
				$addFields: {
					total: {
						$sum: ['$cosmetic', '$functional'],
					},
				},
			},
			{
				$addFields: {
					percTotalClams: {
						$multiply: [
							{
								$divide: ['$count', allFaultsNumber],
							},
							100,
						],
					},
					serials: [],
					inspEff: 100,
					doaClams: 0,
					consiqClaims: [],
					notInspClaims: [],
					missedClaims: [],
					totalDpu: {
						$divide: ['$total', '$count'],
					},
				},
			},

			{ $sort: { totalDpu: -1, _id: 1 } },

			// { $limit: 10 },
		])

		for (let i of inspectorsTable) {
			i.serials = await QSmart.distinct('Serial Number', {
				['Build Number']: { $in: i.buildNumbers },
			})
			i.consiqClaims = await Claim.find({
				division: {
					$in: division,
				},
				tPeriod: 'DOA',
				name: { $in: i.serials },
				cmn: 'Consequential Damage',
			})
			i.notInspClaims = await Claim.find({
				division: {
					$in: division,
				},
				tPeriod: 'DOA',
				name: { $in: i.serials },
				cmn: 'Not on CFC Inspection',
			})
			i.missedClaims = await Claim.find({
				division: {
					$in: division,
				},
				tPeriod: 'DOA',
				name: { $in: i.serials },
				cmn: 'Missed on CFC Inspection',
			})

			i.doaClams = i.consiqClaims.length + i.notInspClaims.length + i.missedClaims.length
			// i.percTotalClams = (i.count / allFaultsNumber * 100).toFixed(1)
			if (i.missedClaims.length > 0) {
				// i.inspEff -= Math.round(i.missedClaims.length / i.doaClams * 100)
				i.inspEff -= Math.round((i.missedClaims.length / i.count) * 100)
			}
		}

		inspectorsMissed = []

		// console.log(inspectorsTable)

		inspectorsTable.sort((a, b) => parseFloat(b.inspEff) - parseFloat(a.inspEff))
	} else {
		inspectorsTable = await Throughput.aggregate([
			{
				$match: {
					division: {
						$in: division,
					},
					inspector: { $nin: [null, 'Unknown'] },
					createdAt: {
						$gte: new Date(new Date().getTime() - 14 * 24 * 60 * 60 * 1000),
					},
				},
			},
			{
				$group: {
					_id: '$inspector',
					cosmetic: { $sum: '$cosmetic' },
					functional: { $sum: '$functional' },
					count: { $sum: 1 },
				},
			},
			{
				$addFields: {
					total: {
						$sum: ['$cosmetic', '$functional'],
					},
				},
			},
			{
				$addFields: {
					total: {
						$sum: ['$cosmetic', '$functional'],
					},
					cosDpu: {
						$divide: ['$cosmetic', '$count'],
					},
					funDpu: {
						$divide: ['$functional', '$count'],
					},
					totalDpu: {
						$divide: ['$total', '$count'],
					},
					doaClaims: 0,
				},
			},

			{ $sort: { totalDpu: -1, _id: 1 } },

			// { $limit: 10 },
		])

		inspectorsMissed = await Claim.aggregate([
			{
				$match: {
					division: {
						$in: division,
					},
					inspector: { $nin: ['Unknown', null] },
					tPeriod: 'DOA',
					// canBePickedUp : 'Yes',
					outcome: {
						$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
					},
					vettedAt: {
						$gte: new Date(new Date().getTime() - 14 * 24 * 60 * 60 * 1000),
					},
				},
			},
			{
				$group: {
					_id: '$inspector',
					count: { $sum: 1 },
				},
			},
			{ $sort: { count: -1, _id: 1 } },
			// { $limit: 10 },
		])

		for (let i of inspectorsTable) {
			for (let x of inspectorsMissed) {
				if (x._id === i._id) {
					i.doaClaims = x.count
				}
			}
		}

		// console.log(inspectorsTable)

		inspectorsTable.sort((a, b) => parseFloat(a.doaClaims) - parseFloat(b.doaClaims))
	}

	// Top 10 pre T3 claims supplier sorted by part number
	const preT3PartsSupplier = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				asd: 'Supplier',
				tPeriod: {
					$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
				},
				outcome: {
					$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
				},
				$or: [
					{ buildDate: { $regex: fourMonthsAgo } },
					{ buildDate: { $regex: threeMonthsAgo } },
					{ buildDate: { $regex: twoMonthsAgo } },
					{ buildDate: { $regex: oneMonthAgo } },
					{ buildDate: { $regex: thisMonth } },
				],
			},
		},
		{
			$group: {
				_id: {
					$substrCP: ['$failedPart', 0, 20],
				},
				status: { $addToSet: '$status' },
				count: { $sum: 1 },
			},
		},
		{ $sort: { count: -1, _id: 1 } },
		{ $limit: 10 },
	])
	// Top 10 pre T3 claims sorted by part number
	const preT3PartsDesign = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				asd: 'Design',
				tPeriod: {
					$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
				},
				outcome: {
					$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
				},
				$or: [
					{ buildDate: { $regex: fourMonthsAgo } },
					{ buildDate: { $regex: threeMonthsAgo } },
					{ buildDate: { $regex: twoMonthsAgo } },
					{ buildDate: { $regex: oneMonthAgo } },
					{ buildDate: { $regex: thisMonth } },
				],
			},
		},
		{
			$group: {
				_id: {
					$substrCP: ['$failedPart', 0, 20],
				},
				status: { $addToSet: '$status' },
				count: { $sum: 1 },
			},
		},
		{ $sort: { count: -1, _id: 1 } },
		{ $limit: 10 },
	])

	// Top 10 pre T3 claims sorted by model
	const preT3Model = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				tPeriod: {
					$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
				},
				outcome: {
					$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
				},
				$or: [
					{ buildDate: { $regex: fourMonthsAgo } },
					{ buildDate: { $regex: threeMonthsAgo } },
					{ buildDate: { $regex: twoMonthsAgo } },
					{ buildDate: { $regex: oneMonthAgo } },
					{ buildDate: { $regex: thisMonth } },
				],
			},
		},
		{
			$group: {
				_id: '$baseModel',
				count: { $sum: 1 },
			},
		},
		{ $sort: { count: -1, _id: 1 } },
		{ $limit: 10 },
	])
	// Top 10 pre T3 claims sorted by stamp
	const preT3Stamping = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				tPeriod: {
					$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
				},
				failuretype: { $ne: '' },
				outcome: {
					$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
				},
				$or: [
					{ buildDate: { $regex: fourMonthsAgo } },
					{ buildDate: { $regex: threeMonthsAgo } },
					{ buildDate: { $regex: twoMonthsAgo } },
					{ buildDate: { $regex: oneMonthAgo } },
					{ buildDate: { $regex: thisMonth } },
				],
			},
		},
		{
			$group: {
				_id: '$failuretype',
				count: { $sum: 1 },
			},
		},
		{ $sort: { count: -1, _id: 1 } },
		{ $limit: 10 },
	])

	let asdTotal = {
		division: {
			$in: division,
		},
		tPeriod: {
			$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
		},
		outcome: {
			$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
		},
		$or: [
			{ buildDate: { $regex: fourMonthsAgo } },
			{ buildDate: { $regex: threeMonthsAgo } },
			{ buildDate: { $regex: twoMonthsAgo } },
			{ buildDate: { $regex: oneMonthAgo } },
			{ buildDate: { $regex: thisMonth } },
		],
	}
	let asdAssembly = {
		division: {
			$in: division,
		},
		asd: 'Assembly',
		tPeriod: {
			$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
		},
		outcome: {
			$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
		},
		$or: [
			{ buildDate: { $regex: fourMonthsAgo } },
			{ buildDate: { $regex: threeMonthsAgo } },
			{ buildDate: { $regex: twoMonthsAgo } },
			{ buildDate: { $regex: oneMonthAgo } },
			{ buildDate: { $regex: thisMonth } },
		],
	}
	let asdSupplier = {
		division: {
			$in: division,
		},
		asd: 'Supplier',
		tPeriod: {
			$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
		},
		outcome: {
			$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
		},
		$or: [
			{ buildDate: { $regex: fourMonthsAgo } },
			{ buildDate: { $regex: threeMonthsAgo } },
			{ buildDate: { $regex: twoMonthsAgo } },
			{ buildDate: { $regex: oneMonthAgo } },
			{ buildDate: { $regex: thisMonth } },
		],
	}
	let asdDesign = {
		division: {
			$in: division,
		},
		asd: 'Design',
		tPeriod: {
			$in: ['T000', 'T001', 'T002', 'T003', 'T0', 'T1', 'T2', 'T3'],
		},
		outcome: {
			$in: ['Accept', 'More Info', 'Pictures Required', 'Parts Back', 'Raise on Supplier'],
		},
		$or: [
			{ buildDate: { $regex: fourMonthsAgo } },
			{ buildDate: { $regex: threeMonthsAgo } },
			{ buildDate: { $regex: twoMonthsAgo } },
			{ buildDate: { $regex: oneMonthAgo } },
			{ buildDate: { $regex: thisMonth } },
		],
	}

	const allClaimsForAsd = await Claim.countDocuments(asdTotal)
	const allClaimsForAssembly = await Claim.countDocuments(asdAssembly)
	const allClaimsForSupplier = await Claim.countDocuments(asdSupplier)
	const allClaimsForDesign = allClaimsForAsd - allClaimsForAssembly - allClaimsForSupplier

	const assemblyPercent = Math.round((allClaimsForAssembly / allClaimsForAsd) * 100)
	const supplierPercent = Math.round((allClaimsForSupplier / allClaimsForAsd) * 100)
	const designPercent = Math.round((allClaimsForDesign / allClaimsForAsd) * 100)

	// get claims for doa rft & prediction 1

	// get  total build for doa prediction
	const totalPrediction1DOABuilds = await Retail.aggregate([
		{
			$match: {
				buildDate: { $regex: twoMonthsAgo },
				soldDate: { $ne: '#' },
				division: {
					$in: division,
				},
			},
		},
	])

	// get  total build for doa prediction
	const totalPrediction1DOABuilds2 = await Retail.aggregate([
		{
			$match: {
				buildDate: { $regex: oneMonthAgo },
				soldDate: { $ne: '#' },
				division: {
					$in: division,
				},
			},
		},
	])

	totalPrediction1DOABuildsOne = []
	totalPrediction1DOABuildsTwo = []

	for (let b of totalPrediction1DOABuilds) {
		totalPrediction1DOABuildsOne.push(b.serialNumber)
	}
	for (let b of totalPrediction1DOABuilds2) {
		totalPrediction1DOABuildsTwo.push(b.serialNumber)
	}

	// get pre t3 claims
	const rawPredictionClaimsDOA = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				name: {
					$in: totalPrediction1DOABuildsOne,
				},
				$or: [{ buildDate: { $regex: twoMonthsAgo } }],
				tPeriod: {
					$in: ['DOA'],
				},
				outcome: {
					$nin: ['Reject', 'Z Code'],
				},
			},
		},
	])
	// get reject & Z code pre t3 claims that have not been actioned
	const rawPredictionClaims1DOA = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				name: {
					$in: totalPrediction1DOABuildsOne,
				},
				$or: [{ buildDate: { $regex: twoMonthsAgo } }],
				tPeriod: {
					$in: ['DOA'],
				},
				actioned: { $ne: 'Yes' },
				outcome: {
					$in: ['Reject', 'Z Code'],
				},
			},
		},
	])

	let prediction1DOABuilds = []
	totalPrediction1DOABuilds.forEach((r) => {
		prediction1DOABuilds.push(r.serialNumber)
	})

	let predictionClaimsDOA = []
	rawPredictionClaimsDOA.forEach((c) => {
		predictionClaimsDOA.push(c.name)
	})
	rawPredictionClaims1DOA.forEach((c) => {
		predictionClaimsDOA.push(c.name)
	})

	let doaNoDuplicates = [...new Set(predictionClaimsDOA)]

	const pred1DOA = (predictionClaimsDOA.length / prediction1DOABuilds.length).toFixed(3)
	const pred1DOARft = 100 - Math.round((doaNoDuplicates.length / prediction1DOABuilds.length) * 100) || 0
	// get claims for doa rft & prediction 1

	// get claims for prediction 2 doa
	const rawPredictionClaimsDOA2 = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				name: {
					$in: totalPrediction1DOABuildsTwo,
				},
				$or: [{ buildDate: { $regex: oneMonthAgo } }],
				tPeriod: {
					$in: ['DOA'],
				},
				outcome: {
					$nin: ['Reject', 'Z Code'],
				},
			},
		},
	])
	// get reject & Z code pre t3 claims that have not been actioned
	const rawPredictionClaims1DOA2 = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				name: {
					$in: totalPrediction1DOABuildsTwo,
				},
				$or: [{ buildDate: { $regex: oneMonthAgo } }],
				tPeriod: {
					$in: ['DOA'],
				},
				actioned: { $ne: 'Yes' },
				outcome: {
					$in: ['Reject', 'Z Code'],
				},
			},
		},
	])

	let prediction1DOABuilds2 = []
	totalPrediction1DOABuilds2.forEach((r) => {
		prediction1DOABuilds2.push(r.serialNumber)
	})

	let predictionClaimsDOA2 = []
	rawPredictionClaimsDOA2.forEach((c) => {
		predictionClaimsDOA2.push(c.name)
	})
	rawPredictionClaims1DOA2.forEach((c) => {
		predictionClaimsDOA2.push(c.name)
	})

	let doaNoDuplicates2 = [...new Set(predictionClaimsDOA2)]

	const pred2DOA = (predictionClaimsDOA2.length / prediction1DOABuilds2.length).toFixed(3)
	const pred2DOARft = 100 - Math.round((doaNoDuplicates2.length / prediction1DOABuilds2.length) * 100) || 0

	// console.log(pred1DOA)
	// console.log(pred1DOARft);
	// console.log(division);

	// console.log(division);

	const fourCParts = await Claim.find(
		{
			fourC: 'Yes',
			status: 'Open',
			// tPeriod  : {
			// 	$in : [ 'DOA', 'T000', 'T001', 'T002', 'T003' ],
			// },
			division: {
				$in: division,
			},
			outcome: {
				$nin: ['Reject', 'Z Code'],
			},
		},
		{ failedPart: 1, _id: 0 }
	)

	const fourCPartNumbers = fourCParts.map((claim) => claim.failedPart)

	const doaPartsForGraph = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				failedPart: { $nin: fourCPartNumbers },
				tPeriod: 'DOA',
				outcome: {
					$nin: ['Reject', 'Z Code'],
				},
				vettedAt: { $gte: nineMOnthsAgo },
			},
		},
		{
			$project: {
				_id: {
					year: {
						$substrCP: ['$buildDate', 6, 4],
					},
					month: {
						$substrCP: ['$buildDate', 3, 2],
					},

					// failedPart : '$failedPart',
				},
				status: 1,
			},
		},
		{
			$group: {
				_id: '$_id',
				status: { $push: '$status' },
				count: {
					$sum: 1,
				},
			},
		},
	])

	eightMonthsAgoClaimsDOA = await Claim.countDocuments({
		division: {
			$in: division,
		},
		tPeriod: 'DOA',
		buildDate: { $regex: eightMonthsAgo },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})

	sevenMonthsAgoClaimsDOA = await Claim.countDocuments({
		division: {
			$in: division,
		},
		tPeriod: 'DOA',
		buildDate: { $regex: sevenMonthsAgo },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})

	sixMonthsAgoClaimsDOA = await Claim.countDocuments({
		division: {
			$in: division,
		},
		tPeriod: 'DOA',
		buildDate: { $regex: sixMonthsAgo },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})

	fiveMonthsAgoClaimsDOA = await Claim.countDocuments({
		division: {
			$in: division,
		},
		tPeriod: 'DOA',
		buildDate: { $regex: fiveMonthsAgo },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})
	fourMonthsAgoClaimsDOA = await Claim.countDocuments({
		division: {
			$in: division,
		},
		tPeriod: 'DOA',
		buildDate: { $regex: fourMonthsAgo },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})
	threeMonthsAgoClaimsDOA = await Claim.countDocuments({
		division: {
			$in: division,
		},
		tPeriod: 'DOA',
		buildDate: { $regex: threeMonthsAgo },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})

	twoMonthsAgoClaimsDOA = await Claim.countDocuments({
		division: {
			$in: division,
		},
		tPeriod: 'DOA',
		buildDate: { $regex: twoMonthsAgo },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})

	oneMonthAgoClaimsDOA = await Claim.countDocuments({
		division: {
			$in: division,
		},
		tPeriod: 'DOA',
		buildDate: { $regex: oneMonthAgo },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})

	let eightMonthAgoClosedDPU = 0
	let eightMonthAgoContainedDPU = 0
	let eightMonthAgoMissedDPU = 0

	let sevenMonthAgoClosedDPU = 0
	let sevenMonthAgoContainedDPU = 0
	let sevenMonthAgoMissedDPU = 0

	let sixMonthAgoClosedDPU = 0
	let sixMonthAgoContainedDPU = 0
	let sixMonthAgoMissedDPU = 0

	let fiveMonthAgoClosedDPU = 0
	let fiveMonthAgoContainedDPU = 0
	let fiveMonthAgoMissedDPU = 0

	let fourMonthAgoClosedDPU = 0
	let fourMonthAgoContainedDPU = 0
	let fourMonthAgoMissedDPU = 0

	let threeMonthAgoClosedDPU = 0
	let threeMonthAgoContainedDPU = 0
	let threeMonthAgoMissedDPU = 0

	let twoMonthAgoClosedDPU = 0
	let twoMonthAgoContainedDPU = 0
	let twoMonthAgoMissedDPU = 0

	let oneMonthAgoClosedDPU = 0
	let oneMonthAgoContainedDPU = 0
	let oneMonthAgoMissedDPU = 0

	for (let p of doaPartsForGraph) {
		if (p._id.month === eightMonthsAgoNumber && p._id.year === eightMonthsAgoNumberY) {
			eightMonthAgoClosedDPU = ((+graph[4].stat / 100) * ((countOccurrences(p.status, 'Closed') / eightMonthsAgoClaimsDOA) * 100)).toFixed(3)
			eightMonthAgoContainedDPU = ((+graph[4].stat / 100) * ((countOccurrences(p.status, 'Contained') / eightMonthsAgoClaimsDOA) * 100)).toFixed(3)
			eightMonthAgoMissedDPU = ((+graph[4].stat / 100) * ((countOccurrences(p.status, 'Open') / eightMonthsAgoClaimsDOA) * 100)).toFixed(3)
		}
		if (p._id.month === sevenMonthsAgoNumber && p._id.year === sevenMonthsAgoNumberY) {
			sevenMonthAgoClosedDPU = ((+graph[5].stat / 100) * ((countOccurrences(p.status, 'Closed') / sevenMonthsAgoClaimsDOA) * 100)).toFixed(3)
			sevenMonthAgoContainedDPU = ((+graph[5].stat / 100) * ((countOccurrences(p.status, 'Contained') / sevenMonthsAgoClaimsDOA) * 100)).toFixed(3)
			sevenMonthAgoMissedDPU = ((+graph[5].stat / 100) * ((countOccurrences(p.status, 'Open') / sevenMonthsAgoClaimsDOA) * 100)).toFixed(3)
		}
		if (p._id.month === sixMonthsAgoNumber && p._id.year === sixMonthsAgoNumberY) {
			sixMonthAgoClosedDPU = ((+graph[6].stat / 100) * ((countOccurrences(p.status, 'Closed') / sixMonthsAgoClaimsDOA) * 100)).toFixed(3)
			sixMonthAgoContainedDPU = ((+graph[6].stat / 100) * ((countOccurrences(p.status, 'Contained') / sixMonthsAgoClaimsDOA) * 100)).toFixed(3)
			sixMonthAgoMissedDPU = ((+graph[6].stat / 100) * ((countOccurrences(p.status, 'Open') / sixMonthsAgoClaimsDOA) * 100)).toFixed(3)
		}
		if (p._id.month === fiveMonthsAgoNumber && p._id.year === fiveMonthsAgoNumberY) {
			fiveMonthAgoClosedDPU = ((+graph[7].stat / 100) * ((countOccurrences(p.status, 'Closed') / fiveMonthsAgoClaimsDOA) * 100)).toFixed(3)
			fiveMonthAgoContainedDPU = ((+graph[7].stat / 100) * ((countOccurrences(p.status, 'Contained') / fiveMonthsAgoClaimsDOA) * 100)).toFixed(3)
			fiveMonthAgoMissedDPU = ((+graph[7].stat / 100) * ((countOccurrences(p.status, 'Open') / fiveMonthsAgoClaimsDOA) * 100)).toFixed(3)
		}
		if (p._id.month === fourMonthsAgoNumber && p._id.year === fourMonthsAgoNumberY) {
			fourMonthAgoClosedDPU = ((+graph[8].stat / 100) * ((countOccurrences(p.status, 'Closed') / fourMonthsAgoClaimsDOA) * 100)).toFixed(3)
			fourMonthAgoContainedDPU = ((+graph[8].stat / 100) * ((countOccurrences(p.status, 'Contained') / fourMonthsAgoClaimsDOA) * 100)).toFixed(3)
			fourMonthAgoMissedDPU = ((+graph[8].stat / 100) * ((countOccurrences(p.status, 'Open') / fourMonthsAgoClaimsDOA) * 100)).toFixed(3)
		}
		if (p._id.month === threeMonthsAgoNumber && p._id.year === threeMonthsAgoNumberY) {
			threeMonthAgoClosedDPU = ((+graph[9].stat / 100) * ((countOccurrences(p.status, 'Closed') / threeMonthsAgoClaimsDOA) * 100)).toFixed(3)
			threeMonthAgoContainedDPU = ((+graph[9].stat / 100) * ((countOccurrences(p.status, 'Contained') / threeMonthsAgoClaimsDOA) * 100)).toFixed(3)
			threeMonthAgoMissedDPU = ((+graph[9].stat / 100) * ((countOccurrences(p.status, 'Open') / threeMonthsAgoClaimsDOA) * 100)).toFixed(3)
		}
		if (p._id.month === twoMonthsAgoNumber && p._id.year === twoMonthsAgoNumberY) {
			twoMonthAgoClosedDPU = ((+pred1DOA / 100) * ((countOccurrences(p.status, 'Closed') / twoMonthsAgoClaimsDOA) * 100)).toFixed(3)
			twoMonthAgoContainedDPU = ((+pred1DOA / 100) * ((countOccurrences(p.status, 'Contained') / twoMonthsAgoClaimsDOA) * 100)).toFixed(3)
			twoMonthAgoMissedDPU = ((+pred1DOA / 100) * ((countOccurrences(p.status, 'Open') / twoMonthsAgoClaimsDOA) * 100)).toFixed(3)
		}
		if (p._id.month === oneMonthAgoNumber && p._id.year === oneMonthAgoNumberY) {
			oneMonthAgoClosedDPU = ((+pred2DOA / 100) * ((countOccurrences(p.status, 'Closed') / oneMonthAgoClaimsDOA) * 100)).toFixed(3)
			oneMonthAgoContainedDPU = ((+pred2DOA / 100) * ((countOccurrences(p.status, 'Contained') / oneMonthAgoClaimsDOA) * 100)).toFixed(3)
			oneMonthAgoMissedDPU = ((+pred2DOA / 100) * ((countOccurrences(p.status, 'Open') / oneMonthAgoClaimsDOA) * 100)).toFixed(3)
		}
	}

	const eightMonthAgoOpenDPU = (+graph[4].stat - eightMonthAgoClosedDPU - eightMonthAgoContainedDPU - eightMonthAgoMissedDPU).toFixed(3)

	const sevenMonthAgoOpenDPU = (+graph[5].stat - sevenMonthAgoClosedDPU - sevenMonthAgoContainedDPU - sevenMonthAgoMissedDPU).toFixed(3)

	const sixMonthAgoOpenDPU = (+graph[6].stat - sixMonthAgoClosedDPU - sixMonthAgoContainedDPU - sixMonthAgoMissedDPU).toFixed(3)

	const fiveMonthAgoOpenDPU = (+graph[7].stat - fiveMonthAgoClosedDPU - fiveMonthAgoContainedDPU - fiveMonthAgoMissedDPU).toFixed(3)

	const fourMonthAgoOpenDPU = (+graph[8].stat - fourMonthAgoClosedDPU - fourMonthAgoContainedDPU - fourMonthAgoMissedDPU).toFixed(3)

	const threeMonthAgoOpenDPU = (+graph[9].stat - threeMonthAgoClosedDPU - threeMonthAgoContainedDPU - threeMonthAgoMissedDPU).toFixed(3)

	const twoMonthAgoOpenDPU = (+pred1DOA - twoMonthAgoClosedDPU - twoMonthAgoContainedDPU - twoMonthAgoMissedDPU).toFixed(3)

	const oneMonthAgoOpenDPU = (+pred2DOA - oneMonthAgoClosedDPU - oneMonthAgoContainedDPU - oneMonthAgoMissedDPU).toFixed(3)

	//T3 split

	let t3Periods = ['T000', 'T001', 'T002', 'T003']

	const t3PartsForGraph = await Claim.aggregate([
		{
			$match: {
				division: {
					$in: division,
				},
				failedPart: { $nin: fourCPartNumbers },
				tPeriod: { $in: t3Periods },
				outcome: {
					$nin: ['Reject', 'Z Code'],
				},
				vettedAt: { $gte: nineMOnthsAgo },
			},
		},
		{
			$project: {
				_id: {
					year: {
						$substrCP: ['$buildDate', 6, 4],
					},
					month: {
						$substrCP: ['$buildDate', 3, 2],
					},
				},
				status: 1,
			},
		},
		{
			$group: {
				_id: '$_id',
				status: { $push: '$status' },
				count: {
					$sum: 1,
				},
			},
		},
	])

	// sep-20
	eightMonthsAgoClaimsT3 = await Claim.countDocuments({
		division: {
			$in: division,
		},
		tPeriod: { $in: t3Periods },
		buildDate: { $regex: eightMonthsAgo },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})

	sevenMonthsAgoClaimsT3 = await Claim.countDocuments({
		division: {
			$in: division,
		},
		tPeriod: { $in: t3Periods },
		buildDate: { $regex: sevenMonthsAgo },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})
	sixMonthsAgoClaimsT3 = await Claim.countDocuments({
		division: {
			$in: division,
		},
		tPeriod: { $ne: 'DOA' },
		buildDate: { $regex: sixMonthsAgo },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})
	fiveMonthsAgoClaimsT3 = await Claim.countDocuments({
		division: {
			$in: division,
		},
		tPeriod: { $ne: 'DOA' },
		buildDate: { $regex: fiveMonthsAgo },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})
	fourMonthsAgoClaimsT3 = await Claim.countDocuments({
		division: {
			$in: division,
		},
		tPeriod: { $ne: 'DOA' },
		buildDate: { $regex: fourMonthsAgo },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})
	threeMonthsAgoClaimsT3 = await Claim.countDocuments({
		division: {
			$in: division,
		},
		tPeriod: { $ne: 'DOA' },
		buildDate: { $regex: threeMonthsAgo },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})
	twoMonthsAgoClaimsT3 = await Claim.countDocuments({
		division: {
			$in: division,
		},
		tPeriod: { $ne: 'DOA' },
		buildDate: { $regex: twoMonthsAgo },
		outcome: {
			$nin: ['Reject', 'Z Code'],
		},
	})

	let eightMonthAgoClosedDPUT3 = 0
	let eightMonthAgoContainedDPUT3 = 0
	let eightMonthAgoMissedDPUT3 = 0

	let sevenMonthAgoClosedDPUT3 = 0
	let sevenMonthAgoContainedDPUT3 = 0
	let sevenMonthAgoMissedDPUT3 = 0

	let sixMonthAgoClosedDPUT3 = 0
	let sixMonthAgoContainedDPUT3 = 0
	let sixMonthAgoMissedDPUT3 = 0

	let fiveMonthAgoClosedDPUT3 = 0
	let fiveMonthAgoContainedDPUT3 = 0
	let fiveMonthAgoMissedDPUT3 = 0

	let fourMonthAgoClosedDPUT3 = 0
	let fourMonthAgoContainedDPUT3 = 0
	let fourMonthAgoMissedDPUT3 = 0

	let threeMonthAgoClosedDPUT3 = 0
	let threeMonthAgoContainedDPUT3 = 0
	let threeMonthAgoMissedDPUT3 = 0

	let twoMonthAgoClosedDPUT3 = 0
	let twoMonthAgoContainedDPUT3 = 0
	let twoMonthAgoMissedDPUT3 = 0

	for (let p of t3PartsForGraph) {
		if (p._id.month === eightMonthsAgoNumber && p._id.year === eightMonthsAgoNumberY) {
			eightMonthAgoClosedDPUT3 = ((+graph[40].stat / 100) * ((countOccurrences(p.status, 'Closed') / eightMonthsAgoClaimsT3) * 100)).toFixed(3)
			eightMonthAgoContainedDPUT3 = ((+graph[40].stat / 100) * ((countOccurrences(p.status, 'Contained') / eightMonthsAgoClaimsT3) * 100)).toFixed(3)
			eightMonthAgoMissedDPUT3 = ((+graph[40].stat / 100) * ((countOccurrences(p.status, 'Open') / eightMonthsAgoClaimsT3) * 100)).toFixed(3)
		}
		if (p._id.month === sevenMonthsAgoNumber && p._id.year === sevenMonthsAgoNumberY) {
			sevenMonthAgoClosedDPUT3 = ((+graph[41].stat / 100) * ((countOccurrences(p.status, 'Closed') / sevenMonthsAgoClaimsT3) * 100)).toFixed(3)
			sevenMonthAgoContainedDPUT3 = ((+graph[41].stat / 100) * ((countOccurrences(p.status, 'Contained') / sevenMonthsAgoClaimsT3) * 100)).toFixed(3)
			sevenMonthAgoMissedDPUT3 = ((+graph[41].stat / 100) * ((countOccurrences(p.status, 'Open') / sevenMonthsAgoClaimsT3) * 100)).toFixed(3)
		}
		if (p._id.month === sixMonthsAgoNumber && p._id.year === sixMonthsAgoNumberY) {
			sixMonthAgoClosedDPUT3 = ((+graph[42].stat / 100) * ((countOccurrences(p.status, 'Closed') / sixMonthsAgoClaimsT3) * 100)).toFixed(3)
			sixMonthAgoContainedDPUT3 = ((+graph[42].stat / 100) * ((countOccurrences(p.status, 'Contained') / sixMonthsAgoClaimsT3) * 100)).toFixed(3)
			sixMonthAgoMissedDPUT3 = ((+graph[42].stat / 100) * ((countOccurrences(p.status, 'Open') / sixMonthsAgoClaimsT3) * 100)).toFixed(3)
		}
		if (p._id.month === fiveMonthsAgoNumber && p._id.year === fiveMonthsAgoNumberY) {
			fiveMonthAgoClosedDPUT3 = ((+graph[43].stat / 100) * ((countOccurrences(p.status, 'Closed') / fiveMonthsAgoClaimsT3) * 100)).toFixed(3)
			fiveMonthAgoContainedDPUT3 = ((+graph[43].stat / 100) * ((countOccurrences(p.status, 'Contained') / fiveMonthsAgoClaimsT3) * 100)).toFixed(3)
			fiveMonthAgoMissedDPUT3 = ((+graph[43].stat / 100) * ((countOccurrences(p.status, 'Open') / fiveMonthsAgoClaimsT3) * 100)).toFixed(3)
		}
		if (p._id.month === fourMonthsAgoNumber && p._id.year === fourMonthsAgoNumberY) {
			fourMonthAgoClosedDPUT3 = ((+prediction1 / 100) * ((countOccurrences(p.status, 'Closed') / fourMonthsAgoClaimsT3) * 100)).toFixed(3)
			fourMonthAgoContainedDPUT3 = ((+prediction1 / 100) * ((countOccurrences(p.status, 'Contained') / fourMonthsAgoClaimsT3) * 100)).toFixed(3)
			fourMonthAgoMissedDPUT3 = ((+prediction1 / 100) * ((countOccurrences(p.status, 'Open') / fourMonthsAgoClaimsT3) * 100)).toFixed(3)
		}
		if (p._id.month === threeMonthsAgoNumber && p._id.year === threeMonthsAgoNumberY) {
			threeMonthAgoClosedDPUT3 = ((+prediction2 / 100) * ((countOccurrences(p.status, 'Closed') / threeMonthsAgoClaimsT3) * 100)).toFixed(3)
			threeMonthAgoContainedDPUT3 = ((+prediction2 / 100) * ((countOccurrences(p.status, 'Contained') / threeMonthsAgoClaimsT3) * 100)).toFixed(3)
			threeMonthAgoMissedDPUT3 = ((+prediction2 / 100) * ((countOccurrences(p.status, 'Open') / threeMonthsAgoClaimsT3) * 100)).toFixed(3)
		}
		if (p._id.month === twoMonthsAgoNumber && p._id.year === twoMonthsAgoNumberY) {
			twoMonthAgoClosedDPUT3 = ((+prediction3 / 100) * ((countOccurrences(p.status, 'Closed') / twoMonthsAgoClaimsT3) * 100)).toFixed(3)
			twoMonthAgoContainedDPUT3 = ((+prediction3 / 100) * ((countOccurrences(p.status, 'Contained') / twoMonthsAgoClaimsT3) * 100)).toFixed(3)
			twoMonthAgoMissedDPUT3 = ((+prediction3 / 100) * ((countOccurrences(p.status, 'Open') / twoMonthsAgoClaimsT3) * 100)).toFixed(3)
		}
	}

	const eightMonthAgoOpenDPUT3 = (+graph[40].stat - eightMonthAgoClosedDPUT3 - eightMonthAgoContainedDPUT3 - eightMonthAgoMissedDPUT3).toFixed(3)

	const sevenMonthAgoOpenDPUT3 = (+graph[41].stat - sevenMonthAgoClosedDPUT3 - sevenMonthAgoContainedDPUT3 - sevenMonthAgoMissedDPUT3).toFixed(3)

	const sixMonthAgoOpenDPUT3 = (+graph[42].stat - sixMonthAgoClosedDPUT3 - sixMonthAgoContainedDPUT3 - sixMonthAgoMissedDPUT3).toFixed(3)

	const fiveMonthAgoOpenDPUT3 = (+graph[43].stat - fiveMonthAgoClosedDPUT3 - fiveMonthAgoContainedDPUT3 - fiveMonthAgoMissedDPUT3).toFixed(3)

	const fourMonthAgoOpenDPUT3 = (prediction1 - fourMonthAgoClosedDPUT3 - fourMonthAgoContainedDPUT3 - fourMonthAgoMissedDPUT3).toFixed(3)

	const threeMonthAgoOpenDPUT3 = (prediction2 - threeMonthAgoClosedDPUT3 - threeMonthAgoContainedDPUT3 - threeMonthAgoMissedDPUT3).toFixed(3)

	const twoMonthAgoOpenDPUT3 = (prediction3 - twoMonthAgoClosedDPUT3 - twoMonthAgoContainedDPUT3 - twoMonthAgoMissedDPUT3).toFixed(3)

	// ----------------------------------------------------- rft --------------------------------------------------

	const todayDB = new Date()
	todayDB.setHours(0, 0, 0, 0)

	let divForMongo = []
	let divForQ = []
	let theSipStations = []
	let allSips = []
	let removalsMongo = []
	let removes = []

	if (division.includes('HBU')) {
		divForMongo = [...allSips]
		removalsMongo.push('Hydraulic Business Unit')
	}
	if (division.includes('Cabs')) {
		removalsMongo.push('Cab Systems')
	}

	const removesArray = await Remove.find({ division: { $in: removalsMongo } })

	for (let r of removesArray) {
		removes.push(r.name)
	}

	const allSipArray = await QSmart.aggregate([
		{
			$group: {
				_id: '$Fault Area',
			},
		},
	])
	for (let s of allSipArray) {
		allSips.push(s._id)
	}

	if (division.includes('HBU')) {
		divForMongo = [...allSips]
		divForQ.push('Hydraulic Business Unit')
	}
	if (division.includes('Cabs')) {
		divForMongo.push('Cab Systems')
		divForQ.push('Cab Systems')
	}

	const theSipStationsArray = await QSmart.aggregate([
		{
			$match: {
				['Created Date']: { $gt: todayDB },
				['Fault Area']: { $in: divForMongo },
			},
		},
		{
			$group: {
				_id: '$Zone',
			},
		},
	])

	for (let s of theSipStationsArray) {
		theSipStations.push(s._id)
	}

	// Backhoe

	const allFaultsTodayBHL = await QSmart.aggregate([
		{
			$match: {
				['Created Date']: { $gt: todayDB },
				['Business Unit']: 'Backhoe Loader',
				Zone: { $in: theSipStations },
				Model: { $nin: removes },
			},
		},
		{
			$group: {
				_id: '$Build Number',
			},
		},
	])
	const allFaultsTodayForDivBHL = await QSmart.aggregate([
		{
			$match: {
				['Created Date']: { $gt: todayDB },
				['Business Unit']: 'Backhoe Loader',
				Zone: { $in: theSipStations },
				['Fault Area']: { $in: divForQ },
				Model: { $nin: removes },
			},
		},
		{
			$group: {
				_id: '$Build Number',
			},
		},
	])

	if (allFaultsTodayBHL.length > 0) {
		rftBHL = Math.round(100 - (allFaultsTodayForDivBHL.length / allFaultsTodayBHL.length) * 100)
	} else {
		rftBHL = 0
	}

	// Compact Products

	const allFaultsTodayCP = await QSmart.aggregate([
		{
			$match: {
				['Created Date']: { $gt: todayDB },
				['Business Unit']: 'Compact Products',
				Zone: { $in: theSipStations },
				Model: { $nin: removes },
			},
		},
		{
			$group: {
				_id: '$Build Number',
			},
		},
	])
	const allFaultsTodayForDivCP = await QSmart.aggregate([
		{
			$match: {
				['Created Date']: { $gt: todayDB },
				['Business Unit']: 'Compact Products',
				Zone: { $in: theSipStations },
				['Fault Area']: { $in: divForQ },
				Model: { $nin: removes },
			},
		},
		{
			$group: {
				_id: '$Build Number',
			},
		},
	])

	if (allFaultsTodayCP.length > 0) {
		rftCP = Math.round(100 - (allFaultsTodayForDivCP.length / allFaultsTodayCP.length) * 100)
	} else {
		rftCP = 0
	}

	//  heavy products

	const allFaultsTodayHP = await QSmart.aggregate([
		{
			$match: {
				['Created Date']: { $gt: todayDB },
				['Business Unit']: 'Heavy Products',
				Zone: { $in: theSipStations },
				Model: { $nin: removes },
			},
		},
		{
			$group: {
				_id: '$Build Number',
			},
		},
	])
	const allFaultsTodayForDivHP = await QSmart.aggregate([
		{
			$match: {
				['Created Date']: { $gt: todayDB },
				['Business Unit']: 'Heavy Products',
				Zone: { $in: theSipStations },
				['Fault Area']: { $in: divForQ },
				Model: { $nin: removes },
			},
		},
		{
			$group: {
				_id: '$Build Number',
			},
		},
	])

	if (allFaultsTodayHP.length > 0) {
		rftHP = Math.round(100 - (allFaultsTodayForDivHP.length / allFaultsTodayHP.length) * 100)
	} else {
		rftHP = 0
	}

	// loadall

	const allFaultsTodayLDL = await QSmart.aggregate([
		{
			$match: {
				['Created Date']: { $gt: todayDB },
				['Business Unit']: 'Loadall',
				Zone: { $in: theSipStations },
				Model: { $nin: removes },
			},
		},
		{
			$group: {
				_id: '$Build Number',
			},
		},
	])
	const allFaultsTodayForDivLDL = await QSmart.aggregate([
		{
			$match: {
				['Created Date']: { $gt: todayDB },
				['Business Unit']: 'Loadall',
				Zone: { $in: theSipStations },
				['Fault Area']: { $in: divForQ },
				Model: { $nin: removes },
			},
		},
		{
			$group: {
				_id: '$Build Number',
			},
		},
	])

	if (allFaultsTodayLDL.length > 0) {
		rftLDL = Math.round(100 - (allFaultsTodayForDivLDL.length / allFaultsTodayLDL.length) * 100)
	} else {
		rftLDL = 0
	}

	// site dumper

	const allFaultsTodaySD = await QSmart.aggregate([
		{
			$match: {
				['Created Date']: { $gt: todayDB },
				['Business Unit']: 'Site Dumper',
				Zone: { $in: theSipStations },
				Model: { $nin: removes },
			},
		},
		{
			$group: {
				_id: '$Build Number',
			},
		},
	])
	const allFaultsTodayForDivSD = await QSmart.aggregate([
		{
			$match: {
				['Created Date']: { $gt: todayDB },
				['Business Unit']: 'Site Dumper',
				Zone: { $in: theSipStations },
				['Fault Area']: { $in: divForQ },
				Model: { $nin: removes },
			},
		},
		{
			$group: {
				_id: '$Build Number',
			},
		},
	])

	if (allFaultsTodaySD.length > 0) {
		rftSD = Math.round(100 - (allFaultsTodayForDivSD.length / allFaultsTodaySD.length) * 100)
	} else {
		rftSD = 0
	}

	const allAtBHL = allFaultsTodayBHL.length
	const machinesRftAtBHL = allFaultsTodayBHL.length - allFaultsTodayForDivBHL.length
	const allAtCP = allFaultsTodayCP.length
	const machinesRftAtCP = allFaultsTodayCP.length - allFaultsTodayForDivCP.length
	const allAtHP = allFaultsTodayHP.length
	const machinesRftAtHP = allFaultsTodayHP.length - allFaultsTodayForDivHP.length
	const allAtLDL = allFaultsTodayLDL.length
	const machinesRftAtLDL = allFaultsTodayLDL.length - allFaultsTodayForDivLDL.length
	const allAtSD = allFaultsTodaySD.length
	const machinesRftAtSD = allFaultsTodaySD.length - allFaultsTodayForDivSD.length

	let allMachines = allAtBHL + allAtCP + allAtHP + allAtLDL + allAtSD
	let rftMachines = machinesRftAtBHL + machinesRftAtCP + machinesRftAtHP + machinesRftAtLDL + machinesRftAtSD

	if (division.includes('HBU')) {
		allMachines = allAtBHL + allAtCP + allAtHP + allAtLDL
		rftMachines = machinesRftAtBHL + machinesRftAtCP + machinesRftAtHP + machinesRftAtLDL
	}

	if (allMachines > 0) {
		rftGroup = Math.round((rftMachines / allMachines) * 100)
	} else {
		rftGroup = 0
	}

	const predictions = await Prediction.find({ division: { $in: division } })
	// console.log(predictions)

	if (Array.isArray(division) && division.length > 1) {
		division = 'GROUP'
	}

	res.render('dash/inspector', {
		allFaultsNumber,
		predictions,
		allAtBHL,
		machinesRftAtBHL,
		rftBHL,
		allAtCP,
		machinesRftAtCP,
		rftCP,
		allAtHP,
		machinesRftAtHP,
		rftHP,
		allAtLDL,
		machinesRftAtLDL,
		rftLDL,
		allAtSD,
		machinesRftAtSD,
		rftSD,
		allMachines,
		rftMachines,
		rftGroup,
		//
		division,
		countOfRepeatsLast30Days,
		countOfRepeatsBeforeLast30Days,
		figure,
		pred1DOA,
		pred1DOARft,
		pred2DOA,
		pred2DOARft,
		graph,
		doaOpenNum,
		doaContainedNum,
		doaClosedNum,
		t3OpenNum,
		t3ContainedNum,
		t3ClosedNum,
		intOpenNum,
		intContainedNum,
		intClosedNum,
		totFourC,
		signOutLast90Days,
		claimsLast90Days,
		dealerClaimsInLast90Days,
		top10DealersInLast90DaysCount,
		dealerTop10Percent,
		dpuMonth,
		pre1FailedMachines,
		pre1GoodMachines,
		pre1RFT,
		pre2FailedMachines,
		pre2GoodMachines,
		pre2RFT,
		pre3FailedMachines,
		pre3GoodMachines,
		pre3RFT,
		pre1Builds,
		pre1Sold,
		pre1NotSold,
		pre1Claims,
		pre1Retails,
		prediction1,
		pre2Builds,
		pre2Sold,
		pre2NotSold,
		pre2Claims,
		pre2Retails,
		prediction2,
		pre3Builds,
		pre3Sold,
		pre3NotSold,
		pre3Claims,
		pre3Retails,
		prediction3,
		////////start of left side////////////////////
		inspectorsMissed,
		inspectorsTable,
		preT3Stamping,
		preT3Model,

		preT3PartsSupplier,
		preT3PartsDesign,
		assemblyPercent,
		supplierPercent,
		designPercent,
		// new graph
		eightMonthAgoClosedDPU,
		eightMonthAgoContainedDPU,
		eightMonthAgoOpenDPU,
		eightMonthAgoMissedDPU,
		sevenMonthAgoClosedDPU,
		sevenMonthAgoContainedDPU,
		sevenMonthAgoOpenDPU,
		sevenMonthAgoMissedDPU,
		sixMonthAgoClosedDPU,
		sixMonthAgoContainedDPU,
		sixMonthAgoOpenDPU,
		sixMonthAgoMissedDPU,
		fiveMonthAgoClosedDPU,
		fiveMonthAgoContainedDPU,
		fiveMonthAgoOpenDPU,
		fiveMonthAgoMissedDPU,
		fourMonthAgoClosedDPU,
		fourMonthAgoContainedDPU,
		fourMonthAgoOpenDPU,
		fourMonthAgoMissedDPU,
		threeMonthAgoClosedDPU,
		threeMonthAgoContainedDPU,
		threeMonthAgoOpenDPU,
		threeMonthAgoMissedDPU,
		eightMonthAgoClosedDPUT3,
		eightMonthAgoContainedDPUT3,
		eightMonthAgoOpenDPUT3,
		eightMonthAgoMissedDPUT3,
		sevenMonthAgoClosedDPUT3,
		sevenMonthAgoContainedDPUT3,
		sevenMonthAgoOpenDPUT3,
		sevenMonthAgoMissedDPUT3,
		sixMonthAgoClosedDPUT3,
		sixMonthAgoContainedDPUT3,
		sixMonthAgoOpenDPUT3,
		sixMonthAgoMissedDPUT3,
		fiveMonthAgoClosedDPUT3,
		fiveMonthAgoContainedDPUT3,
		fiveMonthAgoOpenDPUT3,
		fiveMonthAgoMissedDPUT3,

		twoMonthAgoMissedDPU,
		twoMonthAgoOpenDPU,
		twoMonthAgoContainedDPU,
		twoMonthAgoClosedDPU,
		oneMonthAgoMissedDPU,
		oneMonthAgoOpenDPU,
		oneMonthAgoContainedDPU,
		oneMonthAgoClosedDPU,

		twoMonthAgoMissedDPUT3,
		twoMonthAgoContainedDPUT3,
		twoMonthAgoOpenDPUT3,
		twoMonthAgoClosedDPUT3,
		threeMonthAgoMissedDPUT3,
		threeMonthAgoContainedDPUT3,
		threeMonthAgoOpenDPUT3,
		threeMonthAgoClosedDPUT3,
		fourMonthAgoMissedDPUT3,
		fourMonthAgoContainedDPUT3,
		fourMonthAgoOpenDPUT3,
		fourMonthAgoClosedDPUT3,
	})
}

module.exports.componentInternal = async (req, res) => {
	const { division } = req.params

	let filterOption

	if (division === 'Cabs') {
		filterOption = 'Cab Systems'
	}
	if (division === 'HBU') {
		filterOption = 'Hydraulic Business Unit'
	}

	process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0'
	const curr = new Date()
	const thisWeek = new Date(curr.setDate(curr.getDate() - curr.getDay()))
	const startOfWeek = new Date(thisWeek.getFullYear(), thisWeek.getMonth(), thisWeek.getDate(), 1, 0, 0)

	// console.log(moment(startOfWeek).add(1, 'days').format('YYYY/MM/DD/00/00'))

	let startDate = moment(startOfWeek).add(1, 'days').format('YYYY/MM/DD/00/00')
	// let startDate = moment().subtract(5, 'days').format('YYYY/MM/DD/00/00')
	// let startDate = moment().format('YYYY/MM/DD/00/00')
	let endDate = moment().format('YYYY/MM/DD/kk/mm')

	let startDateStamp = moment(startOfWeek).add(1, 'days').format('DD/MM/YYYY')
	let timeNowStamp = moment().format('DD/MM/YYYY - HH:mm:ss')

	const backhoe = (await axios(`https://internal.jcb.local/qsmartapi/api/qsmart/faults/18/${startDate}/${endDate}/1`)) || []
	const compact = (await axios(`https://internal.jcb.local/qsmartapi/api/qsmart/faults/5/${startDate}/${endDate}/1`)) || []
	const heavy = (await axios(`https://internal.jcb.local/qsmartapi/api/qsmart/faults/38/${startDate}/${endDate}/1`)) || []
	const loadall = (await axios(`https://internal.jcb.local/qsmartapi/api/qsmart/faults/19/${startDate}/${endDate}/1`)) || []
	const siteDumper = (await axios(`https://internal.jcb.local/qsmartapi/api/qsmart/faults/64/${startDate}/${endDate}/1`)) || []

	// const bhl = backhoe.data
	// const cp = compact.data
	// const hp = heavy.data
	// const ldl = loadall.data
	// const sd = siteDumper.data

	// console.log(siteDumper.data)

	// count each fault
	const count = (arr) => arr.reduce((ac, a) => ((ac[a] = ac[a] + 1 || 1), ac), {})
	const filterFaultArea = (array) => array.filter((fault) => fault['Fault Area'] === filterOption)
	const mapUserDefinedTest = (array) => array.map((failure) => failure['User Defined Test'])

	// console.log(filterFaultArea(compact.data))

	const cpFaultsThisWeek = compact.data.filter((fault) => fault['Fault Area'] === filterOption).map((failure) => failure['User Defined Test'])

	const cpUpdated = count(cpFaultsThisWeek)

	const compactThisWeek = Object.fromEntries(Object.entries(cpUpdated).sort(([, a], [, b]) => b - a))

	const cp = Object.entries(compactThisWeek).slice(0, 10)

	// bhl
	const bhlFaultsThisWeek = backhoe.data.filter((fault) => fault['Fault Area'] === filterOption).map((failure) => failure['User Defined Test'])

	const bhlUpdated = count(bhlFaultsThisWeek)

	const backhoeThisWeek = Object.fromEntries(Object.entries(bhlUpdated).sort(([, a], [, b]) => b - a))

	const bhl = Object.entries(backhoeThisWeek).slice(0, 10)

	// hp
	const hpFaultsThisWeek = heavy.data.filter((fault) => fault['Fault Area'] === filterOption).map((failure) => failure['User Defined Test'])

	const hpUpdated = count(hpFaultsThisWeek)

	const heavyThisWeek = Object.fromEntries(Object.entries(hpUpdated).sort(([, a], [, b]) => b - a))

	const hp = Object.entries(heavyThisWeek).slice(0, 10)
	// ldl
	const ldlFaultsThisWeek = loadall.data.filter((fault) => fault['Fault Area'] === filterOption).map((failure) => failure['User Defined Test'])

	const ldlUpdated = count(ldlFaultsThisWeek)

	const loadallThisWeek = Object.fromEntries(Object.entries(ldlUpdated).sort(([, a], [, b]) => b - a))

	const ldl = Object.entries(loadallThisWeek).slice(0, 10)
	// sd
	const sdFaultsThisWeek = siteDumper.data.filter((fault) => fault['Fault Area'] === filterOption).map((failure) => failure['User Defined Test'])

	const sdUpdated = count(sdFaultsThisWeek)

	const siteDumperThisWeek = Object.fromEntries(Object.entries(sdUpdated).sort(([, a], [, b]) => b - a))

	const sd = Object.entries(siteDumperThisWeek).slice(0, 10)

	res.render('dash/component-internal', {
		division,
		cp,
		bhl,
		hp,
		ldl,
		sd,
		startDateStamp,
		timeNowStamp,
	})
}

module.exports.componentExternal = async (req, res) => {
	const { division } = req.params
	res.render('dash/component-external', { division })
}

module.exports.effHistory = async (req, res) => {
	const { division } = req.params
	let moment = require('moment-business-days')
	moment.updateLocale('gb', {
		workingWeekdays: [1, 2, 3, 4, 5],
	})

	process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0'
	let startDateToday = moment().format('YYYY/MM/DD/00/00')
	let endDateToday = moment().format('YYYY/MM/DD/kk/mm')
	let today = moment().format('DD-MMM')

	let startDateOneDayAgo = moment().businessSubtract(1).format('YYYY/MM/DD/00/00')
	let endDateOneDayAgo = moment().businessSubtract(1).format('YYYY/MM/DD/23/59')
	let oneDayAgo = moment().businessSubtract(1).format('DD-MMM')

	let startDateTwoDaysAgo = moment().businessSubtract(2).format('YYYY/MM/DD/00/00')
	let endDateTwoDaysAgo = moment().businessSubtract(2).format('YYYY/MM/DD/23/59')
	let twoDaysAgo = moment().businessSubtract(2).format('DD-MMM')

	let startDateThreeDaysAgo = moment().businessSubtract(3).format('YYYY/MM/DD/00/00')
	let endDateThreeDaysAgo = moment().businessSubtract(3).format('YYYY/MM/DD/23/59')
	let threeDaysAgo = moment().businessSubtract(3).format('DD-MMM')

	let startDateFourDaysAgo = moment().businessSubtract(4).format('YYYY/MM/DD/00/00')
	let endDateFourDaysAgo = moment().businessSubtract(4).format('YYYY/MM/DD/23/59')
	let fourDaysAgo = moment().businessSubtract(4).format('DD-MMM')

	let startDateFiveDaysAgo = moment().businessSubtract(5).format('YYYY/MM/DD/00/00')
	let endDateFiveDaysAgo = moment().businessSubtract(5).format('YYYY/MM/DD/23/59')
	let fiveDaysAgo = moment().businessSubtract(5).format('DD-MMM')

	let responseToday = await axios(`https://internal.jcb.local/qsmartapi/api/qsmart/faults/19/${startDateToday}/${endDateToday}/1`)
	let responseOneDayAgo = await axios(`https://internal.jcb.local/qsmartapi/api/qsmart/faults/19/${startDateOneDayAgo}/${endDateOneDayAgo}/1`)
	let responseTwoDaysAgo = await axios(`https://internal.jcb.local/qsmartapi/api/qsmart/faults/19/${startDateTwoDaysAgo}/${endDateTwoDaysAgo}/1`)
	let responseThreeDaysAgo = await axios(
		`https://internal.jcb.local/qsmartapi/api/qsmart/faults/19/${startDateThreeDaysAgo}/${endDateThreeDaysAgo}/1`
	)
	let responseFourDaysAgo = await axios(`https://internal.jcb.local/qsmartapi/api/qsmart/faults/19/${startDateFourDaysAgo}/${endDateFourDaysAgo}/1`)
	let responseFiveDaysAgo = await axios(`https://internal.jcb.local/qsmartapi/api/qsmart/faults/19/${startDateFiveDaysAgo}/${endDateFiveDaysAgo}/1`)

	let jsonToday = responseToday.data
	let jsonOneDayAgo = responseOneDayAgo.data
	let jsonTwoDaysAgo = responseTwoDaysAgo.data
	let jsonThreeDaysAgo = responseThreeDaysAgo.data
	let jsonFourDaysAgo = responseFourDaysAgo.data
	let jsonFiveDaysAgo = responseFiveDaysAgo.data

	let totalZone2Today = 0
	let inZone2Today = 0
	let totalZone2OneDayAgo = 0
	let inZone2OneDayAgo = 0
	let totalZone2TwoDaysAgo = 0
	let inZone2TwoDaysAgo = 0
	let totalZone2ThreeDaysAgo = 0
	let inZone2ThreeDaysAgo = 0
	let totalZone2FourDaysAgo = 0
	let inZone2FourDaysAgo = 0
	let totalZone2FiveDaysAgo = 0
	let inZone2FiveDaysAgo = 0

	//zone 2
	for (let m of jsonToday) {
		if (m['Fault Area'] === 'Zone 2 Ldl') {
			totalZone2Today++
		}
	}
	for (let m of jsonToday) {
		if (m['Fault Area'] === 'Zone 2 Ldl' && m.Zone === 'SIP 2 NEW') {
			inZone2Today++
		}
	}
	for (let m of jsonOneDayAgo) {
		if (m['Fault Area'] === 'Zone 2 Ldl') {
			totalZone2OneDayAgo++
		}
	}
	for (let m of jsonOneDayAgo) {
		if (m['Fault Area'] === 'Zone 2 Ldl' && m.Zone === 'SIP 2 NEW') {
			inZone2OneDayAgo++
		}
	}
	for (let m of jsonTwoDaysAgo) {
		if (m['Fault Area'] === 'Zone 2 Ldl') {
			totalZone2TwoDaysAgo++
		}
	}
	for (let m of jsonTwoDaysAgo) {
		if (m['Fault Area'] === 'Zone 2 Ldl' && m.Zone === 'SIP 2 NEW') {
			inZone2TwoDaysAgo++
		}
	}
	for (let m of jsonThreeDaysAgo) {
		if (m['Fault Area'] === 'Zone 2 Ldl') {
			totalZone2ThreeDaysAgo++
		}
	}
	for (let m of jsonThreeDaysAgo) {
		if (m['Fault Area'] === 'Zone 2 Ldl' && m.Zone === 'SIP 2 NEW') {
			inZone2ThreeDaysAgo++
		}
	}
	for (let m of jsonFourDaysAgo) {
		if (m['Fault Area'] === 'Zone 2 Ldl') {
			totalZone2FourDaysAgo++
		}
	}
	for (let m of jsonFourDaysAgo) {
		if (m['Fault Area'] === 'Zone 2 Ldl' && m.Zone === 'SIP 2 NEW') {
			inZone2FourDaysAgo++
		}
	}

	for (let m of jsonFiveDaysAgo) {
		if (m['Fault Area'] === 'Zone 2 Ldl') {
			totalZone2FiveDaysAgo++
		}
	}
	for (let m of jsonFiveDaysAgo) {
		if (m['Fault Area'] === 'Zone 2 Ldl' && m.Zone === 'SIP 2 NEW') {
			inZone2FiveDaysAgo++
		}
	}

	let effZone2Today = Math.round((inZone2Today / totalZone2Today) * 100)
	let effZone2OneDayAgo = Math.round((inZone2OneDayAgo / totalZone2OneDayAgo) * 100)
	let effZone2TwoDaysAgo = Math.round((inZone2TwoDaysAgo / totalZone2TwoDaysAgo) * 100)
	let effZone2ThreeDaysAgo = Math.round((inZone2ThreeDaysAgo / totalZone2ThreeDaysAgo) * 100)
	let effZone2FourDaysAgo = Math.round((inZone2FourDaysAgo / totalZone2FourDaysAgo) * 100)
	let effZone2FiveDaysAgo = Math.round((inZone2FiveDaysAgo / totalZone2FiveDaysAgo) * 100)

	let outZone2Today = totalZone2Today - inZone2Today
	let outZone2OneDayAgo = totalZone2OneDayAgo - inZone2OneDayAgo
	let outZone2TwoDaysAgo = totalZone2TwoDaysAgo - inZone2TwoDaysAgo
	let outZone2ThreeDaysAgo = totalZone2ThreeDaysAgo - inZone2ThreeDaysAgo
	let outZone2FourDaysAgo = totalZone2FourDaysAgo - inZone2FourDaysAgo
	let outZone2FiveDaysAgo = totalZone2FiveDaysAgo - inZone2FiveDaysAgo

	//zone3
	let totalZone3Today = 0
	let inZone3Today = 0
	let totalZone3OneDayAgo = 0
	let inZone3OneDayAgo = 0
	let totalZone3TwoDaysAgo = 0
	let inZone3TwoDaysAgo = 0
	let totalZone3ThreeDaysAgo = 0
	let inZone3ThreeDaysAgo = 0
	let totalZone3FourDaysAgo = 0
	let inZone3FourDaysAgo = 0
	let totalZone3FiveDaysAgo = 0
	let inZone3FiveDaysAgo = 0

	//zone 3
	for (let m of jsonToday) {
		if (m['Fault Area'] === 'Zone 3 Ldl') {
			totalZone3Today++
		}
	}
	for (let m of jsonToday) {
		if (m['Fault Area'] === 'Zone 3 Ldl' && m.Zone === 'SIP 3 NEW') {
			inZone3Today++
		}
	}
	for (let m of jsonOneDayAgo) {
		if (m['Fault Area'] === 'Zone 3 Ldl') {
			totalZone3OneDayAgo++
		}
	}
	for (let m of jsonOneDayAgo) {
		if (m['Fault Area'] === 'Zone 3 Ldl' && m.Zone === 'SIP 3 NEW') {
			inZone3OneDayAgo++
		}
	}
	for (let m of jsonTwoDaysAgo) {
		if (m['Fault Area'] === 'Zone 3 Ldl') {
			totalZone3TwoDaysAgo++
		}
	}
	for (let m of jsonTwoDaysAgo) {
		if (m['Fault Area'] === 'Zone 3 Ldl' && m.Zone === 'SIP 3 NEW') {
			inZone3TwoDaysAgo++
		}
	}
	for (let m of jsonThreeDaysAgo) {
		if (m['Fault Area'] === 'Zone 3 Ldl') {
			totalZone3ThreeDaysAgo++
		}
	}
	for (let m of jsonThreeDaysAgo) {
		if (m['Fault Area'] === 'Zone 3 Ldl' && m.Zone === 'SIP 3 NEW') {
			inZone3ThreeDaysAgo++
		}
	}
	for (let m of jsonFourDaysAgo) {
		if (m['Fault Area'] === 'Zone 3 Ldl') {
			totalZone3FourDaysAgo++
		}
	}
	for (let m of jsonFourDaysAgo) {
		if (m['Fault Area'] === 'Zone 3 Ldl' && m.Zone === 'SIP 3 NEW') {
			inZone3FourDaysAgo++
		}
	}

	for (let m of jsonFiveDaysAgo) {
		if (m['Fault Area'] === 'Zone 3 Ldl') {
			totalZone3FiveDaysAgo++
		}
	}
	for (let m of jsonFiveDaysAgo) {
		if (m['Fault Area'] === 'Zone 3 Ldl' && m.Zone === 'SIP 3 NEW') {
			inZone3FiveDaysAgo++
		}
	}

	let effZone3Today = Math.round((inZone3Today / totalZone3Today) * 100)
	let effZone3OneDayAgo = Math.round((inZone3OneDayAgo / totalZone3OneDayAgo) * 100)
	let effZone3TwoDaysAgo = Math.round((inZone3TwoDaysAgo / totalZone3TwoDaysAgo) * 100)
	let effZone3ThreeDaysAgo = Math.round((inZone3ThreeDaysAgo / totalZone3ThreeDaysAgo) * 100)
	let effZone3FourDaysAgo = Math.round((inZone3FourDaysAgo / totalZone3FourDaysAgo) * 100)
	let effZone3FiveDaysAgo = Math.round((inZone3FiveDaysAgo / totalZone3FiveDaysAgo) * 100)

	let outZone3Today = totalZone3Today - inZone3Today
	let outZone3OneDayAgo = totalZone3OneDayAgo - inZone3OneDayAgo
	let outZone3TwoDaysAgo = totalZone3TwoDaysAgo - inZone3TwoDaysAgo
	let outZone3ThreeDaysAgo = totalZone3ThreeDaysAgo - inZone3ThreeDaysAgo
	let outZone3FourDaysAgo = totalZone3FourDaysAgo - inZone3FourDaysAgo
	let outZone3FiveDaysAgo = totalZone3FiveDaysAgo - inZone3FiveDaysAgo

	//zone4
	let totalZone4Today = 0
	let inZone4Today = 0
	let totalZone4OneDayAgo = 0
	let inZone4OneDayAgo = 0
	let totalZone4TwoDaysAgo = 0
	let inZone4TwoDaysAgo = 0
	let totalZone4ThreeDaysAgo = 0
	let inZone4ThreeDaysAgo = 0
	let totalZone4FourDaysAgo = 0
	let inZone4FourDaysAgo = 0
	let totalZone4FiveDaysAgo = 0
	let inZone4FiveDaysAgo = 0

	//zone 4
	for (let m of jsonToday) {
		if (m['Fault Area'] === 'Zone 4 Ldl') {
			totalZone4Today++
		}
	}
	for (let m of jsonToday) {
		if (m['Fault Area'] === 'Zone 4 Ldl' && m.Zone === 'SIP 4 NEW') {
			inZone4Today++
		}
	}
	for (let m of jsonOneDayAgo) {
		if (m['Fault Area'] === 'Zone 4 Ldl') {
			totalZone4OneDayAgo++
		}
	}
	for (let m of jsonOneDayAgo) {
		if (m['Fault Area'] === 'Zone 4 Ldl' && m.Zone === 'SIP 4 NEW') {
			inZone4OneDayAgo++
		}
	}
	for (let m of jsonTwoDaysAgo) {
		if (m['Fault Area'] === 'Zone 4 Ldl') {
			totalZone4TwoDaysAgo++
		}
	}
	for (let m of jsonTwoDaysAgo) {
		if (m['Fault Area'] === 'Zone 4 Ldl' && m.Zone === 'SIP 4 NEW') {
			inZone4TwoDaysAgo++
		}
	}
	for (let m of jsonThreeDaysAgo) {
		if (m['Fault Area'] === 'Zone 4 Ldl') {
			totalZone4ThreeDaysAgo++
		}
	}
	for (let m of jsonThreeDaysAgo) {
		if (m['Fault Area'] === 'Zone 4 Ldl' && m.Zone === 'SIP 4 NEW') {
			inZone4ThreeDaysAgo++
		}
	}
	for (let m of jsonFourDaysAgo) {
		if (m['Fault Area'] === 'Zone 4 Ldl') {
			totalZone4FourDaysAgo++
		}
	}
	for (let m of jsonFourDaysAgo) {
		if (m['Fault Area'] === 'Zone 4 Ldl' && m.Zone === 'SIP 4 NEW') {
			inZone4FourDaysAgo++
		}
	}

	for (let m of jsonFiveDaysAgo) {
		if (m['Fault Area'] === 'Zone 4 Ldl') {
			totalZone4FiveDaysAgo++
		}
	}
	for (let m of jsonFiveDaysAgo) {
		if (m['Fault Area'] === 'Zone 4 Ldl' && m.Zone === 'SIP 4 NEW') {
			inZone4FiveDaysAgo++
		}
	}

	let effZone4Today = Math.round((inZone4Today / totalZone4Today) * 100)
	let effZone4OneDayAgo = Math.round((inZone4OneDayAgo / totalZone4OneDayAgo) * 100)
	let effZone4TwoDaysAgo = Math.round((inZone4TwoDaysAgo / totalZone4TwoDaysAgo) * 100)
	let effZone4ThreeDaysAgo = Math.round((inZone4ThreeDaysAgo / totalZone4ThreeDaysAgo) * 100)
	let effZone4FourDaysAgo = Math.round((inZone4FourDaysAgo / totalZone4FourDaysAgo) * 100)
	let effZone4FiveDaysAgo = Math.round((inZone4FiveDaysAgo / totalZone4FiveDaysAgo) * 100)

	let outZone4Today = totalZone4Today - inZone4Today
	let outZone4OneDayAgo = totalZone4OneDayAgo - inZone4OneDayAgo
	let outZone4TwoDaysAgo = totalZone4TwoDaysAgo - inZone4TwoDaysAgo
	let outZone4ThreeDaysAgo = totalZone4ThreeDaysAgo - inZone4ThreeDaysAgo
	let outZone4FourDaysAgo = totalZone4FourDaysAgo - inZone4FourDaysAgo
	let outZone4FiveDaysAgo = totalZone4FiveDaysAgo - inZone4FiveDaysAgo

	//zone 5
	let totalZone5Today = 0
	let inZone5Today = 0
	let totalZone5OneDayAgo = 0
	let inZone5OneDayAgo = 0
	let totalZone5TwoDaysAgo = 0
	let inZone5TwoDaysAgo = 0
	let totalZone5ThreeDaysAgo = 0
	let inZone5ThreeDaysAgo = 0
	let totalZone5FourDaysAgo = 0
	let inZone5FourDaysAgo = 0
	let totalZone5FiveDaysAgo = 0
	let inZone5FiveDaysAgo = 0

	//zone 5
	for (let m of jsonToday) {
		if (m['Fault Area'] === 'Zone 5 Ldl') {
			totalZone5Today++
		}
	}
	for (let m of jsonToday) {
		if (m['Fault Area'] === 'Zone 5 Ldl' && m.Zone === 'SIP 5 NEW') {
			inZone5Today++
		}
	}
	for (let m of jsonOneDayAgo) {
		if (m['Fault Area'] === 'Zone 5 Ldl') {
			totalZone5OneDayAgo++
		}
	}
	for (let m of jsonOneDayAgo) {
		if (m['Fault Area'] === 'Zone 5 Ldl' && m.Zone === 'SIP 5 NEW') {
			inZone5OneDayAgo++
		}
	}
	for (let m of jsonTwoDaysAgo) {
		if (m['Fault Area'] === 'Zone 5 Ldl') {
			totalZone5TwoDaysAgo++
		}
	}
	for (let m of jsonTwoDaysAgo) {
		if (m['Fault Area'] === 'Zone 5 Ldl' && m.Zone === 'SIP 5 NEW') {
			inZone5TwoDaysAgo++
		}
	}
	for (let m of jsonThreeDaysAgo) {
		if (m['Fault Area'] === 'Zone 5 Ldl') {
			totalZone5ThreeDaysAgo++
		}
	}
	for (let m of jsonThreeDaysAgo) {
		if (m['Fault Area'] === 'Zone 5 Ldl' && m.Zone === 'SIP 5 NEW') {
			inZone5ThreeDaysAgo++
		}
	}
	for (let m of jsonFourDaysAgo) {
		if (m['Fault Area'] === 'Zone 5 Ldl') {
			totalZone5FourDaysAgo++
		}
	}
	for (let m of jsonFourDaysAgo) {
		if (m['Fault Area'] === 'Zone 5 Ldl' && m.Zone === 'SIP 5 NEW') {
			inZone5FourDaysAgo++
		}
	}

	for (let m of jsonFiveDaysAgo) {
		if (m['Fault Area'] === 'Zone 5 Ldl') {
			totalZone5FiveDaysAgo++
		}
	}
	for (let m of jsonFiveDaysAgo) {
		if (m['Fault Area'] === 'Zone 5 Ldl' && m.Zone === 'SIP 5 NEW') {
			inZone5FiveDaysAgo++
		}
	}

	let effZone5Today = Math.round((inZone5Today / totalZone5Today) * 100)
	let effZone5OneDayAgo = Math.round((inZone5OneDayAgo / totalZone5OneDayAgo) * 100)
	let effZone5TwoDaysAgo = Math.round((inZone5TwoDaysAgo / totalZone5TwoDaysAgo) * 100)
	let effZone5ThreeDaysAgo = Math.round((inZone5ThreeDaysAgo / totalZone5ThreeDaysAgo) * 100)
	let effZone5FourDaysAgo = Math.round((inZone5FourDaysAgo / totalZone5FourDaysAgo) * 100)
	let effZone5FiveDaysAgo = Math.round((inZone5FiveDaysAgo / totalZone5FiveDaysAgo) * 100)

	let outZone5Today = totalZone5Today - inZone5Today
	let outZone5OneDayAgo = totalZone5OneDayAgo - inZone5OneDayAgo
	let outZone5TwoDaysAgo = totalZone5TwoDaysAgo - inZone5TwoDaysAgo
	let outZone5ThreeDaysAgo = totalZone5ThreeDaysAgo - inZone5ThreeDaysAgo
	let outZone5FourDaysAgo = totalZone5FourDaysAgo - inZone5FourDaysAgo
	let outZone5FiveDaysAgo = totalZone5FiveDaysAgo - inZone5FiveDaysAgo

	//zone 6
	let totalZone6Today = 0
	let inZone6Today = 0
	let totalZone6OneDayAgo = 0
	let inZone6OneDayAgo = 0
	let totalZone6TwoDaysAgo = 0
	let inZone6TwoDaysAgo = 0
	let totalZone6ThreeDaysAgo = 0
	let inZone6ThreeDaysAgo = 0
	let totalZone6FourDaysAgo = 0
	let inZone6FourDaysAgo = 0
	let totalZone6FiveDaysAgo = 0
	let inZone6FiveDaysAgo = 0

	//zone 6
	for (let m of jsonToday) {
		if (m['Fault Area'] === 'Zone 6 Ldl') {
			totalZone6Today++
		}
	}
	for (let m of jsonToday) {
		if (m['Fault Area'] === 'Zone 6 Ldl' && m.Zone === 'SIP 6 NEW') {
			inZone6Today++
		}
	}
	for (let m of jsonOneDayAgo) {
		if (m['Fault Area'] === 'Zone 6 Ldl') {
			totalZone6OneDayAgo++
		}
	}
	for (let m of jsonOneDayAgo) {
		if (m['Fault Area'] === 'Zone 6 Ldl' && m.Zone === 'SIP 6 NEW') {
			inZone6OneDayAgo++
		}
	}
	for (let m of jsonTwoDaysAgo) {
		if (m['Fault Area'] === 'Zone 6 Ldl') {
			totalZone6TwoDaysAgo++
		}
	}
	for (let m of jsonTwoDaysAgo) {
		if (m['Fault Area'] === 'Zone 6 Ldl' && m.Zone === 'SIP 6 NEW') {
			inZone6TwoDaysAgo++
		}
	}
	for (let m of jsonThreeDaysAgo) {
		if (m['Fault Area'] === 'Zone 6 Ldl') {
			totalZone6ThreeDaysAgo++
		}
	}
	for (let m of jsonThreeDaysAgo) {
		if (m['Fault Area'] === 'Zone 6 Ldl' && m.Zone === 'SIP 6 NEW') {
			inZone6ThreeDaysAgo++
		}
	}
	for (let m of jsonFourDaysAgo) {
		if (m['Fault Area'] === 'Zone 6 Ldl') {
			totalZone6FourDaysAgo++
		}
	}
	for (let m of jsonFourDaysAgo) {
		if (m['Fault Area'] === 'Zone 6 Ldl' && m.Zone === 'SIP 6 NEW') {
			inZone6FourDaysAgo++
		}
	}

	for (let m of jsonFiveDaysAgo) {
		if (m['Fault Area'] === 'Zone 6 Ldl') {
			totalZone6FiveDaysAgo++
		}
	}
	for (let m of jsonFiveDaysAgo) {
		if (m['Fault Area'] === 'Zone 6 Ldl' && m.Zone === 'SIP 6 NEW') {
			inZone6FiveDaysAgo++
		}
	}

	let effZone6Today = Math.round((inZone6Today / totalZone6Today) * 100)
	let effZone6OneDayAgo = Math.round((inZone6OneDayAgo / totalZone6OneDayAgo) * 100)
	let effZone6TwoDaysAgo = Math.round((inZone6TwoDaysAgo / totalZone6TwoDaysAgo) * 100)
	let effZone6ThreeDaysAgo = Math.round((inZone6ThreeDaysAgo / totalZone6ThreeDaysAgo) * 100)
	let effZone6FourDaysAgo = Math.round((inZone6FourDaysAgo / totalZone6FourDaysAgo) * 100)
	let effZone6FiveDaysAgo = Math.round((inZone6FiveDaysAgo / totalZone6FiveDaysAgo) * 100)

	let outZone6Today = totalZone6Today - inZone6Today
	let outZone6OneDayAgo = totalZone6OneDayAgo - inZone6OneDayAgo
	let outZone6TwoDaysAgo = totalZone6TwoDaysAgo - inZone6TwoDaysAgo
	let outZone6ThreeDaysAgo = totalZone6ThreeDaysAgo - inZone6ThreeDaysAgo
	let outZone6FourDaysAgo = totalZone6FourDaysAgo - inZone6FourDaysAgo
	let outZone6FiveDaysAgo = totalZone6FiveDaysAgo - inZone6FiveDaysAgo

	//track 3 zone 1

	let totalZone31Today = 0
	let inZone31Today = 0
	let totalZone31OneDayAgo = 0
	let inZone31OneDayAgo = 0
	let totalZone31TwoDaysAgo = 0
	let inZone31TwoDaysAgo = 0
	let totalZone31ThreeDaysAgo = 0
	let inZone31ThreeDaysAgo = 0
	let totalZone31FourDaysAgo = 0
	let inZone31FourDaysAgo = 0
	let totalZone31FiveDaysAgo = 0
	let inZone31FiveDaysAgo = 0

	//track 3 zone 1
	for (let m of jsonToday) {
		if (m['Fault Area'] === 'Track 3 Zone 1') {
			totalZone31Today++
		}
	}
	for (let m of jsonToday) {
		if (m['Fault Area'] === 'Track 3 Zone 1' && m.Zone === 'Track 3 SIP 1') {
			inZone31Today++
		}
	}
	for (let m of jsonOneDayAgo) {
		if (m['Fault Area'] === 'Track 3 Zone 1') {
			totalZone31OneDayAgo++
		}
	}
	for (let m of jsonOneDayAgo) {
		if (m['Fault Area'] === 'Track 3 Zone 1' && m.Zone === 'Track 3 SIP 1') {
			inZone31OneDayAgo++
		}
	}
	for (let m of jsonTwoDaysAgo) {
		if (m['Fault Area'] === 'Track 3 Zone 1') {
			totalZone31TwoDaysAgo++
		}
	}
	for (let m of jsonTwoDaysAgo) {
		if (m['Fault Area'] === 'Track 3 Zone 1' && m.Zone === 'Track 3 SIP 1') {
			inZone31TwoDaysAgo++
		}
	}
	for (let m of jsonThreeDaysAgo) {
		if (m['Fault Area'] === 'Track 3 Zone 1') {
			totalZone31ThreeDaysAgo++
		}
	}
	for (let m of jsonThreeDaysAgo) {
		if (m['Fault Area'] === 'Track 3 Zone 1' && (m.Zone === 'T3 SIP 2' || m.Zone === 'T3 SIP 1' || m.Zone === 'Track 3 SIP 2 - P42')) {
			inZone31ThreeDaysAgo++
		}
	}
	for (let m of jsonFourDaysAgo) {
		if (m['Fault Area'] === 'Track 3 Zone 1') {
			totalZone31FourDaysAgo++
		}
	}
	for (let m of jsonFourDaysAgo) {
		if (m['Fault Area'] === 'Track 3 Zone 1' && m.Zone === 'Track 3 SIP 1') {
			inZone31FourDaysAgo++
		}
	}

	for (let m of jsonFiveDaysAgo) {
		if (m['Fault Area'] === 'Track 3 Zone 1') {
			totalZone31FiveDaysAgo++
		}
	}
	for (let m of jsonFiveDaysAgo) {
		if (m['Fault Area'] === 'Track 3 Zone 1' && m.Zone === 'Track 3 SIP 1') {
			inZone31FiveDaysAgo++
		}
	}

	let effZone31Today = Math.round((inZone31Today / totalZone31Today) * 100)
	let effZone31OneDayAgo = Math.round((inZone31OneDayAgo / totalZone31OneDayAgo) * 100)
	let effZone31TwoDaysAgo = Math.round((inZone31TwoDaysAgo / totalZone31TwoDaysAgo) * 100)
	let effZone31ThreeDaysAgo = Math.round((inZone31ThreeDaysAgo / totalZone31ThreeDaysAgo) * 100)
	let effZone31FourDaysAgo = Math.round((inZone31FourDaysAgo / totalZone31FourDaysAgo) * 100)
	let effZone31FiveDaysAgo = Math.round((inZone31FiveDaysAgo / totalZone31FiveDaysAgo) * 100)

	let outZone31Today = totalZone31Today - inZone31Today
	let outZone31OneDayAgo = totalZone31OneDayAgo - inZone31OneDayAgo
	let outZone31TwoDaysAgo = totalZone31TwoDaysAgo - inZone31TwoDaysAgo
	let outZone31ThreeDaysAgo = totalZone31ThreeDaysAgo - inZone31ThreeDaysAgo
	let outZone31FourDaysAgo = totalZone31FourDaysAgo - inZone31FourDaysAgo
	let outZone31FiveDaysAgo = totalZone31FiveDaysAgo - inZone31FiveDaysAgo

	//track 3 zone 2

	let totalZone32Today = 0
	let inZone32Today = 0
	let totalZone32OneDayAgo = 0
	let inZone32OneDayAgo = 0
	let totalZone32TwoDaysAgo = 0
	let inZone32TwoDaysAgo = 0
	let totalZone32ThreeDaysAgo = 0
	let inZone32ThreeDaysAgo = 0
	let totalZone32FourDaysAgo = 0
	let inZone32FourDaysAgo = 0
	let totalZone32FiveDaysAgo = 0
	let inZone32FiveDaysAgo = 0

	//track 3 zone 2
	for (let m of jsonToday) {
		if (m['Fault Area'] === 'Track 3 Zone 2') {
			totalZone32Today++
		}
	}
	for (let m of jsonToday) {
		if (m['Fault Area'] === 'Track 3 Zone 2' && m.Zone === 'Track 3 SIP 2') {
			inZone32Today++
		}
	}
	for (let m of jsonOneDayAgo) {
		if (m['Fault Area'] === 'Track 3 Zone 2') {
			totalZone32OneDayAgo++
		}
	}
	for (let m of jsonOneDayAgo) {
		if (m['Fault Area'] === 'Track 3 Zone 2' && m.Zone === 'Track 3 SIP 2') {
			inZone32OneDayAgo++
		}
	}
	for (let m of jsonTwoDaysAgo) {
		if (m['Fault Area'] === 'Track 3 Zone 2') {
			totalZone32TwoDaysAgo++
		}
	}
	for (let m of jsonTwoDaysAgo) {
		if (m['Fault Area'] === 'Track 3 Zone 2' && m.Zone === 'Track 3 SIP 2') {
			inZone32TwoDaysAgo++
		}
	}
	for (let m of jsonThreeDaysAgo) {
		if (m['Fault Area'] === 'Track 3 Zone 2') {
			totalZone32ThreeDaysAgo++
		}
	}
	for (let m of jsonThreeDaysAgo) {
		if (m['Fault Area'] === 'Track 3 Zone 2' && m.Zone === 'Track 3 SIP 2') {
			inZone32ThreeDaysAgo++
		}
	}
	for (let m of jsonFourDaysAgo) {
		if (m['Fault Area'] === 'Track 3 Zone 2') {
			totalZone32FourDaysAgo++
		}
	}
	for (let m of jsonFourDaysAgo) {
		if (m['Fault Area'] === 'Track 3 Zone 2' && m.Zone === 'Track 3 SIP 2') {
			inZone32FourDaysAgo++
		}
	}

	for (let m of jsonFiveDaysAgo) {
		if (m['Fault Area'] === 'Track 3 Zone 2') {
			totalZone32FiveDaysAgo++
		}
	}
	for (let m of jsonFiveDaysAgo) {
		if (m['Fault Area'] === 'Track 3 Zone 1' && m.Zone === 'Track 3 SIP 2') {
			inZone32FiveDaysAgo++
		}
	}

	let effZone32Today = Math.round((inZone32Today / totalZone32Today) * 100)
	let effZone32OneDayAgo = Math.round((inZone32OneDayAgo / totalZone32OneDayAgo) * 100)
	let effZone32TwoDaysAgo = Math.round((inZone32TwoDaysAgo / totalZone32TwoDaysAgo) * 100)
	let effZone32ThreeDaysAgo = Math.round((inZone32ThreeDaysAgo / totalZone32ThreeDaysAgo) * 100)
	let effZone32FourDaysAgo = Math.round((inZone32FourDaysAgo / totalZone32FourDaysAgo) * 100)
	let effZone32FiveDaysAgo = Math.round((inZone32FiveDaysAgo / totalZone32FiveDaysAgo) * 100)

	let outZone32Today = totalZone32Today - inZone32Today
	let outZone32OneDayAgo = totalZone32OneDayAgo - inZone32OneDayAgo
	let outZone32TwoDaysAgo = totalZone32TwoDaysAgo - inZone32TwoDaysAgo
	let outZone32ThreeDaysAgo = totalZone32ThreeDaysAgo - inZone32ThreeDaysAgo
	let outZone32FourDaysAgo = totalZone32FourDaysAgo - inZone32FourDaysAgo
	let outZone32FiveDaysAgo = totalZone32FiveDaysAgo - inZone32FiveDaysAgo

	//booms subs

	let totalZoneBToday = 0
	let inZoneBToday = 0
	let totalZoneBOneDayAgo = 0
	let inZoneBOneDayAgo = 0
	let totalZoneBTwoDaysAgo = 0
	let inZoneBTwoDaysAgo = 0
	let totalZoneBThreeDaysAgo = 0
	let inZoneBThreeDaysAgo = 0
	let totalZoneBFourDaysAgo = 0
	let inZoneBFourDaysAgo = 0
	let totalZoneBFiveDaysAgo = 0
	let inZoneBFiveDaysAgo = 0

	//booms subs
	for (let m of jsonToday) {
		if (m['Fault Area'] === 'Boom Sub Assembly') {
			totalZoneBToday++
		}
	}
	for (let m of jsonToday) {
		if (m['Fault Area'] === 'Boom Sub Assembly' && m.Zone === 'Boom Sub Assembly LDL') {
			inZoneBToday++
		}
	}
	for (let m of jsonOneDayAgo) {
		if (m['Fault Area'] === 'Boom Sub Assembly') {
			totalZoneBOneDayAgo++
		}
	}
	for (let m of jsonOneDayAgo) {
		if (m['Fault Area'] === 'Boom Sub Assembly' && m.Zone === 'Boom Sub Assembly LDL') {
			inZoneBOneDayAgo++
		}
	}
	for (let m of jsonTwoDaysAgo) {
		if (m['Fault Area'] === 'Boom Sub Assembly') {
			totalZoneBTwoDaysAgo++
		}
	}
	for (let m of jsonTwoDaysAgo) {
		if (m['Fault Area'] === 'Boom Sub Assembly' && m.Zone === 'Boom Sub Assembly LDL') {
			inZoneBTwoDaysAgo++
		}
	}
	for (let m of jsonThreeDaysAgo) {
		if (m['Fault Area'] === 'Boom Sub Assembly') {
			totalZoneBThreeDaysAgo++
		}
	}
	for (let m of jsonThreeDaysAgo) {
		if (m['Fault Area'] === 'Boom Sub Assembly' && m.Zone === 'Boom Sub Assembly LDL') {
			inZoneBThreeDaysAgo++
		}
	}
	for (let m of jsonFourDaysAgo) {
		if (m['Fault Area'] === 'Boom Sub Assembly') {
			totalZoneBFourDaysAgo++
		}
	}
	for (let m of jsonFourDaysAgo) {
		if (m['Fault Area'] === 'Boom Sub Assembly' && m.Zone === 'Boom Sub Assembly LDL') {
			inZoneBFourDaysAgo++
		}
	}

	for (let m of jsonFiveDaysAgo) {
		if (m['Fault Area'] === 'Boom Sub Assembly') {
			totalZoneBFiveDaysAgo++
		}
	}
	for (let m of jsonFiveDaysAgo) {
		if (m['Fault Area'] === 'Boom Sub Assembly' && m.Zone === 'Boom Sub Assembly LDL') {
			inZoneBFiveDaysAgo++
		}
	}

	let effZoneBToday = Math.round((inZoneBToday / totalZoneBToday) * 100)
	let effZoneBOneDayAgo = Math.round((inZoneBOneDayAgo / totalZoneBOneDayAgo) * 100)
	let effZoneBTwoDaysAgo = Math.round((inZoneBTwoDaysAgo / totalZoneBTwoDaysAgo) * 100)
	let effZoneBThreeDaysAgo = Math.round((inZoneBThreeDaysAgo / totalZoneBThreeDaysAgo) * 100)
	let effZoneBFourDaysAgo = Math.round((inZoneBFourDaysAgo / totalZoneBFourDaysAgo) * 100)
	let effZoneBFiveDaysAgo = Math.round((inZoneBFiveDaysAgo / totalZoneBFiveDaysAgo) * 100)

	let outZoneBToday = totalZoneBToday - inZoneBToday
	let outZoneBOneDayAgo = totalZoneBOneDayAgo - inZoneBOneDayAgo
	let outZoneBTwoDaysAgo = totalZoneBTwoDaysAgo - inZoneBTwoDaysAgo
	let outZoneBThreeDaysAgo = totalZoneBThreeDaysAgo - inZoneBThreeDaysAgo
	let outZoneBFourDaysAgo = totalZoneBFourDaysAgo - inZoneBFourDaysAgo
	let outZoneBFiveDaysAgo = totalZoneBFiveDaysAgo - inZoneBFiveDaysAgo

	// console.log(new Date(new Date().getTime() - 7 * 24 * 60 * 60 * 1000))

	// console.log(new Date(new Date().getTime() - 8 * 24 * 60 * 60 * 1000) < new Date())

	// if (area === 'Booms') {
	// 	for (let m of json) {
	// 		if (m['Fault Area'] === 'Boom Sub Assembly') {
	// 			totalZone.push(m)
	// 		}
	// 	}
	// 	for (let m of json) {
	// 		if (m['Fault Area'] === 'Boom Sub Assembly' && m.Zone === 'Boom Sub Assembly LDL') {
	// 			inZone.push(m)
	// 		}
	// 	}
	// }7
	// console.log(today)

	res.render('dash/effHistory', {
		division,
		today,
		oneDayAgo,
		twoDaysAgo,
		threeDaysAgo,
		fourDaysAgo,
		fiveDaysAgo,
		effZone2Today,
		effZone2OneDayAgo,
		effZone2TwoDaysAgo,
		effZone2ThreeDaysAgo,
		effZone2FourDaysAgo,
		effZone2FiveDaysAgo,
		effZone3Today,
		effZone3OneDayAgo,
		effZone3TwoDaysAgo,
		effZone3ThreeDaysAgo,
		effZone3FourDaysAgo,
		effZone3FiveDaysAgo,
		effZone4Today,
		effZone4OneDayAgo,
		effZone4TwoDaysAgo,
		effZone4ThreeDaysAgo,
		effZone4FourDaysAgo,
		effZone4FiveDaysAgo,
		effZone5Today,
		effZone5OneDayAgo,
		effZone5TwoDaysAgo,
		effZone5ThreeDaysAgo,
		effZone5FourDaysAgo,
		effZone5FiveDaysAgo,
		effZone6Today,
		effZone6OneDayAgo,
		effZone6TwoDaysAgo,
		effZone6ThreeDaysAgo,
		effZone6FourDaysAgo,
		effZone6FiveDaysAgo,
		effZone31Today,
		effZone31OneDayAgo,
		effZone31TwoDaysAgo,
		effZone31ThreeDaysAgo,
		effZone31FourDaysAgo,
		effZone31FiveDaysAgo,
		effZone32Today,
		effZone32OneDayAgo,
		effZone32TwoDaysAgo,
		effZone32ThreeDaysAgo,
		effZone32FourDaysAgo,
		effZone32FiveDaysAgo,
		effZoneBToday,
		effZoneBOneDayAgo,
		effZoneBTwoDaysAgo,
		effZoneBThreeDaysAgo,
		effZoneBFourDaysAgo,
		effZoneBFiveDaysAgo,

		inZone2Today,
		outZone2Today,
		inZone2OneDayAgo,
		outZone2OneDayAgo,
		inZone2TwoDaysAgo,
		outZone2TwoDaysAgo,
		inZone2ThreeDaysAgo,
		outZone2ThreeDaysAgo,
		inZone2FourDaysAgo,
		outZone2FourDaysAgo,
		inZone2FiveDaysAgo,
		outZone2FiveDaysAgo,

		inZone3Today,
		outZone3Today,
		inZone3OneDayAgo,
		outZone3OneDayAgo,
		inZone3TwoDaysAgo,
		outZone3TwoDaysAgo,
		inZone3ThreeDaysAgo,
		outZone3ThreeDaysAgo,
		inZone3FourDaysAgo,
		outZone3FourDaysAgo,
		inZone3FiveDaysAgo,
		outZone3FiveDaysAgo,

		inZone4Today,
		outZone4Today,
		inZone4OneDayAgo,
		outZone4OneDayAgo,
		inZone4TwoDaysAgo,
		outZone4TwoDaysAgo,
		inZone4ThreeDaysAgo,
		outZone4ThreeDaysAgo,
		inZone4FourDaysAgo,
		outZone4FourDaysAgo,
		inZone4FiveDaysAgo,
		outZone4FiveDaysAgo,

		inZone5Today,
		outZone5Today,
		inZone5OneDayAgo,
		outZone5OneDayAgo,
		inZone5TwoDaysAgo,
		outZone5TwoDaysAgo,
		inZone5ThreeDaysAgo,
		outZone5ThreeDaysAgo,
		inZone5FourDaysAgo,
		outZone5FourDaysAgo,
		inZone5FiveDaysAgo,
		outZone5FiveDaysAgo,

		inZone6Today,
		outZone6Today,
		inZone6OneDayAgo,
		outZone6OneDayAgo,
		inZone6TwoDaysAgo,
		outZone6TwoDaysAgo,
		inZone6ThreeDaysAgo,
		outZone6ThreeDaysAgo,
		inZone6FourDaysAgo,
		outZone6FourDaysAgo,
		inZone6FiveDaysAgo,
		outZone6FiveDaysAgo,

		inZone31Today,
		outZone31Today,
		inZone31OneDayAgo,
		outZone31OneDayAgo,
		inZone31TwoDaysAgo,
		outZone31TwoDaysAgo,
		inZone31ThreeDaysAgo,
		outZone31ThreeDaysAgo,
		inZone31FourDaysAgo,
		outZone31FourDaysAgo,
		inZone31FiveDaysAgo,
		outZone31FiveDaysAgo,

		inZone32Today,
		outZone32Today,
		inZone32OneDayAgo,
		outZone32OneDayAgo,
		inZone32TwoDaysAgo,
		outZone32TwoDaysAgo,
		inZone32ThreeDaysAgo,
		outZone32ThreeDaysAgo,
		inZone32FourDaysAgo,
		outZone32FourDaysAgo,
		inZone32FiveDaysAgo,
		outZone32FiveDaysAgo,

		inZoneBToday,
		outZoneBToday,
		inZoneBOneDayAgo,
		outZoneBOneDayAgo,
		inZoneBTwoDaysAgo,
		outZoneBTwoDaysAgo,
		inZoneBThreeDaysAgo,
		outZoneBThreeDaysAgo,
		inZoneBFourDaysAgo,
		outZoneBFourDaysAgo,
		inZoneBFiveDaysAgo,
		outZoneBFiveDaysAgo,
	})
}

const Json2csvParser = require('json2csv').Parser

module.exports.downloadComponent = async (req, res) => {
	let { division, code } = req.params
	let filterOption
	let bu = 19
	if (code === '18') {
		bu = 18
	} else if (code === '5') {
		bu = 5
	} else if (code === '38') {
		bu = 38
	} else if (code === '19') {
		bu = 19
	} else if (code === '64') {
		bu = 64
	} else {
		return
	}

	if (division === 'Cabs') {
		filterOption = 'Cab Systems'
	}
	if (division === 'HBU') {
		filterOption = 'Hydraulic Business Unit'
	}

	process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0'
	const curr = new Date()
	const thisWeek = new Date(curr.setDate(curr.getDate() - curr.getDay()))
	const startOfWeek = new Date(thisWeek.getFullYear(), thisWeek.getMonth(), thisWeek.getDate(), 1, 0, 0)
	let startDate = moment(startOfWeek).add(1, 'days').format('YYYY/MM/DD/00/00')
	let endDate = moment().format('YYYY/MM/DD/kk/mm')

	const compact = await axios(`https://internal.jcb.local/qsmartapi/api/qsmart/faults/${bu}/${startDate}/${endDate}/1`)

	const cpFaultsThisWeek = compact.data.filter((fault) => fault['Fault Area'] === filterOption)

	const json2csvParser = new Json2csvParser({})
	const csv = json2csvParser.parse(cpFaultsThisWeek)

	fs.writeFile('faults.csv', csv, function (err) {
		if (err) throw err.message
		// console.log('file saved');
		res.download('./faults.csv', () => {
			// fs.unlinkSync('./customer.csv');
		})
	})
}

let cabsEmail = new CronJob('0 0 6 * * *', async function () {
	process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0'

	let cpFaultsThisWeek = []
	let bhlFaultsThisWeek = []
	let ldlFaultsThisWeek = []
	let sdFaultsThisWeek = []

	try {
		const curr = new Date()

		// console.log('done')
		const thisWeek = new Date(curr.setDate(curr.getDate() - curr.getDay()))
		const startOfWeek = new Date(thisWeek.getFullYear(), thisWeek.getMonth(), thisWeek.getDate(), 1, 0, 0)
		let startDate = moment().subtract(30, 'days').format('YYYY/MM/DD/00/00')
		let endDate = moment().format('YYYY/MM/DD/kk/mm')

		const compact = await axios(`https://internal.jcb.local/qsmartapi/api/qsmart/faults/5/${startDate}/${endDate}/2`)
		const backhoe = await axios(`https://internal.jcb.local/qsmartapi/api/qsmart/faults/18/${startDate}/${endDate}/2`)

		const loadall = await axios(`https://internal.jcb.local/qsmartapi/api/qsmart/faults/19/${startDate}/${endDate}/2`)
		const siteDumper = await axios(`https://internal.jcb.local/qsmartapi/api/qsmart/faults/64/${startDate}/${endDate}/2`)

		if (compact.data) {
			cpFaultsThisWeek = await compact.data.filter((fault) => fault['Fault Area'] === 'Cab Systems')
		}
		if (backhoe.data) {
			bhlFaultsThisWeek = await backhoe.data.filter((fault) => fault['Fault Area'] === 'Cab Systems')
		}
		if (loadall.data) {
			ldlFaultsThisWeek = await loadall.data.filter((fault) => fault['Fault Area'] === 'Cab Systems')
		}
		if (siteDumper.data) {
			sdFaultsThisWeek = await siteDumper.data.filter((fault) => fault['Fault Area'] === 'Cab Systems')
		}

		let faultsNotFixedThisWeek = [...cpFaultsThisWeek, ...bhlFaultsThisWeek, ...ldlFaultsThisWeek, ...sdFaultsThisWeek]

		let theList = faultsNotFixedThisWeek.sort((a, b) => a.createdAt - b.createdAt)
		const json2csvParser = new Json2csvParser({})
		const csv = json2csvParser.parse(theList)

		fs.writeFile('Cabs open faults.csv', csv, function (err) {
			if (err) throw err.message
			// console.log('file saved')
			// res.download('./ldl.csv', () => {
			// fs.unlinkSync('./customer.csv');
			// })
		})

		const transporter = nodemailer.createTransport({
			host: process.env.HOST, //Host
			port: process.env.PORT, // Port
			tls: {
				rejectUnauthorized: false,
			},
		})

		let emails = [
			'soron.glynn@jcb.com',
			'ali.ebrahimi@jcb.com',
			'carl.gill@jcb.com',
			'rob.arnold@jcb.com',
			'chris.lydell@jcb.com',
			'richard.hooper@jcb.com',
			'marcus.lupton@jcb.com',
		]
		let mailOptions = {
			from: 'JCB-Cabs-Faults@jcb.com',
			to: emails,
			subject: 'Cabs Open Faults Status',
			// text        :
			// 	'All critical checks have been completed in Loadall' + '\n\n' + 'Thanks.\n' + 'JCB T Card System\n',
			html:
				`<img src="cid:jcb-logo"/>` +
				'<h3>Please see attached file for open Cabs faults</h3>' +
				`<h4>This is an automated email</h4>` +
				`<h4>Please do not respond</h4>` +
				`<h4>Thanks</h4>`,
			attachments: [
				{
					filename: 'QUT.png',
					path: './PDF/images/QUT.png',
					cid: 'jcb-logo',
				},
				{
					// filename and content type is derived from path
					path: './Cabs open faults.csv',
				},
			],
		}

		transporter.sendMail(mailOptions, () => {})
	} catch (error) {
		console.log(error)
	}
})

// cabsEmail.start()

let cabsEmailFixed = new CronJob('0 0 6 * * *', async function () {
	process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0'

	let cpFaultsThisWeek = []
	let bhlFaultsThisWeek = []
	let ldlFaultsThisWeek = []
	let sdFaultsThisWeek = []

	try {
		const curr = new Date()

		// console.log('done')
		const thisWeek = new Date(curr.setDate(curr.getDate() - curr.getDay()))
		const startOfWeek = new Date(thisWeek.getFullYear(), thisWeek.getMonth(), thisWeek.getDate(), 1, 0, 0)
		let startDate = moment().subtract(30, 'days').format('YYYY/MM/DD/00/00')
		let endDate = moment().format('YYYY/MM/DD/kk/mm')

		const compact = await axios(`https://internal.jcb.local/qsmartapi/api/qsmart/faults/5/${startDate}/${endDate}/1`)
		const backhoe = await axios(`https://internal.jcb.local/qsmartapi/api/qsmart/faults/18/${startDate}/${endDate}/1`)

		const loadall = await axios(`https://internal.jcb.local/qsmartapi/api/qsmart/faults/19/${startDate}/${endDate}/1`)
		const siteDumper = await axios(`https://internal.jcb.local/qsmartapi/api/qsmart/faults/64/${startDate}/${endDate}/1`)

		if (compact.data) {
			cpFaultsThisWeek = await compact.data.filter((fault) => fault['Fault Area'] === 'Cab Systems')
		}
		if (backhoe.data) {
			bhlFaultsThisWeek = await backhoe.data.filter((fault) => fault['Fault Area'] === 'Cab Systems')
		}
		if (loadall.data) {
			ldlFaultsThisWeek = await loadall.data.filter((fault) => fault['Fault Area'] === 'Cab Systems')
		}
		if (siteDumper.data) {
			sdFaultsThisWeek = await siteDumper.data.filter((fault) => fault['Fault Area'] === 'Cab Systems')
		}

		let faultsNotFixedThisWeek = [...cpFaultsThisWeek, ...bhlFaultsThisWeek, ...ldlFaultsThisWeek, ...sdFaultsThisWeek]

		let theList = faultsNotFixedThisWeek.sort((a, b) => a.createdAt - b.createdAt)
		const json2csvParser = new Json2csvParser({})
		const csv = json2csvParser.parse(theList)

		fs.writeFile('Cabs fixed faults.csv', csv, function (err) {
			if (err) throw err.message
			// console.log('file saved')
			// res.download('./ldl.csv', () => {
			// fs.unlinkSync('./customer.csv');
			// })
		})

		const transporter = nodemailer.createTransport({
			host: process.env.HOST, //Host
			port: process.env.PORT, // Port
			tls: {
				rejectUnauthorized: false,
			},
		})

		let emails = ['soron.glynn@jcb.com', 'ali.ebrahimi@jcb.com', 'chris.lydell@jcb.com', 'rob.arnold@jcb.com']
		let mailOptions = {
			from: 'JCB-Cabs-Faults@jcb.com',
			to: emails,
			subject: 'Cabs Fixed Faults Status',
			// text        :
			// 	'All critical checks have been completed in Loadall' + '\n\n' + 'Thanks.\n' + 'JCB T Card System\n',
			html:
				`<img src="cid:jcb-logo"/>` +
				'<h3>Please see attached file for open Cabs faults</h3>' +
				`<h4>This is an automated email</h4>` +
				`<h4>Please do not respond</h4>` +
				`<h4>Thanks</h4>`,
			attachments: [
				{
					filename: 'QUT.png',
					path: './PDF/images/QUT.png',
					cid: 'jcb-logo',
				},
				{
					// filename and content type is derived from path
					path: './Cabs fixed faults.csv',
				},
			],
		}

		transporter.sendMail(mailOptions, () => {})
	} catch (error) {
		console.log(error)
	}
})

// cabsEmailFixed.start()

let cabsEmailPrevDay = new CronJob('0 0 6 * * *', async function () {
	process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0'
	let cpFaultsThisWeek = []
	let bhlFaultsThisWeek = []
	let ldlFaultsThisWeek = []
	let sdFaultsThisWeek = []
	try {
		const curr = new Date()

		// console.log('done')
		const thisWeek = new Date(curr.setDate(curr.getDate() - curr.getDay()))
		const startOfWeek = new Date(thisWeek.getFullYear(), thisWeek.getMonth(), thisWeek.getDate(), 1, 0, 0)

		let startDate = moment().subtract(1, 'days').format('YYYY/MM/DD/00/00')
		let endDate = moment().subtract(1, 'days').format('YYYY/MM/DD/23/59')

		const compact = await axios(`https://internal.jcb.local/qsmartapi/api/qsmart/faults/5/${startDate}/${endDate}/1`)
		const backhoe = await axios(`https://internal.jcb.local/qsmartapi/api/qsmart/faults/18/${startDate}/${endDate}/1`)

		const loadall = await axios(`https://internal.jcb.local/qsmartapi/api/qsmart/faults/19/${startDate}/${endDate}/1`)
		const siteDumper = await axios(`https://internal.jcb.local/qsmartapi/api/qsmart/faults/64/${startDate}/${endDate}/1`)

		if (compact.data) {
			cpFaultsThisWeek = await compact.data.filter((fault) => fault['Fault Area'] === 'Cab Systems')
		}
		if (backhoe.data) {
			bhlFaultsThisWeek = await backhoe.data.filter((fault) => fault['Fault Area'] === 'Cab Systems')
		}
		if (loadall.data) {
			ldlFaultsThisWeek = await loadall.data.filter((fault) => fault['Fault Area'] === 'Cab Systems')
		}
		if (siteDumper.data) {
			sdFaultsThisWeek = await siteDumper.data.filter((fault) => fault['Fault Area'] === 'Cab Systems')
		}

		let faultsNotFixedThisWeek = [...cpFaultsThisWeek, ...bhlFaultsThisWeek, ...ldlFaultsThisWeek, ...sdFaultsThisWeek]

		let theList = faultsNotFixedThisWeek.sort((a, b) => a.createdAt - b.createdAt)
		const json2csvParser = new Json2csvParser({})
		const csv = json2csvParser.parse(theList)

		fs.writeFile('Cabs Yesterday faults.csv', csv, function (err) {
			if (err) throw err.message
		})

		const transporter = nodemailer.createTransport({
			host: process.env.HOST, //Host
			port: process.env.PORT, // Port
			tls: {
				rejectUnauthorized: false,
			},
		})

		let emails = ['soron.glynn@jcb.com', 'ali.ebrahimi@jcb.com', 'chris.lydell@jcb.com', 'rob.arnold@jcb.com']
		let mailOptions = {
			from: 'JCB-Cabs-Faults@jcb.com',
			to: emails,
			subject: 'Cabs Yesterday Faults Status',
			// text        :
			// 	'All critical checks have been completed in Loadall' + '\n\n' + 'Thanks.\n' + 'JCB T Card System\n',
			html:
				`<img src="cid:jcb-logo"/>` +
				'<h3>Please see attached file for open Cabs faults Raised Yesterday</h3>' +
				`<h4>This is an automated email</h4>` +
				`<h4>Please do not respond</h4>` +
				`<h4>Thanks</h4>`,
			attachments: [
				{
					filename: 'QUT.png',
					path: './PDF/images/QUT.png',
					cid: 'jcb-logo',
				},
				{
					// filename and content type is derived from path
					path: './Cabs Yesterday faults.csv',
				},
			],
		}

		transporter.sendMail(mailOptions, () => {})
	} catch (error) {
		console.log(error)
	}
})

// cabsEmailPrevDay.start()

// let dailyRagUpdate = new  CronJob('0 0 */6 * * *', async function() {
// let dailyRagUpdateClosed = new  CronJob('0 0 */12 * * *', async function () {
// 	try {
// 		const closedClaims = await Claim.find({
// 			rag: 'Closed',
// 		})

// 		for (let claim of closedClaims) {
// 			let failedPart = claim.failedPart

// 			await Claim.updateMany(
// 				{ failedPart: failedPart, fourC: 'No', vetted: 'Yes' },
// 				{
// 					$set: {
// 						status: 'Closed',
// 						// rag    : 'Closed',
// 					},
// 				},
// 				{ multi: true }
// 			)
// 		}
// 	} catch (error) {
// 		console.log(error)
// 	}
// })

// dailyRagUpdateClosed.start()

let dailyRagUpdateContained = new CronJob('0 0 12 * * *', async function () {
	try {
		await Claim.updateMany(
			{
				status: { $ne: 'Closed' },
				buildDate: { $regex: '/2021' },
				tPeriod: 'DOA',
				vetted: 'Yes',
			},
			{
				status: 'Closed',
				// containedAt: Date.now(),
				closedAt: Date.now(),
				containNotes: 'Contained as part of system cleansing 2022 ref Mark Norton',
				closeNotes: 'Contained as part of system cleansing 2022 ref Mark Norton',
				containedBy: 'System',
				closedBy: 'System',
			}
		)
	} catch (error) {
		console.log(error)
	}
	console.log('Done')
})

// dailyRagUpdateContained.start()

let getGroupFaults = new CronJob('0 */23 * * * *', async function (req, res) {
	process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0'

	try {
		const curr = new Date()
		const thisWeek = new Date(curr.setDate(curr.getDate() - curr.getDay()))
		const startOfWeek = new Date(thisWeek.getFullYear(), thisWeek.getMonth(), thisWeek.getDate(), 1, 0, 0)
		let startDate = moment().subtract(10, 'days').format('YYYY/MM/DD/00/00')
		let stageStart = moment().subtract(1, 'days').format('YYYY/MM/DD/00/00')
		// let startDate = '2021/09/13/00/00'
		// let endDate = moment().subtract(30, 'days').format('YYYY/MM/DD/00/00')
		let endDate = moment().format('YYYY/MM/DD/23/59')
		const todayDB = new Date()
		todayDB.setHours(0, 0, 0, 0)

		const thirtyDaysAgoDB = new Date(todayDB)
		const tenDaysAgoDB = new Date(todayDB)
		const threeDaysAgoDB = new Date(todayDB)
		const oneDayAgoDB = new Date()

		thirtyDaysAgoDB.setDate(thirtyDaysAgoDB.getDate() - 30)
		tenDaysAgoDB.setDate(tenDaysAgoDB.getDate() - 10)
		threeDaysAgoDB.setDate(threeDaysAgoDB.getDate() - 3)
		oneDayAgoDB.setDate(oneDayAgoDB.getDate() - 1)

		// console.log(oneDayAgoDB)

		// const compact = await axios(
		// 	`https://internal.jcb.local/qsmartapi/api/qsmart/faults/5/${startDate}/${endDate}/1`,
		// )
		// const backhoe = await axios(
		// 	`https://internal.jcb.local/qsmartapi/api/qsmart/faults/18/${startDate}/${endDate}/1`,
		// )
		// const heavy = await axios(
		// 	`https://internal.jcb.local/qsmartapi/api/qsmart/faults/38/${startDate}/${endDate}/1`,
		// )
		const loadall = await axios(`https://internal.jcb.local/qsmartapi/api/qsmart/faults/19/${startDate}/${endDate}/1`)
		// const siteDumper = await axios(
		// 	`https://internal.jcb.local/qsmartapi/api/qsmart/faults/64/${startDate}/${endDate}/1`,
		// )

		// const cpFaults = await compact.data
		// const bhlFaults = await backhoe.data
		// const hpFaults = await heavy.data
		const ldlFaults = await loadall.data
		// const sdFaults = await siteDumper.data

		let faults = [
			// ...cpFaults,
			// ...bhlFaults,
			// ...hpFaults,
			...ldlFaults,
			// ...sdFaults,
		]

		// insert into db
		await QSmart.create(faults)
		// console.log(faults)

		let duplicatesArray = []

		const duplicates = await QSmart.aggregate([
			{
				$match: {
					createdAt: { $gt: tenDaysAgoDB }, // discard selection criteria
				},
			},
			{
				$group: {
					// _id   : '$Serial Number', // can be grouped on multiple properties
					_id: {
						serial: '$Build Number',
						date: '$Created Date',
						fault: '$User Defined Test',
					}, // can be grouped on multiple properties
					dup: { $addToSet: '$_id' },
					count: { $sum: 1 },
				},
			},
			{
				$match: {
					count: { $gt: 1 }, // Duplicates considered as count greater than one
				},
			},
		])
		duplicates.forEach(function (doc) {
			doc.dup.shift() // First element skipped for deleting
			doc.dup.forEach(function (dupId) {
				duplicatesArray.push(dupId) // Getting all duplicate ids
			})
		})
		// Check all "_id" which you are deleting
		// console.log(duplicatesArray)

		// // Remove all duplicates in one go
		await QSmart.deleteMany({ _id: { $in: duplicatesArray } })

		///////////////// get stage 12
		//////////////////////////////////////////////////////////

		const stage12 = await axios(`https://internal.jcb.local/qsmartapi/api/qsmart/stages/19/12/${stageStart}/${endDate}`)

		let stage12Data = stage12.data

		if (stage12.data) {
			for (let s of stage12Data) {
				const theOrder = await Order.findOne({
					buildNumber: s.buildNo,
				})
				// stage12Data.dealer = Order.dealer
				// stage12Data.customer = Order.customer
			}
		}

		// insert into db
		if (stage12Data) await Stage12.create(stage12Data)

		// await Stage12.create(stage12Data)

		let duplicatesArrayStage12 = []

		const duplicatesStage12 = await Stage12.aggregate([
			{
				$match: {
					createdAt: { $gt: threeDaysAgoDB }, // discard selection criteria
				},
			},
			{
				$group: {
					// _id   : '$Serial Number', // can be grouped on multiple properties
					_id: {
						buildNo: '$buildNo',
						date: '$dateToStage',
					}, // can be grouped on multiple properties
					dup: { $addToSet: '$_id' },
					count: { $sum: 1 },
				},
			},
			{
				$match: {
					count: { $gt: 1 }, // Duplicates considered as count greater than one
				},
			},
		])
		duplicatesStage12.forEach(function (doc) {
			doc.dup.shift() // First element skipped for deleting
			doc.dup.forEach(function (dupId) {
				duplicatesArrayStage12.push(dupId) // Getting all duplicate ids
			})
		})

		const theCutInnn = new Date('2021, 11, 01')

		// // Remove all duplicates in one go
		await Stage12.deleteMany({ _id: { $in: duplicatesArrayStage12 } })
		// await Stage12.deleteMany({ dateToStage: { $lt: theCutInnn } })

		const stage12ForUpdate = await Stage12.find({
			createdAt: { $gt: thirtyDaysAgoDB },
			// $or       : [ { dealer: { $ne: null } }, { customer: { $ne: null } } ],
		})

		for (let s of stage12ForUpdate) {
			let theOrder = await Order.findOne({
				buildNumber: s.buildNo,
			})
			if (theOrder) {
				s.dealer = theOrder.dealer
				s.customer = theOrder.customer
				s.engineNumber = theOrder.engineNumber

				// if (theOrder.engineNumber) s.engineNumber = theOrder.engineNumber.substring(0, 9)
				// if (theOrder.engineNumber) console.log(theOrder.engineNumber.substring(0, 11))
				await s.save()
			}
			// console.log(s)
		}
		// console.log('just done it')
		//   http://localhost/dash/stage12download

		//////////////////////////////////////////////////////////////

		///////////////// get stage 16
		//////////////////////////////////////////////////////////

		const stage16 = await axios(`https://internal.jcb.local/qsmartapi/api/qsmart/stages/19/16/${startDate}/${endDate}`)

		let stage16Data = stage16.data

		// insert into db
		if (stage16Data) await Stage16.create(stage16Data)
		// await Stage16.create(stage16Data)

		let duplicatesArrayStage16 = []

		const duplicatesStage16 = await Stage16.aggregate([
			{
				$match: {
					createdAt: { $gt: threeDaysAgoDB }, // discard selection criteria
				},
			},
			{
				$group: {
					// _id   : '$Serial Number', // can be grouped on multiple properties
					_id: {
						buildNo: '$buildNo',
						date: '$dateToStage',
					}, // can be grouped on multiple properties
					dup: { $addToSet: '$_id' },
					count: { $sum: 1 },
				},
			},
			{
				$match: {
					count: { $gt: 1 }, // Duplicates considered as count greater than one
				},
			},
		])
		duplicatesStage16.forEach(function (doc) {
			doc.dup.shift() // First element skipped for deleting
			doc.dup.forEach(function (dupId) {
				duplicatesArrayStage16.push(dupId) // Getting all duplicate ids
			})
		})

		// // Remove all duplicates in one go
		await Stage16.deleteMany({ _id: { $in: duplicatesArrayStage16 } })

		//////////////////////////////////////////////////////////////

		///////////////// get stage 17
		//////////////////////////////////////////////////////////

		const stage17 = await axios(`https://internal.jcb.local/qsmartapi/api/qsmart/stages/19/17/${startDate}/${endDate}`)

		let stage17Data = stage17.data

		// insert into db
		if (stage17Data) await Stage17.create(stage17Data)
		await Stage17.create(stage17Data)

		let duplicatesArrayStage17 = []

		const duplicatesStage17 = await Stage17.aggregate([
			{
				$match: {
					createdAt: { $gt: threeDaysAgoDB }, // discard selection criteria
				},
			},
			{
				$group: {
					// _id   : '$Serial Number', // can be grouped on multiple properties
					_id: {
						buildNo: '$buildNo',
						date: '$dateToStage',
					}, // can be grouped on multiple properties
					dup: { $addToSet: '$_id' },
					count: { $sum: 1 },
				},
			},
			{
				$match: {
					count: { $gt: 1 }, // Duplicates considered as count greater than one
				},
			},
		])
		duplicatesStage17.forEach(function (doc) {
			doc.dup.shift() // First element skipped for deleting
			doc.dup.forEach(function (dupId) {
				duplicatesArrayStage17.push(dupId) // Getting all duplicate ids
			})
		})

		// // Remove all duplicates in one go
		await Stage17.deleteMany({ _id: { $in: duplicatesArrayStage17 } })

		//////////////////////////////////////////////////////////////
		///////////////// get stage 19
		//////////////////////////////////////////////////////////

		const stage19 = await axios(`https://internal.jcb.local/qsmartapi/api/qsmart/stages/19/19/${startDate}/${endDate}`)

		let stage19Data = stage19.data

		// insert into db
		if (stage19Data) await Stage19.create(stage19Data)
		await Stage19.create(stage19Data)

		let duplicatesArrayStage19 = []

		const duplicatesStage19 = await Stage19.aggregate([
			{
				$match: {
					createdAt: { $gt: threeDaysAgoDB }, // discard selection criteria
				},
			},
			{
				$group: {
					// _id   : '$Serial Number', // can be grouped on multiple properties
					_id: {
						buildNo: '$buildNo',
						date: '$dateToStage',
					}, // can be grouped on multiple properties
					dup: { $addToSet: '$_id' },
					count: { $sum: 1 },
				},
			},
			{
				$match: {
					count: { $gt: 1 }, // Duplicates considered as count greater than one
				},
			},
		])
		duplicatesStage19.forEach(function (doc) {
			doc.dup.shift() // First element skipped for deleting
			doc.dup.forEach(function (dupId) {
				duplicatesArrayStage19.push(dupId) // Getting all duplicate ids
			})
		})

		// // Remove all duplicates in one go
		await Stage19.deleteMany({ _id: { $in: duplicatesArrayStage19 } })

		//////////////////////////////////////////////////////////////

		// console.log('Just updated from Q Smart')
	} catch (error) {
		console.log(error)
	}
})

// getGroupFaults.start()

const puppeteer = require('puppeteer')
let dateStamp = moment().format('DD-MM-YYYY')

let majorEmail = new CronJob('0 30 18 * * 1-5', async function () {
	//
	try {
		const browser = await puppeteer.launch()
		const page = await browser.newPage()
		await page.goto('http://quality-uptime.jcb.local/doa25pt/dash')

		page.setViewport({ width: 2900, height: 1300 })
		await page.screenshot({ path: `./PDF/majorEscapes/${dateStamp}.png` })

		await browser.close()
	} catch (error) {
		console.log(error)
	}

	// console.log('Done')

	// console.log('email just sent')
	const transporter = nodemailer.createTransport({
		host: process.env.HOST, //Host
		port: process.env.PORT, // Port
		tls: {
			rejectUnauthorized: false,
		},
	})

	let emails = [
		'Ali.Ebrahimi@jcb.com',
		'Robert.OWEN@jcb.com',
		'Mark.EDWARDS@jcb.com',
		'Stacy.BURNETT@jcb.com',
		'Stuart.BLAKE@jcb.com',
		'Matthew.RILEY@jcb.com',
		'Dale.EVANS@jcb.com',
		'Dave.PARRY@jcb.com',
		'David.CARVER@jcb.com',
		'Mark.NORTON@jcb.com',
		'Matthew.DAVIES@jcb.com',
		'Paul.WILSON@jcb.com',
		'Peter.JOWETT@jcb.com',
		'Tony.DUFF@jcb.com',
		'Steve.PARKER@jcb.com',
		'Joe.GALLIMORE@jcb.com',
		'Martin.HARPER@jcb.com',
		'Russell.SALT@jcb.com',
		'Shaun.HOOPER@jcb.com',
		'Yunus.BOZKURT@jcb.com',
		'Nigel.WILCOX@jcb.com',
		'Abdul.KALAM@jcb.com',
		'Soron.Glynn@jcb.com',
		'Ricci.Deacon@jcb.com',
		'Dave.Atkinson@jcb.com',
		'Wil.Hargreaves@jcb.com',
	]
	// let emails = [ 'Ali.Ebrahimi@jcb.com' ]

	transporter.sendMail({
		from: 'JCB-Quality.Uptime@jcb.com',
		to: emails,
		subject: 'DOA Major Escape Status',
		html:
			'<img src="cid:jcb-logo"/>' +
			`<h2>DOA Major Escapes : ${dateStamp}</h2>` +
			`<h4>Please see attached file for detail</h4>` +
			`<h4>Thanks<h4/>` +
			`<h4>JCB Quality Uptime</h4>`,

		attachments: [
			{
				filename: 'QUT.png',
				path: './PDF/images/QUT.png',
				cid: 'jcb-logo',
			},
			{
				filename: `${dateStamp}.png`,
				path: `./PDF/majorEscapes/${dateStamp}.png`,
				// contentType : 'application/pdf',
			},
		],
		function(err, info) {
			if (err) {
				console.error(err)
			} else {
				console.log(info)
			}
		},
	})
})

// majorEmail.start()

let cabsMajorEmail = new CronJob('0 29 18 * * 1-5', async function () {
	try {
		const browser = await puppeteer.launch()
		const page = await browser.newPage()
		await page.goto('http://quality-uptime.jcb.local/doa25pt/cabsdash')

		page.setViewport({ width: 2900, height: 1300 })
		await page.screenshot({
			path: `./PDF/cabsMajorEscapes/${dateStamp}.png`,
		})

		await browser.close()
	} catch (error) {
		console.log(error)
	}

	// console.log('Done')

	// console.log('email just sent')
	const transporter = nodemailer.createTransport({
		host: process.env.HOST, //Host
		port: process.env.PORT, // Port
		tls: {
			rejectUnauthorized: false,
		},
	})

	let emails = ['Ali.Ebrahimi@jcb.com', 'Dale.Evans@jcb.com', 'Soron.Glynn@jcb.com', 'Ricci.Deacon@jcb.com', 'Mark.Norton@jcb.com']

	transporter.sendMail({
		from: 'JCB-Quality.Uptime@jcb.com',
		to: emails,
		subject: 'Cabs DOA Major Escape Status',
		html:
			`<img src="cid:jcb-logo"/>` +
			`<h2>Cabs DOA Major Escapes : ${dateStamp}</h2>` +
			`<h4>Please see attached file for detail</h4>` +
			`<h4>Thanks<h4/>` +
			`<h4>JCB Quality Uptime</h4>`,

		attachments: [
			{
				filename: 'QUT.png',
				path: './PDF/images/QUT.png',
				cid: 'jcb-logo',
			},
			{
				filename: `${dateStamp}.png`,
				path: `./PDF/cabsMajorEscapes/${dateStamp}.png`,
				// contentType : 'application/pdf',
			},
		],
		function(err, info) {
			if (err) {
				console.error(err)
			} else {
				console.log(info)
			}
		},
	})
})

// cabsMajorEmail.start()

// new group utc

// eff of programme

module.exports.groupUtc = async (req, res) => {
	let division = 'GROUP'
	if (division === 'GROUP') {
		division = ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL']
	} else {
		division = [division]
	}

	const divsForTable = ['LDL', 'EM', 'CP', 'LP', 'BHL-SD', 'HP', 'CHINA', 'BRAZIL', 'INDIA EX', 'PWR PROD', 'USA']

	const actuals = await Actual.find().limit(15)

	const actualLabels = actuals.map((a) => a.month_year)

	const toThreePlaces = (num) => {
		let formattedNum = num.toFixed(3)

		if (isNaN(formattedNum)) formattedNum = 0
		return formattedNum
	}

	///////  doa

	let doaArrayForTable = []

	for (let d of divsForTable) {
		data = await Actual.find({ division: d, doa_dpu: { $exists: true } })
			.sort({ _id: -1 })
			.limit(1)
		// console.log(data)

		let rftColorDoa = 'green'
		let DpuColorDoa = 'red'

		let businessUnitDoa = data[0].division
		let doaTargetRft = data[0].doa_rft_target
		let doaActualRft = Math.round(data[0].doa_rft)
		let doaRftYtd = Math.round(data[0].doa_rft_ytd)

		if (doaRftYtd < 0) {
			rftColorDoa = 'red'
			doaRftYtd = Math.abs(doaRftYtd)
		}
		let doaActualDpu = toThreePlaces(data[0].doa_dpu)
		let doaDpuYtd = data[0].doa_dpu_ytd
		let doaDpuYtdHelp = data[0].doa_dpu_ytd

		if (doaDpuYtd < 0) {
			DpuColorDoa = 'green'
			doaDpuYtd = Math.abs(doaDpuYtd)
		}

		let result = {
			businessUnit: businessUnitDoa,
			targetRft: doaTargetRft,
			actualRft: doaActualRft,
			rftYtd: doaRftYtd,
			rftColor: rftColorDoa,
			actualDpu: doaActualDpu,
			dpuYtd: doaDpuYtd,
			dpuColor: DpuColorDoa,
			doaDpuYtdHelp,
		}
		doaArrayForTable.push(result)
	}

	let sortedDoaArrayForTable = doaArrayForTable.sort((first, second) => 0 - (first.doaDpuYtdHelp > second.doaDpuYtdHelp ? -1 : 1))

  

	const groupDoaData = await Actual.find({ division: 'GROUP', doa_dpu: { $exists: true } })
		.sort({ _id: -1 })
		.limit(1)

	let rftColorDoaG = 'green'
	let dpuColorDoaG = 'red'

	let businessUnitDoaG = 'UK GROUP'
	let doaTargetRft = groupDoaData[0].doa_rft_target
	let doaActualRft = Math.round(groupDoaData[0].doa_rft)
	let doaRftYtd = groupDoaData[0].doa_rft_ytd

	if (doaRftYtd < 0) {
		rftColorDoaG = 'red'
		doaRftYtd = Math.abs(doaRftYtd)
	}
	let doaActualDpu = toThreePlaces(groupDoaData[0].doa_dpu)
	let doaDpuYtd = groupDoaData[0].doa_dpu_ytd

	if (doaDpuYtd < 0) {
		dpuColorDoaG = 'green'
		doaDpuYtd = Math.abs(doaDpuYtd)
	}

	let resultG = {
		businessUnit: businessUnitDoaG,
		targetRft: doaTargetRft,
		actualRft: doaActualRft,
		rftYtd: doaRftYtd,
		rftColor: rftColorDoaG,
		actualDpu: doaActualDpu,
		dpuYtd: doaDpuYtd,
		dpuColor: dpuColorDoaG,
	}
	sortedDoaArrayForTable.unshift(resultG)

	const groupDoaDataAll = await Actual.find({ division: 'ALL', doa_dpu: { $exists: true } })
		.sort({ _id: -1 })
		.limit(1)

	let rftColorDoaGA = 'green'
	let dpuColorDoaGA = 'red'

	let businessUnitDoaGA = 'ALL GROUP'
	let doaTargetRftA = groupDoaDataAll[0].doa_rft_target
	let doaActualRftA = Math.round(groupDoaDataAll[0].doa_rft)
	let doaRftYtdA = groupDoaDataAll[0].doa_rft_ytd

	if (doaRftYtdA < 0) {
		rftColorDoaGA = 'red'
		doaRftYtdA = Math.abs(doaRftYtdA)
	}
	let doaActualDpuA = toThreePlaces(groupDoaDataAll[0].doa_dpu)
	let doaDpuYtdA = groupDoaDataAll[0].doa_dpu_ytd

	if (doaDpuYtdA < 0) {
		dpuColorDoaGA = 'green'
		doaDpuYtdA = Math.abs(doaDpuYtdA)
	}

	let resultGA = {
		businessUnit: businessUnitDoaGA,
		targetRft: doaTargetRftA,
		actualRft: doaActualRftA,
		rftYtd: doaRftYtdA,
		rftColor: rftColorDoaGA,
		actualDpu: doaActualDpuA,
		dpuYtd: doaDpuYtdA,
		dpuColor: dpuColorDoaGA,
	}
	sortedDoaArrayForTable.unshift(resultGA)

	///////  end doa

	let t3ArrayForTable = []

	for (let d of divsForTable) {
		data = await Actual.find({ division: d, t3_dpu: { $exists: true } })
			.sort({ _id: -1 })
			.limit(1)
		// console.log(data)

		let rftColorT3 = 'green'
		let dpuColorT3 = 'red'

		let businessUnitT3 = data[0].division
		let t3TargetRft = data[0].t3_rft_target
		let t3ActualRft = Math.round(data[0].t3_rft)
		let t3RftYtd = Math.round(data[0].t3_rft_ytd)

		if (t3RftYtd < 0) {
			rftColorT3 = 'red'
			t3RftYtd = Math.abs(t3RftYtd)
		}
		let t3ActualDpu = toThreePlaces(data[0].t3_dpu)
		let t3DpuYtd = data[0].t3_dpu_ytd
		let t3DpuYtdHelp = data[0].t3_dpu_ytd

		if (t3DpuYtd < 0) {
			dpuColorT3 = 'green'
			t3DpuYtd = Math.abs(t3DpuYtd)
		}

		let result = {
			businessUnit: businessUnitT3,
			targetRft: t3TargetRft,
			actualRft: t3ActualRft,
			rftYtd: t3RftYtd,
			rftColor: rftColorT3,
			actualDpu: t3ActualDpu,
			dpuYtd: t3DpuYtd,
			dpuColor: dpuColorT3,
			t3DpuYtdHelp,
		}
		t3ArrayForTable.push(result)
	}

	let sortedT3ArrayForTable = t3ArrayForTable.sort((first, second) => 0 - (first.t3DpuYtdHelp > second.t3DpuYtdHelp ? -1 : 1))

	const groupT3Data = await Actual.find({ division: 'GROUP', t3_dpu: { $exists: true } })
		.sort({ _id: -1 })
		.limit(1)

	let rftColorT3G = 'green'
	let dpuColorT3G = 'red'

	let businessUnitT3G = 'UK GROUP'
	let t3TargetRft = groupT3Data[0].t3_rft_target
	let t3ActualRft = Math.round(groupT3Data[0].t3_rft)
	let t3RftYtd = Math.round(groupT3Data[0].t3_rft_ytd)

	if (t3RftYtd < 0) {
		rftColorT3G = 'red'
		t3RftYtd = Math.abs(t3RftYtd)
	}
	let t3ActualDpu = toThreePlaces(groupT3Data[0].t3_dpu)
	let t3DpuYtd = groupT3Data[0].t3_dpu_ytd

	if (t3DpuYtd < 0) {
		dpuColorT3G = 'green'
		t3DpuYtd = Math.abs(t3DpuYtd)
	}

	let result = {
		businessUnit: businessUnitT3G,
		targetRft: t3TargetRft,
		actualRft: t3ActualRft,
		rftYtd: t3RftYtd,
		rftColor: rftColorT3G,
		actualDpu: t3ActualDpu,
		dpuYtd: t3DpuYtd,
		dpuColor: dpuColorT3G,
	}
	sortedT3ArrayForTable.unshift(result)

	const groupT3DataA = await Actual.find({ division: 'ALL', t3_dpu: { $exists: true } })
		.sort({ _id: -1 })
		.limit(1)

	let rftColorT3GA = 'green'
	let dpuColorT3GA = 'red'

	let businessUnitT3GA = 'ALL GROUP'
	let t3TargetRftA = groupT3DataA[0].t3_rft_target
	let t3ActualRftA = Math.round(groupT3DataA[0].t3_rft)
	let t3RftYtdA = Math.round(groupT3DataA[0].t3_rft_ytd)

	if (t3RftYtdA < 0) {
		rftColorT3GA = 'red'
		t3RftYtdA = Math.abs(t3RftYtd)
	}
	let t3ActualDpuA = toThreePlaces(groupT3DataA[0].t3_dpu)
	let t3DpuYtdA = groupT3DataA[0].t3_dpu_ytd

	if (t3DpuYtdA < 0) {
		dpuColorT3GA = 'green'
		t3DpuYtdA = Math.abs(t3DpuYtd)
	}

	let resultA = {
		businessUnit: businessUnitT3GA,
		targetRft: t3TargetRftA,
		actualRft: t3ActualRftA,
		rftYtd: t3RftYtdA,
		rftColor: rftColorT3GA,
		actualDpu: t3ActualDpuA,
		dpuYtd: t3DpuYtdA,
		dpuColor: dpuColorT3GA,
	}
	sortedT3ArrayForTable.unshift(resultA)

	// console.log(sortedDoaArrayForTable)

	// console.log(sortedT3ArrayForTable)

	////end t3

	const lastMonth = getLastItemInArray(actualLabels)

	const day = 03
	const year = lastMonth.substring(4, 8)
	const monthNumber = getMonthNumberFromName(lastMonth.substring(0, 3))

	const lastDate = new Date(`${monthNumber}/${day}/${year}`)

	const fullDOALabels = actualLabels //.slice(2, -1) // lastDatePlusOne, lastDatePlusTwo, lastDatePlusThree]
	const fullT3Labels = actualLabels //.slice(1, -2) // lastDatePlusOne]

	let newDOAArr = []
	let newT3Arr = []

	for (let d of fullDOALabels) {
		const data = await getNewDataDOA(division, d)
		newDOAArr.push(data)
	}
 
	for (let t of fullT3Labels) {
		const data = await getNewDataT3(division, t)
		newT3Arr.push(data)
	}

	const getLastItemsInArrayByPosition = (arr, positionFromEnd) => {
		const noUndefined = arr.filter((item) => item)

		return noUndefined[noUndefined.length - positionFromEnd]
	}

	const newDOAOpenArr = newDOAArr.map((d) => d.openDpu)
	const newDOAContainedArr = newDOAArr.map((d) => d.containedDpu)
	const newDOAClosedArr = newDOAArr.map((d) => d.closedDpu)
	const newDOAUnactionedArr = newDOAArr.map((d) => d.unActionedDpu)
	const newDOAUnactionedColorArr = newDOAArr.map((d) => d.unActionedColor)
	const newDOARFTArr = newDOAArr.map((d) => d.rft)
	const newDOADPUTargetArr = newDOAArr.map((d) => d.doaDpuTarget)
	const newDOARFTTargetArr = newDOAArr.map((d) => d.doaRftTarget)

  console.log('I am here')
  // console.log(newT3Arr)
	const newT3OpenArr = newT3Arr.map((d) => d.openDpu)
	const newT3ContainedArr = newT3Arr.map((d) => d.containedDpu)
	const newT3ClosedArr = newT3Arr.map((d) => d.closedDpu)
	const newT3UnactionedArr = newT3Arr.map((d) => d.unActionedDpu)
	const newT3UnactionedColorArr = newT3Arr.map((d) => d.unActionedColor)
	const newT3RFTArr = newT3Arr.map((d) => d.rft)

	const newT3DPUTargetArr = newT3Arr.map((d) => d.t3DpuTarget)
	const newT3RFTTargetArr = newT3Arr.map((d) => d.t3RftTarget)

	const openClaimsT3Arr = newT3Arr.map((d) => d.openClaimsT3)
	const containedClaimsT3Arr = newT3Arr.map((d) => d.containedClaimsT3)
	const closedClaimsT3Arr = newT3Arr.map((d) => d.closedClaimsT3)
	const unActionedClaimsT3Arr = newT3Arr.map((d) => d.unActionedClaimsT3)

	const openClaimsDoaArr = newDOAArr.map((d) => d.openClaimsDoa)
	const containedClaimsDoaArr = newDOAArr.map((d) => d.containedClaimsDoa)
	const closedClaimsDoaArr = newDOAArr.map((d) => d.closedClaimsDoa)
	const unActionedClaimsDoaArr = newDOAArr.map((d) => d.unActionedClaimsDoa)

	// end of new

	/// top 50 rag

	/////////////////////////////new  ///////////////

	let periods = [
		{
			name: 'doa',
			periods: ['DOA'],
			buildMonths: [
				{ buildDate: { $regex: fiveMonthsAgo } },
				{ buildDate: { $regex: fourMonthsAgo } },
				{ buildDate: { $regex: threeMonthsAgo } },
				{ buildDate: { $regex: twoMonthsAgo } },
				{ buildDate: { $regex: oneMonthAgo } },
				{ buildDate: { $regex: thisMonth } },
			],
			options: [
				{
					$match: {
						division: { $in: ['BHL', 'CP', 'EM', 'HP', 'LDL', 'LP', 'SD'] },
						// rag: { $ne: null },
						active: true,
						tPeriod: 'DOA',
						outcome: {
							$nin: ['Reject', 'Z Code'],
						},
						$or: [
							{ buildDate: { $regex: fiveMonthsAgo } },
							{ buildDate: { $regex: fourMonthsAgo } },
							{ buildDate: { $regex: threeMonthsAgo } },
							{ buildDate: { $regex: twoMonthsAgo } },
							{ buildDate: { $regex: oneMonthAgo } },
							{ buildDate: { $regex: thisMonth } },
						],
					},
				},

				{
					$group: {
						_id: '$failedPart',
						concernArr: { $addToSet: '$concern' },
						ragArr: { $addToSet: '$rag' },
						claimArr: { $addToSet: '$claimNumber' },
						top50OpenDateArr: { $addToSet: '$top50OpenedDate' },
						top50ContainedDateArr: { $addToSet: '$top50ContainedDate' },
						top50ClosedDateArr: { $addToSet: '$top50ClosedDate' },
						closureDateArr: { $addToSet: '$closureDate' },
						asdJoshArr: { $addToSet: '$asdJosh' },
						actionArr: { $addToSet: '$action' },
						championArr: { $addToSet: '$champion' },
						sccJoshArr: { $addToSet: '$sccJosh' },
						divisionArr: { $addToSet: '$division' },
						areaArr: { $addToSet: '$area' },
						linkedArr: { $addToSet: '$top50Linked' },
						top50LinkedToArr: { $addToSet: '$top50LinkedTo' },
						buildDateArr: {
							$push: {
								$substr: ['$buildDate', 3, 10],
							},
						},
						importedDateArr: {
							$push: {
								importedDate: '$importedDate',
							},
						},

						count: { $sum: 1 },
					},
				},
				{
					$addFields: {
						status: '',
						asd: '',
						color: 'grey',
						percentageCont: 0,
						fourCArr: [],
						failedCutIn: false,
						daysOpen: '--',
						daysContained: '--',
						daysRemaining: '--',
						daysRemainingColor: '',
						fourCIssued: 'No',
						cabsCount: 0,
						psCount: 0,
						axlesCount: 0,
						hbuCount: 0,
						fourCLinked: false,
						linkedTo: '',
						linkedFourC: '',
						inOtherTop50: false,
						claimInLast48Hours: '',
						trend: 'same',
					},
				},
				{ $sort: { count: -1, ragArr: -1, _id: 1 } },
				{ $limit: 50 },
				// { $sort: { count: -1, _id: 1 } },
				// { $sort: { count: -1, ragArr: -1, _id: 1 } },
			],
		},
		{
			name: 't3',
			periods: ['T000', 'T001', 'T002', 'T003'],
			buildMonths: [
				{ buildDate: { $regex: tenMonthsAgo } },
				{ buildDate: { $regex: nineMonthsAgo } },
				{ buildDate: { $regex: eightMonthsAgo } },
				{ buildDate: { $regex: sevenMonthsAgo } },
				{ buildDate: { $regex: sixMonthsAgo } },
				{ buildDate: { $regex: fiveMonthsAgo } },
				{ buildDate: { $regex: fourMonthsAgo } },
				{ buildDate: { $regex: threeMonthsAgo } },
				{ buildDate: { $regex: twoMonthsAgo } },
				{ buildDate: { $regex: oneMonthAgo } },
				{ buildDate: { $regex: thisMonth } },
			],
			options: [
				{
					$match: {
						division: { $in: ['BHL', 'CP', 'EM', 'HP', 'LDL', 'LP', 'SD'] },
						// rag: { $ne: null },
						active: true,
						tPeriod: { $in: ['T000', 'T001', 'T002', 'T003'] },
						outcome: {
							$nin: ['Reject', 'Z Code'],
						},
						$or: [
							{ buildDate: { $regex: tenMonthsAgo } },
							{ buildDate: { $regex: nineMonthsAgo } },
							{ buildDate: { $regex: eightMonthsAgo } },
							{ buildDate: { $regex: sevenMonthsAgo } },
							{ buildDate: { $regex: sixMonthsAgo } },
							{ buildDate: { $regex: fiveMonthsAgo } },
							{ buildDate: { $regex: fourMonthsAgo } },
							{ buildDate: { $regex: threeMonthsAgo } },
							{ buildDate: { $regex: twoMonthsAgo } },
							{ buildDate: { $regex: oneMonthAgo } },
							{ buildDate: { $regex: thisMonth } },
						],
					},
				},

				{
					$group: {
						_id: '$failedPart',
						concernArr: { $addToSet: '$concern' },
						ragArr: { $addToSet: '$rag' },
						claimArr: { $addToSet: '$claimNumber' },
						top50OpenDateArr: { $addToSet: '$top50OpenedDate' },
						top50ContainedDateArr: { $addToSet: '$top50ContainedDate' },
						top50ClosedDateArr: { $addToSet: '$top50ClosedDate' },
						closureDateArr: { $addToSet: '$closureDate' },
						asdJoshArr: { $addToSet: '$asdJosh' },
						actionArr: { $addToSet: '$action' },
						championArr: { $addToSet: '$champion' },
						sccJoshArr: { $addToSet: '$sccJosh' },
						divisionArr: { $addToSet: '$division' },
						areaArr: { $addToSet: '$area' },
						linkedArr: { $addToSet: '$top50Linked' },
						top50LinkedToArr: { $addToSet: '$top50LinkedTo' },
						buildDateArr: {
							$push: {
								$substr: ['$buildDate', 3, 10],
							},
						},
						importedDateArr: {
							$push: {
								importedDate: '$importedDate',
							},
						},

						count: { $sum: 1 },
					},
				},
				{
					$addFields: {
						status: '',
						asd: '',
						color: 'grey',
						percentageCont: 0,
						fourCArr: [],
						failedCutIn: false,
						daysOpen: '--',
						daysContained: '--',
						daysRemaining: '--',
						daysRemainingColor: '',
						fourCIssued: 'No',
						cabsCount: 0,
						psCount: 0,
						axlesCount: 0,
						hbuCount: 0,
						fourCLinked: false,
						linkedTo: '',
						linkedFourC: '',
						inOtherTop50: false,
						claimInLast48Hours: '',
						trend: 'same',
					},
				},
				{ $sort: { count: -1, ragArr: -1, _id: 1 } },
				{ $limit: 50 },
				// { $sort: { count: -1, _id: 1 } },
				// { $sort: { count: -1, ragArr: -1, _id: 1 } },
			],
		},
	]

	let dataArr = []

	for (let p of periods) {
		let allCountDoa = await Claim.countDocuments({
			division: { $in: ['BHL', 'CP', 'EM', 'HP', 'LDL', 'LP', 'SD'] },
			active: true,
			tPeriod: { $in: p.periods },
			outcome: {
				$nin: ['Reject', 'Z Code'],
			},
			$or: p.buildMonths,
		})

		let parts = await Claim.aggregate(p.options)
		let top50Count = 0
		let openCount = 0
		let containedCount = 0
		let closedCount = 0
		let assemblyCount = 0
		let supplierCount = 0
		let designCount = 0
		let failedPostCutIn = 0

		for (let p of parts) {
			top50Count += p.count

			p.fourCLinked = p.linkedArr[0]
			p.asd = p.asdJoshArr[0]

			if (p.fourCLinked && p.top50LinkedToArr) {
				p.top50LinkedToArr.sort()

				p.linkedTo = p.top50LinkedToArr[0]
				p.linkedFourC = await Claim.findById(p.linkedTo)

				if (p.linkedFourC && p.linkedFourC.status) {
					p.status = await p.linkedFourC.status
				}

				p.closureDate = ''

				if (p.status === 'Open') {
					p.action = p.actionArr[0]
					if (p.linkedFourC.reOpenedAt) {
						p.daysOpen = Math.round((new Date() - p.linkedFourC.reOpenedAt) / (1000 * 60 * 60 * 24))
					} else {
						p.daysOpen = Math.round((new Date() - p.linkedFourC.vettedAt) / (1000 * 60 * 60 * 24))
					}
				}

				if (p.status === 'Contained') {
					p.action = p.linkedFourC.containNotes
					if (p.linkedFourC.containedAt) {
						p.closureDate = moment(p.linkedFourC.containedAt).format('MMM-YY')
						if (p.linkedFourC.reOpenedAt) {
							p.daysOpen = Math.round((p.linkedFourC.containedAt - p.linkedFourC.reOpenedAt) / (1000 * 60 * 60 * 24))
						} else {
							p.daysOpen = Math.round((p.linkedFourC.containedAt - p.linkedFourC.vettedAt) / (1000 * 60 * 60 * 24))
						}

						p.daysContained = Math.round((new Date() - p.linkedFourC.containedAt) / (1000 * 60 * 60 * 24))
					} else {
						p.closureDate = ''
					}
				}
				if (p.status === 'Closed') {
					p.action = p.linkedFourC.counterWhatNotes
					if (p.linkedFourC.closedAt) {
						p.closureDate = moment(p.linkedFourC.closedAt).format('MMM-YY')
						if (p.linkedFourC.reOpenedAt) {
							p.daysOpen = Math.round((p.linkedFourC.containedAt - p.linkedFourC.reOpenedAt) / (1000 * 60 * 60 * 24))
						} else {
							p.daysOpen = Math.round((p.linkedFourC.containedAt - p.linkedFourC.vettedAt) / (1000 * 60 * 60 * 24))
						}
						p.daysContained = Math.round((p.linkedFourC.closedAt - p.linkedFourC.containedAt) / (1000 * 60 * 60 * 24))
					} else {
						p.closureDate = ''
					}
				}

				// p.closureDate = p.closureDateArr[0]
			} else {
				// if (!p.status) console.log(p)
				p.status = p.ragArr[0]
				p.asd = p.asdJoshArr[0]
				p.action = p.actionArr[0]

				p.closureDate = ''

				if (p.status === 'Open') {
					if (p.top50OpenDateArr.length > 0 && p.top50OpenDateArr[0] != null) {
						p.daysOpen = Math.round((new Date() - p.top50OpenDateArr[0]) / (1000 * 60 * 60 * 24))
					}
				}

				if (p.status === 'Contained') {
					if (
						p.top50ContainedDateArr.length > 0 &&
						p.top50ContainedDateArr[0] != null &&
						p.top50OpenDateArr.length > 0 &&
						p.top50OpenDateArr[0] != null
					) {
						p.closureDate = moment(p.top50ContainedDateArr[0]).format('MMM-YY')
						p.daysOpen = Math.round((p.top50ContainedDateArr[0] - p.top50OpenDateArr[0]) / (1000 * 60 * 60 * 24))
						p.daysContained = Math.round((new Date() - p.top50ContainedDateArr[0]) / (1000 * 60 * 60 * 24))
					} else {
						p.closureDate = ''
					}
				}
				if (p.status === 'Closed') {
					if (
						p.top50ClosedDateArr.length > 0 &&
						p.top50ClosedDateArr[0] != null &&
						p.top50ContainedDateArr.length > 0 &&
						p.top50ContainedDateArr[0] != null &&
						p.top50OpenDateArr.length > 0 &&
						p.top50OpenDateArr[0] != null
					) {
						p.closureDate = moment(p.top50ClosedDateArr[0]).format('MMM-YY')
						p.daysOpen = Math.round((p.top50ContainedDateArr[0] - p.top50OpenDateArr[0]) / (1000 * 60 * 60 * 24))
						p.daysContained = Math.round((p.top50ClosedDateArr[0] - p.top50ContainedDateArr[0]) / (1000 * 60 * 60 * 24))
					} else {
						p.closureDate = ''
					}
				}

				// p.closureDate = p.closureDateArr[0]
			}
			p.concern = p.concernArr[0]
			p.champion = p.championArr[0]

			p.percentageCont = ((p.count / allCountDoa) * 100).toFixed(2)

			if (p.status === 'Open') {
				p.color = 'red'
				openCount++
			}
			if (p.status === 'Contained') {
				p.color = 'orange'
				containedCount++
			}
			if (p.status === 'Closed') {
				p.color = 'green'
				closedCount++
			}
			if (p.asd === 'Assembly') {
				assemblyCount++
			}
			if (p.asd === 'Supplier') {
				supplierCount++
			}
			if (p.asd === 'Design') {
				designCount++
			}

			if (p.color === 'grey') {
				p.status = 'TBC'
			}

			if (p.status === 'Open' || p.status === 'TBC') p.closureDate = ''

			if (p.daysOpen != '--') {
				if (p.daysOpen < 0 || isNaN(p.daysOpen)) p.daysOpen = 0
			}
			if (p.daysContained != '--') {
				if (p.daysContained < 0 || isNaN(p.daysContained)) p.daysContained = 0
			}
		}

		////////////////////
		let openCountTotal = 0
		let containedCountTotal = 0
		let closedCountTotal = 0

		for (let p of parts) {
			if (p.status === 'Open') {
				openCountTotal += p.count
			}
			if (p.status === 'Contained') {
				containedCountTotal += p.count
			}
			if (p.status === 'Closed') {
				closedCountTotal += p.count
			}
		}

		const openPercent = Math.round((openCountTotal / top50Count) * 100)
		const containedPercent = Math.round((containedCountTotal / top50Count) * 100)
		const closedPercent = Math.round((closedCountTotal / top50Count) * 100)
		const noActionPercent = 100 - openPercent - containedPercent - closedPercent

		let noActionCount = parts.length - openCount - containedCount - closedCount

		const top50Percent = Math.round((top50Count / allCountDoa) * 100)

		dataArr.push({
			period: p.name,
			openPercent,
			containedPercent,
			closedPercent,
			noActionPercent,
			openCount,
			containedCount,
			closedCount,
			noActionCount,
			top50Percent,
			top50Count,
			allCountDoa,
		})
	}

	

	const start = new Date('2021, 07, 06')
	start.setHours(0, 0, 0, 0)

	let sevenMonthsAgoNumber = moment().subtract(7, 'months').format('MM')
	let sevenMonthsAgoNumberY = moment().subtract(7, 'months').format('YYYY')
	let sixMonthsAgoNumber = moment().subtract(6, 'months').format('MM')
	let sixMonthsAgoNumberY = moment().subtract(6, 'months').format('YYYY')
	let fiveMonthsAgoNumber = moment().subtract(5, 'months').format('MM')
	let fiveMonthsAgoNumberY = moment().subtract(5, 'months').format('YYYY')
	let fourMonthsAgoNumber = moment().subtract(4, 'months').format('MM')
	let fourMonthsAgoNumberY = moment().subtract(4, 'months').format('YYYY')
	let threeMonthsAgoNumber = moment().subtract(3, 'months').format('MM')
	let threeMonthsAgoNumberY = moment().subtract(3, 'months').format('YYYY')
	let twoMonthsAgoNumber = moment().subtract(2, 'months').format('MM')
	let twoMonthsAgoNumberY = moment().subtract(2, 'months').format('YYYY')
	let oneMonthAgoNumber = moment().subtract(1, 'months').format('MM')
	let oneMonthAgoNumberY = moment().subtract(1, 'months').format('YYYY')
	let thisMonthNumber = moment().subtract(0, 'months').format('MM')
	let thisMonthNumberY = moment().subtract(0, 'months').format('YYYY')

	let thisMonthText = moment().subtract(0, 'months').format('MMM')
	let oneMonthAgoText = moment().subtract(1, 'months').format('MMM')
	let twoMonthsAgoText = moment().subtract(2, 'months').format('MMM')
	let threeMonthsAgoText = moment().subtract(3, 'months').format('MMM')
	let fourMonthsAgoText = moment().subtract(4, 'months').format('MMM')
	let fiveMonthsAgoText = moment().subtract(5, 'months').format('MMM')
	let sixMonthsAgoText = moment().subtract(6, 'months').format('MMM')
	let sevenMonthsAgoText = moment().subtract(7, 'months').format('MMM')

	let dataArrBuild = []

	let divisions = [
		{
			names: ['BHL', 'SD', 'LDL', 'CP', 'EM', 'LP', 'HP'],
		},
	]
	const pointsArr = ['250', '25', '5', '0']
	const monthArr = [
		{
			month: +sevenMonthsAgoNumber,
			year: +sevenMonthsAgoNumberY,
		},
		{
			month: +sixMonthsAgoNumber,
			year: +sixMonthsAgoNumberY,
		},
		{
			month: +fiveMonthsAgoNumber,
			year: +fiveMonthsAgoNumberY,
		},
		{
			month: +fourMonthsAgoNumber,
			year: +fourMonthsAgoNumberY,
		},
		{
			month: +threeMonthsAgoNumber,
			year: +threeMonthsAgoNumberY,
		},
		{
			month: +twoMonthsAgoNumber,
			year: +twoMonthsAgoNumberY,
		},
		{
			month: +oneMonthAgoNumber,
			year: +oneMonthAgoNumberY,
		},
		{
			month: +thisMonthNumber,
			year: +thisMonthNumberY,
		},
	]

	const labels = [
		sevenMonthsAgoText,
		sixMonthsAgoText,
		fiveMonthsAgoText,
		fourMonthsAgoText,
		threeMonthsAgoText,
		twoMonthsAgoText,
		oneMonthAgoText,
		thisMonthText,
	]

	// const zero = await Doa25pt.find({ points: '0' })

	// console.log(zero)

	for (let division of divisions) {
		let divisionArr = []
		for (let point of pointsArr) {
			let theActualMonthArr = []
			let countArr = []
			for (let month of monthArr) {
				let theMonth = month.month
				let buildMonth = await Doa25pt.aggregate([
					{
						$match: {
							division: {
								$in: division.names,
							},
							grade: 'Major',
							points: point,
						},
					},
					{
						$project: {
							_id: 0,
							month: { $month: '$buildDate' },
							year: { $year: '$buildDate' },
						},
					},
					{
						$match: {
							month: month.month,
							year: month.year,
						},
					},
					{
						$addFields: {
							totalsArr: [],
						},
					},
				])
				let count = buildMonth.length

				countArr.push(count)
			}

			divisionArr.push({ countArr })
		}

		dataArrBuild.push({
			bu: division.names,
			divisionArr,
			totalsArr: [],
		})
	}

	//report month

	for (let division of divisions) {
		let divisionArr = []
		for (let point of pointsArr) {
			let theActualMonthArr = []
			let countArr = []
			for (let month of monthArr) {
				let theMonth = month.month
				let buildMonth = await Doa25pt.aggregate([
					{
						$match: {
							division: {
								$in: division.names,
							},
							grade: 'Major',
							points: point,
						},
					},
					{
						$project: {
							_id: 0,
							month: { $month: '$createdAt' },
							year: { $year: '$createdAt' },
						},
					},
					{
						$match: {
							month: month.month,
							year: month.year,
						},
					},

					{
						$addFields: {
							totalsArr: [],
						},
					},
				])
				let count = buildMonth.length

				countArr.push(count)
			}

			divisionArr.push({ countArr })
		}

		dataArrBuild.push({
			bu: division.names,
			divisionArr,
			totalsArr: [],
		})
	}

	for (let x of dataArrBuild) {
		// console.log(x)

		let month1 = 0
		let month2 = 0
		let month3 = 0
		let month4 = 0
		let month5 = 0
		let month6 = 0
		let month7 = 0
		let month8 = 0

		// console.log(division.countArr[0])

		// for (let count of division.countArr) {
		month1 += x.divisionArr[0].countArr[0] + x.divisionArr[1].countArr[0] + x.divisionArr[2].countArr[0] + x.divisionArr[3].countArr[0]
		month2 += x.divisionArr[0].countArr[1] + x.divisionArr[1].countArr[1] + x.divisionArr[2].countArr[1] + x.divisionArr[3].countArr[1]
		month3 += x.divisionArr[0].countArr[2] + x.divisionArr[1].countArr[2] + x.divisionArr[2].countArr[2] + x.divisionArr[3].countArr[2]
		month4 += x.divisionArr[0].countArr[3] + x.divisionArr[1].countArr[3] + x.divisionArr[2].countArr[3] + x.divisionArr[3].countArr[3]
		month5 += x.divisionArr[0].countArr[4] + x.divisionArr[1].countArr[4] + x.divisionArr[2].countArr[4] + x.divisionArr[3].countArr[4]
		month6 += x.divisionArr[0].countArr[5] + x.divisionArr[1].countArr[5] + x.divisionArr[2].countArr[5] + x.divisionArr[3].countArr[5]
		month7 += x.divisionArr[0].countArr[6] + x.divisionArr[1].countArr[6] + x.divisionArr[2].countArr[6] + x.divisionArr[3].countArr[6]
		month8 += x.divisionArr[0].countArr[7] + x.divisionArr[1].countArr[7] + x.divisionArr[2].countArr[7] + x.divisionArr[3].countArr[7]

		x.totalsArr = [month1, month2, month3, month4, month5, month6, month7, month8]
	}

	/////////////////////////////new  ///////////////

	let lasyearThisMonth = moment().subtract(11, 'months').format('YYYY, MM, 01')

	const earliest = new Date(`${lasyearThisMonth}`)

	const doaFourCs = await Claim.aggregate([
		{
			$match: {
				tPeriod: 'DOA',
				fourC: 'Yes',
				vettedAt: { $gte: earliest },
				active: true,
			},
		},
		{
			$project: {
				_id: {
					year: { $substrCP: [{ $year: '$vettedAt' }, 2, 2] },
					month: { $month: '$vettedAt' },
				},
				status: 1,
			},
		},
		{
			$group: {
				_id: '$_id',
				status: { $push: '$status' },
				count: {
					$sum: 1,
				},
			},
		},

		{ $sort: { _id: 1 } },
	])

	// console.log(doaFourCs)

	const t3FourCs = await Claim.aggregate([
		{
			$match: {
				tPeriod: { $in: ['T000', 'T001', 'T002', 'T003'] },
				fourC: 'Yes',
				vettedAt: { $gte: earliest },
				active: true,
			},
		},
		{
			$project: {
				_id: {
					year: { $substrCP: [{ $year: '$vettedAt' }, 2, 2] },
					month: { $month: '$vettedAt' },
				},
				status: 1,
			},
		},
		{
			$group: {
				_id: '$_id',
				status: { $push: '$status' },
				count: {
					$sum: 1,
				},
			},
		},

		{ $sort: { _id: 1 } },
	])

	let doaLabelArr = []
	let doaOpenArr = []
	let doaContainedArr = []
	let doaClosedArr = []

	let t3LabelArr = []
	let t3OpenArr = []
	let t3ContainedArr = []
	let t3ClosedArr = []

	for (let d of doaFourCs) {
		doaOpenArr.push(countOccurrences(d.status, 'Open'))
		doaContainedArr.push(countOccurrences(d.status, 'Contained'))
		doaClosedArr.push(countOccurrences(d.status, 'Closed'))
		doaLabelArr.push(
			moment()
				.month(d._id.month - 1)
				.format('MMM')
		)
	}
	for (let d of t3FourCs) {
		t3OpenArr.push(countOccurrences(d.status, 'Open'))
		t3ContainedArr.push(countOccurrences(d.status, 'Contained'))
		t3ClosedArr.push(countOccurrences(d.status, 'Closed'))
		t3LabelArr.push(
			moment()
				.month(d._id.month - 1)
				.format('MMM')
		)
	}

	// console.log(sortedDoaArrayForTable)

	res.render('group/utc-main', {
		dataArr,
		fullDOALabels,
		fullT3Labels,

		dataArrBuild,
		labels,

		thisMonthText,
		oneMonthAgoText,
		twoMonthsAgoText,
		threeMonthsAgoText,
		fourMonthsAgoText,
		fiveMonthsAgoText,
		sixMonthsAgoText,
		sevenMonthsAgoText,

		//////

		sortedDoaArrayForTable,

		sortedT3ArrayForTable,

		openClaimsT3Arr,
		containedClaimsT3Arr,
		closedClaimsT3Arr,
		unActionedClaimsT3Arr,

		openClaimsDoaArr,
		containedClaimsDoaArr,
		closedClaimsDoaArr,
		unActionedClaimsDoaArr,

		newDOADPUTargetArr,
		newDOARFTTargetArr,
		newT3DPUTargetArr,
		newT3RFTTargetArr,

		newDOAOpenArr,
		newDOAContainedArr,
		newDOAClosedArr,
		newDOAUnactionedArr,
		newDOARFTArr,
		newDOAUnactionedColorArr,

		newT3OpenArr,
		newT3ContainedArr,
		newT3ClosedArr,
		newT3UnactionedArr,
		newT3RFTArr,
		newT3UnactionedColorArr,

		doaLabelArr,
		doaOpenArr,
		doaContainedArr,
		doaClosedArr,
		t3LabelArr,
		t3OpenArr,
		t3ContainedArr,
		t3ClosedArr,

		thisMonthText,
		oneMonthAgoText,
		twoMonthsAgoText,
		threeMonthsAgoText,
		fourMonthsAgoText,
		fiveMonthsAgoText,
		sixMonthsAgoText,
		sevenMonthsAgoText,
	})
}

module.exports.cabsMap = async (req, res, next) => {
	const openbhlLine = await Claim.find({
		fourC: 'Yes',
		status: 'Open',

		cabs: 'BHL/HP Line',
	})
	const containedbhlLine = await Claim.find({
		fourC: 'Yes',
		status: 'Contained',
		cabs: 'BHL/HP Line',
	})
	const closedbhlLine = await Claim.find({
		fourC: 'Yes',
		status: 'Closed',
		cabs: 'BHL/HP Line',
	})

	const opencpLine = await Claim.find({
		fourC: 'Yes',
		status: 'Open',
		cabs: 'CP/EM/LP Line',
	})
	const containedcpLine = await Claim.find({
		fourC: 'Yes',
		status: 'Contained',
		cabs: 'CP/EM/LP Line',
	})
	const closedcpLine = await Claim.find({
		fourC: 'Yes',
		status: 'Closed',
		cabs: 'CP/EM/LP Line',
	})

	const openldlLine = await Claim.find({
		fourC: 'Yes',
		status: 'Open',
		cabs: 'LDL Line',
	})
	const containedldlLine = await Claim.find({
		fourC: 'Yes',
		status: 'Contained',
		cabs: 'LDL Line',
	})
	const closedldlLine = await Claim.find({
		fourC: 'Yes',
		status: 'Closed',
		cabs: 'LDL Line',
	})

	const openPaintLine = await Claim.find({
		fourC: 'Yes',
		status: 'Open',
		cabs: 'Manufacturing/Paint',
	})
	const containedPaintLine = await Claim.find({
		fourC: 'Yes',
		status: 'Contained',
		cabs: 'Manufacturing/Paint',
	})
	const closedPaintLine = await Claim.find({
		fourC: 'Yes',
		status: 'Closed',
		cabs: 'Manufacturing/Paint',
	})

	const openMaterialsLine = await Claim.find({
		fourC: 'Yes',
		status: 'Open',
		cabs: 'Materials/Kitting',
	})
	const containedMaterialsLine = await Claim.find({
		fourC: 'Yes',
		status: 'Contained',
		cabs: 'Materials/Kitting',
	})
	const closedMaterialsLine = await Claim.find({
		fourC: 'Yes',
		status: 'Closed',
		cabs: 'Materials/Kitting',
	})

	const openSqDesignLine = await Claim.find({
		fourC: 'Yes',
		status: 'Open',
		cabs: 'Supplier Quality/Design',
	})
	const containedSqDesignLine = await Claim.find({
		fourC: 'Yes',
		status: 'Contained',
		cabs: 'Supplier Quality/Design',
	})
	const closedSqDesignLine = await Claim.find({
		fourC: 'Yes',
		status: 'Closed',
		cabs: 'Supplier Quality/Design',
	})
	res.render('dash/cabs-map', {
		openbhlLine,
		containedbhlLine,
		closedbhlLine,
		opencpLine,
		containedcpLine,
		closedcpLine,
		openldlLine,
		containedldlLine,
		closedldlLine,
		openPaintLine,
		containedPaintLine,
		closedPaintLine,
		openMaterialsLine,
		containedMaterialsLine,
		closedMaterialsLine,
		openSqDesignLine,
		containedSqDesignLine,
		closedSqDesignLine,
	})
}

module.exports.groupFourc = async (req, res) => {
	const group = ['BHL', 'SD', 'CP', 'EM', 'LP', 'HP', 'LDL']

	const twelveMonthsAgoFirst = moment().subtract(12, 'months').format('YYYY, MM, 01')

	const twelveMonthsAgoFirstDB = new Date(twelveMonthsAgoFirst)
	twelveMonthsAgoFirstDB.setHours(0, 0, 0, 0)

	const eightMonthsAgoFirst = moment().subtract(8, 'months').format('YYYY, MM, 01')

	const eightMonthsAgoFirstDB = new Date(eightMonthsAgoFirst)
	eightMonthsAgoFirstDB.setHours(0, 0, 0, 0)

	const fourCParts = await Claim.find(
		{
			$or: [{ fourC: 'Yes' }, { linked: true }],
			// fourC: 'Yes',
			status: 'Open',
			active: true,
			importedDate: { $gte: eightMonthsAgoFirstDB },
			tPeriod: {
				$in: ['DOA', 'T000', 'T001', 'T002', 'T003'],
			},
			division: {
				$in: group,
			},
			outcome: {
				$nin: ['Reject', 'Z Code'],
			},
		},
		{ failedPart: 1, _id: 0 }
	)

	const fourCPartNumbers = fourCParts.map((claim) => claim.failedPart)

	const doaFourCs = await Claim.aggregate([
		{
			$match: {
				division: { $in: group },
				importedDate: { $gte: eightMonthsAgoFirstDB },
				tPeriod: 'DOA',
				active: true,
				outcome: {
					$nin: ['Reject', 'Z Code'],
				},
				failedPart: { $nin: fourCPartNumbers },
				// vettedAt : { $gte: earliest },
			},
		},
		{
			$project: {
				_id: {
					year: { $substrCP: ['$buildDate', 6, 4] },
					month: { $substrCP: ['$buildDate', 3, 2] },
				},
				status: 1,
			},
		},
		{
			$group: {
				_id: '$_id',
				status: { $push: '$status' },
				count: {
					$sum: 1,
				},
			},
		},

		{ $sort: { _id: 1 } },
	])

	const doaFourCsSplit = await Claim.aggregate([
		{
			$match: {
				division: { $in: group },
				importedDate: { $gte: eightMonthsAgoFirstDB },
				tPeriod: 'DOA',
				active: true,
				outcome: {
					$nin: ['Reject', 'Z Code'],
				},
				failedPart: { $nin: fourCPartNumbers },
				// vettedAt : { $gte: earliest },
			},
		},
		{
			$project: {
				_id: {
					year: { $substrCP: ['$buildDate', 6, 4] },
					month: { $substrCP: ['$buildDate', 3, 2] },
					division: '$division',
				},
				status: 1,
			},
		},
		{
			$group: {
				_id: '$_id',
				status: { $push: '$status' },
				count: {
					$sum: 1,
				},
			},
		},

		{ $sort: { _id: 1 } },
	])

	const MissedDoaFourCs = await Claim.aggregate([
		{
			$match: {
				division: { $in: group },
				importedDate: { $gte: eightMonthsAgoFirstDB },
				tPeriod: 'DOA',
				active: true,
				outcome: {
					$nin: ['Reject', 'Z Code'],
				},
				failedPart: { $in: fourCPartNumbers },
				// vettedAt : { $gte: earliest },
			},
		},
		{
			$project: {
				_id: {
					year: { $substrCP: ['$buildDate', 6, 4] },
					month: { $substrCP: ['$buildDate', 3, 2] },
				},
				status: 1,
			},
		},
		{
			$group: {
				_id: '$_id',
				status: { $push: '$status' },
				count: {
					$sum: 1,
				},
			},
		},

		{ $sort: { _id: 1 } },
	])
	const MissedDoaFourCsSplit = await Claim.aggregate([
		{
			$match: {
				division: { $in: group },
				importedDate: { $gte: eightMonthsAgoFirstDB },
				tPeriod: 'DOA',
				active: true,
				outcome: {
					$nin: ['Reject', 'Z Code'],
				},
				failedPart: { $in: fourCPartNumbers },
				// vettedAt : { $gte: earliest },
			},
		},
		{
			$project: {
				_id: {
					year: { $substrCP: ['$buildDate', 6, 4] },
					month: { $substrCP: ['$buildDate', 3, 2] },
					division: '$division',
				},
				status: 1,
			},
		},
		{
			$group: {
				_id: '$_id',
				status: { $push: '$status' },
				count: {
					$sum: 1,
				},
			},
		},

		{ $sort: { _id: 1 } },
	])

	const labels = [
		eightMonthsAgoText,
		sevenMonthsAgoText,
		sixMonthsAgoText,
		fiveMonthsAgoText,
		fourMonthsAgoText,
		threeMonthsAgoText,
		twoMonthsAgoText,
		oneMonthAgoText,
		thisMonthText,
	]

	//bhl
	let doaOpen8BHL = 0
	let doaContained8BHL = 0
	let doaClosed8BHL = 0
	let doaMissed8BHL = 0

	let doaOpen7BHL = 0
	let doaContained7BHL = 0
	let doaClosed7BHL = 0
	let doaMissed7BHL = 0

	let doaOpen6BHL = 0
	let doaContained6BHL = 0
	let doaClosed6BHL = 0
	let doaMissed6BHL = 0

	let doaOpen5BHL = 0
	let doaContained5BHL = 0
	let doaClosed5BHL = 0
	let doaMissed5BHL = 0

	let doaOpen4BHL = 0
	let doaContained4BHL = 0
	let doaClosed4BHL = 0
	let doaMissed4BHL = 0

	let doaOpen3BHL = 0
	let doaContained3BHL = 0
	let doaClosed3BHL = 0
	let doaMissed3BHL = 0

	let doaOpen2BHL = 0
	let doaContained2BHL = 0
	let doaClosed2BHL = 0
	let doaMissed2BHL = 0

	let doaOpen1BHL = 0
	let doaContained1BHL = 0
	let doaClosed1BHL = 0
	let doaMissed1BHL = 0

	let doaOpen0BHL = 0
	let doaContained0BHL = 0
	let doaClosed0BHL = 0
	let doaMissed0BHL = 0

	//ldl
	let doaOpen8LDL = 0
	let doaContained8LDL = 0
	let doaClosed8LDL = 0
	let doaMissed8LDL = 0

	let doaOpen7LDL = 0
	let doaContained7LDL = 0
	let doaClosed7LDL = 0
	let doaMissed7LDL = 0

	let doaOpen6LDL = 0
	let doaContained6LDL = 0
	let doaClosed6LDL = 0
	let doaMissed6LDL = 0

	let doaOpen5LDL = 0
	let doaContained5LDL = 0
	let doaClosed5LDL = 0
	let doaMissed5LDL = 0

	let doaOpen4LDL = 0
	let doaContained4LDL = 0
	let doaClosed4LDL = 0
	let doaMissed4LDL = 0

	let doaOpen3LDL = 0
	let doaContained3LDL = 0
	let doaClosed3LDL = 0
	let doaMissed3LDL = 0

	let doaOpen2LDL = 0
	let doaContained2LDL = 0
	let doaClosed2LDL = 0
	let doaMissed2LDL = 0

	let doaOpen1LDL = 0
	let doaContained1LDL = 0
	let doaClosed1LDL = 0
	let doaMissed1LDL = 0

	let doaOpen0LDL = 0
	let doaContained0LDL = 0
	let doaClosed0LDL = 0
	let doaMissed0LDL = 0

	//cp
	let doaOpen8CP = 0
	let doaContained8CP = 0
	let doaClosed8CP = 0
	let doaMissed8CP = 0

	let doaOpen7CP = 0
	let doaContained7CP = 0
	let doaClosed7CP = 0
	let doaMissed7CP = 0

	let doaOpen6CP = 0
	let doaContained6CP = 0
	let doaClosed6CP = 0
	let doaMissed6CP = 0

	let doaOpen5CP = 0
	let doaContained5CP = 0
	let doaClosed5CP = 0
	let doaMissed5CP = 0

	let doaOpen4CP = 0
	let doaContained4CP = 0
	let doaClosed4CP = 0
	let doaMissed4CP = 0

	let doaOpen3CP = 0
	let doaContained3CP = 0
	let doaClosed3CP = 0
	let doaMissed3CP = 0

	let doaOpen2CP = 0
	let doaContained2CP = 0
	let doaClosed2CP = 0
	let doaMissed2CP = 0

	let doaOpen1CP = 0
	let doaContained1CP = 0
	let doaClosed1CP = 0
	let doaMissed1CP = 0

	let doaOpen0CP = 0
	let doaContained0CP = 0
	let doaClosed0CP = 0
	let doaMissed0CP = 0

	//em
	let doaOpen8EM = 0
	let doaContained8EM = 0
	let doaClosed8EM = 0
	let doaMissed8EM = 0

	let doaOpen7EM = 0
	let doaContained7EM = 0
	let doaClosed7EM = 0
	let doaMissed7EM = 0

	let doaOpen6EM = 0
	let doaContained6EM = 0
	let doaClosed6EM = 0
	let doaMissed6EM = 0

	let doaOpen5EM = 0
	let doaContained5EM = 0
	let doaClosed5EM = 0
	let doaMissed5EM = 0

	let doaOpen4EM = 0
	let doaContained4EM = 0
	let doaClosed4EM = 0
	let doaMissed4EM = 0

	let doaOpen3EM = 0
	let doaContained3EM = 0
	let doaClosed3EM = 0
	let doaMissed3EM = 0

	let doaOpen2EM = 0
	let doaContained2EM = 0
	let doaClosed2EM = 0
	let doaMissed2EM = 0

	let doaOpen1EM = 0
	let doaContained1EM = 0
	let doaClosed1EM = 0
	let doaMissed1EM = 0

	let doaOpen0EM = 0
	let doaContained0EM = 0
	let doaClosed0EM = 0
	let doaMissed0EM = 0

	//lp
	let doaOpen8LP = 0
	let doaContained8LP = 0
	let doaClosed8LP = 0
	let doaMissed8LP = 0

	let doaOpen7LP = 0
	let doaContained7LP = 0
	let doaClosed7LP = 0
	let doaMissed7LP = 0

	let doaOpen6LP = 0
	let doaContained6LP = 0
	let doaClosed6LP = 0
	let doaMissed6LP = 0

	let doaOpen5LP = 0
	let doaContained5LP = 0
	let doaClosed5LP = 0
	let doaMissed5LP = 0

	let doaOpen4LP = 0
	let doaContained4LP = 0
	let doaClosed4LP = 0
	let doaMissed4LP = 0

	let doaOpen3LP = 0
	let doaContained3LP = 0
	let doaClosed3LP = 0
	let doaMissed3LP = 0

	let doaOpen2LP = 0
	let doaContained2LP = 0
	let doaClosed2LP = 0
	let doaMissed2LP = 0

	let doaOpen1LP = 0
	let doaContained1LP = 0
	let doaClosed1LP = 0
	let doaMissed1LP = 0

	let doaOpen0LP = 0
	let doaContained0LP = 0
	let doaClosed0LP = 0
	let doaMissed0LP = 0

	// hp
	let doaOpen8HP = 0
	let doaContained8HP = 0
	let doaClosed8HP = 0
	let doaMissed8HP = 0

	let doaOpen7HP = 0
	let doaContained7HP = 0
	let doaClosed7HP = 0
	let doaMissed7HP = 0

	let doaOpen6HP = 0
	let doaContained6HP = 0
	let doaClosed6HP = 0
	let doaMissed6HP = 0

	let doaOpen5HP = 0
	let doaContained5HP = 0
	let doaClosed5HP = 0
	let doaMissed5HP = 0

	let doaOpen4HP = 0
	let doaContained4HP = 0
	let doaClosed4HP = 0
	let doaMissed4HP = 0

	let doaOpen3HP = 0
	let doaContained3HP = 0
	let doaClosed3HP = 0
	let doaMissed3HP = 0

	let doaOpen2HP = 0
	let doaContained2HP = 0
	let doaClosed2HP = 0
	let doaMissed2HP = 0

	let doaOpen1HP = 0
	let doaContained1HP = 0
	let doaClosed1HP = 0
	let doaMissed1HP = 0

	let doaOpen0HP = 0
	let doaContained0HP = 0
	let doaClosed0HP = 0
	let doaMissed0HP = 0

	for (let d of doaFourCsSplit) {
		if (d._id.month === eightMonthsAgoNumber && d._id.year === eightMonthsAgoNumberY) {
			if (d._id.division === 'BHL' || d._id.division === 'SD') {
				doaOpen8BHL += countOccurrences(d.status, 'Open')
				doaContained8BHL += countOccurrences(d.status, 'Contained')
				doaClosed8BHL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LDL') {
				doaOpen8LDL = countOccurrences(d.status, 'Open')
				doaContained8LDL = countOccurrences(d.status, 'Contained')
				doaClosed8LDL = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'CP') {
				doaOpen8CP = countOccurrences(d.status, 'Open')
				doaContained8CP = countOccurrences(d.status, 'Contained')
				doaClosed8CP = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'EM') {
				doaOpen8EM = countOccurrences(d.status, 'Open')
				doaContained8EM = countOccurrences(d.status, 'Contained')
				doaClosed8EM = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LP') {
				doaOpen8LP = countOccurrences(d.status, 'Open')
				doaContained8LP = countOccurrences(d.status, 'Contained')
				doaClosed8LP = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'HP') {
				doaOpen8HP = countOccurrences(d.status, 'Open')
				doaContained8HP = countOccurrences(d.status, 'Contained')
				doaClosed8HP = countOccurrences(d.status, 'Closed')
			}
		}
		if (d._id.month === sevenMonthsAgoNumber && d._id.year === sevenMonthsAgoNumberY) {
			if (d._id.division === 'BHL' || d._id.division === 'SD') {
				doaOpen7BHL += countOccurrences(d.status, 'Open')
				doaContained7BHL += countOccurrences(d.status, 'Contained')
				doaClosed7BHL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LDL') {
				doaOpen7LDL = countOccurrences(d.status, 'Open')
				doaContained7LDL = countOccurrences(d.status, 'Contained')
				doaClosed7LDL = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'CP') {
				doaOpen7CP = countOccurrences(d.status, 'Open')
				doaContained7CP = countOccurrences(d.status, 'Contained')
				doaClosed7CP = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'EM') {
				doaOpen7EM = countOccurrences(d.status, 'Open')
				doaContained7EM = countOccurrences(d.status, 'Contained')
				doaClosed7EM = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LP') {
				doaOpen7LP = countOccurrences(d.status, 'Open')
				doaContained7LP = countOccurrences(d.status, 'Contained')
				doaClosed7LP = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'HP') {
				doaOpen7HP = countOccurrences(d.status, 'Open')
				doaContained7HP = countOccurrences(d.status, 'Contained')
				doaClosed7HP = countOccurrences(d.status, 'Closed')
			}
		}
		if (d._id.month === sixMonthsAgoNumber && d._id.year === sixMonthsAgoNumberY) {
			if (d._id.division === 'BHL' || d._id.division === 'SD') {
				doaOpen6BHL += countOccurrences(d.status, 'Open')
				doaContained6BHL += countOccurrences(d.status, 'Contained')
				doaClosed6BHL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LDL') {
				doaOpen6LDL = countOccurrences(d.status, 'Open')
				doaContained6LDL = countOccurrences(d.status, 'Contained')
				doaClosed6LDL = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'CP') {
				doaOpen6CP = countOccurrences(d.status, 'Open')
				doaContained6CP = countOccurrences(d.status, 'Contained')
				doaClosed6CP = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'EM') {
				doaOpen6EM = countOccurrences(d.status, 'Open')
				doaContained6EM = countOccurrences(d.status, 'Contained')
				doaClosed6EM = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LP') {
				doaOpen6LP = countOccurrences(d.status, 'Open')
				doaContained6LP = countOccurrences(d.status, 'Contained')
				doaClosed6LP = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'HP') {
				doaOpen6HP = countOccurrences(d.status, 'Open')
				doaContained6HP = countOccurrences(d.status, 'Contained')
				doaClosed6HP = countOccurrences(d.status, 'Closed')
			}
		}
		if (d._id.month === fiveMonthsAgoNumber && d._id.year === fiveMonthsAgoNumberY) {
			if (d._id.division === 'BHL' || d._id.division === 'SD') {
				doaOpen5BHL += countOccurrences(d.status, 'Open')
				doaContained5BHL += countOccurrences(d.status, 'Contained')
				doaClosed5BHL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LDL') {
				doaOpen5LDL = countOccurrences(d.status, 'Open')
				doaContained5LDL = countOccurrences(d.status, 'Contained')
				doaClosed5LDL = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'CP') {
				doaOpen5CP = countOccurrences(d.status, 'Open')
				doaContained5CP = countOccurrences(d.status, 'Contained')
				doaClosed5CP = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'EM') {
				doaOpen5EM = countOccurrences(d.status, 'Open')
				doaContained5EM = countOccurrences(d.status, 'Contained')
				doaClosed5EM = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LP') {
				doaOpen5LP = countOccurrences(d.status, 'Open')
				doaContained5LP = countOccurrences(d.status, 'Contained')
				doaClosed5LP = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'HP') {
				doaOpen5HP = countOccurrences(d.status, 'Open')
				doaContained5HP = countOccurrences(d.status, 'Contained')
				doaClosed5HP = countOccurrences(d.status, 'Closed')
			}
		}
		if (d._id.month === fourMonthsAgoNumber && d._id.year === fourMonthsAgoNumberY) {
			if (d._id.division === 'BHL' || d._id.division === 'SD') {
				doaOpen4BHL += countOccurrences(d.status, 'Open')
				doaContained4BHL += countOccurrences(d.status, 'Contained')
				doaClosed4BHL += countOccurrences(d.status, 'Closed')
			}

			if (d._id.division === 'LDL') {
				doaOpen4LDL = countOccurrences(d.status, 'Open')
				doaContained4LDL = countOccurrences(d.status, 'Contained')
				doaClosed4LDL = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'CP') {
				doaOpen4CP = countOccurrences(d.status, 'Open')
				doaContained4CP = countOccurrences(d.status, 'Contained')
				doaClosed4CP = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'EM') {
				doaOpen4EM = countOccurrences(d.status, 'Open')
				doaContained4EM = countOccurrences(d.status, 'Contained')
				doaClosed4EM = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LP') {
				doaOpen4LP = countOccurrences(d.status, 'Open')
				doaContained4LP = countOccurrences(d.status, 'Contained')
				doaClosed4LP = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'HP') {
				doaOpen4HP = countOccurrences(d.status, 'Open')
				doaContained4HP = countOccurrences(d.status, 'Contained')
				doaClosed4HP = countOccurrences(d.status, 'Closed')
			}
		}
		if (d._id.month === threeMonthsAgoNumber && d._id.year === threeMonthsAgoNumberY) {
			if (d._id.division === 'BHL' || d._id.division == 'SD') {
				doaOpen3BHL += countOccurrences(d.status, 'Open')
				doaContained3BHL += countOccurrences(d.status, 'Contained')
				doaClosed3BHL += countOccurrences(d.status, 'Closed')
			}

			if (d._id.division === 'LDL') {
				doaOpen3LDL = countOccurrences(d.status, 'Open')
				doaContained3LDL = countOccurrences(d.status, 'Contained')
				doaClosed3LDL = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'CP') {
				doaOpen3CP = countOccurrences(d.status, 'Open')
				doaContained3CP = countOccurrences(d.status, 'Contained')
				doaClosed3CP = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'EM') {
				doaOpen3EM = countOccurrences(d.status, 'Open')
				doaContained3EM = countOccurrences(d.status, 'Contained')
				doaClosed3EM = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LP') {
				doaOpen3LP = countOccurrences(d.status, 'Open')
				doaContained3LP = countOccurrences(d.status, 'Contained')
				doaClosed3LP = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'HP') {
				doaOpen3HP = countOccurrences(d.status, 'Open')
				doaContained3HP = countOccurrences(d.status, 'Contained')
				doaClosed3HP = countOccurrences(d.status, 'Closed')
			}
		}
		if (d._id.month === twoMonthsAgoNumber && d._id.year === twoMonthsAgoNumberY) {
			if (d._id.division === 'BHL' || d._id.division === 'SD') {
				doaOpen2BHL += countOccurrences(d.status, 'Open')
				doaContained2BHL += countOccurrences(d.status, 'Contained')
				doaClosed2BHL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LDL') {
				doaOpen2LDL = countOccurrences(d.status, 'Open')
				doaContained2LDL = countOccurrences(d.status, 'Contained')
				doaClosed2LDL = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'CP') {
				doaOpen2CP = countOccurrences(d.status, 'Open')
				doaContained2CP = countOccurrences(d.status, 'Contained')
				doaClosed2CP = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'EM') {
				doaOpen2EM = countOccurrences(d.status, 'Open')
				doaContained2EM = countOccurrences(d.status, 'Contained')
				doaClosed2EM = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LP') {
				doaOpen2LP = countOccurrences(d.status, 'Open')
				doaContained2LP = countOccurrences(d.status, 'Contained')
				doaClosed2LP = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'HP') {
				doaOpen2HP = countOccurrences(d.status, 'Open')
				doaContained2HP = countOccurrences(d.status, 'Contained')
				doaClosed2HP = countOccurrences(d.status, 'Closed')
			}
		}
		if (d._id.month === oneMonthAgoNumber && d._id.year === oneMonthAgoNumberY) {
			if (d._id.division === 'BHL' || d._id.division === 'SD') {
				doaOpen1BHL += countOccurrences(d.status, 'Open')
				doaContained1BHL += countOccurrences(d.status, 'Contained')
				doaClosed1BHL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LDL') {
				doaOpen1LDL = countOccurrences(d.status, 'Open')
				doaContained1LDL = countOccurrences(d.status, 'Contained')
				doaClosed1LDL = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'CP') {
				doaOpen1CP = countOccurrences(d.status, 'Open')
				doaContained1CP = countOccurrences(d.status, 'Contained')
				doaClosed1CP = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'EM') {
				doaOpen1EM = countOccurrences(d.status, 'Open')
				doaContained1EM = countOccurrences(d.status, 'Contained')
				doaClosed1EM = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LP') {
				doaOpen1LP = countOccurrences(d.status, 'Open')
				doaContained1LP = countOccurrences(d.status, 'Contained')
				doaClosed1LP = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'HP') {
				doaOpen1HP = countOccurrences(d.status, 'Open')
				doaContained1HP = countOccurrences(d.status, 'Contained')
				doaClosed1HP = countOccurrences(d.status, 'Closed')
			}
		}
		if (d._id.month === thisMonthNumber && d._id.year === thisMonthNumberY) {
			if (d._id.division === 'BHL' || d._id.division === 'SD') {
				doaOpen0BHL += countOccurrences(d.status, 'Open')
				doaContained0BHL += countOccurrences(d.status, 'Contained')
				doaClosed0BHL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LDL') {
				doaOpen0LDL = countOccurrences(d.status, 'Open')
				doaContained0LDL = countOccurrences(d.status, 'Contained')
				doaClosed0LDL = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'CP') {
				doaOpen0CP = countOccurrences(d.status, 'Open')
				doaContained0CP = countOccurrences(d.status, 'Contained')
				doaClosed0CP = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'EM') {
				doaOpen0EM = countOccurrences(d.status, 'Open')
				doaContained0EM = countOccurrences(d.status, 'Contained')
				doaClosed0EM = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LP') {
				doaOpen0LP = countOccurrences(d.status, 'Open')
				doaContained0LP = countOccurrences(d.status, 'Contained')
				doaClosed0LP = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'HP') {
				doaOpen0HP = countOccurrences(d.status, 'Open')
				doaContained0HP = countOccurrences(d.status, 'Contained')
				doaClosed0HP = countOccurrences(d.status, 'Closed')
			}
		}
	}

	for (let d of MissedDoaFourCsSplit) {
		if (d._id.month === eightMonthsAgoNumber && d._id.year === eightMonthsAgoNumberY) {
			if (d._id.division === 'BHL' || d._id.division === 'SD') {
				doaMissed8BHL += countOccurrences(d.status, 'Open')
				doaContained8BHL += countOccurrences(d.status, 'Contained')
				doaClosed8BHL += countOccurrences(d.status, 'Closed')
				// doaMissed8BHL = d.status.length
			}
			if (d._id.division === 'LDL') {
				doaMissed8LDL = countOccurrences(d.status, 'Open')
				doaContained8LDL += countOccurrences(d.status, 'Contained')
				doaClosed8LDL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'CP') {
				doaMissed8CP = countOccurrences(d.status, 'Open')
				doaContained8CP += countOccurrences(d.status, 'Contained')
				doaClosed8CP += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'EM') {
				doaMissed8EM = countOccurrences(d.status, 'Open')
				doaContained8EM += countOccurrences(d.status, 'Contained')
				doaClosed8EM += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LP') {
				doaMissed8LP = countOccurrences(d.status, 'Open')
				doaContained8LP += countOccurrences(d.status, 'Contained')
				doaClosed8LP += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'HP') {
				doaMissed8HP = countOccurrences(d.status, 'Open')
				doaContained8HP += countOccurrences(d.status, 'Contained')
				doaClosed8HP += countOccurrences(d.status, 'Closed')
			}
		}
		if (d._id.month === sevenMonthsAgoNumber && d._id.year === sevenMonthsAgoNumberY) {
			if (d._id.division === 'BHL' || d._id.division === 'SD') {
				doaMissed7BHL += countOccurrences(d.status, 'Open')
				doaContained7BHL += countOccurrences(d.status, 'Contained')
				doaClosed7BHL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LDL') {
				doaMissed7LDL = countOccurrences(d.status, 'Open')
				doaContained7LDL += countOccurrences(d.status, 'Contained')
				doaClosed7LDL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'CP') {
				doaMissed7CP = countOccurrences(d.status, 'Open')
				doaContained7CP += countOccurrences(d.status, 'Contained')
				doaClosed7CP += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'EM') {
				doaMissed7EM = countOccurrences(d.status, 'Open')
				doaContained7EM += countOccurrences(d.status, 'Contained')
				doaClosed7EM += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LP') {
				doaMissed7LP = countOccurrences(d.status, 'Open')
				doaContained7LP += countOccurrences(d.status, 'Contained')
				doaClosed7LP += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'HP') {
				doaMissed7HP = countOccurrences(d.status, 'Open')
				doaContained7HP += countOccurrences(d.status, 'Contained')
				doaClosed7HP += countOccurrences(d.status, 'Closed')
			}
		}
		if (d._id.month === sixMonthsAgoNumber && d._id.year === sixMonthsAgoNumberY) {
			if (d._id.division === 'BHL' || d._id.division === 'SD') {
				doaMissed6BHL += countOccurrences(d.status, 'Open')
				doaContained6BHL += countOccurrences(d.status, 'Contained')
				doaClosed6BHL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LDL') {
				doaMissed6LDL = countOccurrences(d.status, 'Open')
				doaContained6LDL += countOccurrences(d.status, 'Contained')
				doaClosed6LDL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'CP') {
				doaMissed6CP = countOccurrences(d.status, 'Open')
				doaContained6CP += countOccurrences(d.status, 'Contained')
				doaClosed6CP += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'EM') {
				doaMissed6EM = countOccurrences(d.status, 'Open')
				doaContained6EM += countOccurrences(d.status, 'Contained')
				doaClosed6EM += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LP') {
				doaMissed6LP = countOccurrences(d.status, 'Open')
				doaContained6LP += countOccurrences(d.status, 'Contained')
				doaClosed6LP += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'HP') {
				doaMissed6HP = countOccurrences(d.status, 'Open')
				doaContained6HP += countOccurrences(d.status, 'Contained')
				doaClosed6HP += countOccurrences(d.status, 'Closed')
			}
		}
		if (d._id.month === fiveMonthsAgoNumber && d._id.year === fiveMonthsAgoNumberY) {
			if (d._id.division === 'BHL' || d._id.division === 'SD') {
				doaMissed5BHL += countOccurrences(d.status, 'Open')
				doaContained5BHL += countOccurrences(d.status, 'Contained')
				doaClosed5BHL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LDL') {
				doaMissed5LDL = countOccurrences(d.status, 'Open')
				doaContained5LDL += countOccurrences(d.status, 'Contained')
				doaClosed5LDL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'CP') {
				doaMissed5CP = countOccurrences(d.status, 'Open')
				doaContained5CP += countOccurrences(d.status, 'Contained')
				doaClosed5CP += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'EM') {
				doaMissed5EM = countOccurrences(d.status, 'Open')
				doaContained5EM += countOccurrences(d.status, 'Contained')
				doaClosed5EM += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LP') {
				doaMissed5LP = countOccurrences(d.status, 'Open')
				doaContained5LP += countOccurrences(d.status, 'Contained')
				doaClosed5LP += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'HP') {
				doaMissed5HP = countOccurrences(d.status, 'Open')
				doaContained5HP += countOccurrences(d.status, 'Contained')
				doaClosed5HP += countOccurrences(d.status, 'Closed')
			}
		}
		if (d._id.month === fourMonthsAgoNumber && d._id.year === fourMonthsAgoNumberY) {
			if (d._id.division === 'BHL' || d._id.division === 'SD') {
				doaMissed4BHL += countOccurrences(d.status, 'Open')
				doaContained4BHL += countOccurrences(d.status, 'Contained')
				doaClosed4BHL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LDL') {
				doaMissed4LDL = countOccurrences(d.status, 'Open')
				doaContained4LDL += countOccurrences(d.status, 'Contained')
				doaClosed4LDL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'CP') {
				doaMissed4CP = countOccurrences(d.status, 'Open')
				doaContained4CP += countOccurrences(d.status, 'Contained')
				doaClosed4CP += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'EM') {
				doaMissed4EM = countOccurrences(d.status, 'Open')
				doaContained4EM += countOccurrences(d.status, 'Contained')
				doaClosed4EM += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LP') {
				doaMissed4LP = countOccurrences(d.status, 'Open')
				doaContained4LP += countOccurrences(d.status, 'Contained')
				doaClosed4LP += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'HP') {
				doaMissed4HP = countOccurrences(d.status, 'Open')
				doaContained4HP += countOccurrences(d.status, 'Contained')
				doaClosed4HP += countOccurrences(d.status, 'Closed')
			}
		}
		if (d._id.month === threeMonthsAgoNumber && d._id.year === threeMonthsAgoNumberY) {
			if (d._id.division === 'BHL' || d._id.division === 'SD') {
				doaMissed3BHL += countOccurrences(d.status, 'Open')
				doaContained3BHL += countOccurrences(d.status, 'Contained')
				doaClosed3BHL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LDL') {
				doaMissed3LDL = countOccurrences(d.status, 'Open')
				doaContained3LDL += countOccurrences(d.status, 'Contained')
				doaClosed3LDL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'CP') {
				doaMissed3CP = countOccurrences(d.status, 'Open')
				doaContained3CP += countOccurrences(d.status, 'Contained')
				doaClosed3CP += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'EM') {
				doaMissed3EM = countOccurrences(d.status, 'Open')
				doaContained3EM += countOccurrences(d.status, 'Contained')
				doaClosed3EM += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LP') {
				doaMissed3LP = countOccurrences(d.status, 'Open')
				doaContained3LP += countOccurrences(d.status, 'Contained')
				doaClosed3LP += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'HP') {
				doaMissed3HP = countOccurrences(d.status, 'Open')
				doaContained3HP += countOccurrences(d.status, 'Contained')
				doaClosed3HP += countOccurrences(d.status, 'Closed')
			}
		}
		if (d._id.month === twoMonthsAgoNumber && d._id.year === twoMonthsAgoNumberY) {
			if (d._id.division === 'BHL' || d._id.division === 'SD') {
				doaMissed2BHL += countOccurrences(d.status, 'Open')
				doaContained2BHL += countOccurrences(d.status, 'Contained')
				doaClosed2BHL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LDL') {
				doaMissed2LDL = countOccurrences(d.status, 'Open')
				doaContained2LDL += countOccurrences(d.status, 'Contained')
				doaClosed2LDL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'CP') {
				doaMissed2CP = countOccurrences(d.status, 'Open')
				doaContained2CP += countOccurrences(d.status, 'Contained')
				doaClosed2CP += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'EM') {
				doaMissed2EM = countOccurrences(d.status, 'Open')
				doaContained2EM += countOccurrences(d.status, 'Contained')
				doaClosed2EM += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LP') {
				doaMissed2LP = countOccurrences(d.status, 'Open')
				doaContained2LP += countOccurrences(d.status, 'Contained')
				doaClosed2LP += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'HP') {
				doaMissed2HP = countOccurrences(d.status, 'Open')
				doaContained2HP += countOccurrences(d.status, 'Contained')
				doaClosed2HP += countOccurrences(d.status, 'Closed')
			}
		}
		if (d._id.month === oneMonthAgoNumber && d._id.year === oneMonthAgoNumberY) {
			if (d._id.division === 'BHL' || d._id.division === 'SD') {
				doaMissed1BHL += countOccurrences(d.status, 'Open')
				doaContained1BHL += countOccurrences(d.status, 'Contained')
				doaClosed1BHL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LDL') {
				doaMissed1LDL = countOccurrences(d.status, 'Open')
				doaContained1LDL += countOccurrences(d.status, 'Contained')
				doaClosed1LDL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'CP') {
				doaMissed1CP = countOccurrences(d.status, 'Open')
				doaContained1CP += countOccurrences(d.status, 'Contained')
				doaClosed1CP += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'EM') {
				doaMissed1EM = countOccurrences(d.status, 'Open')
				doaContained1EM += countOccurrences(d.status, 'Contained')
				doaClosed1EM += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LP') {
				doaMissed1LP = countOccurrences(d.status, 'Open')
				doaContained1LP += countOccurrences(d.status, 'Contained')
				doaClosed1LP += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'HP') {
				doaMissed1HP = countOccurrences(d.status, 'Open')
				doaContained1HP += countOccurrences(d.status, 'Contained')
				doaClosed1HP += countOccurrences(d.status, 'Closed')
			}
		}
		if (d._id.month === thisMonthNumber && d._id.year === thisMonthNumberY) {
			if (d._id.division === 'BHL' || d._id.division === 'SD') {
				doaMissed0BHL += countOccurrences(d.status, 'Open')
				doaContained0BHL += countOccurrences(d.status, 'Contained')
				doaClosed0BHL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LDL') {
				doaMissed0LDL = countOccurrences(d.status, 'Open')
				doaContained0LDL += countOccurrences(d.status, 'Contained')
				doaClosed0LDL += countOccurrences(d.status, 'Closed')
			}

			if (d._id.division === 'CP') {
				doaMissed0CP = countOccurrences(d.status, 'Open')
				doaContained0CP += countOccurrences(d.status, 'Contained')
				doaClosed0CP += countOccurrences(d.status, 'Closed')
			}

			if (d._id.division === 'EM') {
				doaMissed0EM = countOccurrences(d.status, 'Open')
				doaContained0EM += countOccurrences(d.status, 'Contained')
				doaClosed0EM += countOccurrences(d.status, 'Closed')
			}

			if (d._id.division === 'LP') {
				doaMissed0LP = countOccurrences(d.status, 'Open')
				doaContained0LP += countOccurrences(d.status, 'Contained')
				doaClosed0LP += countOccurrences(d.status, 'Closed')
			}

			if (d._id.division === 'HP') {
				doaMissed0HP = countOccurrences(d.status, 'Open')
				doaContained0HP += countOccurrences(d.status, 'Contained')
				doaClosed0HP += countOccurrences(d.status, 'Closed')
			}
		}
	}

	//group 8 months ago
	const doaOpen8 = doaOpen8BHL + doaOpen8LDL + doaOpen8CP + doaOpen8EM + doaOpen8LP + doaOpen8HP
	const doaContained8 = doaContained8BHL + doaContained8LDL + doaContained8CP + doaContained8EM + doaContained8LP + doaContained8HP
	const doaClosed8 = doaClosed8BHL + doaClosed8LDL + doaClosed8CP + doaClosed8EM + doaClosed8LP + doaClosed8HP
	const doaMissed8 = doaMissed8BHL + doaMissed8LDL + doaMissed8CP + doaMissed8EM + doaMissed8LP + doaMissed8HP

	//group 7 months ago
	const doaOpen7 = doaOpen7BHL + doaOpen7LDL + doaOpen7CP + doaOpen7EM + doaOpen7LP + doaOpen7HP
	const doaContained7 = doaContained7BHL + doaContained7LDL + doaContained7CP + doaContained7EM + doaContained7LP + doaContained7HP
	const doaClosed7 = doaClosed7BHL + doaClosed7LDL + doaClosed7CP + doaClosed7EM + doaClosed7LP + doaClosed7HP
	const doaMissed7 = doaMissed7BHL + doaMissed7LDL + doaMissed7CP + doaMissed7EM + doaMissed7LP + doaMissed7HP

	//group 6 months ago
	const doaOpen6 = doaOpen6BHL + doaOpen6LDL + doaOpen6CP + doaOpen6EM + doaOpen6LP + doaOpen6HP
	const doaContained6 = doaContained6BHL + doaContained6LDL + doaContained6CP + doaContained6EM + doaContained6LP + doaContained6HP
	const doaClosed6 = doaClosed6BHL + doaClosed6LDL + doaClosed6CP + doaClosed6EM + doaClosed6LP + doaClosed6HP
	const doaMissed6 = doaMissed6BHL + doaMissed6LDL + doaMissed6CP + doaMissed6EM + doaMissed6LP + doaMissed6HP

	//group 5 months ago
	const doaOpen5 = doaOpen5BHL + doaOpen5LDL + doaOpen5CP + doaOpen5EM + doaOpen5LP + doaOpen5HP
	const doaContained5 = doaContained5BHL + doaContained5LDL + doaContained5CP + doaContained5EM + doaContained5LP + doaContained5HP
	const doaClosed5 = doaClosed5BHL + doaClosed5LDL + doaClosed5CP + doaClosed5EM + doaClosed5LP + doaClosed5HP
	const doaMissed5 = doaMissed5BHL + doaMissed5LDL + doaMissed5CP + doaMissed5EM + doaMissed5LP + doaMissed5HP

	//group 4 months ago
	const doaOpen4 = doaOpen4BHL + doaOpen4LDL + doaOpen4CP + doaOpen4EM + doaOpen4LP + doaOpen4HP
	const doaContained4 = doaContained4BHL + doaContained4LDL + doaContained4CP + doaContained4EM + doaContained4LP + doaContained4HP
	const doaClosed4 = doaClosed4BHL + doaClosed4LDL + doaClosed4CP + doaClosed4EM + doaClosed4LP + doaClosed4HP
	const doaMissed4 = doaMissed4BHL + doaMissed4LDL + doaMissed4CP + doaMissed4EM + doaMissed4LP + doaMissed4HP

	//group 3 months ago
	const doaOpen3 = doaOpen3BHL + doaOpen3LDL + doaOpen3CP + doaOpen3EM + doaOpen3LP + doaOpen3HP
	const doaContained3 = doaContained3BHL + doaContained3LDL + doaContained3CP + doaContained3EM + doaContained3LP + doaContained3HP
	const doaClosed3 = doaClosed3BHL + doaClosed3LDL + doaClosed3CP + doaClosed3EM + doaClosed3LP + doaClosed3HP
	const doaMissed3 = doaMissed3BHL + doaMissed3LDL + doaMissed3CP + doaMissed3EM + doaMissed3LP + doaMissed3HP

	//group 2 months ago
	const doaOpen2 = doaOpen2BHL + doaOpen2LDL + doaOpen2CP + doaOpen2EM + doaOpen2LP + doaOpen2HP
	const doaContained2 = doaContained2BHL + doaContained2LDL + doaContained2CP + doaContained2EM + doaContained2LP + doaContained2HP
	const doaClosed2 = doaClosed2BHL + doaClosed2LDL + doaClosed2CP + doaClosed2EM + doaClosed2LP + doaClosed2HP
	const doaMissed2 = doaMissed2BHL + doaMissed2LDL + doaMissed2CP + doaMissed2EM + doaMissed2LP + doaMissed2HP

	//group 1 month ago
	const doaOpen1 = doaOpen1BHL + doaOpen1LDL + doaOpen1CP + doaOpen1EM + doaOpen1LP + doaOpen1HP
	const doaContained1 = doaContained1BHL + doaContained1LDL + doaContained1CP + doaContained1EM + doaContained1LP + doaContained1HP
	const doaClosed1 = doaClosed1BHL + doaClosed1LDL + doaClosed1CP + doaClosed1EM + doaClosed1LP + doaClosed1HP
	const doaMissed1 = doaMissed1BHL + doaMissed1LDL + doaMissed1CP + doaMissed1EM + doaMissed1LP + doaMissed1HP

	//group this month
	const doaOpen0 = doaOpen0BHL + doaOpen0LDL + doaOpen0CP + doaOpen0EM + doaOpen0LP + doaOpen0HP
	const doaContained0 = doaContained0BHL + doaContained0LDL + doaContained0CP + doaContained0EM + doaContained0LP + doaContained0HP
	const doaClosed0 = doaClosed0BHL + doaClosed0LDL + doaClosed0CP + doaClosed0EM + doaClosed0LP + doaClosed0HP
	const doaMissed0 = doaMissed0BHL + doaMissed0LDL + doaMissed0CP + doaMissed0EM + doaMissed0LP + doaMissed0HP

	//intake section

	//bhl
	let t3Open8BHL = 0
	let t3Contained8BHL = 0
	let t3Closed8BHL = 0
	let t3Missed8BHL = 0

	let t3Open7BHL = 0
	let t3Contained7BHL = 0
	let t3Closed7BHL = 0
	let t3Missed7BHL = 0

	let t3Open6BHL = 0
	let t3Contained6BHL = 0
	let t3Closed6BHL = 0
	let t3Missed6BHL = 0

	let t3Open5BHL = 0
	let t3Contained5BHL = 0
	let t3Closed5BHL = 0
	let t3Missed5BHL = 0

	let t3Open4BHL = 0
	let t3Contained4BHL = 0
	let t3Closed4BHL = 0
	let t3Missed4BHL = 0

	let t3Open3BHL = 0
	let t3Contained3BHL = 0
	let t3Closed3BHL = 0
	let t3Missed3BHL = 0

	let t3Open2BHL = 0
	let t3Contained2BHL = 0
	let t3Closed2BHL = 0
	let t3Missed2BHL = 0

	let t3Open1BHL = 0
	let t3Contained1BHL = 0
	let t3Closed1BHL = 0
	let t3Missed1BHL = 0

	let t3Open0BHL = 0
	let t3Contained0BHL = 0
	let t3Closed0BHL = 0
	let t3Missed0BHL = 0

	//ldl
	let t3Open8LDL = 0
	let t3Contained8LDL = 0
	let t3Closed8LDL = 0
	let t3Missed8LDL = 0

	let t3Open7LDL = 0
	let t3Contained7LDL = 0
	let t3Closed7LDL = 0
	let t3Missed7LDL = 0

	let t3Open6LDL = 0
	let t3Contained6LDL = 0
	let t3Closed6LDL = 0
	let t3Missed6LDL = 0

	let t3Open5LDL = 0
	let t3Contained5LDL = 0
	let t3Closed5LDL = 0
	let t3Missed5LDL = 0

	let t3Open4LDL = 0
	let t3Contained4LDL = 0
	let t3Closed4LDL = 0
	let t3Missed4LDL = 0

	let t3Open3LDL = 0
	let t3Contained3LDL = 0
	let t3Closed3LDL = 0
	let t3Missed3LDL = 0

	let t3Open2LDL = 0
	let t3Contained2LDL = 0
	let t3Closed2LDL = 0
	let t3Missed2LDL = 0

	let t3Open1LDL = 0
	let t3Contained1LDL = 0
	let t3Closed1LDL = 0
	let t3Missed1LDL = 0

	let t3Open0LDL = 0
	let t3Contained0LDL = 0
	let t3Closed0LDL = 0
	let t3Missed0LDL = 0

	//cp
	let t3Open8CP = 0
	let t3Contained8CP = 0
	let t3Closed8CP = 0
	let t3Missed8CP = 0

	let t3Open7CP = 0
	let t3Contained7CP = 0
	let t3Closed7CP = 0
	let t3Missed7CP = 0

	let t3Open6CP = 0
	let t3Contained6CP = 0
	let t3Closed6CP = 0
	let t3Missed6CP = 0

	let t3Open5CP = 0
	let t3Contained5CP = 0
	let t3Closed5CP = 0
	let t3Missed5CP = 0

	let t3Open4CP = 0
	let t3Contained4CP = 0
	let t3Closed4CP = 0
	let t3Missed4CP = 0

	let t3Open3CP = 0
	let t3Contained3CP = 0
	let t3Closed3CP = 0
	let t3Missed3CP = 0

	let t3Open2CP = 0
	let t3Contained2CP = 0
	let t3Closed2CP = 0
	let t3Missed2CP = 0

	let t3Open1CP = 0
	let t3Contained1CP = 0
	let t3Closed1CP = 0
	let t3Missed1CP = 0

	let t3Open0CP = 0
	let t3Contained0CP = 0
	let t3Closed0CP = 0
	let t3Missed0CP = 0

	//em
	let t3Open8EM = 0
	let t3Contained8EM = 0
	let t3Closed8EM = 0
	let t3Missed8EM = 0

	let t3Open7EM = 0
	let t3Contained7EM = 0
	let t3Closed7EM = 0
	let t3Missed7EM = 0

	let t3Open6EM = 0
	let t3Contained6EM = 0
	let t3Closed6EM = 0
	let t3Missed6EM = 0

	let t3Open5EM = 0
	let t3Contained5EM = 0
	let t3Closed5EM = 0
	let t3Missed5EM = 0

	let t3Open4EM = 0
	let t3Contained4EM = 0
	let t3Closed4EM = 0
	let t3Missed4EM = 0

	let t3Open3EM = 0
	let t3Contained3EM = 0
	let t3Closed3EM = 0
	let t3Missed3EM = 0

	let t3Open2EM = 0
	let t3Contained2EM = 0
	let t3Closed2EM = 0
	let t3Missed2EM = 0

	let t3Open1EM = 0
	let t3Contained1EM = 0
	let t3Closed1EM = 0
	let t3Missed1EM = 0

	let t3Open0EM = 0
	let t3Contained0EM = 0
	let t3Closed0EM = 0
	let t3Missed0EM = 0

	//lp
	let t3Open8LP = 0
	let t3Contained8LP = 0
	let t3Closed8LP = 0
	let t3Missed8LP = 0

	let t3Open7LP = 0
	let t3Contained7LP = 0
	let t3Closed7LP = 0
	let t3Missed7LP = 0

	let t3Open6LP = 0
	let t3Contained6LP = 0
	let t3Closed6LP = 0
	let t3Missed6LP = 0

	let t3Open5LP = 0
	let t3Contained5LP = 0
	let t3Closed5LP = 0
	let t3Missed5LP = 0

	let t3Open4LP = 0
	let t3Contained4LP = 0
	let t3Closed4LP = 0
	let t3Missed4LP = 0

	let t3Open3LP = 0
	let t3Contained3LP = 0
	let t3Closed3LP = 0
	let t3Missed3LP = 0

	let t3Open2LP = 0
	let t3Contained2LP = 0
	let t3Closed2LP = 0
	let t3Missed2LP = 0

	let t3Open1LP = 0
	let t3Contained1LP = 0
	let t3Closed1LP = 0
	let t3Missed1LP = 0

	let t3Open0LP = 0
	let t3Contained0LP = 0
	let t3Closed0LP = 0
	let t3Missed0LP = 0

	// hp
	let t3Open8HP = 0
	let t3Contained8HP = 0
	let t3Closed8HP = 0
	let t3Missed8HP = 0

	let t3Open7HP = 0
	let t3Contained7HP = 0
	let t3Closed7HP = 0
	let t3Missed7HP = 0

	let t3Open6HP = 0
	let t3Contained6HP = 0
	let t3Closed6HP = 0
	let t3Missed6HP = 0

	let t3Open5HP = 0
	let t3Contained5HP = 0
	let t3Closed5HP = 0
	let t3Missed5HP = 0

	let t3Open4HP = 0
	let t3Contained4HP = 0
	let t3Closed4HP = 0
	let t3Missed4HP = 0

	let t3Open3HP = 0
	let t3Contained3HP = 0
	let t3Closed3HP = 0
	let t3Missed3HP = 0

	let t3Open2HP = 0
	let t3Contained2HP = 0
	let t3Closed2HP = 0
	let t3Missed2HP = 0

	let t3Open1HP = 0
	let t3Contained1HP = 0
	let t3Closed1HP = 0
	let t3Missed1HP = 0

	let t3Open0HP = 0
	let t3Contained0HP = 0
	let t3Closed0HP = 0
	let t3Missed0HP = 0

	// const bhlNoAction = await Claim.aggregate([
	// 	{
	// 		$match : {
	// 			division     : { $in: [ 'BHL', 'SD' ] },
	// 			// division     : 'EM',
	// 			importedDate : {
	// 				$gt : new Date('2021, 09, 01'),
	// 				$lt : new Date('2021, 10, 01'),
	// 			},
	// 			tPeriod      : 'DOA',
	// 			// $or          : [ { fourC: 'Yes' }, { linked: true } ],
	// 			// $and         : [ { fourC: 'No' }, { linked: { $ne: true } } ],
	// 			failedPart   : { $nin: fourCPartNumbers },
	// 			outcome      : {
	// 				$nin : [ 'Reject', 'Z Code' ],
	// 			},
	// 			status       : 'Open',

	// 			// vettedAt : { $gte: earliest },
	// 		},
	// 	},
	// 	{
	// 		$group : {
	// 			_id : { _id: '$claimNumber', failedPart: '$failedPart' },
	// 		},
	// 	},
	// ])
	// console.log(bhlNoAction)

	const t3FourCs = await Claim.aggregate([
		{
			$match: {
				division: { $in: group },
				importedDate: { $gte: eightMonthsAgoFirstDB },
				tPeriod: 'DOA',
				active: true,
				failedPart: { $nin: fourCPartNumbers },
				outcome: {
					$nin: ['Reject', 'Z Code'],
				},
				// vettedAt : { $gte: earliest },
			},
		},
		{
			$project: {
				_id: {
					year: { $year: '$importedDate' },
					month: { $month: '$importedDate' },
				},
				status: 1,
			},
		},
		{
			$group: {
				_id: '$_id',
				status: { $push: '$status' },
				count: {
					$sum: 1,
				},
			},
		},

		{ $sort: { _id: 1 } },
	])
	const t3FourCsSplit = await Claim.aggregate([
		{
			$match: {
				division: { $in: group },
				importedDate: { $gte: eightMonthsAgoFirstDB },
				tPeriod: 'DOA',
				active: true,
				failedPart: { $nin: fourCPartNumbers },
				outcome: {
					$nin: ['Reject', 'Z Code'],
				},
				// vettedAt : { $gte: earliest },
			},
		},
		{
			$project: {
				_id: {
					year: { $year: '$importedDate' },
					month: { $month: '$importedDate' },
					division: '$division',
				},
				status: 1,
			},
		},
		{
			$group: {
				_id: '$_id',
				status: { $push: '$status' },
				count: {
					$sum: 1,
				},
			},
		},

		{ $sort: { _id: 1 } },
	])

	const MissedT3FourCs = await Claim.aggregate([
		{
			$match: {
				division: { $in: group },
				importedDate: { $gte: eightMonthsAgoFirstDB },
				tPeriod: 'DOA',
				active: true,
				failedPart: { $in: fourCPartNumbers },
				outcome: {
					$nin: ['Reject', 'Z Code'],
				},
				// vettedAt : { $gte: earliest },
			},
		},
		{
			$project: {
				_id: {
					year: { $year: '$importedDate' },
					month: { $month: '$importedDate' },
				},
				status: 1,
			},
		},
		{
			$group: {
				_id: '$_id',
				status: { $push: '$status' },
				count: {
					$sum: 1,
				},
			},
		},

		{ $sort: { _id: 1 } },
	])
	const MissedT3FourCsSplit = await Claim.aggregate([
		{
			$match: {
				division: { $in: group },
				importedDate: { $gte: eightMonthsAgoFirstDB },
				tPeriod: 'DOA',
				active: true,
				failedPart: { $in: fourCPartNumbers },
				outcome: {
					$nin: ['Reject', 'Z Code'],
				},
				// vettedAt : { $gte: earliest },
			},
		},
		{
			$project: {
				_id: {
					year: { $year: '$importedDate' },
					month: { $month: '$importedDate' },
					division: '$division',
				},
				status: 1,
			},
		},
		{
			$group: {
				_id: '$_id',
				status: { $push: '$status' },
				count: {
					$sum: 1,
				},
			},
		},

		{ $sort: { _id: 1 } },
	])

	for (let d of t3FourCsSplit) {
		if (d._id.month === +eightMonthsAgoNumber && d._id.year === +eightMonthsAgoNumberY) {
			if (d._id.division === 'BHL' || d._id.division === 'SD') {
				t3Open8BHL += countOccurrences(d.status, 'Open')
				t3Contained8BHL += countOccurrences(d.status, 'Contained')
				t3Closed8BHL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LDL') {
				t3Open8LDL = countOccurrences(d.status, 'Open')
				t3Contained8LDL = countOccurrences(d.status, 'Contained')
				t3Closed8LDL = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'CP') {
				t3Open8CP = countOccurrences(d.status, 'Open')
				t3Contained8CP = countOccurrences(d.status, 'Contained')
				t3Closed8CP = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'EM') {
				t3Open8EM = countOccurrences(d.status, 'Open')
				t3Contained8EM = countOccurrences(d.status, 'Contained')
				t3Closed8EM = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LP') {
				t3Open8LP = countOccurrences(d.status, 'Open')
				t3Contained8LP = countOccurrences(d.status, 'Contained')
				t3Closed8LP = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'HP') {
				t3Open8HP = countOccurrences(d.status, 'Open')
				t3Contained8HP = countOccurrences(d.status, 'Contained')
				t3Closed8HP = countOccurrences(d.status, 'Closed')
			}
		}
		if (d._id.month === +sevenMonthsAgoNumber && d._id.year === +sevenMonthsAgoNumberY) {
			if (d._id.division === 'BHL' || d._id.division === 'SD') {
				t3Open7BHL += countOccurrences(d.status, 'Open')
				t3Contained7BHL += countOccurrences(d.status, 'Contained')
				t3Closed7BHL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LDL') {
				t3Open7LDL = countOccurrences(d.status, 'Open')
				t3Contained7LDL = countOccurrences(d.status, 'Contained')
				t3Closed7LDL = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'CP') {
				t3Open7CP = countOccurrences(d.status, 'Open')
				t3Contained7CP = countOccurrences(d.status, 'Contained')
				t3Closed7CP = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'EM') {
				t3Open7EM = countOccurrences(d.status, 'Open')
				t3Contained7EM = countOccurrences(d.status, 'Contained')
				t3Closed7EM = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LP') {
				t3Open7LP = countOccurrences(d.status, 'Open')
				t3Contained7LP = countOccurrences(d.status, 'Contained')
				t3Closed7LP = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'HP') {
				t3Open7HP = countOccurrences(d.status, 'Open')
				t3Contained7HP = countOccurrences(d.status, 'Contained')
				t3Closed7HP = countOccurrences(d.status, 'Closed')
			}
		}
		if (d._id.month === +sixMonthsAgoNumber && d._id.year === +sixMonthsAgoNumberY) {
			if (d._id.division === 'BHL' || d._id.division === 'SD') {
				t3Open6BHL += countOccurrences(d.status, 'Open')
				t3Contained6BHL += countOccurrences(d.status, 'Contained')
				t3Closed6BHL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LDL') {
				t3Open6LDL = countOccurrences(d.status, 'Open')
				t3Contained6LDL = countOccurrences(d.status, 'Contained')
				t3Closed6LDL = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'CP') {
				t3Open6CP = countOccurrences(d.status, 'Open')
				t3Contained6CP = countOccurrences(d.status, 'Contained')
				t3Closed6CP = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'EM') {
				t3Open6EM = countOccurrences(d.status, 'Open')
				t3Contained6EM = countOccurrences(d.status, 'Contained')
				t3Closed6EM = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LP') {
				t3Open6LP = countOccurrences(d.status, 'Open')
				t3Contained6LP = countOccurrences(d.status, 'Contained')
				t3Closed6LP = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'HP') {
				t3Open6HP = countOccurrences(d.status, 'Open')
				t3Contained6HP = countOccurrences(d.status, 'Contained')
				t3Closed6HP = countOccurrences(d.status, 'Closed')
			}
		}
		if (d._id.month === +fiveMonthsAgoNumber && d._id.year === +fiveMonthsAgoNumberY) {
			if (d._id.division === 'BHL' || d._id.division === 'SD') {
				t3Open5BHL += countOccurrences(d.status, 'Open')
				t3Contained5BHL += countOccurrences(d.status, 'Contained')
				t3Closed5BHL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LDL') {
				t3Open5LDL = countOccurrences(d.status, 'Open')
				t3Contained5LDL = countOccurrences(d.status, 'Contained')
				t3Closed5LDL = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'CP') {
				t3Open5CP = countOccurrences(d.status, 'Open')
				t3Contained5CP = countOccurrences(d.status, 'Contained')
				t3Closed5CP = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'EM') {
				t3Open5EM = countOccurrences(d.status, 'Open')
				t3Contained5EM = countOccurrences(d.status, 'Contained')
				t3Closed5EM = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LP') {
				t3Open5LP = countOccurrences(d.status, 'Open')
				t3Contained5LP = countOccurrences(d.status, 'Contained')
				t3Closed5LP = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'HP') {
				t3Open5HP = countOccurrences(d.status, 'Open')
				t3Contained5HP = countOccurrences(d.status, 'Contained')
				t3Closed5HP = countOccurrences(d.status, 'Closed')
			}
		}
		if (d._id.month === +fourMonthsAgoNumber && d._id.year === +fourMonthsAgoNumberY) {
			if (d._id.division === 'BHL' || d._id.division === 'SD') {
				t3Open4BHL += countOccurrences(d.status, 'Open')
				t3Contained4BHL += countOccurrences(d.status, 'Contained')
				t3Closed4BHL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LDL') {
				t3Open4LDL = countOccurrences(d.status, 'Open')
				t3Contained4LDL = countOccurrences(d.status, 'Contained')
				t3Closed4LDL = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'CP') {
				t3Open4CP = countOccurrences(d.status, 'Open')
				t3Contained4CP = countOccurrences(d.status, 'Contained')
				t3Closed4CP = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'EM') {
				t3Open4EM = countOccurrences(d.status, 'Open')
				t3Contained4EM = countOccurrences(d.status, 'Contained')
				t3Closed4EM = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LP') {
				t3Open4LP = countOccurrences(d.status, 'Open')
				t3Contained4LP = countOccurrences(d.status, 'Contained')
				t3Closed4LP = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'HP') {
				t3Open4HP = countOccurrences(d.status, 'Open')
				t3Contained4HP = countOccurrences(d.status, 'Contained')
				t3Closed4HP = countOccurrences(d.status, 'Closed')
			}
		}
		if (d._id.month === +threeMonthsAgoNumber && d._id.year === +threeMonthsAgoNumberY) {
			if (d._id.division === 'BHL' || d._id.division === 'SD') {
				t3Open3BHL += countOccurrences(d.status, 'Open')
				t3Contained3BHL += countOccurrences(d.status, 'Contained')
				t3Closed3BHL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LDL') {
				t3Open3LDL = countOccurrences(d.status, 'Open')
				t3Contained3LDL = countOccurrences(d.status, 'Contained')
				t3Closed3LDL = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'CP') {
				t3Open3CP = countOccurrences(d.status, 'Open')
				t3Contained3CP = countOccurrences(d.status, 'Contained')
				t3Closed3CP = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'EM') {
				t3Open3EM = countOccurrences(d.status, 'Open')
				t3Contained3EM = countOccurrences(d.status, 'Contained')
				t3Closed3EM = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LP') {
				t3Open3LP = countOccurrences(d.status, 'Open')
				t3Contained3LP = countOccurrences(d.status, 'Contained')
				t3Closed3LP = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'HP') {
				t3Open3HP = countOccurrences(d.status, 'Open')
				t3Contained3HP = countOccurrences(d.status, 'Contained')
				t3Closed3HP = countOccurrences(d.status, 'Closed')
			}
		}
		if (d._id.month === +twoMonthsAgoNumber && d._id.year === +twoMonthsAgoNumberY) {
			if (d._id.division === 'BHL' || d._id.division === 'SD') {
				t3Open2BHL += countOccurrences(d.status, 'Open')
				t3Contained2BHL += countOccurrences(d.status, 'Contained')
				t3Closed2BHL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LDL') {
				t3Open2LDL = countOccurrences(d.status, 'Open')
				t3Contained2LDL = countOccurrences(d.status, 'Contained')
				t3Closed2LDL = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'CP') {
				t3Open2CP = countOccurrences(d.status, 'Open')
				t3Contained2CP = countOccurrences(d.status, 'Contained')
				t3Closed2CP = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'EM') {
				t3Open2EM = countOccurrences(d.status, 'Open')
				t3Contained2EM = countOccurrences(d.status, 'Contained')
				t3Closed2EM = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LP') {
				t3Open2LP = countOccurrences(d.status, 'Open')
				t3Contained2LP = countOccurrences(d.status, 'Contained')
				t3Closed2LP = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'HP') {
				t3Open2HP = countOccurrences(d.status, 'Open')
				t3Contained2HP = countOccurrences(d.status, 'Contained')
				t3Closed2HP = countOccurrences(d.status, 'Closed')
			}
		}
		if (d._id.month === +oneMonthAgoNumber && d._id.year === +oneMonthAgoNumberY) {
			if (d._id.division === 'BHL' || d._id.division === 'SD') {
				t3Open1BHL += countOccurrences(d.status, 'Open')
				t3Contained1BHL += countOccurrences(d.status, 'Contained')
				t3Closed1BHL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LDL') {
				t3Open1LDL = countOccurrences(d.status, 'Open')
				t3Contained1LDL = countOccurrences(d.status, 'Contained')
				t3Closed1LDL = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'CP') {
				t3Open1CP = countOccurrences(d.status, 'Open')
				t3Contained1CP = countOccurrences(d.status, 'Contained')
				t3Closed1CP = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'EM') {
				t3Open1EM = countOccurrences(d.status, 'Open')
				t3Contained1EM = countOccurrences(d.status, 'Contained')
				t3Closed1EM = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LP') {
				t3Open1LP = countOccurrences(d.status, 'Open')
				t3Contained1LP = countOccurrences(d.status, 'Contained')
				t3Closed1LP = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'HP') {
				t3Open1HP = countOccurrences(d.status, 'Open')
				t3Contained1HP = countOccurrences(d.status, 'Contained')
				t3Closed1HP = countOccurrences(d.status, 'Closed')
			}
		}
		if (d._id.month === +thisMonthNumber && d._id.year === +thisMonthNumberY) {
			if (d._id.division === 'BHL' || d._id.division === 'SD') {
				t3Open0BHL += countOccurrences(d.status, 'Open')
				t3Contained0BHL += countOccurrences(d.status, 'Contained')
				t3Closed0BHL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LDL') {
				t3Open0LDL = countOccurrences(d.status, 'Open')
				t3Contained0LDL = countOccurrences(d.status, 'Contained')
				t3Closed0LDL = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'CP') {
				t3Open0CP = countOccurrences(d.status, 'Open')
				t3Contained0CP = countOccurrences(d.status, 'Contained')
				t3Closed0CP = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'EM') {
				t3Open0EM = countOccurrences(d.status, 'Open')
				t3Contained0EM = countOccurrences(d.status, 'Contained')
				t3Closed0EM = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LP') {
				t3Open0LP = countOccurrences(d.status, 'Open')
				t3Contained0LP = countOccurrences(d.status, 'Contained')
				t3Closed0LP = countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'HP') {
				t3Open0HP = countOccurrences(d.status, 'Open')
				t3Contained0HP = countOccurrences(d.status, 'Contained')
				t3Closed0HP = countOccurrences(d.status, 'Closed')
			}
		}
	}

	for (let d of MissedT3FourCsSplit) {
		if (d._id.month === +eightMonthsAgoNumber && d._id.year === +eightMonthsAgoNumberY) {
			if (d._id.division === 'BHL' || d._id.division === 'SD') {
				t3Missed8BHL += countOccurrences(d.status, 'Open')
				t3Contained8BHL += countOccurrences(d.status, 'Contained')
				t3Closed8BHL += countOccurrences(d.status, 'Closed')
				// t3Missed8BHL = d.status.length
			}
			if (d._id.division === 'LDL') {
				t3Missed8LDL = countOccurrences(d.status, 'Open')
				t3Contained8LDL += countOccurrences(d.status, 'Contained')
				t3Closed8LDL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'CP') {
				t3Missed8CP = countOccurrences(d.status, 'Open')
				t3Contained8CP += countOccurrences(d.status, 'Contained')
				t3Closed8CP += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'EM') {
				t3Missed8EM = countOccurrences(d.status, 'Open')
				t3Contained8EM += countOccurrences(d.status, 'Contained')
				t3Closed8EM += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LP') {
				t3Missed8LP = countOccurrences(d.status, 'Open')
				t3Contained8LP += countOccurrences(d.status, 'Contained')
				t3Closed8LP += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'HP') {
				t3Missed8HP = countOccurrences(d.status, 'Open')
				t3Contained8HP += countOccurrences(d.status, 'Contained')
				t3Closed8HP += countOccurrences(d.status, 'Closed')
			}
		}
		if (d._id.month === +sevenMonthsAgoNumber && d._id.year === +sevenMonthsAgoNumberY) {
			if (d._id.division === 'BHL' || d._id.division === 'SD') {
				t3Missed7BHL = +countOccurrences(d.status, 'Open')
				t3Contained7BHL += countOccurrences(d.status, 'Contained')
				t3Closed7BHL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LDL') {
				t3Missed7LDL = countOccurrences(d.status, 'Open')
				t3Contained7LDL += countOccurrences(d.status, 'Contained')
				t3Closed7LDL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'CP') {
				t3Missed7CP = countOccurrences(d.status, 'Open')
				t3Contained7CP += countOccurrences(d.status, 'Contained')
				t3Closed7CP += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'EM') {
				t3Missed7EM = countOccurrences(d.status, 'Open')
				t3Contained7EM += countOccurrences(d.status, 'Contained')
				t3Closed7EM += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LP') {
				t3Missed7LP = countOccurrences(d.status, 'Open')
				t3Contained7LP += countOccurrences(d.status, 'Contained')
				t3Closed7LP += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'HP') {
				t3Missed7HP = countOccurrences(d.status, 'Open')
				t3Contained7HP += countOccurrences(d.status, 'Contained')
				t3Closed7HP += countOccurrences(d.status, 'Closed')
			}
		}
		if (d._id.month === +sixMonthsAgoNumber && d._id.year === +sixMonthsAgoNumberY) {
			if (d._id.division === 'BHL' || d._id.division === 'SD') {
				t3Missed6BHL += countOccurrences(d.status, 'Open')
				t3Contained6BHL += countOccurrences(d.status, 'Contained')
				t3Closed6BHL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LDL') {
				t3Missed6LDL = countOccurrences(d.status, 'Open')
				t3Contained6LDL += countOccurrences(d.status, 'Contained')
				t3Closed6LDL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'CP') {
				t3Missed6CP = countOccurrences(d.status, 'Open')
				t3Contained6CP += countOccurrences(d.status, 'Contained')
				t3Closed6CP += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'EM') {
				t3Missed6EM = countOccurrences(d.status, 'Open')
				t3Contained6EM += countOccurrences(d.status, 'Contained')
				t3Closed6EM += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LP') {
				t3Missed6LP = countOccurrences(d.status, 'Open')
				t3Contained6LP += countOccurrences(d.status, 'Contained')
				t3Closed6LP += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'HP') {
				t3Missed6HP = countOccurrences(d.status, 'Open')
				t3Contained6HP += countOccurrences(d.status, 'Contained')
				t3Closed6HP += countOccurrences(d.status, 'Closed')
			}
		}
		if (d._id.month === +fiveMonthsAgoNumber && d._id.year === +fiveMonthsAgoNumberY) {
			if (d._id.division === 'BHL' || d._id.division === 'SD') {
				t3Missed5BHL += countOccurrences(d.status, 'Open')
				t3Contained5BHL += countOccurrences(d.status, 'Contained')
				t3Closed5BHL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LDL') {
				t3Missed5LDL = countOccurrences(d.status, 'Open')
				t3Contained5LDL += countOccurrences(d.status, 'Contained')
				t3Closed5LDL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'CP') {
				t3Missed5CP = countOccurrences(d.status, 'Open')
				t3Contained5CP += countOccurrences(d.status, 'Contained')
				t3Closed5CP += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'EM') {
				t3Missed5EM = countOccurrences(d.status, 'Open')
				t3Contained5EM += countOccurrences(d.status, 'Contained')
				t3Closed5EM += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LP') {
				t3Missed5LP = countOccurrences(d.status, 'Open')
				t3Contained5LP += countOccurrences(d.status, 'Contained')
				t3Closed5LP += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'HP') {
				t3Missed5HP = countOccurrences(d.status, 'Open')
				t3Contained5HP += countOccurrences(d.status, 'Contained')
				t3Closed5HP += countOccurrences(d.status, 'Closed')
			}
		}
		if (d._id.month === +fourMonthsAgoNumber && d._id.year === +fourMonthsAgoNumberY) {
			if (d._id.division === 'BHL' || d._id.division === 'SD') {
				t3Missed4BHL += countOccurrences(d.status, 'Open')
				t3Contained4BHL += countOccurrences(d.status, 'Contained')
				t3Closed4BHL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LDL') {
				t3Missed4LDL = countOccurrences(d.status, 'Open')
				t3Contained4LDL += countOccurrences(d.status, 'Contained')
				t3Closed4LDL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'CP') {
				t3Missed4CP = countOccurrences(d.status, 'Open')
				t3Contained4CP += countOccurrences(d.status, 'Contained')
				t3Closed4CP += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'EM') {
				t3Missed4EM = countOccurrences(d.status, 'Open')
				t3Contained4EM += countOccurrences(d.status, 'Contained')
				t3Closed4EM += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LP') {
				t3Missed4LP = countOccurrences(d.status, 'Open')
				t3Contained4LP += countOccurrences(d.status, 'Contained')
				t3Closed4LP += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'HP') {
				t3Missed4HP = countOccurrences(d.status, 'Open')
				t3Contained4HP += countOccurrences(d.status, 'Contained')
				t3Closed4HP += countOccurrences(d.status, 'Closed')
			}
		}
		if (d._id.month === +threeMonthsAgoNumber && d._id.year === +threeMonthsAgoNumberY) {
			if (d._id.division === 'BHL' || d._id.division === 'SD') {
				t3Missed3BHL += countOccurrences(d.status, 'Open')
				t3Contained3BHL += countOccurrences(d.status, 'Contained')
				t3Closed3BHL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LDL') {
				t3Missed3LDL = countOccurrences(d.status, 'Open')
				t3Contained3LDL += countOccurrences(d.status, 'Contained')
				t3Closed3LDL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'CP') {
				t3Missed3CP = countOccurrences(d.status, 'Open')
				t3Contained3CP += countOccurrences(d.status, 'Contained')
				t3Closed3CP += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'EM') {
				t3Missed3EM = countOccurrences(d.status, 'Open')
				t3Contained3EM += countOccurrences(d.status, 'Contained')
				t3Closed3EM += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LP') {
				t3Missed3LP = countOccurrences(d.status, 'Open')
				t3Contained3LP += countOccurrences(d.status, 'Contained')
				t3Closed3LP += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'HP') {
				t3Missed3HP = countOccurrences(d.status, 'Open')
				t3Contained3HP += countOccurrences(d.status, 'Contained')
				t3Closed3HP += countOccurrences(d.status, 'Closed')
			}
		}
		if (d._id.month === +twoMonthsAgoNumber && d._id.year === +twoMonthsAgoNumberY) {
			if (d._id.division === 'BHL' || d._id.division === 'SD') {
				t3Missed2BHL += countOccurrences(d.status, 'Open')
				t3Contained2BHL += countOccurrences(d.status, 'Contained')
				t3Closed2BHL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LDL') {
				t3Missed2LDL = countOccurrences(d.status, 'Open')
				t3Contained2LDL += countOccurrences(d.status, 'Contained')
				t3Closed2LDL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'CP') {
				t3Missed2CP = countOccurrences(d.status, 'Open')
				t3Contained2CP += countOccurrences(d.status, 'Contained')
				t3Closed2CP += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'EM') {
				t3Missed2EM = countOccurrences(d.status, 'Open')
				t3Contained2EM += countOccurrences(d.status, 'Contained')
				t3Closed2EM += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LP') {
				t3Missed2LP = countOccurrences(d.status, 'Open')
				t3Contained2LP += countOccurrences(d.status, 'Contained')
				t3Closed2LP += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'HP') {
				t3Missed2HP = countOccurrences(d.status, 'Open')
				t3Contained2HP += countOccurrences(d.status, 'Contained')
				t3Closed2HP += countOccurrences(d.status, 'Closed')
			}
		}
		if (d._id.month === +oneMonthAgoNumber && d._id.year === +oneMonthAgoNumberY) {
			if (d._id.division === 'BHL' || d._id.division === 'SD') {
				t3Missed1BHL += countOccurrences(d.status, 'Open')
				t3Contained1BHL += countOccurrences(d.status, 'Contained')
				t3Closed1BHL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LDL') {
				t3Missed1LDL = countOccurrences(d.status, 'Open')
				t3Contained1LDL += countOccurrences(d.status, 'Contained')
				t3Closed1LDL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'CP') {
				t3Missed1CP = countOccurrences(d.status, 'Open')
				t3Contained1CP += countOccurrences(d.status, 'Contained')
				t3Closed1CP += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'EM') {
				t3Missed1EM = countOccurrences(d.status, 'Open')
				t3Contained1EM += countOccurrences(d.status, 'Contained')
				t3Closed1EM += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LP') {
				t3Missed1LP = countOccurrences(d.status, 'Open')
				t3Contained1LP += countOccurrences(d.status, 'Contained')
				t3Closed1LP += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'HP') {
				t3Missed1HP = countOccurrences(d.status, 'Open')
				t3Contained1HP += countOccurrences(d.status, 'Contained')
				t3Closed1HP += countOccurrences(d.status, 'Closed')
			}
		}
		if (d._id.month === +thisMonthNumber && d._id.year === +thisMonthNumberY) {
			if (d._id.division === 'BHL' || d._id.division === 'SD') {
				t3Missed0BHL += countOccurrences(d.status, 'Open')
				t3Contained0BHL += countOccurrences(d.status, 'Contained')
				t3Closed0BHL += countOccurrences(d.status, 'Closed')
			}
			if (d._id.division === 'LDL') {
				t3Missed0LDL = countOccurrences(d.status, 'Open')
				t3Contained0LDL += countOccurrences(d.status, 'Contained')
				t3Closed0LDL += countOccurrences(d.status, 'Closed')
			}

			if (d._id.division === 'CP') {
				t3Missed0CP = countOccurrences(d.status, 'Open')
				t3Contained0CP += countOccurrences(d.status, 'Contained')
				t3Closed0CP += countOccurrences(d.status, 'Closed')
			}

			if (d._id.division === 'EM') {
				t3Missed0EM = countOccurrences(d.status, 'Open')
				t3Contained0EM += countOccurrences(d.status, 'Contained')
				t3Closed0EM += countOccurrences(d.status, 'Closed')
			}

			if (d._id.division === 'LP') {
				t3Missed0LP = countOccurrences(d.status, 'Open')
				t3Contained0LP += countOccurrences(d.status, 'Contained')
				t3Closed0LP += countOccurrences(d.status, 'Closed')
			}

			if (d._id.division === 'HP') {
				t3Missed0HP = countOccurrences(d.status, 'Open')
				t3Contained0HP += countOccurrences(d.status, 'Contained')
				t3Closed0HP += countOccurrences(d.status, 'Closed')
			}
		}
	}

	//group 8 months ago
	const t3Open8 = t3Open8BHL + t3Open8LDL + t3Open8CP + t3Open8EM + t3Open8LP + t3Open8HP
	const t3Contained8 = t3Contained8BHL + t3Contained8LDL + t3Contained8CP + t3Contained8EM + t3Contained8LP + t3Contained8HP
	const t3Closed8 = t3Closed8BHL + t3Closed8LDL + t3Closed8CP + t3Closed8EM + t3Closed8LP + t3Closed8HP
	const t3Missed8 = t3Missed8BHL + t3Missed8LDL + t3Missed8CP + t3Missed8EM + t3Missed8LP + t3Missed8HP

	//group 7 months ago
	const t3Open7 = t3Open7BHL + t3Open7LDL + t3Open7CP + t3Open7EM + t3Open7LP + t3Open7HP
	const t3Contained7 = t3Contained7BHL + t3Contained7LDL + t3Contained7CP + t3Contained7EM + t3Contained7LP + t3Contained7HP
	const t3Closed7 = t3Closed7BHL + t3Closed7LDL + t3Closed7CP + t3Closed7EM + t3Closed7LP + t3Closed7HP
	const t3Missed7 = t3Missed7BHL + t3Missed7LDL + t3Missed7CP + t3Missed7EM + t3Missed7LP + t3Missed7HP

	//group 6 months ago
	const t3Open6 = t3Open6BHL + t3Open6LDL + t3Open6CP + t3Open6EM + t3Open6LP + t3Open6HP
	const t3Contained6 = t3Contained6BHL + t3Contained6LDL + t3Contained6CP + t3Contained6EM + t3Contained6LP + t3Contained6HP
	const t3Closed6 = t3Closed6BHL + t3Closed6LDL + t3Closed6CP + t3Closed6EM + t3Closed6LP + t3Closed6HP
	const t3Missed6 = t3Missed6BHL + t3Missed6LDL + t3Missed6CP + t3Missed6EM + t3Missed6LP + t3Missed6HP

	//group 5 months ago
	const t3Open5 = t3Open5BHL + t3Open5LDL + t3Open5CP + t3Open5EM + t3Open5LP + t3Open5HP
	const t3Contained5 = t3Contained5BHL + t3Contained5LDL + t3Contained5CP + t3Contained5EM + t3Contained5LP + t3Contained5HP
	const t3Closed5 = t3Closed5BHL + t3Closed5LDL + t3Closed5CP + t3Closed5EM + t3Closed5LP + t3Closed5HP
	const t3Missed5 = t3Missed5BHL + t3Missed5LDL + t3Missed5CP + t3Missed5EM + t3Missed5LP + t3Missed5HP

	//group 4 months ago
	const t3Open4 = t3Open4BHL + t3Open4LDL + t3Open4CP + t3Open4EM + t3Open4LP + t3Open4HP
	const t3Contained4 = t3Contained4BHL + t3Contained4LDL + t3Contained4CP + t3Contained4EM + t3Contained4LP + t3Contained4HP
	const t3Closed4 = t3Closed4BHL + t3Closed4LDL + t3Closed4CP + t3Closed4EM + t3Closed4LP + t3Closed4HP
	const t3Missed4 = t3Missed4BHL + t3Missed4LDL + t3Missed4CP + t3Missed4EM + t3Missed4LP + t3Missed4HP

	//group 3 months ago
	const t3Open3 = t3Open3BHL + t3Open3LDL + t3Open3CP + t3Open3EM + t3Open3LP + t3Open3HP
	const t3Contained3 = t3Contained3BHL + t3Contained3LDL + t3Contained3CP + t3Contained3EM + t3Contained3LP + t3Contained3HP
	const t3Closed3 = t3Closed3BHL + t3Closed3LDL + t3Closed3CP + t3Closed3EM + t3Closed3LP + t3Closed3HP
	const t3Missed3 = t3Missed3BHL + t3Missed3LDL + t3Missed3CP + t3Missed3EM + t3Missed3LP + t3Missed3HP

	//group 2 months ago
	const t3Open2 = t3Open2BHL + t3Open2LDL + t3Open2CP + t3Open2EM + t3Open2LP + t3Open2HP
	const t3Contained2 = t3Contained2BHL + t3Contained2LDL + t3Contained2CP + t3Contained2EM + t3Contained2LP + t3Contained2HP
	const t3Closed2 = t3Closed2BHL + t3Closed2LDL + t3Closed2CP + t3Closed2EM + t3Closed2LP + t3Closed2HP
	const t3Missed2 = t3Missed2BHL + t3Missed2LDL + t3Missed2CP + t3Missed2EM + t3Missed2LP + t3Missed2HP

	//group 1 month ago
	const t3Open1 = t3Open1BHL + t3Open1LDL + t3Open1CP + t3Open1EM + t3Open1LP + t3Open1HP
	const t3Contained1 = t3Contained1BHL + t3Contained1LDL + t3Contained1CP + t3Contained1EM + t3Contained1LP + t3Contained1HP
	const t3Closed1 = t3Closed1BHL + t3Closed1LDL + t3Closed1CP + t3Closed1EM + t3Closed1LP + t3Closed1HP
	const t3Missed1 = t3Missed1BHL + t3Missed1LDL + t3Missed1CP + t3Missed1EM + t3Missed1LP + t3Missed1HP

	//group this month
	const t3Open0 = t3Open0BHL + t3Open0LDL + t3Open0CP + t3Open0EM + t3Open0LP + t3Open0HP
	const t3Contained0 = t3Contained0BHL + t3Contained0LDL + t3Contained0CP + t3Contained0EM + t3Contained0LP + t3Contained0HP
	const t3Closed0 = t3Closed0BHL + t3Closed0LDL + t3Closed0CP + t3Closed0EM + t3Closed0LP + t3Closed0HP
	const t3Missed0 = t3Missed0BHL + t3Missed0LDL + t3Missed0CP + t3Missed0EM + t3Missed0LP + doaMissed0HP

	res.render('group/fourcStatus', {
		labels,
		//group t3
		doaOpen8,
		doaContained8,
		doaClosed8,
		doaMissed8,

		doaOpen7,
		doaContained7,
		doaClosed7,
		doaMissed7,

		doaOpen6,
		doaContained6,
		doaClosed6,
		doaMissed6,

		doaOpen5,
		doaContained5,
		doaClosed5,
		doaMissed5,

		doaOpen4,
		doaContained4,
		doaClosed4,
		doaMissed4,

		doaOpen3,
		doaContained3,
		doaClosed3,
		doaMissed3,

		doaOpen2,
		doaContained2,
		doaClosed2,
		doaMissed2,

		doaOpen1,
		doaContained1,
		doaClosed1,
		doaMissed1,

		doaOpen0,
		doaContained0,
		doaClosed0,
		doaMissed0,

		//bhl doa
		doaOpen8BHL,
		doaContained8BHL,
		doaClosed8BHL,
		doaMissed8BHL,

		doaOpen7BHL,
		doaContained7BHL,
		doaClosed7BHL,
		doaMissed7BHL,

		doaOpen6BHL,
		doaContained6BHL,
		doaClosed6BHL,
		doaMissed6BHL,

		doaOpen5BHL,
		doaContained5BHL,
		doaClosed5BHL,
		doaMissed5BHL,

		doaOpen4BHL,
		doaContained4BHL,
		doaClosed4BHL,
		doaMissed4BHL,

		doaOpen3BHL,
		doaContained3BHL,
		doaClosed3BHL,
		doaMissed3BHL,

		doaOpen2BHL,
		doaContained2BHL,
		doaClosed2BHL,
		doaMissed2BHL,

		doaOpen1BHL,
		doaContained1BHL,
		doaClosed1BHL,
		doaMissed1BHL,

		doaOpen0BHL,
		doaContained0BHL,
		doaClosed0BHL,
		doaMissed0BHL,

		//ldl
		doaOpen8LDL,
		doaContained8LDL,
		doaClosed8LDL,
		doaMissed8LDL,

		doaOpen7LDL,
		doaContained7LDL,
		doaClosed7LDL,
		doaMissed7LDL,

		doaOpen6LDL,
		doaContained6LDL,
		doaClosed6LDL,
		doaMissed6LDL,

		doaOpen5LDL,
		doaContained5LDL,
		doaClosed5LDL,
		doaMissed5LDL,

		doaOpen4LDL,
		doaContained4LDL,
		doaClosed4LDL,
		doaMissed4LDL,

		doaOpen3LDL,
		doaContained3LDL,
		doaClosed3LDL,
		doaMissed3LDL,

		doaOpen2LDL,
		doaContained2LDL,
		doaClosed2LDL,
		doaMissed2LDL,

		doaOpen1LDL,
		doaContained1LDL,
		doaClosed1LDL,
		doaMissed1LDL,

		doaOpen0LDL,
		doaContained0LDL,
		doaClosed0LDL,
		doaMissed0LDL,

		// cp
		doaOpen8CP,
		doaContained8CP,
		doaClosed8CP,
		doaMissed8CP,

		doaOpen7CP,
		doaContained7CP,
		doaClosed7CP,
		doaMissed7CP,

		doaOpen6CP,
		doaContained6CP,
		doaClosed6CP,
		doaMissed6CP,

		doaOpen5CP,
		doaContained5CP,
		doaClosed5CP,
		doaMissed5CP,

		doaOpen4CP,
		doaContained4CP,
		doaClosed4CP,
		doaMissed4CP,

		doaOpen3CP,
		doaContained3CP,
		doaClosed3CP,
		doaMissed3CP,

		doaOpen2CP,
		doaContained2CP,
		doaClosed2CP,
		doaMissed2CP,

		doaOpen1CP,
		doaContained1CP,
		doaClosed1CP,
		doaMissed1CP,

		doaOpen0CP,
		doaContained0CP,
		doaClosed0CP,
		doaMissed0CP,

		// em
		doaOpen8EM,
		doaContained8EM,
		doaClosed8EM,
		doaMissed8EM,

		doaOpen7EM,
		doaContained7EM,
		doaClosed7EM,
		doaMissed7EM,

		doaOpen6EM,
		doaContained6EM,
		doaClosed6EM,
		doaMissed6EM,

		doaOpen5EM,
		doaContained5EM,
		doaClosed5EM,
		doaMissed5EM,

		doaOpen4EM,
		doaContained4EM,
		doaClosed4EM,
		doaMissed4EM,

		doaOpen3EM,
		doaContained3EM,
		doaClosed3EM,
		doaMissed3EM,

		doaOpen2EM,
		doaContained2EM,
		doaClosed2EM,
		doaMissed2EM,

		doaOpen1EM,
		doaContained1EM,
		doaClosed1EM,
		doaMissed1EM,

		doaOpen0EM,
		doaContained0EM,
		doaClosed0EM,
		doaMissed0EM,

		//LP
		doaOpen8LP,
		doaContained8LP,
		doaClosed8LP,
		doaMissed8LP,

		doaOpen7LP,
		doaContained7LP,
		doaClosed7LP,
		doaMissed7LP,

		doaOpen6LP,
		doaContained6LP,
		doaClosed6LP,
		doaMissed6LP,

		doaOpen5LP,
		doaContained5LP,
		doaClosed5LP,
		doaMissed5LP,

		doaOpen4LP,
		doaContained4LP,
		doaClosed4LP,
		doaMissed4LP,

		doaOpen3LP,
		doaContained3LP,
		doaClosed3LP,
		doaMissed3LP,

		doaOpen2LP,
		doaContained2LP,
		doaClosed2LP,
		doaMissed2LP,

		doaOpen1LP,
		doaContained1LP,
		doaClosed1LP,
		doaMissed1LP,

		doaOpen0LP,
		doaContained0LP,
		doaClosed0LP,
		doaMissed0LP,

		// hp
		doaOpen8HP,
		doaContained8HP,
		doaClosed8HP,
		doaMissed8HP,

		doaOpen7HP,
		doaContained7HP,
		doaClosed7HP,
		doaMissed7HP,

		doaOpen6HP,
		doaContained6HP,
		doaClosed6HP,
		doaMissed6HP,

		doaOpen5HP,
		doaContained5HP,
		doaClosed5HP,
		doaMissed5HP,

		doaOpen4HP,
		doaContained4HP,
		doaClosed4HP,
		doaMissed4HP,

		doaOpen3HP,
		doaContained3HP,
		doaClosed3HP,
		doaMissed3HP,

		doaOpen2HP,
		doaContained2HP,
		doaClosed2HP,
		doaMissed2HP,

		doaOpen1HP,
		doaContained1HP,
		doaClosed1HP,
		doaMissed1HP,

		doaOpen0HP,
		doaContained0HP,
		doaClosed0HP,
		doaMissed0HP,

		//group t3
		t3Open8,
		t3Contained8,
		t3Closed8,
		t3Missed8,

		t3Open7,
		t3Contained7,
		t3Closed7,
		t3Missed7,

		t3Open6,
		t3Contained6,
		t3Closed6,
		t3Missed6,

		t3Open5,
		t3Contained5,
		t3Closed5,
		t3Missed5,

		t3Open4,
		t3Contained4,
		t3Closed4,
		t3Missed4,

		t3Open3,
		t3Contained3,
		t3Closed3,
		t3Missed3,

		t3Open2,
		t3Contained2,
		t3Closed2,
		t3Missed2,

		t3Open1,
		t3Contained1,
		t3Closed1,
		t3Missed1,

		t3Open0,
		t3Contained0,
		t3Closed0,
		t3Missed0,

		//bhl t3
		t3Open8BHL,
		t3Contained8BHL,
		t3Closed8BHL,
		t3Missed8BHL,

		t3Open7BHL,
		t3Contained7BHL,
		t3Closed7BHL,
		t3Missed7BHL,

		t3Open6BHL,
		t3Contained6BHL,
		t3Closed6BHL,
		t3Missed6BHL,

		t3Open5BHL,
		t3Contained5BHL,
		t3Closed5BHL,
		t3Missed5BHL,

		t3Open4BHL,
		t3Contained4BHL,
		t3Closed4BHL,
		t3Missed4BHL,

		t3Open3BHL,
		t3Contained3BHL,
		t3Closed3BHL,
		t3Missed3BHL,

		t3Open2BHL,
		t3Contained2BHL,
		t3Closed2BHL,
		t3Missed2BHL,

		t3Open1BHL,
		t3Contained1BHL,
		t3Closed1BHL,
		t3Missed1BHL,

		t3Open0BHL,
		t3Contained0BHL,
		t3Closed0BHL,
		t3Missed0BHL,

		//ldl
		t3Open8LDL,
		t3Contained8LDL,
		t3Closed8LDL,
		t3Missed8LDL,

		t3Open7LDL,
		t3Contained7LDL,
		t3Closed7LDL,
		t3Missed7LDL,

		t3Open6LDL,
		t3Contained6LDL,
		t3Closed6LDL,
		t3Missed6LDL,

		t3Open5LDL,
		t3Contained5LDL,
		t3Closed5LDL,
		t3Missed5LDL,

		t3Open4LDL,
		t3Contained4LDL,
		t3Closed4LDL,
		t3Missed4LDL,

		t3Open3LDL,
		t3Contained3LDL,
		t3Closed3LDL,
		t3Missed3LDL,

		t3Open2LDL,
		t3Contained2LDL,
		t3Closed2LDL,
		t3Missed2LDL,

		t3Open1LDL,
		t3Contained1LDL,
		t3Closed1LDL,
		t3Missed1LDL,

		t3Open0LDL,
		t3Contained0LDL,
		t3Closed0LDL,
		t3Missed0LDL,

		// cp
		t3Open8CP,
		t3Contained8CP,
		t3Closed8CP,
		t3Missed8CP,

		t3Open7CP,
		t3Contained7CP,
		t3Closed7CP,
		t3Missed7CP,

		t3Open6CP,
		t3Contained6CP,
		t3Closed6CP,
		t3Missed6CP,

		t3Open5CP,
		t3Contained5CP,
		t3Closed5CP,
		t3Missed5CP,

		t3Open4CP,
		t3Contained4CP,
		t3Closed4CP,
		t3Missed4CP,

		t3Open3CP,
		t3Contained3CP,
		t3Closed3CP,
		t3Missed3CP,

		t3Open2CP,
		t3Contained2CP,
		t3Closed2CP,
		t3Missed2CP,

		t3Open1CP,
		t3Contained1CP,
		t3Closed1CP,
		t3Missed1CP,

		t3Open0CP,
		t3Contained0CP,
		t3Closed0CP,
		t3Missed0CP,

		// em
		t3Open8EM,
		t3Contained8EM,
		t3Closed8EM,
		t3Missed8EM,

		t3Open7EM,
		t3Contained7EM,
		t3Closed7EM,
		t3Missed7EM,

		t3Open6EM,
		t3Contained6EM,
		t3Closed6EM,
		t3Missed6EM,

		t3Open5EM,
		t3Contained5EM,
		t3Closed5EM,
		t3Missed5EM,

		t3Open4EM,
		t3Contained4EM,
		t3Closed4EM,
		t3Missed4EM,

		t3Open3EM,
		t3Contained3EM,
		t3Closed3EM,
		t3Missed3EM,

		t3Open2EM,
		t3Contained2EM,
		t3Closed2EM,
		t3Missed2EM,

		t3Open1EM,
		t3Contained1EM,
		t3Closed1EM,
		t3Missed1EM,

		t3Open0EM,
		t3Contained0EM,
		t3Closed0EM,
		t3Missed0EM,

		//LP
		t3Open8LP,
		t3Contained8LP,
		t3Closed8LP,
		t3Missed8LP,

		t3Open7LP,
		t3Contained7LP,
		t3Closed7LP,
		t3Missed7LP,

		t3Open6LP,
		t3Contained6LP,
		t3Closed6LP,
		t3Missed6LP,

		t3Open5LP,
		t3Contained5LP,
		t3Closed5LP,
		t3Missed5LP,

		t3Open4LP,
		t3Contained4LP,
		t3Closed4LP,
		t3Missed4LP,

		t3Open3LP,
		t3Contained3LP,
		t3Closed3LP,
		t3Missed3LP,

		t3Open2LP,
		t3Contained2LP,
		t3Closed2LP,
		t3Missed2LP,

		t3Open1LP,
		t3Contained1LP,
		t3Closed1LP,
		t3Missed1LP,

		t3Open0LP,
		t3Contained0LP,
		t3Closed0LP,
		t3Missed0LP,

		// hp
		t3Open8HP,
		t3Contained8HP,
		t3Closed8HP,
		t3Missed8HP,

		t3Open7HP,
		t3Contained7HP,
		t3Closed7HP,
		t3Missed7HP,

		t3Open6HP,
		t3Contained6HP,
		t3Closed6HP,
		t3Missed6HP,

		t3Open5HP,
		t3Contained5HP,
		t3Closed5HP,
		t3Missed5HP,

		t3Open4HP,
		t3Contained4HP,
		t3Closed4HP,
		t3Missed4HP,

		t3Open3HP,
		t3Contained3HP,
		t3Closed3HP,
		t3Missed3HP,

		t3Open2HP,
		t3Contained2HP,
		t3Closed2HP,
		t3Missed2HP,

		t3Open1HP,
		t3Contained1HP,
		t3Closed1HP,
		t3Missed1HP,

		t3Open0HP,
		t3Contained0HP,
		t3Closed0HP,
		t3Missed0HP,
	})
}

module.exports.stage12Download = async (req, res) => {
	let todaysShift = new Date()
	todaysShift.setDate(todaysShift.getDate() - 7)
	todaysShift.setHours(0, 0, 0, 0)

	const dealers = [
		'G & J PECK LTD',
		'PEACOCK & BINNINGTON LTD',
		'WILFRED SCRUTON LTD',
		'HAYNES BROTHERS LIMITED,',
		'SCOT JCB LTD  (HL)',
		'SCOT JCB LTD (AGRICULTURE)',
		'SCOT JCB LTD TA AM PHILLIP AGRITECH',
		'SHARMANS AGRICULTURAL LTD',
		'INTERHANDLER SP Z.O.O.  (AG)',
		'INTERHANDLER SP ZOO  (HL)',
		'SERCO LANDTECHNIK AG',
		'EMYR EVANS',
		'TOWNSON TRACTORS LTD',
		'DENNISON COMMERCIALS LTD  (HL)',
		'COTSWOLD FARM MACHINERY LTD',
		'ROSS FARM MACHINERY LTD.,',
	]
	const customers = [
		'ARDENT HIRE SOLUTIONS',
		'ARDENT HIRE SOLUTIONS LTD',
		'SUNBELT RENTALS LTD (HO)',
		'SUNBELT RENTALS LTD',
    'SUNBELT RENTALS INC',
		'CHARLES WILSON ENGINEERS LTD',
		'PLANT HIRE UK LTD',
		'VP PLC',
		'VP PLC (2020/21 QUOTES)',
		'VP PLC (2021/22 QUOTES)',
		'VP PLC 2022 QUOTES',
	]

	const result = await Stage12.aggregate([
		{
			$match: {
				dateToStage: { $gte: todaysShift },
			},
		},
		{
			$addFields: {
				engineType: {
					$substr: ['$engineNumber', 0, 11],
				},
			},
		},
		{
			$match: {
				$or: [{ dealer: { $in: dealers } }, { customer: { $in: customers } }, { engineType: 'DP320/41687' }],
			},
		},

		{ $sort: { dateToStage: 1 } },
		{
			$project: {
				_id: 0,
				P980_engine: {
					$cond: [{ $eq: ['$engineType', 'DP320/41687'] }, 'Yes', 'No'],
				},
				// engineType    : {
				// 	$substr : [ '$engineNumber', 0, 11 ],
				// },
				buildNo: 1,
				customer: 1,
				dealer: 1,
				date_on_track: {
					$substrCP: ['$dateToStage', 0, 10],
				},

				time_on_track: {
					$dateToString: {
						format: '%H:%M:%S',
						date: '$dateToStage',
						// timezone : 'Europe/London',
					},
				},
			},
		},
	])

	if (result.length > 0) {
		const json2csvParser = new Json2csvParser({})
		const csv = json2csvParser.parse(result)

		fs.writeFile('stage12.csv', csv, function (err) {
			if (err) console.log(err.message)
			// console.log('file saved');
			res.download('./stage12.csv', () => {
				// fs.unlinkSync('./customer.csv');
			})
		})
	}
}

module.exports.cabsFaultsDownload = async (req, res) => {
	process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0'

	try {
		const curr = new Date()

		// console.log('done')
		const thisWeek = new Date(curr.setDate(curr.getDate() - curr.getDay()))
		const startOfWeek = new Date(thisWeek.getFullYear(), thisWeek.getMonth(), thisWeek.getDate(), 1, 0, 0)
		let startDate = moment().subtract(30, 'days').format('YYYY/MM/DD/00/00')
		let endDate = moment().format('YYYY/MM/DD/kk/mm')

		const compact = await axios(`https://internal.jcb.local/qsmartapi/api/qsmart/faults/5/${startDate}/${endDate}/2`)
		const backhoe = await axios(`https://internal.jcb.local/qsmartapi/api/qsmart/faults/18/${startDate}/${endDate}/2`)
		const heavy = await axios(`https://internal.jcb.local/qsmartapi/api/qsmart/faults/38/${startDate}/${endDate}/2`)
		const loadall = await axios(`https://internal.jcb.local/qsmartapi/api/qsmart/faults/19/${startDate}/${endDate}/2`)
		const siteDumper = await axios(`https://internal.jcb.local/qsmartapi/api/qsmart/faults/64/${startDate}/${endDate}/2`)

		const cpFaultsThisWeek = await compact.data.filter((fault) => fault['Fault Area'] === 'Cab Systems')
		const bhlFaultsThisWeek = await backhoe.data.filter((fault) => fault['Fault Area'] === 'Cab Systems')
		const hpFaultsThisWeek = await heavy.data.filter((fault) => fault['Fault Area'] === 'Cab Systems')
		const ldlFaultsThisWeek = await loadall.data.filter((fault) => fault['Fault Area'] === 'Cab Systems')
		const sdFaultsThisWeek = await siteDumper.data.filter((fault) => fault['Fault Area'] === 'Cab Systems')

		let faultsNotFixedThisWeek = [...cpFaultsThisWeek, ...bhlFaultsThisWeek, ...hpFaultsThisWeek, ...ldlFaultsThisWeek, ...sdFaultsThisWeek]

		let theList = faultsNotFixedThisWeek.sort((a, b) => a.createdAt - b.createdAt)
		const json2csvParser = new Json2csvParser({})
		const csv = json2csvParser.parse(theList)

		if (faultsNotFixedThisWeek.length > 0) {
			fs.writeFile('Cabs open faults.csv', csv, function (err) {
				if (err) throw err.message
				// console.log('file saved')
				res.download('./Cabs open faults.csv', () => {
					// fs.unlinkSync('./customer.csv');
				})
			})
		}
	} catch (error) {
		console.log(error)
	}
}

module.exports.topdealers = async (req, res) => {
	const { division } = req.params
	console.log('here')

	const thirteenMonthsAgoDB1 = moment().subtract(13, 'months').format('YYYY, MM, DD')

	const twelveMonthsAgoDB1 = moment().subtract(12, 'months').format('YYYY, MM, DD')

	const sevenMonthsAgoDB1 = moment().subtract(7, 'months').format('YYYY, MM, DD')

	const thirteenMonthsAgoDBDate = new Date(thirteenMonthsAgoDB1)
	const twelveMonthsAgoDBDate = new Date(twelveMonthsAgoDB1)
	const sevenMonthsAgoDBDate = new Date(sevenMonthsAgoDB1)

	const fourteenMonthsAgo = moment().subtract(14, 'months').format('MMM-YY')
	const thirteenMonthsAgo = moment().subtract(13, 'months').format('MMM-YY')
	const twelveMonthsAgo = moment().subtract(12, 'months').format('MMM-YY')
	const elevenMonthsAgo = moment().subtract(11, 'months').format('MMM-YY')
	const tenMonthsAgo = moment().subtract(10, 'months').format('MMM-YY')
	const nineMonthsAgo = moment().subtract(9, 'months').format('MMM-YY')
	const eightMonthsAgo = moment().subtract(8, 'months').format('MMM-YY')
	const sevenMonthsAgo = moment().subtract(7, 'months').format('MMM-YY')
	const sixMonthsAgo = moment().subtract(6, 'months').format('MMM-YY')
	const fiveMonthsAgo = moment().subtract(5, 'months').format('MMM-YY')
	const fourMonthsAgo = moment().subtract(4, 'months').format('MMM-YY')
	const threeMonthsAgo = moment().subtract(3, 'months').format('MMM-YY')
	const twoMonthsAgo = moment().subtract(2, 'months').format('MMM-YY')
	const oneMonthAgo = moment().subtract(1, 'months').format('MMM-YY')
	const zeroMonthsAgo = moment().format('MMM-YY')

	const fourteenMonthsAgoDB = moment().subtract(14, 'months').format('MM/YYYY')
	const thirteenMonthsAgoDB = moment().subtract(13, 'months').format('MM/YYYY')
	const twelveMonthsAgoDB = moment().subtract(12, 'months').format('MM/YYYY')
	const elevenMonthsAgoDB = moment().subtract(11, 'months').format('MM/YYYY')
	const tenMonthsAgoDB = moment().subtract(10, 'months').format('MM/YYYY')
	const nineMonthsAgoDB = moment().subtract(9, 'months').format('MM/YYYY')
	const eightMonthsAgoDB = moment().subtract(8, 'months').format('MM/YYYY')
	const sevenMonthsAgoDB = moment().subtract(7, 'months').format('MM/YYYY')
	const sixMonthsAgoDB = moment().subtract(6, 'months').format('MM/YYYY')
	const fiveMonthsAgoDB = moment().subtract(5, 'months').format('MM/YYYY')
	const fourMonthsAgoDB = moment().subtract(4, 'months').format('MM/YYYY')
	const threeMonthsAgoDB = moment().subtract(3, 'months').format('MM/YYYY')
	const twoMonthsAgoDB = moment().subtract(2, 'months').format('MM/YYYY')
	const oneMonthAgoDB = moment().subtract(1, 'months').format('MM/YYYY')
	const zeroMonthsAgoDB = moment().format('MM/YYYY')

	const toatalDates = [
		elevenMonthsAgo,
		tenMonthsAgo,
		nineMonthsAgo,
		eightMonthsAgo,
		sevenMonthsAgo,
		sixMonthsAgo,
		fiveMonthsAgo,
		fourMonthsAgo,
		threeMonthsAgo,
		twoMonthsAgo,
		oneMonthAgo,
	]
	const shortDates = [
		elevenMonthsAgo,
		tenMonthsAgo,
		nineMonthsAgo,
		eightMonthsAgo,
		sevenMonthsAgo,
		sixMonthsAgo,
		fiveMonthsAgo,
		fourMonthsAgo,
		threeMonthsAgo,
		twoMonthsAgo,
		oneMonthAgo,
	]

	const startOfMonth = new Date(curr.getFullYear(), curr.getMonth(), 1) // start of this month

	const theCustomDate = new Date('2021, 10, 01')

	const startOfWeek = new Date(curr.setDate(curr.getDate() - curr.getDay())) //start of this week

	const doaClaims = await Claim.aggregate([
		{
			$match: {
				division: division,
				outcome: { $nin: ['Reject', 'Z Code'] },
				tPeriod: 'DOA',
				active: true,
				// importedDate : { $gt: twelveMonthsAgoDBDate },
			},
		},
		{
			$match: {
				$or: [
					{ buildDate: { $regex: elevenMonthsAgoDB } },
					{ buildDate: { $regex: tenMonthsAgoDB } },
					{ buildDate: { $regex: nineMonthsAgoDB } },
					{ buildDate: { $regex: eightMonthsAgoDB } },
					{ buildDate: { $regex: sevenMonthsAgoDB } },
					{ buildDate: { $regex: sixMonthsAgoDB } },
					{ buildDate: { $regex: fiveMonthsAgoDB } },
					{ buildDate: { $regex: fourMonthsAgoDB } },
					{ buildDate: { $regex: threeMonthsAgoDB } },
					{ buildDate: { $regex: twoMonthsAgoDB } },
					{ buildDate: { $regex: oneMonthAgoDB } },
				],
			},
		},
	])

	doaSerialsHelp = doaClaims.map((c) => c.name)

	doaSerials = [...new Set(doaSerialsHelp)]

	const totalData = await Retail.aggregate([
		{
			$match: {
				division: division,
				// soldDate : { $ne: '#' },
				$or: [
					{ buildDate: { $regex: elevenMonthsAgoDB } },
					{ buildDate: { $regex: tenMonthsAgoDB } },
					{ buildDate: { $regex: nineMonthsAgoDB } },
					{ buildDate: { $regex: eightMonthsAgoDB } },
					{ buildDate: { $regex: sevenMonthsAgoDB } },
					{ buildDate: { $regex: sixMonthsAgoDB } },
					{ buildDate: { $regex: fiveMonthsAgoDB } },
					{ buildDate: { $regex: fourMonthsAgoDB } },
					{ buildDate: { $regex: threeMonthsAgoDB } },
					{ buildDate: { $regex: twoMonthsAgoDB } },
					{ buildDate: { $regex: oneMonthAgoDB } },
				],
			},
		},
		{
			$project: {
				_id: {
					year: {
						$substrCP: ['$buildDate', 6, 4],
					},
					month: {
						$substrCP: ['$buildDate', 3, 2],
					},
				},
				//status : 1,
			},
		},
		{
			$group: {
				_id: '$_id',
				total_machines: {
					$sum: 1,
				},
			},
		},
		{
			$addFields: {
				nrft: 0,
				rft: 0,
				percent: 0,
				// max     : 0,
			},
		},
		{ $sort: { _id: 1 } },
	])

	console.log(totalData[10])

	const totaBuildLast6Months = await Retail.aggregate([
		{
			$match: {
				division: division,
				// soldDate : { $ne: '#' },
				$or: [
					{ buildDate: { $regex: sixMonthsAgoDB } },
					{ buildDate: { $regex: fiveMonthsAgoDB } },
					{ buildDate: { $regex: fourMonthsAgoDB } },
					{ buildDate: { $regex: threeMonthsAgoDB } },
					{ buildDate: { $regex: twoMonthsAgoDB } },
					{ buildDate: { $regex: oneMonthAgoDB } },
				],
				dealer: { $nin: [null, ''] },
			},
		},

		{
			$group: {
				_id: '$dealer',
				total_machines: {
					$sum: 1,
				},
			},
		},

		{ $sort: { total_machines: -1 } },
	])

	const nrftData = await Retail.aggregate([
		{
			$match: {
				division: division,
				// soldDate     : { $ne: '#' },
				serialNumber: { $in: doaSerials },
				$or: [
					{ buildDate: { $regex: elevenMonthsAgoDB } },
					{ buildDate: { $regex: tenMonthsAgoDB } },
					{ buildDate: { $regex: nineMonthsAgoDB } },
					{ buildDate: { $regex: eightMonthsAgoDB } },
					{ buildDate: { $regex: sevenMonthsAgoDB } },
					{ buildDate: { $regex: sixMonthsAgoDB } },
					{ buildDate: { $regex: fiveMonthsAgoDB } },
					{ buildDate: { $regex: fourMonthsAgoDB } },
					{ buildDate: { $regex: threeMonthsAgoDB } },
					{ buildDate: { $regex: twoMonthsAgoDB } },
					{ buildDate: { $regex: oneMonthAgoDB } },
				],
			},
		},
		{
			$project: {
				_id: {
					year: {
						$substrCP: ['$buildDate', 6, 4],
					},
					month: {
						$substrCP: ['$buildDate', 3, 2],
					},
				},
				//status : 1,
			},
		},
		{
			$group: {
				_id: '$_id',
				count: {
					$sum: 1,
				},
			},
		},
		{ $sort: { _id: 1 } },
	])

	for (let x of totalData) {
		for (let y of nrftData) {
			if (x._id.year === y._id.year && x._id.month === y._id.month) {
				x.nrft = y.count
			}
		}
	}

	for (let j of totalData) {
		j.rft = j.total_machines - j.nrft
		j.percent = 100 - ((j.nrft / j.total_machines) * 100).toFixed(0)
	}

	const rftArry = totalData.map((d) => d.rft)
	const nrftArry = totalData.map((x) => x.nrft)

	const maxRft = Math.max(...rftArry)
	const maxNrft = Math.max(...nrftArry)

	// console.log(rftArry)
	// console.log(nrftArry)

	const dealerMax = ((+maxRft + +maxNrft) / 100) * 150

	// stuff for table
	const doaClaimslast6MonthsForNumber = await Claim.aggregate([
		{
			$match: {
				division: division,
				active: true,
				outcome: { $nin: ['Reject', 'Z Code'] },
				tPeriod: 'DOA',
				// importedDate : { $gt: sevenMonthsAgoDBDate },
			},
		},
		{
			$match: {
				$or: [
					{ buildDate: { $regex: sixMonthsAgoDB } },
					{ buildDate: { $regex: fiveMonthsAgoDB } },
					{ buildDate: { $regex: fourMonthsAgoDB } },
					{ buildDate: { $regex: threeMonthsAgoDB } },
					{ buildDate: { $regex: twoMonthsAgoDB } },
					{ buildDate: { $regex: oneMonthAgoDB } },
				],
			},
		},
	])

	const doaClaimslast6MonthsByDealer1 = await Claim.aggregate([
		{
			$match: {
				division: division,
				active: true,
				outcome: { $nin: ['Reject', 'Z Code'] },
				tPeriod: 'DOA',
				// importedDate : { $gt: sevenMonthsAgoDBDate },
				dealer: { $nin: [null, ''] },
			},
		},
		{
			$match: {
				$or: [
					{ buildDate: { $regex: sixMonthsAgoDB } },
					{ buildDate: { $regex: fiveMonthsAgoDB } },
					{ buildDate: { $regex: fourMonthsAgoDB } },
					{ buildDate: { $regex: threeMonthsAgoDB } },
					{ buildDate: { $regex: twoMonthsAgoDB } },
					{ buildDate: { $regex: oneMonthAgoDB } },
				],
			},
		},
		{
			$group: {
				_id: '$dealer',
				count: { $sum: 1 },
				countries: { $push: '$country' },
				nrft_machines: { $addToSet: '$name' },
				nrft_machinesAll: { $push: '$name' },
				claims: {
					$push: {
						claimNumber: '$claimNumber',
						name: '$name',
						model: '$model',
						buildDate: '$buildDate',
						description: '$description',
						status: '$status',
						importedDate: '$importedDate',
					},
				},
			},
		},
		{
			$addFields: {
				total_machines: 0,
				rft_machines: 0,
				nrft_count: 0,
				percent: 0,
				rft_percent: 0,
				bu_percent: 0,
				country: '',
				bu_total: doaClaimslast6MonthsForNumber.length,
				bu_percent: 0,
				nrft_machines_with_count: [],
			},
		},
		{ $sort: { count: -1, _id: 1 } },
		// { $limit: 10 },
	])
	function getMostFrequent(arr) {
		const hashmap = arr.reduce((acc, val) => {
			acc[val] = (acc[val] || 0) + 1
			return acc
		}, {})
		return Object.keys(hashmap).reduce((a, b) => (hashmap[a] > hashmap[b] ? a : b))
	}
	function count(arr) {
		return arr.reduce((prev, curr) => ((prev[curr] = ++prev[curr] || 1), prev), {})
	}

	// const helperDealerArray = doaClaimslast6MonthsByDealer.map((d) => d._id)

	for (let x of doaClaimslast6MonthsByDealer1) {
		// if (x._id.replace(/\d+/g, '').indexOf('-') === 1) {
		// 	x._id = x._id.replace(/\d+/g, '').substring(2)
		// }
		x.claims.sort((a, b) => (a.importedDate < b.importedDate ? 1 : b.importedDate < a.importedDate ? -1 : 0))

		for (let r of totaBuildLast6Months) {
			if (r._id.includes(x._id)) {
				x.total_machines += r.total_machines
			}
			// if (x._id.includes('-JCB INC')) {
			// 	if (r._id.includes('INC.')) {
			// 		x.total_machines += r.total_machines
			// 	}
			// }
		}

		x.nrft_count = x.nrft_machines.length

		x.rft_machines = x.total_machines - x.nrft_count
		if (x.total_machines > 0) {
			x.rft_percent = ((x.rft_machines / x.total_machines) * 100).toFixed(0)
		}

		x.bu_percent = ((x.count / x.bu_total) * 100).toFixed(1)

		x.country = getMostFrequent(x.countries)
		x.nrft_machines_with_count = count(x.nrft_machinesAll)
		// for (const [ key, value ] of Object.entries(count(x.nrft_machinesAll))) {
		// 	x.nrft_machines_with_count.push(`${key}: ${value}`)
		// }
	}

	// console.log(doaClaimslast6MonthsByDealer[0].nrft_machines_with_count)

	const doaClaimslast6MonthsByDealer = doaClaimslast6MonthsByDealer1.filter((item) => item.total_machines > 5)

	doaClaimslast6MonthsByDealer.sort((a, b) => (a.rft_percent > b.rft_percent ? 1 : b.rft_percent > a.rft_percent ? -1 : 0))

	helperDealerArray = []
	if (doaClaimslast6MonthsByDealer[0]) helperDealerArray.push(doaClaimslast6MonthsByDealer[0]._id)
	if (doaClaimslast6MonthsByDealer[1]) helperDealerArray.push(doaClaimslast6MonthsByDealer[1]._id)
	if (doaClaimslast6MonthsByDealer[2]) helperDealerArray.push(doaClaimslast6MonthsByDealer[2]._id)
	if (doaClaimslast6MonthsByDealer[3]) helperDealerArray.push(doaClaimslast6MonthsByDealer[3]._id)
	if (doaClaimslast6MonthsByDealer[4]) helperDealerArray.push(doaClaimslast6MonthsByDealer[4]._id)
	if (doaClaimslast6MonthsByDealer[5]) helperDealerArray.push(doaClaimslast6MonthsByDealer[5]._id)
	if (doaClaimslast6MonthsByDealer[6]) helperDealerArray.push(doaClaimslast6MonthsByDealer[6]._id)
	if (doaClaimslast6MonthsByDealer[7]) helperDealerArray.push(doaClaimslast6MonthsByDealer[7]._id)
	if (doaClaimslast6MonthsByDealer[8]) helperDealerArray.push(doaClaimslast6MonthsByDealer[8]._id)
	if (doaClaimslast6MonthsByDealer[9]) helperDealerArray.push(doaClaimslast6MonthsByDealer[9]._id)

	// console.log(doaClaimslast6MonthsByDealer)
	// console.log(totaBuildLast6Months)

	//end of table stuff
	// dealer doa graphs stuff

	const doaGraphArr = []

	// console.log(helperDealerArray)

	for (let dealer of helperDealerArray) {
		//month 1
		let name = dealer
		let nrftMonth1 = 0
		let buildMonth1 = 0

		const claimsMonth1 = await Claim.aggregate([
			{
				$match: {
					division: division,
					active: true,
					outcome: { $nin: ['Reject', 'Z Code'] },
					tPeriod: 'DOA',
					dealer: dealer,
					buildDate: { $regex: elevenMonthsAgoDB },
				},
			},
		])

		const serialsMonth1 = claimsMonth1.map((s) => s.name)
		const serialsNODupesMonth1 = [...new Set(serialsMonth1)]

		const buildMonth1Numbers = await Retail.aggregate([
			{
				$match: {
					division: division,
					// soldDate : { $ne: '#' },
					buildDate: { $regex: elevenMonthsAgoDB },
				},
			},

			{
				$group: {
					_id: '$dealer',
					total_machines: {
						$sum: 1,
					},
				},
			},
		])

		if (dealer.replace(/\d+/g, '').indexOf('-') === 1) {
			name = dealer.replace(/\d+/g, '').substring(2)
		}

		for (let r of buildMonth1Numbers) {
			if (r._id.includes(name.split('-')[0])) {
				buildMonth1 += r.total_machines
			}
			if (name.includes('-JCB INC')) {
				if (r._id.includes('INC.')) {
					buildMonth1 += r.total_machines
				}
			}
		}
		let rftMonth1 = 0
		let percentMonth1 = 100

		nrftMonth1 = serialsNODupesMonth1.length
		if (nrftMonth1 >= buildMonth1) {
			nrftMonth1 = buildMonth1
			rftMonth1 = 0
			percentMonth1 = 0
		} else {
			rftMonth1 = buildMonth1 - nrftMonth1

			if (buildMonth1 > 0) {
				percentMonth1 = ((rftMonth1 / buildMonth1) * 100).toFixed(0)
			}
		}

		//month 2

		let nrftMonth2 = 0
		let buildMonth2 = 0

		const claimsMonth2 = await Claim.aggregate([
			{
				$match: {
					division: division,
					active: true,
					outcome: { $nin: ['Reject', 'Z Code'] },
					tPeriod: 'DOA',
					dealer: dealer,
					buildDate: { $regex: tenMonthsAgoDB },
				},
			},
		])

		const serialsMonth2 = claimsMonth2.map((s) => s.name)
		const serialsNODupesMonth2 = [...new Set(serialsMonth2)]

		const buildMonth2Numbers = await Retail.aggregate([
			{
				$match: {
					division: division,
					// soldDate : { $ne: '#' },
					buildDate: { $regex: tenMonthsAgoDB },
				},
			},

			{
				$group: {
					_id: '$dealer',
					total_machines: {
						$sum: 1,
					},
				},
			},
		])

		if (dealer.replace(/\d+/g, '').indexOf('-') === 1) {
			name = dealer.replace(/\d+/g, '').substring(2)
		}

		for (let r of buildMonth2Numbers) {
			if (r._id.includes(name.split('-')[0])) {
				buildMonth2 += r.total_machines
			}
			if (name.includes('-JCB INC')) {
				if (r._id.includes('INC.')) {
					buildMonth2 += r.total_machines
				}
			}
		}

		let rftMonth2 = 0
		let percentMonth2 = 100

		nrftMonth2 = serialsNODupesMonth2.length
		if (nrftMonth2 >= buildMonth2) {
			nrftMonth2 = buildMonth2
			rftMonth2 = 0
			percentMonth2 = 0
		} else {
			rftMonth2 = buildMonth2 - nrftMonth2

			if (buildMonth2 > 0) {
				percentMonth2 = ((rftMonth2 / buildMonth2) * 100).toFixed(0)
			}
		}
		// month 3
		let nrftMonth3 = 0
		let buildMonth3 = 0

		const claimsMonth3 = await Claim.aggregate([
			{
				$match: {
					division: division,
					active: true,
					outcome: { $nin: ['Reject', 'Z Code'] },
					tPeriod: 'DOA',
					dealer: dealer,
					buildDate: { $regex: nineMonthsAgoDB },
				},
			},
		])

		const serialsMonth3 = claimsMonth3.map((s) => s.name)
		const serialsNODupesMonth3 = [...new Set(serialsMonth3)]

		const buildMonth3Numbers = await Retail.aggregate([
			{
				$match: {
					division: division,
					// soldDate : { $ne: '#' },
					buildDate: { $regex: nineMonthsAgoDB },
				},
			},

			{
				$group: {
					_id: '$dealer',
					total_machines: {
						$sum: 1,
					},
				},
			},
		])

		if (dealer.replace(/\d+/g, '').indexOf('-') === 1) {
			name = dealer.replace(/\d+/g, '').substring(2)
		}

		for (let r of buildMonth3Numbers) {
			if (r._id.includes(name.split('-')[0])) {
				buildMonth3 += r.total_machines
			}
			if (name.includes('-JCB INC')) {
				if (r._id.includes('INC.')) {
					buildMonth3 += r.total_machines
				}
			}
		}

		let rftMonth3 = 0
		let percentMonth3 = 100

		nrftMonth3 = serialsNODupesMonth3.length
		if (nrftMonth3 >= buildMonth3) {
			nrftMonth3 = buildMonth3
			rftMonth3 = 0
			percentMonth3 = 0
		} else {
			rftMonth3 = buildMonth3 - nrftMonth3

			if (buildMonth3 > 0) {
				percentMonth3 = ((rftMonth3 / buildMonth3) * 100).toFixed(0)
			}
		}

		//month 4
		let nrftMonth4 = 0
		let buildMonth4 = 0

		const claimsMonth4 = await Claim.aggregate([
			{
				$match: {
					division: division,
					outcome: { $nin: ['Reject', 'Z Code'] },
					tPeriod: 'DOA',
					dealer: dealer,
					buildDate: { $regex: eightMonthsAgoDB },
				},
			},
		])

		const serialsMonth4 = claimsMonth4.map((s) => s.name)
		const serialsNODupesMonth4 = [...new Set(serialsMonth4)]

		const buildMonth4Numbers = await Retail.aggregate([
			{
				$match: {
					division: division,
					// soldDate : { $ne: '#' },
					buildDate: { $regex: eightMonthsAgoDB },
				},
			},

			{
				$group: {
					_id: '$dealer',
					total_machines: {
						$sum: 1,
					},
				},
			},
		])

		if (dealer.replace(/\d+/g, '').indexOf('-') === 1) {
			name = dealer.replace(/\d+/g, '').substring(2)
		}

		for (let r of buildMonth4Numbers) {
			if (r._id.includes(name.split('-')[0])) {
				buildMonth4 += r.total_machines
			}
			if (name.includes('-JCB INC')) {
				if (r._id.includes('INC.')) {
					buildMonth4 += r.total_machines
				}
			}
		}

		let rftMonth4 = 0
		let percentMonth4 = 100

		nrftMonth4 = serialsNODupesMonth4.length
		if (nrftMonth4 >= buildMonth4) {
			nrftMonth4 = buildMonth4
			rftMonth4 = 0
			percentMonth4 = 0
		} else {
			rftMonth4 = buildMonth4 - nrftMonth4

			if (buildMonth4 > 0) {
				percentMonth4 = ((rftMonth4 / buildMonth4) * 100).toFixed(0)
			}
		}

		//month 5
		let nrftMonth5 = 0
		let buildMonth5 = 0

		const claimsMonth5 = await Claim.aggregate([
			{
				$match: {
					division: division,
					active: true,
					outcome: { $nin: ['Reject', 'Z Code'] },
					tPeriod: 'DOA',
					dealer: dealer,
					buildDate: { $regex: sevenMonthsAgoDB },
				},
			},
		])

		const serialsMonth5 = claimsMonth5.map((s) => s.name)
		const serialsNODupesMonth5 = [...new Set(serialsMonth5)]

		const buildMonth5Numbers = await Retail.aggregate([
			{
				$match: {
					division: division,
					// soldDate : { $ne: '#' },
					buildDate: { $regex: sevenMonthsAgoDB },
				},
			},

			{
				$group: {
					_id: '$dealer',
					total_machines: {
						$sum: 1,
					},
				},
			},
		])

		if (dealer.replace(/\d+/g, '').indexOf('-') === 1) {
			name = dealer.replace(/\d+/g, '').substring(2)
		}

		for (let r of buildMonth5Numbers) {
			if (r._id.includes(name.split('-')[0])) {
				buildMonth5 += r.total_machines
			}
			if (name.includes('-JCB INC')) {
				if (r._id.includes('INC.')) {
					buildMonth5 += r.total_machines
				}
			}
		}

		let rftMonth5 = 0
		let percentMonth5 = 100

		nrftMonth5 = serialsNODupesMonth5.length
		if (nrftMonth5 >= buildMonth5) {
			nrftMonth5 = buildMonth5
			rftMonth5 = 0
			percentMonth5 = 0
		} else {
			rftMonth5 = buildMonth5 - nrftMonth5

			if (buildMonth5 > 0) {
				percentMonth5 = ((rftMonth5 / buildMonth5) * 100).toFixed(0)
			}
		}

		//month 6
		let nrftMonth6 = 0
		let buildMonth6 = 0

		const claimsMonth6 = await Claim.aggregate([
			{
				$match: {
					division: division,
					active: true,
					outcome: { $nin: ['Reject', 'Z Code'] },
					tPeriod: 'DOA',
					dealer: dealer,
					buildDate: { $regex: sixMonthsAgoDB },
				},
			},
		])

		const serialsMonth6 = claimsMonth6.map((s) => s.name)
		const serialsNODupesMonth6 = [...new Set(serialsMonth6)]

		const buildMonth6Numbers = await Retail.aggregate([
			{
				$match: {
					division: division,
					// soldDate : { $ne: '#' },
					buildDate: { $regex: sixMonthsAgoDB },
				},
			},

			{
				$group: {
					_id: '$dealer',
					total_machines: {
						$sum: 1,
					},
				},
			},
		])

		if (dealer.replace(/\d+/g, '').indexOf('-') === 1) {
			name = dealer.replace(/\d+/g, '').substring(2)
		}

		for (let r of buildMonth6Numbers) {
			if (r._id.includes(name.split('-')[0])) {
				buildMonth6 += r.total_machines
			}
			if (name.includes('-JCB INC')) {
				if (r._id.includes('INC.')) {
					buildMonth6 += r.total_machines
				}
			}
		}

		let rftMonth6 = 0
		let percentMonth6 = 100

		nrftMonth6 = serialsNODupesMonth6.length
		if (nrftMonth6 >= buildMonth6) {
			nrftMonth6 = buildMonth6
			rftMonth6 = 0
			percentMonth6 = 0
		} else {
			rftMonth6 = buildMonth6 - nrftMonth6

			if (buildMonth6 > 0) {
				percentMonth6 = ((rftMonth6 / buildMonth6) * 100).toFixed(0)
			}
		}
		//month 7
		let nrftMonth7 = 0
		let buildMonth7 = 0

		const claimsMonth7 = await Claim.aggregate([
			{
				$match: {
					division: division,
					active: true,
					outcome: { $nin: ['Reject', 'Z Code'] },
					tPeriod: 'DOA',
					dealer: dealer,
					buildDate: { $regex: fiveMonthsAgoDB },
				},
			},
		])

		const serialsMonth7 = claimsMonth7.map((s) => s.name)
		const serialsNODupesMonth7 = [...new Set(serialsMonth7)]

		const buildMonth7Numbers = await Retail.aggregate([
			{
				$match: {
					division: division,
					// soldDate : { $ne: '#' },
					buildDate: { $regex: fiveMonthsAgoDB },
				},
			},

			{
				$group: {
					_id: '$dealer',
					total_machines: {
						$sum: 1,
					},
				},
			},
		])

		if (dealer.replace(/\d+/g, '').indexOf('-') === 1) {
			name = dealer.replace(/\d+/g, '').substring(2)
		}

		for (let r of buildMonth7Numbers) {
			if (r._id.includes(name.split('-')[0])) {
				buildMonth7 += r.total_machines
			}
			if (name.includes('-JCB INC')) {
				if (r._id.includes('INC.')) {
					buildMonth7 += r.total_machines
				}
			}
		}

		let rftMonth7 = 0
		let percentMonth7 = 100

		nrftMonth7 = serialsNODupesMonth7.length
		if (nrftMonth7 >= buildMonth7) {
			nrftMonth7 = buildMonth7
			rftMonth7 = 0
			percentMonth7 = 0
		} else {
			rftMonth7 = buildMonth7 - nrftMonth7

			if (buildMonth7 > 0) {
				percentMonth7 = ((rftMonth7 / buildMonth7) * 100).toFixed(0)
			}
		}

		//month 8
		let nrftMonth8 = 0
		let buildMonth8 = 0

		const claimsMonth8 = await Claim.aggregate([
			{
				$match: {
					division: division,
					active: true,
					outcome: { $nin: ['Reject', 'Z Code'] },
					tPeriod: 'DOA',
					dealer: dealer,
					buildDate: { $regex: fourMonthsAgoDB },
				},
			},
		])

		const serialsMonth8 = claimsMonth8.map((s) => s.name)
		const serialsNODupesMonth8 = [...new Set(serialsMonth8)]

		const buildMonth8Numbers = await Retail.aggregate([
			{
				$match: {
					division: division,
					// soldDate : { $ne: '#' },
					buildDate: { $regex: fourMonthsAgoDB },
				},
			},

			{
				$group: {
					_id: '$dealer',
					total_machines: {
						$sum: 1,
					},
				},
			},
		])

		if (dealer.replace(/\d+/g, '').indexOf('-') === 1) {
			name = dealer.replace(/\d+/g, '').substring(2)
		}

		for (let r of buildMonth8Numbers) {
			if (r._id.includes(name.split('-')[0])) {
				buildMonth8 += r.total_machines
			}
			if (name.includes('-JCB INC')) {
				if (r._id.includes('INC.')) {
					buildMonth8 += r.total_machines
				}
			}
		}

		let rftMonth8 = 0
		let percentMonth8 = 100

		nrftMonth8 = serialsNODupesMonth8.length
		if (nrftMonth8 >= buildMonth8) {
			nrftMonth8 = buildMonth8
			rftMonth8 = 0
			percentMonth8 = 0
		} else {
			rftMonth8 = buildMonth8 - nrftMonth8

			if (buildMonth8 > 0) {
				percentMonth8 = ((rftMonth8 / buildMonth8) * 100).toFixed(0)
			}
		}

		//month 9
		let nrftMonth9 = 0
		let buildMonth9 = 0

		const claimsMonth9 = await Claim.aggregate([
			{
				$match: {
					division: division,
					active: true,
					outcome: { $nin: ['Reject', 'Z Code'] },
					tPeriod: 'DOA',
					dealer: dealer,
					buildDate: { $regex: threeMonthsAgoDB },
				},
			},
		])

		const serialsMonth9 = claimsMonth9.map((s) => s.name)
		const serialsNODupesMonth9 = [...new Set(serialsMonth9)]

		const buildMonth9Numbers = await Retail.aggregate([
			{
				$match: {
					division: division,
					// soldDate : { $ne: '#' },
					buildDate: { $regex: threeMonthsAgoDB },
				},
			},

			{
				$group: {
					_id: '$dealer',
					total_machines: {
						$sum: 1,
					},
				},
			},
		])

		// console.log(buildMonth9Numbers)

		if (dealer.replace(/\d+/g, '').indexOf('-') === 1) {
			name = dealer.replace(/\d+/g, '').substring(2)
		}

		for (let r of buildMonth9Numbers) {
			if (r._id.includes(name.split('-')[0])) {
				buildMonth9 += r.total_machines
			}
			if (name.includes('-JCB INC')) {
				if (r._id.includes('INC.')) {
					buildMonth9 += r.total_machines
				}
			}
		}

		let rftMonth9 = 0
		let percentMonth9 = 100

		nrftMonth9 = serialsNODupesMonth9.length
		if (nrftMonth9 >= buildMonth9) {
			nrftMonth9 = buildMonth9
			rftMonth9 = 0
			percentMonth9 = 0
		} else {
			rftMonth9 = buildMonth9 - nrftMonth9

			if (buildMonth9 > 0) {
				percentMonth9 = ((rftMonth9 / buildMonth9) * 100).toFixed(0)
			}
		}

		//month 10
		let nrftMonth10 = 0
		let buildMonth10 = 0

		const claimsMonth10 = await Claim.aggregate([
			{
				$match: {
					division: division,
					active: true,
					outcome: { $nin: ['Reject', 'Z Code'] },
					tPeriod: 'DOA',
					dealer: dealer,
					buildDate: { $regex: twoMonthsAgoDB },
				},
			},
		])

		const serialsMonth10 = claimsMonth10.map((s) => s.name)
		const serialsNODupesMonth10 = [...new Set(serialsMonth10)]

		const buildMonth10Numbers = await Retail.aggregate([
			{
				$match: {
					division: division,
					// soldDate : { $ne: '#' },
					buildDate: { $regex: twoMonthsAgoDB },
				},
			},

			{
				$group: {
					_id: '$dealer',
					total_machines: {
						$sum: 1,
					},
				},
			},
		])

		if (dealer.replace(/\d+/g, '').indexOf('-') === 1) {
			name = dealer.replace(/\d+/g, '').substring(2)
		}

		for (let r of buildMonth10Numbers) {
			if (r._id.includes(name.split('-')[0])) {
				buildMonth10 += r.total_machines
			}
			if (name.includes('-JCB INC')) {
				if (r._id.includes('INC.')) {
					buildMonth10 += r.total_machines
				}
			}
		}

		let rftMonth10 = 0
		let percentMonth10 = 100

		nrftMonth10 = serialsNODupesMonth10.length
		if (nrftMonth10 >= buildMonth10) {
			nrftMonth10 = buildMonth10
			rftMonth10 = 0
			percentMonth10 = 0
		} else {
			rftMonth10 = buildMonth10 - nrftMonth10

			if (buildMonth10 > 0) {
				percentMonth10 = ((rftMonth10 / buildMonth10) * 100).toFixed(0)
			}
		}

		//month 11
		let nrftMonth11 = 0
		let buildMonth11 = 0

		const claimsMonth11 = await Claim.aggregate([
			{
				$match: {
					division: division,
					active: true,
					outcome: { $nin: ['Reject', 'Z Code'] },
					tPeriod: 'DOA',
					dealer: dealer,
					buildDate: { $regex: oneMonthAgoDB },
				},
			},
		])

		const serialsMonth11 = claimsMonth11.map((s) => s.name)
		const serialsNODupesMonth11 = [...new Set(serialsMonth11)]

		const buildMonth11Numbers = await Retail.aggregate([
			{
				$match: {
					division: division,
					// soldDate : { $ne: '#' },
					buildDate: { $regex: oneMonthAgoDB },
				},
			},

			{
				$group: {
					_id: '$dealer',
					total_machines: {
						$sum: 1,
					},
				},
			},
		])

		if (dealer.replace(/\d+/g, '').indexOf('-') === 1) {
			name = dealer.replace(/\d+/g, '').substring(2)
		}

		for (let r of buildMonth11Numbers) {
			if (r._id.includes(name.split('-')[0])) {
				buildMonth11 += r.total_machines
			}
			if (name.includes('-JCB INC')) {
				if (r._id.includes('INC.')) {
					buildMonth11 += r.total_machines
				}
			}
		}
		let rftMonth11 = 0
		let percentMonth11 = 100

		nrftMonth11 = serialsNODupesMonth11.length
		if (nrftMonth11 >= buildMonth11) {
			nrftMonth11 = buildMonth11
			rftMonth11 = 0
			percentMonth11 = 0
		} else {
			rftMonth11 = buildMonth11 - nrftMonth11

			if (buildMonth11 > 0) {
				percentMonth11 = ((rftMonth11 / buildMonth11) * 100).toFixed(0)
			}
		}

		let maxArray = [
			+rftMonth1 + +nrftMonth1,
			+rftMonth2 + +nrftMonth2,
			+rftMonth3 + +nrftMonth3,
			+rftMonth4 + +nrftMonth4,
			+rftMonth5 + +nrftMonth5,
			+rftMonth6 + +nrftMonth6,
			+rftMonth7 + +nrftMonth7,
			+rftMonth8 + +nrftMonth8,
			+rftMonth9 + +nrftMonth9,
			+rftMonth10 + +nrftMonth10,
			+rftMonth11 + +nrftMonth11,
		]
		let graphRFTMax = (Math.max(...maxArray) / 100) * 130

		doaGraphArr.push([
			{
				name,
				buildMonth1,
				rftMonth1,
				nrftMonth1,
				percentMonth1,
				graphRFTMax,
			},
			{
				name,
				buildMonth2,
				rftMonth2,
				nrftMonth2,
				percentMonth2,
				graphRFTMax,
			},
			{
				name,
				buildMonth3,
				rftMonth3,
				nrftMonth3,
				percentMonth3,
				graphRFTMax,
			},
			{
				name,
				buildMonth4,
				rftMonth4,
				nrftMonth4,
				percentMonth4,
				graphRFTMax,
			},
			{
				name,
				buildMonth5,
				rftMonth5,
				nrftMonth5,
				percentMonth5,
				graphRFTMax,
			},
			{
				name,
				buildMonth6,
				rftMonth6,
				nrftMonth6,
				percentMonth6,
				graphRFTMax,
			},
			{
				name,
				buildMonth7,
				rftMonth7,
				nrftMonth7,
				percentMonth7,
				graphRFTMax,
			},
			{
				name,
				buildMonth8,
				rftMonth8,
				nrftMonth8,
				percentMonth8,
				graphRFTMax,
			},
			{
				name,
				buildMonth9,
				rftMonth9,
				nrftMonth9,
				percentMonth9,
				graphRFTMax,
			},
			{
				name,
				buildMonth10,
				rftMonth10,
				nrftMonth10,
				percentMonth10,
				graphRFTMax,
			},
			{
				name,
				buildMonth11,
				rftMonth11,
				nrftMonth11,
				percentMonth11,
				graphRFTMax,
			},
		])
	}

	// console.log(doaGraph9)
	// let graphs = [
	// 	doaGraph1,
	// 	doaGraph2,
	// 	doaGraph3,
	// 	doaGraph4,
	// 	doaGraph5,
	// 	doaGraph6,
	// 	doaGraph7,
	// 	doaGraph8,
	// 	doaGraph9,
	// 	doaGraph10,
	// ]

	let template = [
		{
			name: 'N/A',
			buildMonth1: 0,
			rftMonth1: 0,
			nrftMonth1: 0,
			percentMonth1: '0',
			graphRFTMax: 10,
		},
		{
			name: 'N/A',
			buildMonth2: 0,
			rftMonth2: 0,
			nrftMonth2: 0,
			percentMonth2: '0',
			graphRFTMax: 10,
		},
		{
			name: 'N/A',
			buildMonth3: 0,
			rftMonth3: 0,
			nrftMonth3: 0,
			percentMonth3: '0',
			graphRFTMax: 10,
		},
		{
			name: 'N/A',
			buildMonth4: 0,
			rftMonth4: 0,
			nrftMonth4: 0,
			percentMonth4: '0',
			graphRFTMax: 10,
		},
		{
			name: 'N/A',
			buildMonth5: 0,
			rftMonth5: 0,
			nrftMonth5: 0,
			percentMonth5: '0',
			graphRFTMax: 10,
		},
		{
			name: 'N/A',
			buildMonth6: 0,
			rftMonth6: 0,
			nrftMonth6: 0,
			percentMonth6: '0',
			graphRFTMax: 10,
		},
		{
			name: 'N/A',
			buildMonth7: 0,
			rftMonth7: 0,
			nrftMonth7: 0,
			percentMonth7: '0',
			graphRFTMax: 10,
		},
		{
			name: 'N/A',
			buildMonth8: 0,
			rftMonth8: 0,
			nrftMonth8: 0,
			percentMonth8: '0',
			graphRFTMax: 10,
		},
		{
			name: 'N/A',
			buildMonth9: 0,
			rftMonth9: 0,
			nrftMonth9: 0,
			percentMonth9: '0',
			graphRFTMax: 10,
		},
		{
			name: 'N/A',
			buildMonth10: 0,
			rftMonth10: 0,
			nrftMonth10: 0,
			percentMonth10: '0',
			graphRFTMax: 10,
		},
		{
			name: 'N/A',
			buildMonth11: 0,
			rftMonth11: 0,
			nrftMonth11: 0,
			percentMonth11: '0',
			graphRFTMax: 10,
		},
	]

	const doaGraph1 = doaGraphArr[0] || template
	const doaGraph2 = doaGraphArr[1] || template
	const doaGraph3 = doaGraphArr[2] || template
	const doaGraph4 = doaGraphArr[3] || template
	const doaGraph5 = doaGraphArr[4] || template
	const doaGraph6 = doaGraphArr[5] || template
	const doaGraph7 = doaGraphArr[6] || template
	const doaGraph8 = doaGraphArr[7] || template
	const doaGraph9 = doaGraphArr[8] || template
	const doaGraph10 = doaGraphArr[9] || template

	// console.log(doaGraph9)

	//Customer stuff

	const t0Claims = await Claim.aggregate([
		{
			$match: {
				division: division,
				active: true,
				outcome: { $nin: ['Reject', 'Z Code'] },
				tPeriod: 'T000',
				importedDate: { $gt: twelveMonthsAgoDBDate },
			},
		},
		{
			$match: {
				$or: [
					{ buildDate: { $regex: elevenMonthsAgoDB } },
					{ buildDate: { $regex: tenMonthsAgoDB } },
					{ buildDate: { $regex: nineMonthsAgoDB } },
					{ buildDate: { $regex: eightMonthsAgoDB } },
					{ buildDate: { $regex: sevenMonthsAgoDB } },
					{ buildDate: { $regex: sixMonthsAgoDB } },
					{ buildDate: { $regex: fiveMonthsAgoDB } },
					{ buildDate: { $regex: fourMonthsAgoDB } },
					{ buildDate: { $regex: threeMonthsAgoDB } },
					{ buildDate: { $regex: twoMonthsAgoDB } },
					{ buildDate: { $regex: oneMonthAgoDB } },
				],
			},
		},
	])

	t0SerialsHelp = t0Claims.map((c) => c.name)

	t0Serials = [...new Set(t0SerialsHelp)]

	const totalDataT0 = await Retail.aggregate([
		{
			$match: {
				division: division,
				// soldDate : { $ne: '#' },
				$or: [
					{ buildDate: { $regex: elevenMonthsAgoDB } },
					{ buildDate: { $regex: tenMonthsAgoDB } },
					{ buildDate: { $regex: nineMonthsAgoDB } },
					{ buildDate: { $regex: eightMonthsAgoDB } },
					{ buildDate: { $regex: sevenMonthsAgoDB } },
					{ buildDate: { $regex: sixMonthsAgoDB } },
					{ buildDate: { $regex: fiveMonthsAgoDB } },
					{ buildDate: { $regex: fourMonthsAgoDB } },
					{ buildDate: { $regex: threeMonthsAgoDB } },
					{ buildDate: { $regex: twoMonthsAgoDB } },
					{ buildDate: { $regex: oneMonthAgoDB } },
				],
			},
		},
		{
			$project: {
				_id: {
					year: {
						$substrCP: ['$buildDate', 6, 4],
					},
					month: {
						$substrCP: ['$buildDate', 3, 2],
					},
				},
				//status : 1,
			},
		},
		{
			$group: {
				_id: '$_id',
				total_machines: {
					$sum: 1,
				},
			},
		},
		{
			$addFields: {
				nrft: 0,
				rft: 0,
				percent: 0,
				// max     : 0,
			},
		},
		{ $sort: { _id: 1 } },
	])

	const totaBuildLast6MonthsT0 = await Retail.aggregate([
		{
			$match: {
				division: division,
				// soldDate : { $ne: '#' },
				$or: [
					{ buildDate: { $regex: sixMonthsAgoDB } },
					{ buildDate: { $regex: fiveMonthsAgoDB } },
					{ buildDate: { $regex: fourMonthsAgoDB } },
					{ buildDate: { $regex: threeMonthsAgoDB } },
					{ buildDate: { $regex: twoMonthsAgoDB } },
					{ buildDate: { $regex: oneMonthAgoDB } },
				],
				customer: { $nin: [null, '', '#'] },
			},
		},

		{
			$group: {
				_id: '$customer',
				total_machines: {
					$sum: 1,
				},
			},
		},

		{ $sort: { total_machines: -1 } },
	])

	const nrftDataT0 = await Retail.aggregate([
		{
			$match: {
				division: division,
				// soldDate     : { $ne: '#' },
				serialNumber: { $in: t0Serials },
				$or: [
					{ buildDate: { $regex: elevenMonthsAgoDB } },
					{ buildDate: { $regex: tenMonthsAgoDB } },
					{ buildDate: { $regex: nineMonthsAgoDB } },
					{ buildDate: { $regex: eightMonthsAgoDB } },
					{ buildDate: { $regex: sevenMonthsAgoDB } },
					{ buildDate: { $regex: sixMonthsAgoDB } },
					{ buildDate: { $regex: fiveMonthsAgoDB } },
					{ buildDate: { $regex: fourMonthsAgoDB } },
					{ buildDate: { $regex: threeMonthsAgoDB } },
					{ buildDate: { $regex: twoMonthsAgoDB } },
					{ buildDate: { $regex: oneMonthAgoDB } },
				],
			},
		},
		{
			$project: {
				_id: {
					year: {
						$substrCP: ['$buildDate', 6, 4],
					},
					month: {
						$substrCP: ['$buildDate', 3, 2],
					},
				},
				//status : 1,
			},
		},
		{
			$group: {
				_id: '$_id',
				count: {
					$sum: 1,
				},
			},
		},
		{ $sort: { _id: 1 } },
	])

	for (let x of totalDataT0) {
		for (let y of nrftDataT0) {
			if (x._id.year === y._id.year && x._id.month === y._id.month) {
				x.nrft = y.count
			}
		}
	}

	for (let j of totalDataT0) {
		j.rft = j.total_machines - j.nrft
		j.percent = 100 - ((j.nrft / j.total_machines) * 100).toFixed(0)
	}

	// stuff for table customer
	const t0Claimslast6MonthsForNumber = await Claim.aggregate([
		{
			$match: {
				division: division,
				active: true,
				outcome: { $nin: ['Reject', 'Z Code'] },
				tPeriod: 'T000',
				// importedDate : { $gt: sevenMonthsAgoDBDate },
			},
		},
		{
			$match: {
				$or: [
					{ buildDate: { $regex: sixMonthsAgoDB } },
					{ buildDate: { $regex: fiveMonthsAgoDB } },
					{ buildDate: { $regex: fourMonthsAgoDB } },
					{ buildDate: { $regex: threeMonthsAgoDB } },
					{ buildDate: { $regex: twoMonthsAgoDB } },
					{ buildDate: { $regex: oneMonthAgoDB } },
				],
			},
		},
	])

	const t0Claimslast6MonthsByDealer = await Claim.aggregate([
		{
			$match: {
				division: division,
				active: true,
				outcome: { $nin: ['Reject', 'Z Code'] },
				tPeriod: 'T000',
				importedDate: { $gt: sevenMonthsAgoDBDate },
				customer: { $nin: [null, '', '#'] },
			},
		},
		{
			$match: {
				$or: [
					{ buildDate: { $regex: sixMonthsAgoDB } },
					{ buildDate: { $regex: fiveMonthsAgoDB } },
					{ buildDate: { $regex: fourMonthsAgoDB } },
					{ buildDate: { $regex: threeMonthsAgoDB } },
					{ buildDate: { $regex: twoMonthsAgoDB } },
					{ buildDate: { $regex: oneMonthAgoDB } },
				],
			},
		},
		{
			$group: {
				_id: '$customer',
				count: { $sum: 1 },
				countries: { $push: '$country' },
				nrft_machines: { $addToSet: '$name' },
			},
		},
		{
			$addFields: {
				total_machines: 0,
				rft_machines: 0,
				nrft_count: 0,
				percent: 0,
				rft_percent: 0,
				bu_percent: 0,
				country: '',
				bu_total: t0Claimslast6MonthsForNumber.length,
				bu_percent: 0,
			},
		},
		{ $sort: { count: -1, _id: 1 } },
		{ $limit: 10 },
	])

	const helperDealerArrayT0 = t0Claimslast6MonthsByDealer.map((d) => d._id)

	for (let x of t0Claimslast6MonthsByDealer) {
		// if (x._id.replace(/\d+/g, '').indexOf('-') === 1) {
		// 	x._id = x._id.replace(/\d+/g, '').substring(2)
		// }

		for (let r of totaBuildLast6MonthsT0) {
			if (r._id.includes(x._id.split('-')[0])) {
				x.total_machines += r.total_machines
			}
			// if (x._id.includes('-JCB INC')) {
			// 	if (r._id.includes('INC.')) {
			// 		x.total_machines += r.total_machines
			// 	}
			// }
		}

		x.nrft_count = x.nrft_machines.length

		x.rft_machines = x.total_machines - x.nrft_count
		if (x.total_machines > 0) {
			x.rft_percent = ((x.rft_machines / x.total_machines) * 100).toFixed(0)
		}

		x.bu_percent = ((x.count / x.bu_total) * 100).toFixed(1)

		x.country = getMostFrequent(x.countries)
	}

	const t0GraphArr = []

	for (let customer of helperDealerArrayT0) {
		//month 1
		let name = customer
		let nrftMonth1 = 0
		let buildMonth1 = 0

		const claimsMonth1 = await Claim.aggregate([
			{
				$match: {
					division: division,
					active: true,
					outcome: { $nin: ['Reject', 'Z Code'] },
					tPeriod: 'T000',
					customer: customer,
					buildDate: { $regex: elevenMonthsAgoDB },
				},
			},
		])

		const serialsMonth1 = claimsMonth1.map((s) => s.name)
		const serialsNODupesMonth1 = [...new Set(serialsMonth1)]

		const buildMonth1Numbers = await Retail.aggregate([
			{
				$match: {
					division: division,
					// soldDate : { $ne: '#' },
					buildDate: { $regex: elevenMonthsAgoDB },
				},
			},

			{
				$group: {
					_id: '$customer',
					total_machines: {
						$sum: 1,
					},
				},
			},
		])

		for (let r of buildMonth1Numbers) {
			if (r._id.includes(name.split('-')[0])) {
				buildMonth1 += r.total_machines
			}
		}
		let rftMonth1 = 0
		let percentMonth1 = 100

		nrftMonth1 = serialsNODupesMonth1.length
		if (nrftMonth1 >= buildMonth1) {
			nrftMonth1 = buildMonth1
			rftMonth1 = 0
			percentMonth1 = 0
		} else {
			rftMonth1 = buildMonth1 - nrftMonth1

			if (buildMonth1 > 0) {
				percentMonth1 = ((rftMonth1 / buildMonth1) * 100).toFixed(0)
			}
		}

		//month 2

		let nrftMonth2 = 0
		let buildMonth2 = 0

		const claimsMonth2 = await Claim.aggregate([
			{
				$match: {
					division: division,
					active: true,
					outcome: { $nin: ['Reject', 'Z Code'] },
					tPeriod: 'T000',
					customer: customer,
					buildDate: { $regex: tenMonthsAgoDB },
				},
			},
		])

		const serialsMonth2 = claimsMonth2.map((s) => s.name)
		const serialsNODupesMonth2 = [...new Set(serialsMonth2)]

		const buildMonth2Numbers = await Retail.aggregate([
			{
				$match: {
					division: division,
					// soldDate : { $ne: '#' },
					buildDate: { $regex: tenMonthsAgoDB },
				},
			},

			{
				$group: {
					_id: '$customer',
					total_machines: {
						$sum: 1,
					},
				},
			},
		])

		for (let r of buildMonth2Numbers) {
			if (r._id.includes(name.split('-')[0])) {
				buildMonth2 += r.total_machines
			}
		}

		let rftMonth2 = 0
		let percentMonth2 = 100

		nrftMonth2 = serialsNODupesMonth2.length
		if (nrftMonth2 >= buildMonth2) {
			nrftMonth2 = buildMonth2
			rftMonth2 = 0
			percentMonth2 = 0
		} else {
			rftMonth2 = buildMonth2 - nrftMonth2

			if (buildMonth2 > 0) {
				percentMonth2 = ((rftMonth2 / buildMonth2) * 100).toFixed(0)
			}
		}
		// month 3
		let nrftMonth3 = 0
		let buildMonth3 = 0

		const claimsMonth3 = await Claim.aggregate([
			{
				$match: {
					division: division,
					active: true,
					outcome: { $nin: ['Reject', 'Z Code'] },
					tPeriod: 'T000',
					customer: customer,
					buildDate: { $regex: nineMonthsAgoDB },
				},
			},
		])

		const serialsMonth3 = claimsMonth3.map((s) => s.name)
		const serialsNODupesMonth3 = [...new Set(serialsMonth3)]

		const buildMonth3Numbers = await Retail.aggregate([
			{
				$match: {
					division: division,
					// soldDate : { $ne: '#' },
					buildDate: { $regex: nineMonthsAgoDB },
				},
			},

			{
				$group: {
					_id: '$customer',
					total_machines: {
						$sum: 1,
					},
				},
			},
		])

		for (let r of buildMonth3Numbers) {
			if (r._id.includes(name.split('-')[0])) {
				buildMonth3 += r.total_machines
			}
		}

		let rftMonth3 = 0
		let percentMonth3 = 100

		nrftMonth3 = serialsNODupesMonth3.length
		if (nrftMonth3 >= buildMonth3) {
			nrftMonth3 = buildMonth3
			rftMonth3 = 0
			percentMonth3 = 0
		} else {
			rftMonth3 = buildMonth3 - nrftMonth3

			if (buildMonth3 > 0) {
				percentMonth3 = ((rftMonth3 / buildMonth3) * 100).toFixed(0)
			}
		}

		//month 4
		let nrftMonth4 = 0
		let buildMonth4 = 0

		const claimsMonth4 = await Claim.aggregate([
			{
				$match: {
					division: division,
					active: true,
					outcome: { $nin: ['Reject', 'Z Code'] },
					tPeriod: 'T000',
					customer: customer,
					buildDate: { $regex: eightMonthsAgoDB },
				},
			},
		])

		const serialsMonth4 = claimsMonth4.map((s) => s.name)
		const serialsNODupesMonth4 = [...new Set(serialsMonth4)]

		const buildMonth4Numbers = await Retail.aggregate([
			{
				$match: {
					division: division,
					// soldDate : { $ne: '#' },
					buildDate: { $regex: eightMonthsAgoDB },
				},
			},

			{
				$group: {
					_id: '$customer',
					total_machines: {
						$sum: 1,
					},
				},
			},
		])

		for (let r of buildMonth4Numbers) {
			if (r._id.includes(name.split('-')[0])) {
				buildMonth4 += r.total_machines
			}
		}

		let rftMonth4 = 0
		let percentMonth4 = 100

		nrftMonth4 = serialsNODupesMonth4.length
		if (nrftMonth4 >= buildMonth4) {
			nrftMonth4 = buildMonth4
			rftMonth4 = 0
			percentMonth4 = 0
		} else {
			rftMonth4 = buildMonth4 - nrftMonth4

			if (buildMonth4 > 0) {
				percentMonth4 = ((rftMonth4 / buildMonth4) * 100).toFixed(0)
			}
		}

		//month 5
		let nrftMonth5 = 0
		let buildMonth5 = 0

		const claimsMonth5 = await Claim.aggregate([
			{
				$match: {
					division: division,
					active: true,
					outcome: { $nin: ['Reject', 'Z Code'] },
					tPeriod: 'T000',
					customer: customer,
					buildDate: { $regex: sevenMonthsAgoDB },
				},
			},
		])

		const serialsMonth5 = claimsMonth5.map((s) => s.name)
		const serialsNODupesMonth5 = [...new Set(serialsMonth5)]

		const buildMonth5Numbers = await Retail.aggregate([
			{
				$match: {
					division: division,
					// soldDate : { $ne: '#' },
					buildDate: { $regex: sevenMonthsAgoDB },
				},
			},

			{
				$group: {
					_id: '$customer',
					total_machines: {
						$sum: 1,
					},
				},
			},
		])

		for (let r of buildMonth5Numbers) {
			if (r._id.includes(name.split('-')[0])) {
				buildMonth5 += r.total_machines
			}
		}

		let rftMonth5 = 0
		let percentMonth5 = 100

		nrftMonth5 = serialsNODupesMonth5.length
		if (nrftMonth5 >= buildMonth5) {
			nrftMonth5 = buildMonth5
			rftMonth5 = 0
			percentMonth5 = 0
		} else {
			rftMonth5 = buildMonth5 - nrftMonth5

			if (buildMonth5 > 0) {
				percentMonth5 = ((rftMonth5 / buildMonth5) * 100).toFixed(0)
			}
		}

		//month 6
		let nrftMonth6 = 0
		let buildMonth6 = 0

		const claimsMonth6 = await Claim.aggregate([
			{
				$match: {
					division: division,
					active: true,
					outcome: { $nin: ['Reject', 'Z Code'] },
					tPeriod: 'T000',
					customer: customer,
					buildDate: { $regex: sixMonthsAgoDB },
				},
			},
		])

		const serialsMonth6 = claimsMonth6.map((s) => s.name)
		const serialsNODupesMonth6 = [...new Set(serialsMonth6)]

		const buildMonth6Numbers = await Retail.aggregate([
			{
				$match: {
					division: division,
					// soldDate : { $ne: '#' },
					buildDate: { $regex: sixMonthsAgoDB },
				},
			},

			{
				$group: {
					_id: '$customer',
					total_machines: {
						$sum: 1,
					},
				},
			},
		])

		for (let r of buildMonth6Numbers) {
			if (r._id.includes(name.split('-')[0])) {
				buildMonth6 += r.total_machines
			}
		}

		let rftMonth6 = 0
		let percentMonth6 = 100

		nrftMonth6 = serialsNODupesMonth6.length
		if (nrftMonth6 >= buildMonth6) {
			nrftMonth6 = buildMonth6
			rftMonth6 = 0
			percentMonth6 = 0
		} else {
			rftMonth6 = buildMonth6 - nrftMonth6

			if (buildMonth6 > 0) {
				percentMonth6 = ((rftMonth6 / buildMonth6) * 100).toFixed(0)
			}
		}
		//month 7
		let nrftMonth7 = 0
		let buildMonth7 = 0

		const claimsMonth7 = await Claim.aggregate([
			{
				$match: {
					division: division,
					active: true,
					outcome: { $nin: ['Reject', 'Z Code'] },
					tPeriod: 'T000',
					customer: customer,
					buildDate: { $regex: fiveMonthsAgoDB },
				},
			},
		])

		const serialsMonth7 = claimsMonth7.map((s) => s.name)
		const serialsNODupesMonth7 = [...new Set(serialsMonth7)]

		const buildMonth7Numbers = await Retail.aggregate([
			{
				$match: {
					division: division,
					// soldDate : { $ne: '#' },
					buildDate: { $regex: fiveMonthsAgoDB },
				},
			},

			{
				$group: {
					_id: '$customer',
					total_machines: {
						$sum: 1,
					},
				},
			},
		])

		for (let r of buildMonth7Numbers) {
			if (r._id.includes(name.split('-')[0])) {
				buildMonth7 += r.total_machines
			}
		}

		let rftMonth7 = 0
		let percentMonth7 = 100

		nrftMonth7 = serialsNODupesMonth7.length
		if (nrftMonth7 >= buildMonth7) {
			nrftMonth7 = buildMonth7
			rftMonth7 = 0
			percentMonth7 = 0
		} else {
			rftMonth7 = buildMonth7 - nrftMonth7

			if (buildMonth7 > 0) {
				percentMonth7 = ((rftMonth7 / buildMonth7) * 100).toFixed(0)
			}
		}

		//month 8
		let nrftMonth8 = 0
		let buildMonth8 = 0

		const claimsMonth8 = await Claim.aggregate([
			{
				$match: {
					division: division,
					active: true,
					outcome: { $nin: ['Reject', 'Z Code'] },
					tPeriod: 'T000',
					customer: customer,
					buildDate: { $regex: fourMonthsAgoDB },
				},
			},
		])

		const serialsMonth8 = claimsMonth8.map((s) => s.name)
		const serialsNODupesMonth8 = [...new Set(serialsMonth8)]

		const buildMonth8Numbers = await Retail.aggregate([
			{
				$match: {
					division: division,
					// soldDate : { $ne: '#' },
					buildDate: { $regex: fourMonthsAgoDB },
				},
			},

			{
				$group: {
					_id: '$customer',
					total_machines: {
						$sum: 1,
					},
				},
			},
		])

		for (let r of buildMonth8Numbers) {
			if (r._id.includes(name.split('-')[0])) {
				buildMonth8 += r.total_machines
			}
		}

		let rftMonth8 = 0
		let percentMonth8 = 100

		nrftMonth8 = serialsNODupesMonth8.length
		if (nrftMonth8 >= buildMonth8) {
			nrftMonth8 = buildMonth8
			rftMonth8 = 0
			percentMonth8 = 0
		} else {
			rftMonth8 = buildMonth8 - nrftMonth8

			if (buildMonth8 > 0) {
				percentMonth8 = ((rftMonth8 / buildMonth8) * 100).toFixed(0)
			}
		}

		//month 9
		let nrftMonth9 = 0
		let buildMonth9 = 0

		const claimsMonth9 = await Claim.aggregate([
			{
				$match: {
					division: division,
					active: true,
					outcome: { $nin: ['Reject', 'Z Code'] },
					tPeriod: 'T000',
					customer: customer,
					buildDate: { $regex: threeMonthsAgoDB },
				},
			},
		])

		const serialsMonth9 = claimsMonth9.map((s) => s.name)
		const serialsNODupesMonth9 = [...new Set(serialsMonth9)]

		const buildMonth9Numbers = await Retail.aggregate([
			{
				$match: {
					division: division,
					// soldDate : { $ne: '#' },
					buildDate: { $regex: threeMonthsAgoDB },
				},
			},

			{
				$group: {
					_id: '$customer',
					total_machines: {
						$sum: 1,
					},
				},
			},
		])

		// console.log(buildMonth9Numbers)

		for (let r of buildMonth9Numbers) {
			if (r._id.includes(name.split('-')[0])) {
				buildMonth9 += r.total_machines
			}
		}

		let rftMonth9 = 0
		let percentMonth9 = 100

		nrftMonth9 = serialsNODupesMonth9.length
		if (nrftMonth9 >= buildMonth9) {
			nrftMonth9 = buildMonth9
			rftMonth9 = 0
			percentMonth9 = 0
		} else {
			rftMonth9 = buildMonth9 - nrftMonth9

			if (buildMonth9 > 0) {
				percentMonth9 = ((rftMonth9 / buildMonth9) * 100).toFixed(0)
			}
		}

		//month 10
		let nrftMonth10 = 0
		let buildMonth10 = 0

		const claimsMonth10 = await Claim.aggregate([
			{
				$match: {
					division: division,
					active: true,
					outcome: { $nin: ['Reject', 'Z Code'] },
					tPeriod: 'T000',
					customer: customer,
					buildDate: { $regex: twoMonthsAgoDB },
				},
			},
		])

		const serialsMonth10 = claimsMonth10.map((s) => s.name)
		const serialsNODupesMonth10 = [...new Set(serialsMonth10)]

		const buildMonth10Numbers = await Retail.aggregate([
			{
				$match: {
					division: division,
					// soldDate : { $ne: '#' },
					buildDate: { $regex: twoMonthsAgoDB },
				},
			},

			{
				$group: {
					_id: '$customer',
					total_machines: {
						$sum: 1,
					},
				},
			},
		])

		for (let r of buildMonth10Numbers) {
			if (r._id.includes(name.split('-')[0])) {
				buildMonth10 += r.total_machines
			}
		}

		let rftMonth10 = 0
		let percentMonth10 = 100

		nrftMonth10 = serialsNODupesMonth10.length
		if (nrftMonth10 >= buildMonth10) {
			nrftMonth10 = buildMonth10
			rftMonth10 = 0
			percentMonth10 = 0
		} else {
			rftMonth10 = buildMonth10 - nrftMonth10

			if (buildMonth10 > 0) {
				percentMonth10 = ((rftMonth10 / buildMonth10) * 100).toFixed(0)
			}
		}

		//month 11
		let nrftMonth11 = 0
		let buildMonth11 = 0

		const claimsMonth11 = await Claim.aggregate([
			{
				$match: {
					division: division,
					active: true,
					outcome: { $nin: ['Reject', 'Z Code'] },
					tPeriod: 'T000',
					customer: customer,
					buildDate: { $regex: oneMonthAgoDB },
				},
			},
		])

		const serialsMonth11 = claimsMonth11.map((s) => s.name)
		const serialsNODupesMonth11 = [...new Set(serialsMonth11)]

		const buildMonth11Numbers = await Retail.aggregate([
			{
				$match: {
					division: division,
					// soldDate : { $ne: '#' },
					buildDate: { $regex: oneMonthAgoDB },
				},
			},

			{
				$group: {
					_id: '$customer',
					total_machines: {
						$sum: 1,
					},
				},
			},
		])

		for (let r of buildMonth11Numbers) {
			if (r._id.includes(name.split('-')[0])) {
				buildMonth11 += r.total_machines
			}
		}
		let rftMonth11 = 0
		let percentMonth11 = 100

		nrftMonth11 = serialsNODupesMonth11.length
		if (nrftMonth11 >= buildMonth11) {
			nrftMonth11 = buildMonth11
			rftMonth11 = 0
			percentMonth11 = 0
		} else {
			rftMonth11 = buildMonth11 - nrftMonth11

			if (buildMonth11 > 0) {
				percentMonth11 = ((rftMonth11 / buildMonth11) * 100).toFixed(0)
			}
		}

		let maxArray = [
			+rftMonth1 + +nrftMonth1,
			+rftMonth2 + +nrftMonth2,
			+rftMonth3 + +nrftMonth3,
			+rftMonth4 + +nrftMonth4,
			+rftMonth5 + +nrftMonth5,
			+rftMonth6 + +nrftMonth6,
			+rftMonth7 + +nrftMonth7,
			+rftMonth8 + +nrftMonth8,
			+rftMonth9 + +nrftMonth9,
			+rftMonth10 + +nrftMonth10,
			+rftMonth11 + +nrftMonth11,
		]
		let graphRFTMax = (Math.max(...maxArray) / 100) * 130

		t0GraphArr.push([
			{
				name,
				buildMonth1,
				rftMonth1,
				nrftMonth1,
				percentMonth1,
				graphRFTMax,
			},
			{
				name,
				buildMonth2,
				rftMonth2,
				nrftMonth2,
				percentMonth2,
				graphRFTMax,
			},
			{
				name,
				buildMonth3,
				rftMonth3,
				nrftMonth3,
				percentMonth3,
				graphRFTMax,
			},
			{
				name,
				buildMonth4,
				rftMonth4,
				nrftMonth4,
				percentMonth4,
				graphRFTMax,
			},
			{
				name,
				buildMonth5,
				rftMonth5,
				nrftMonth5,
				percentMonth5,
				graphRFTMax,
			},
			{
				name,
				buildMonth6,
				rftMonth6,
				nrftMonth6,
				percentMonth6,
				graphRFTMax,
			},
			{
				name,
				buildMonth7,
				rftMonth7,
				nrftMonth7,
				percentMonth7,
				graphRFTMax,
			},
			{
				name,
				buildMonth8,
				rftMonth8,
				nrftMonth8,
				percentMonth8,
				graphRFTMax,
			},
			{
				name,
				buildMonth9,
				rftMonth9,
				nrftMonth9,
				percentMonth9,
				graphRFTMax,
			},
			{
				name,
				buildMonth10,
				rftMonth10,
				nrftMonth10,
				percentMonth10,
				graphRFTMax,
			},
			{
				name,
				buildMonth11,
				rftMonth11,
				nrftMonth11,
				percentMonth11,
				graphRFTMax,
			},
		])
	}

	const t0Graph1 = t0GraphArr[0] || template
	const t0Graph2 = t0GraphArr[1] || template
	const t0Graph3 = t0GraphArr[2] || template
	const t0Graph4 = t0GraphArr[3] || template
	const t0Graph5 = t0GraphArr[4] || template
	const t0Graph6 = t0GraphArr[5] || template
	const t0Graph7 = t0GraphArr[6] || template
	const t0Graph8 = t0GraphArr[7] || template
	const t0Graph9 = t0GraphArr[8] || template
	const t0Graph10 = t0GraphArr[9] || template

	while (doaGraphArr.length < 10) {
		doaGraphArr.push(template)
	}
	while (t0GraphArr.length < 10) {
		t0GraphArr.push(template)
	}

	res.render('group/topdealers', {
		division,
		toatalDates,
		shortDates,
		totalData,
		doaClaimslast6MonthsByDealer,
		dealerMax,
		doaGraph1,
		doaGraph2,
		doaGraph3,
		doaGraph4,
		doaGraph5,
		doaGraph6,
		doaGraph7,
		doaGraph8,
		doaGraph9,
		doaGraph10,
		helperDealerArray,

		// customer
		totalDataT0,
		t0Claimslast6MonthsByDealer,
		t0Graph1,
		t0Graph2,
		t0Graph3,
		t0Graph4,
		t0Graph5,
		t0Graph6,
		t0Graph7,
		t0Graph8,
		t0Graph9,
		t0Graph10,
	})
}

module.exports.groupTop50 = async (req, res) => {
	function mode(arr) {
		const counts = {}
		let maxCount = 0
		let maxKey
		// Count how many times each object (or really its string representation)
		// appears, and keep track of the highest count we've seen.
		for (let i = 0; i < arr.length; i++) {
			const key = arr[i]
			const count = (counts[key] = (counts[key] || 0) + 1)
			if (count > maxCount) {
				maxCount = count
				maxKey = key
			}
		}
		// Return (one of) the highest keys we've seen, or undefined.
		return maxKey
	}
	// get the build months
	const thisMonth = moment().subtract(0, 'months').format('MM/YYYY')
	const oneMonthAgo = moment().subtract(1, 'months').format('MM/YYYY')
	const twoMonthsAgo = moment().subtract(2, 'months').format('MM/YYYY')
	const threeMonthsAgo = moment().subtract(3, 'months').format('MM/YYYY')
	const fourMonthsAgo = moment().subtract(4, 'months').format('MM/YYYY')
	const fiveMonthsAgo = moment().subtract(5, 'months').format('MM/YYYY')
	const sixMonthsAgo = moment().subtract(6, 'months').format('MM/YYYY')
	const sevenMonthsAgo = moment().subtract(7, 'months').format('MM/YYYY')
	const eightMonthsAgo = moment().subtract(8, 'months').format('MM/YYYY')
	const nineMonthsAgo = moment().subtract(9, 'months').format('MM/YYYY')
	const tenMonthsAgo = moment().subtract(10, 'months').format('MM/YYYY')

	let divisions = [
		{
			name: 'BHL',
			longName: 'Backhoe Loader',
		},
		{
			name: 'CP',
			longName: 'Compact Products',
		},
		{
			name: 'EM',
			longName: 'Earthmovers',
		},
		{
			name: 'HP',
			longName: 'Heavy Products',
		},
		{
			name: 'LDL',
			longName: 'Loadall',
		},
		{
			name: 'LP',
			longName: 'Landpower',
		},
		{
			name: 'SD',
			longName: 'Site Dumper',
		},
	]

	let dataArrDoa = []
	let dataArrT3 = []

	const theBuildMonthsDoa = [
		{ buildDate: { $regex: fiveMonthsAgo } },
		{ buildDate: { $regex: fourMonthsAgo } },
		{ buildDate: { $regex: threeMonthsAgo } },
		{ buildDate: { $regex: twoMonthsAgo } },
		{ buildDate: { $regex: oneMonthAgo } },
		{ buildDate: { $regex: thisMonth } },
	]

	const theBuildMonthsT3 = [
		{ buildDate: { $regex: tenMonthsAgo } },
		{ buildDate: { $regex: nineMonthsAgo } },
		{ buildDate: { $regex: eightMonthsAgo } },
		{ buildDate: { $regex: sevenMonthsAgo } },
		{ buildDate: { $regex: sixMonthsAgo } },
		{ buildDate: { $regex: fiveMonthsAgo } },
		{ buildDate: { $regex: fourMonthsAgo } },
		{ buildDate: { $regex: threeMonthsAgo } },
		{ buildDate: { $regex: twoMonthsAgo } },
		{ buildDate: { $regex: oneMonthAgo } },
		{ buildDate: { $regex: thisMonth } },
	]

	for (let division of divisions) {
		let allCountDoa = await Claim.countDocuments({
			division: division.name,
			active: true,
			tPeriod: 'DOA',
			outcome: {
				$nin: ['Reject', 'Z Code'],
			},
			$or: theBuildMonthsDoa,
		})

		let optionsDoa = [
			{
				$match: {
					division: division.name,
					// rag: { $ne: null },
					active: true,
					tPeriod: 'DOA',
					outcome: {
						$nin: ['Reject', 'Z Code'],
					},
					$or: theBuildMonthsDoa,
				},
			},

			{
				$group: {
					_id: '$failedPart',
					concernArr: { $addToSet: '$concern' },
					ragArr: { $addToSet: '$rag' },
					claimArr: { $addToSet: '$claimNumber' },
					top50OpenDateArr: { $addToSet: '$top50OpenedDate' },
					top50ContainedDateArr: { $addToSet: '$top50ContainedDate' },
					top50ClosedDateArr: { $addToSet: '$top50ClosedDate' },
					closureDateArr: { $addToSet: '$closureDate' },
					asdJoshArr: { $addToSet: '$asdJosh' },
					actionArr: { $addToSet: '$action' },
					championArr: { $addToSet: '$champion' },
					sccJoshArr: { $addToSet: '$sccJosh' },
					divisionArr: { $addToSet: '$division' },
					areaArr: { $addToSet: '$area' },
					linkedArr: { $addToSet: '$top50Linked' },
					top50LinkedToArr: { $addToSet: '$top50LinkedTo' },
					buildDateArr: {
						$push: {
							$substr: ['$buildDate', 3, 10],
						},
					},
					importedDateArr: {
						$push: {
							importedDate: '$importedDate',
						},
					},

					count: { $sum: 1 },
				},
			},
			{
				$addFields: {
					status: '',
					asd: '',
					color: 'grey',
					percentageCont: 0,
					fourCArr: [],
					failedCutIn: false,
					daysOpen: '--',
					daysContained: '--',
					daysRemaining: '--',
					daysRemainingColor: '',
					fourCIssued: 'No',
					cabsCount: 0,
					psCount: 0,
					axlesCount: 0,
					hbuCount: 0,
					fourCLinked: false,
					linkedTo: '',
					linkedFourC: '',
					inOtherTop50: false,
					claimInLast48Hours: '',
					trend: 'same',
				},
			},
			{ $sort: { count: -1, ragArr: -1, _id: 1 } },
			{ $limit: 50 },
			// { $sort: { count: -1, _id: 1 } },
			// { $sort: { count: -1, ragArr: -1, _id: 1 } },
		]

		let parts = await Claim.aggregate(optionsDoa)

		let top50Count = 0
		let openCount = 0
		let containedCount = 0
		let closedCount = 0
		let assemblyCount = 0
		let supplierCount = 0
		let designCount = 0
		let failedPostCutIn = 0

		for (let p of parts) {
			top50Count += p.count

			p.fourCLinked = p.linkedArr[0]
			p.asd = p.asdJoshArr[0]

			if (p.fourCLinked && p.top50LinkedToArr) {
				p.top50LinkedToArr.sort()

				p.linkedTo = p.top50LinkedToArr[0]
				p.linkedFourC = await Claim.findById(p.linkedTo)

				if (p.linkedFourC && p.linkedFourC.status) {
					p.status = await p.linkedFourC.status
				}

				p.closureDate = ''

				if (p.status === 'Open') {
					p.action = p.actionArr[0]
					if (p.linkedFourC.reOpenedAt) {
						p.daysOpen = Math.round((new Date() - p.linkedFourC.reOpenedAt) / (1000 * 60 * 60 * 24))
					} else {
						p.daysOpen = Math.round((new Date() - p.linkedFourC.vettedAt) / (1000 * 60 * 60 * 24))
					}
				}

				if (p.status === 'Contained') {
					p.action = p.linkedFourC.containNotes
					if (p.linkedFourC.containedAt) {
						p.closureDate = moment(p.linkedFourC.containedAt).format('MMM-YY')
						if (p.linkedFourC.reOpenedAt) {
							p.daysOpen = Math.round((p.linkedFourC.containedAt - p.linkedFourC.reOpenedAt) / (1000 * 60 * 60 * 24))
						} else {
							p.daysOpen = Math.round((p.linkedFourC.containedAt - p.linkedFourC.vettedAt) / (1000 * 60 * 60 * 24))
						}

						p.daysContained = Math.round((new Date() - p.linkedFourC.containedAt) / (1000 * 60 * 60 * 24))
					} else {
						p.closureDate = ''
					}
				}
				if (p.status === 'Closed') {
					p.action = p.linkedFourC.counterWhatNotes
					if (p.linkedFourC.closedAt) {
						p.closureDate = moment(p.linkedFourC.closedAt).format('MMM-YY')
						if (p.linkedFourC.reOpenedAt) {
							p.daysOpen = Math.round((p.linkedFourC.containedAt - p.linkedFourC.reOpenedAt) / (1000 * 60 * 60 * 24))
						} else {
							p.daysOpen = Math.round((p.linkedFourC.containedAt - p.linkedFourC.vettedAt) / (1000 * 60 * 60 * 24))
						}
						p.daysContained = Math.round((p.linkedFourC.closedAt - p.linkedFourC.containedAt) / (1000 * 60 * 60 * 24))
					} else {
						p.closureDate = ''
					}
				}

				// p.closureDate = p.closureDateArr[0]
			} else {
				// if (!p.status) console.log(p)
				p.status = p.ragArr[0]
				p.asd = p.asdJoshArr[0]
				p.action = p.actionArr[0]

				p.closureDate = ''

				if (p.status === 'Open') {
					if (p.top50OpenDateArr.length > 0 && p.top50OpenDateArr[0] != null) {
						p.daysOpen = Math.round((new Date() - p.top50OpenDateArr[0]) / (1000 * 60 * 60 * 24))
					}
				}

				if (p.status === 'Contained') {
					if (
						p.top50ContainedDateArr.length > 0 &&
						p.top50ContainedDateArr[0] != null &&
						p.top50OpenDateArr.length > 0 &&
						p.top50OpenDateArr[0] != null
					) {
						p.closureDate = moment(p.top50ContainedDateArr[0]).format('MMM-YY')
						p.daysOpen = Math.round((p.top50ContainedDateArr[0] - p.top50OpenDateArr[0]) / (1000 * 60 * 60 * 24))
						p.daysContained = Math.round((new Date() - p.top50ContainedDateArr[0]) / (1000 * 60 * 60 * 24))
					} else {
						p.closureDate = ''
					}
				}
				if (p.status === 'Closed') {
					if (
						p.top50ClosedDateArr.length > 0 &&
						p.top50ClosedDateArr[0] != null &&
						p.top50ContainedDateArr.length > 0 &&
						p.top50ContainedDateArr[0] != null &&
						p.top50OpenDateArr.length > 0 &&
						p.top50OpenDateArr[0] != null
					) {
						p.closureDate = moment(p.top50ClosedDateArr[0]).format('MMM-YY')
						p.daysOpen = Math.round((p.top50ContainedDateArr[0] - p.top50OpenDateArr[0]) / (1000 * 60 * 60 * 24))
						p.daysContained = Math.round((p.top50ClosedDateArr[0] - p.top50ContainedDateArr[0]) / (1000 * 60 * 60 * 24))
					} else {
						p.closureDate = ''
					}
				}

				// p.closureDate = p.closureDateArr[0]
			}
			p.concern = p.concernArr[0]
			p.champion = p.championArr[0]

			p.percentageCont = ((p.count / allCountDoa) * 100).toFixed(2)

			if (p.status === 'Open') {
				p.color = 'red'
				openCount++
			}
			if (p.status === 'Contained') {
				p.color = 'orange'
				containedCount++
			}
			if (p.status === 'Closed') {
				p.color = 'green'
				closedCount++
			}
			if (p.asd === 'Assembly') {
				assemblyCount++
			}
			if (p.asd === 'Supplier') {
				supplierCount++
			}
			if (p.asd === 'Design') {
				designCount++
			}

			if (p.color === 'grey') {
				p.status = 'TBC'
			}

			if (p.status === 'Open' || p.status === 'TBC') p.closureDate = ''

			if (p.daysOpen != '--') {
				if (p.daysOpen < 0 || isNaN(p.daysOpen)) p.daysOpen = 0
			}
			if (p.daysContained != '--') {
				if (p.daysContained < 0 || isNaN(p.daysContained)) p.daysContained = 0
			}
		}

		////////////////////
		let openCountTotal = 0
		let containedCountTotal = 0
		let closedCountTotal = 0

		for (let p of parts) {
			if (p.status === 'Open') {
				openCountTotal += p.count
			}
			if (p.status === 'Contained') {
				containedCountTotal += p.count
			}
			if (p.status === 'Closed') {
				closedCountTotal += p.count
			}
		}

		const openPercent = Math.round((openCountTotal / top50Count) * 100)
		const containedPercent = Math.round((containedCountTotal / top50Count) * 100)
		const closedPercent = Math.round((closedCountTotal / top50Count) * 100)
		let noActionPercent = 100 - openPercent - containedPercent - closedPercent

		if (noActionPercent < 0) noActionPercent = 0

		let noActionCount = parts.length - openCount - containedCount - closedCount

		const top50Percent = Math.round((top50Count / allCountDoa) * 100)

		dataArrDoa.push({
			division: division.name,
			openPercent,
			containedPercent,
			closedPercent,
			noActionPercent,
			openCount,
			containedCount,
			closedCount,
			noActionCount,
			top50Percent,
			longName: division.longName,
		})
	}

	for (let division of divisions) {
		let allCountDoa = await Claim.countDocuments({
			division: division.name,
			active: true,
			tPeriod: { $in: ['T000', 'T001', 'T002', 'T003'] },
			outcome: {
				$nin: ['Reject', 'Z Code'],
			},
			$or: theBuildMonthsT3,
		})

		let optionsDoa = [
			{
				$match: {
					division: division.name,
					// rag: { $ne: null },
					active: true,
					tPeriod: { $in: ['T000', 'T001', 'T002', 'T003'] },
					outcome: {
						$nin: ['Reject', 'Z Code'],
					},
					$or: theBuildMonthsT3,
				},
			},

			{
				$group: {
					_id: '$failedPart',
					concernArr: { $addToSet: '$concern' },
					ragArr: { $addToSet: '$rag' },
					claimArr: { $addToSet: '$claimNumber' },
					top50OpenDateArr: { $addToSet: '$top50OpenedDate' },
					top50ContainedDateArr: { $addToSet: '$top50ContainedDate' },
					top50ClosedDateArr: { $addToSet: '$top50ClosedDate' },
					closureDateArr: { $addToSet: '$closureDate' },
					asdJoshArr: { $addToSet: '$asdJosh' },
					actionArr: { $addToSet: '$action' },
					championArr: { $addToSet: '$champion' },
					sccJoshArr: { $addToSet: '$sccJosh' },
					divisionArr: { $addToSet: '$division' },
					areaArr: { $addToSet: '$area' },
					linkedArr: { $addToSet: '$top50Linked' },
					top50LinkedToArr: { $addToSet: '$top50LinkedTo' },
					buildDateArr: {
						$push: {
							$substr: ['$buildDate', 3, 10],
						},
					},
					importedDateArr: {
						$push: {
							importedDate: '$importedDate',
						},
					},

					count: { $sum: 1 },
				},
			},
			{
				$addFields: {
					status: '',
					asd: '',
					color: 'grey',
					percentageCont: 0,
					fourCArr: [],
					failedCutIn: false,
					daysOpen: '--',
					daysContained: '--',
					daysRemaining: '--',
					daysRemainingColor: '',
					fourCIssued: 'No',
					cabsCount: 0,
					psCount: 0,
					axlesCount: 0,
					hbuCount: 0,
					fourCLinked: false,
					linkedTo: '',
					linkedFourC: '',
					inOtherTop50: false,
					claimInLast48Hours: '',
					trend: 'same',
				},
			},
			{ $sort: { count: -1, ragArr: -1, _id: 1 } },
			{ $limit: 50 },
			// { $sort: { count: -1, _id: 1 } },
			// { $sort: { count: -1, ragArr: -1, _id: 1 } },
		]

		let parts = await Claim.aggregate(optionsDoa)

		let top50Count = 0
		let openCount = 0
		let containedCount = 0
		let closedCount = 0
		let assemblyCount = 0
		let supplierCount = 0
		let designCount = 0
		let failedPostCutIn = 0

		for (let p of parts) {
			top50Count += p.count

			p.fourCLinked = p.linkedArr[0]
			p.asd = p.asdJoshArr[0]
			if (p.fourCLinked && p.top50LinkedToArr) {
				p.top50LinkedToArr.sort()

				p.linkedTo = p.top50LinkedToArr[0]
				p.linkedFourC = await Claim.findById(p.linkedTo)

				if (p.linkedFourC && p.linkedFourC.status) {
					p.status = await p.linkedFourC.status
				}

				p.closureDate = ''

				if (p.status === 'Open') {
					p.action = p.actionArr[0]
					if (p.linkedFourC.reOpenedAt) {
						p.daysOpen = Math.round((new Date() - p.linkedFourC.reOpenedAt) / (1000 * 60 * 60 * 24))
					} else {
						p.daysOpen = Math.round((new Date() - p.linkedFourC.vettedAt) / (1000 * 60 * 60 * 24))
					}
				}

				if (p.status === 'Contained') {
					p.action = p.linkedFourC.containNotes
					if (p.linkedFourC.containedAt) {
						p.closureDate = moment(p.linkedFourC.containedAt).format('MMM-YY')
						if (p.linkedFourC.reOpenedAt) {
							p.daysOpen = Math.round((p.linkedFourC.containedAt - p.linkedFourC.reOpenedAt) / (1000 * 60 * 60 * 24))
						} else {
							p.daysOpen = Math.round((p.linkedFourC.containedAt - p.linkedFourC.vettedAt) / (1000 * 60 * 60 * 24))
						}

						p.daysContained = Math.round((new Date() - p.linkedFourC.containedAt) / (1000 * 60 * 60 * 24))
					} else {
						p.closureDate = ''
					}
				}
				if (p.status === 'Closed') {
					p.action = p.linkedFourC.counterWhatNotes
					if (p.linkedFourC.closedAt) {
						p.closureDate = moment(p.linkedFourC.closedAt).format('MMM-YY')
						if (p.linkedFourC.reOpenedAt) {
							p.daysOpen = Math.round((p.linkedFourC.containedAt - p.linkedFourC.reOpenedAt) / (1000 * 60 * 60 * 24))
						} else {
							p.daysOpen = Math.round((p.linkedFourC.containedAt - p.linkedFourC.vettedAt) / (1000 * 60 * 60 * 24))
						}
						p.daysContained = Math.round((p.linkedFourC.closedAt - p.linkedFourC.containedAt) / (1000 * 60 * 60 * 24))
					} else {
						p.closureDate = ''
					}
				}

				// p.closureDate = p.closureDateArr[0]
			} else {
				// if (!p.status) console.log(p)
				p.status = p.ragArr[0]
				p.asd = p.asdJoshArr[0]
				p.action = p.actionArr[0]

				p.closureDate = ''

				if (p.status === 'Open') {
					if (p.top50OpenDateArr.length > 0 && p.top50OpenDateArr[0] != null) {
						p.daysOpen = Math.round((new Date() - p.top50OpenDateArr[0]) / (1000 * 60 * 60 * 24))
					}
				}

				if (p.status === 'Contained') {
					if (
						p.top50ContainedDateArr.length > 0 &&
						p.top50ContainedDateArr[0] != null &&
						p.top50OpenDateArr.length > 0 &&
						p.top50OpenDateArr[0] != null
					) {
						p.closureDate = moment(p.top50ContainedDateArr[0]).format('MMM-YY')
						p.daysOpen = Math.round((p.top50ContainedDateArr[0] - p.top50OpenDateArr[0]) / (1000 * 60 * 60 * 24))
						p.daysContained = Math.round((new Date() - p.top50ContainedDateArr[0]) / (1000 * 60 * 60 * 24))
					} else {
						p.closureDate = ''
					}
				}
				if (p.status === 'Closed') {
					if (
						p.top50ClosedDateArr.length > 0 &&
						p.top50ClosedDateArr[0] != null &&
						p.top50ContainedDateArr.length > 0 &&
						p.top50ContainedDateArr[0] != null &&
						p.top50OpenDateArr.length > 0 &&
						p.top50OpenDateArr[0] != null
					) {
						p.closureDate = moment(p.top50ClosedDateArr[0]).format('MMM-YY')
						p.daysOpen = Math.round((p.top50ContainedDateArr[0] - p.top50OpenDateArr[0]) / (1000 * 60 * 60 * 24))
						p.daysContained = Math.round((p.top50ClosedDateArr[0] - p.top50ContainedDateArr[0]) / (1000 * 60 * 60 * 24))
					} else {
						p.closureDate = ''
					}
				}

				// p.closureDate = p.closureDateArr[0]
			}
			p.concern = p.concernArr[0]
			p.champion = p.championArr[0]

			p.percentageCont = ((p.count / allCountDoa) * 100).toFixed(2)

			if (p.status === 'Open') {
				p.color = 'red'
				openCount++
			}
			if (p.status === 'Contained') {
				p.color = 'orange'
				containedCount++
			}
			if (p.status === 'Closed') {
				p.color = 'green'
				closedCount++
			}
			if (p.asd === 'Assembly') {
				assemblyCount++
			}
			if (p.asd === 'Supplier') {
				supplierCount++
			}
			if (p.asd === 'Design') {
				designCount++
			}

			if (p.color === 'grey') {
				p.status = 'TBC'
			}

			if (p.status === 'Open' || p.status === 'TBC') p.closureDate = ''

			if (p.daysOpen != '--') {
				if (p.daysOpen < 0 || isNaN(p.daysOpen)) p.daysOpen = 0
			}
			if (p.daysContained != '--') {
				if (p.daysContained < 0 || isNaN(p.daysContained)) p.daysContained = 0
			}
		}

		////////////////////
		let openCountTotal = 0
		let containedCountTotal = 0
		let closedCountTotal = 0

		for (let p of parts) {
			if (p.status === 'Open') {
				openCountTotal += p.count
			}
			if (p.status === 'Contained') {
				containedCountTotal += p.count
			}
			if (p.status === 'Closed') {
				closedCountTotal += p.count
			}
		}

		const openPercent = Math.round((openCountTotal / top50Count) * 100)
		const containedPercent = Math.round((containedCountTotal / top50Count) * 100)
		const closedPercent = Math.round((closedCountTotal / top50Count) * 100)
		let noActionPercent = 100 - openPercent - containedPercent - closedPercent

		if (noActionPercent < 0) noActionPercent = 0

		let noActionCount = parts.length - openCount - containedCount - closedCount

		const top50Percent = Math.round((top50Count / allCountDoa) * 100)

		dataArrT3.push({
			division: division.name,
			openPercent,
			containedPercent,
			closedPercent,
			noActionPercent,
			openCount,
			containedCount,
			closedCount,
			noActionCount,
			top50Percent,
			longName: division.longName,
		})
	}

	/////////////////// end ////////////////////////

	res.render('group/top50', {
		//BHL Doa
		dataArrDoa,
		dataArrT3,
	})
}

module.exports.qmrd2 = async (req, res) => {
	const { division } = req.params

	const mri = await Mri.aggregate([
		{
			$match: {
				division,
			},
		},
		// {
		// 	$project:{
		// 		_id:-1,
		// 		doa_dpu:1,
		// 	}
		// }
	])

	function addNAN(num) {
		if ((num = 0)) num = NaN
	}

	// months
	const theMonths = mri.map((m) => m.month)

	const shortMonths = mri.map((m) => m.short_months).filter((m) => m !== undefined)

	const daoDPU = mri.map((m) => +parseFloat(m.doa_dpu).toFixed(3))

	const doaDPUMax = +parseFloat((Math.max(...daoDPU.filter((value) => !Number.isNaN(value))) / 100) * 400).toFixed(3)

	const daoDPUTarget = mri.map((m) => +parseFloat(m.doa_dpu_target).toFixed(3))

	const daoRFT = mri.map((m) => Math.round(m.doa_rft_percent))

	const daoRFTTarget = mri.map((m) => Math.round(m.doa_rft_target))

	const t0DPU = mri.map((m) => +parseFloat(m.t0_dpu).toFixed(3))

	const t0DPUTarget = mri.map((m) => +parseFloat(m.t0_dpu_target).toFixed(3))

	const t0DPUMax = +parseFloat((Math.max(...t0DPU.filter((value) => !Number.isNaN(value))) / 100) * 400).toFixed(3)

	const t0RFT = mri.map((m) => Math.round(m.t0_rft))

	const t0RFTTarget = mri.map((m) => Math.round(m.t0_rft_target))

	const escapeDPU = mri.map((m) => +parseFloat(m.escape_dpu).toFixed(3))

	const escapeDPUMax = +parseFloat((Math.max(...escapeDPU.filter((value) => !Number.isNaN(value))) / 100) * 200).toFixed(3)

	const escapeTarget = mri.map((m) => +parseFloat(m.escape_dpu_target).toFixed(3))

	//  DOA dpu color status

	const doaDPULatest = daoDPU.filter((value) => !Number.isNaN(value))[daoDPU.filter((value) => !Number.isNaN(value)).length - 1]

	const doaDPUPrev = daoDPU.filter((value) => !Number.isNaN(value))[daoDPU.filter((value) => !Number.isNaN(value)).length - 2]

	const doaDPULatestTarget = daoDPUTarget.filter((value) => !Number.isNaN(value))[0]

	let doaDealerColor = 'white'

	//Over target but below last month  => Amber
	if (+doaDPULatest >= +doaDPULatestTarget && +doaDPULatest <= +doaDPUPrev) doaDealerColor = 'orange'

	//Over target also more than last month  => Red
	if (+doaDPULatest >= +doaDPULatestTarget && +doaDPULatest >= +doaDPUPrev) doaDealerColor = 'red'

	//below target
	if (+doaDPULatest <= +doaDPULatestTarget) doaDealerColor = 'green'

	// t0 color status

	const t0DPULatest = t0DPU.filter((value) => !Number.isNaN(value))[t0DPU.filter((value) => !Number.isNaN(value)).length - 1]

	const t0DPUPrev = t0DPU.filter((value) => !Number.isNaN(value))[t0DPU.filter((value) => !Number.isNaN(value)).length - 2]

	const t0DPULatestTarget = t0DPUTarget.filter((value) => !Number.isNaN(value))[0]
	let t0CustomerColor = 'white'

	//Over target but below last month  => Amber
	if (+t0DPULatest >= +t0DPULatestTarget && +t0DPULatest <= +t0DPUPrev) t0CustomerColor = 'orange'

	//Over target also more than last month  => Red
	if (+t0DPULatest >= +t0DPULatestTarget && +t0DPULatest >= +t0DPUPrev) t0CustomerColor = 'red'

	//below target
	if (+t0DPULatest <= +t0DPULatestTarget) t0CustomerColor = 'green'

	// eascape color status

	const escapeDPULatest = escapeDPU.filter((value) => !Number.isNaN(value))[escapeDPU.filter((value) => !Number.isNaN(value)).length - 1]

	const escapeDPUPrev = escapeDPU.filter((value) => !Number.isNaN(value))[escapeDPU.filter((value) => !Number.isNaN(value)).length - 2]

	const escapeDPULatestTarget = escapeTarget.filter((value) => !Number.isNaN(value))[0]

	//Over target but below last month  => Amber
	if (+escapeDPULatest >= +escapeDPULatestTarget && +escapeDPULatest <= +escapeDPUPrev) escapeColor = 'orange'

	//Over target also more than last month  => Red
	if (+escapeDPULatest >= +escapeDPULatestTarget && +escapeDPULatest >= +escapeDPUPrev) escapeColor = 'red'

	//below target
	if (+escapeDPULatest <= +escapeDPULatestTarget) escapeColor = 'green'

	const doaTop50RepeatPercentCurrent = mri.map((m) => m.doa_top50_repeat_percent).filter((m) => m !== 'N/A')[
		mri.map((m) => m.doa_top50_repeat_percent).filter((m) => m !== 'N/A').length - 1
	]
	const doaTop50RepeatPercentPrev = mri.map((m) => m.doa_top50_repeat_percent).filter((m) => m !== 'N/A')[
		mri.map((m) => m.doa_top50_repeat_percent).filter((m) => m !== 'N/A').length - 2
	]
	const t0Top50RepeatPercentCurrent = mri.map((m) => m.t0_top50_repeat_percent).filter((m) => m !== 'N/A')[
		mri.map((m) => m.t0_top50_repeat_percent).filter((m) => m !== 'N/A').length - 1
	]

	const t0Top50RepeatPercentPrev = mri.map((m) => m.t0_top50_repeat_percent).filter((m) => m !== 'N/A')[
		mri.map((m) => m.t0_top50_repeat_percent).filter((m) => m !== 'N/A').length - 2
	]

	// const doaTop50RepeatPercentCurrent = mri
	// 	.map((m) => m.doa_top50_repeat_percent)
	// 	.filter((m) => m)[
	// 	mri.map((m) => m.doa_top50_repeat_percent).filter((m) => m).length - 1
	// ]
	// const doaTop50RepeatPercentPrev = mri
	// 	.map((m) => m.doa_top50_repeat_percent)
	// 	.filter((m) => m)[
	// 	mri.map((m) => m.doa_top50_repeat_percent).filter((m) => m).length - 2
	// ]
	// const t0Top50RepeatPercentCurrent = mri
	// 	.map((m) => m.t0_top50_repeat_percent)
	// 	.filter((m) => m)[
	// 	mri.map((m) => m.t0_top50_repeat_percent).filter((m) => m).length - 1
	// ]

	// const t0Top50RepeatPercentPrev = mri
	// 	.map((m) => m.t0_top50_repeat_percent)
	// 	.filter((m) => m)[
	// 	mri.map((m) => m.t0_top50_repeat_percent).filter((m) => m).length - 2
	// ]

	if (+doaTop50RepeatPercentCurrent <= +doaTop50RepeatPercentPrev) {
		doaTop50RepeatPercentCurrentColor = 'green'
	} else {
		doaTop50RepeatPercentCurrentColor = 'red'
	}
	if (+t0Top50RepeatPercentCurrent <= +t0Top50RepeatPercentPrev) {
		t0Top50RepeatPercentCurrentColor = 'green'
	} else {
		t0Top50RepeatPercentCurrentColor = 'red'
	}

	const top10DealerRft = mri.map((m) => Math.round(m.top10_dealer_rft)).splice(11)

	const top10DealerRftTarget = mri.map((m) => Math.round(m.top10_dealer_rft_target)).splice(0, 13)

	const top10CustomerRft = mri.map((m) => Math.round(m.top10_customer_rft)).splice(11)

	const top10CustomerRftTarget = mri.map((m) => Math.round(m.top10_customer_rft_target)).splice(0, 13)

	// top10 Dealer color status

	const top10RFTLatest = top10DealerRft.filter((value) => !Number.isNaN(value))[top10DealerRft.filter((value) => !Number.isNaN(value)).length - 1]

	const top10RFTPrev = top10DealerRft.filter((value) => !Number.isNaN(value))[top10DealerRft.filter((value) => !Number.isNaN(value)).length - 2]

	const top10RFTLatestTarget = top10DealerRftTarget.filter((value) => !Number.isNaN(value))[0]

	// let top10DealerRftColor = 'white'

	// //Under target but over last month  => Amber
	// if (+top10RFTLatest <= +top10RFTLatestTarget && +top10RFTLatest >= +top10RFTPrev)
	// 	top10DealerRftColor = 'orange'

	// //under target also lessthan last month  => Red
	// if (+top10RFTLatest <= +top10RFTLatestTarget && +escapeDPULatest <= +top10RFTPrev)
	// 	top10DealerRftColor = 'red'

	// //over target
	// if (+top10RFTDelerLatest >= +top10RFTDelerLatestTarget) top10DealerRftColor = 'green'

	// top10 Customer color status

	const top10RFTCustomerLatest = top10CustomerRft.filter((value) => !Number.isNaN(value))[
		top10CustomerRft.filter((value) => !Number.isNaN(value)).length - 1
	]

	const top10RFTCustomerPrev = top10CustomerRft.filter((value) => !Number.isNaN(value))[
		top10CustomerRft.filter((value) => !Number.isNaN(value)).length - 2
	]

	const top10RFTCustomerLatestTarget = top10CustomerRftTarget.filter((value) => !Number.isNaN(value))[0]

	let top10CustomerRftColor = 'white'

	//Under target but over last month  => Amber
	if (+top10RFTCustomerLatest <= +top10RFTCustomerLatestTarget && +top10RFTCustomerLatest >= +top10RFTCustomerPrev) top10CustomerRftColor = 'orange'

	//under target also lessthan last month  => Red
	if (+top10RFTCustomerLatest <= +top10RFTCustomerLatestTarget && +top10RFTCustomerLatest <= +top10RFTCustomerPrev) top10CustomerRftColor = 'red'

	//over target
	if (+top10RFTCustomerLatest >= +top10RFTCustomerLatestTarget) top10CustomerRftColor = 'green'

	const mriDoaDealers = await Qmr.find({
		division,
		type: 'doa',
	})
	const mriT0Dealers = await Qmr.find({
		division,
		type: 't0',
	})
	const dpuTracks = await Qmr.find({
		division,
		type: 'track',
	})
	const doaImprovements = await Qmr.find({
		division,
		type: 'dao_improvement',
	})
	const internalImprovements = await Qmr.find({
		division,
		type: 'internal_improvement',
	})

	const monthDtata = await Qmr.find({
		type: 'dpu_month',
	})

	const dpuMonths = monthDtata.map((m) => m.name)

	const internalDpuRaw = await Qmr.findOne({
		division,
		type: 'dpu',
	})

	const internalCfcRaw = await Qmr.findOne({
		division,
		type: 'cfc',
	})

	const internalDpuData = [
		internalDpuRaw.stat1,
		internalDpuRaw.stat2,
		internalDpuRaw.stat3,
		internalDpuRaw.stat4,
		internalDpuRaw.stat5,
		internalDpuRaw.stat6,
		internalDpuRaw.stat7,
		internalDpuRaw.stat8,
		internalDpuRaw.stat9,
		internalDpuRaw.stat10,
		internalDpuRaw.stat11,
		internalDpuRaw.stat12,
		internalDpuRaw.stat13,
	]
	const internalDpuTarget = [
		internalDpuRaw.target1,
		internalDpuRaw.target2,
		internalDpuRaw.target3,
		internalDpuRaw.target4,
		internalDpuRaw.target5,
		internalDpuRaw.target6,
		internalDpuRaw.target7,
		internalDpuRaw.target8,
		internalDpuRaw.target9,
		internalDpuRaw.target10,
		internalDpuRaw.target11,
		internalDpuRaw.target12,
		internalDpuRaw.target13,
	]
	const internalCfcData = [
		internalCfcRaw.stat1,
		internalCfcRaw.stat2,
		internalCfcRaw.stat3,
		internalCfcRaw.stat4,
		internalCfcRaw.stat5,
		internalCfcRaw.stat6,
		internalCfcRaw.stat7,
		internalCfcRaw.stat8,
		internalCfcRaw.stat9,
		internalCfcRaw.stat10,
		internalCfcRaw.stat11,
		internalCfcRaw.stat12,
		internalCfcRaw.stat13,
	]
	const internalCfcTarget = [
		internalCfcRaw.target1,
		internalCfcRaw.target2,
		internalCfcRaw.target3,
		internalCfcRaw.target4,
		internalCfcRaw.target5,
		internalCfcRaw.target6,
		internalCfcRaw.target7,
		internalCfcRaw.target8,
		internalCfcRaw.target9,
		internalCfcRaw.target10,
		internalCfcRaw.target11,
		internalCfcRaw.target12,
		internalCfcRaw.target13,
	]

	const thirtyOneDaysaAgo = new Date(Date.now() - 31 * 24 * 60 * 60 * 1000)
	const sixtyTwoDaysaAgo = new Date(Date.now() - 62 * 24 * 60 * 60 * 1000)

	const rejects = ['Reject', 'Z Code']

	const allDoaClaims = await Claim.find({
		division,
		active: true,
		importedDate: { $gte: thirtyOneDaysaAgo },
		tPeriod: 'DOA',
		outcome: { $nin: rejects },
		vetted: 'Yes',
	})
	const allDoaClaimsWith4C = await Claim.find({
		division,
		active: true,
		importedDate: { $gte: thirtyOneDaysaAgo },
		tPeriod: 'DOA',
		// linked       : true,
		$or: [{ fourC: 'Yes' }, { linked: true }],
		outcome: { $nin: rejects },
		vetted: 'Yes',
	})

	const allDoaClaimsWithout4C = await Claim.find({
		division,
		active: true,
		importedDate: { $gte: thirtyOneDaysaAgo },
		tPeriod: 'DOA',
		// linked       : true,
		fourC: 'No',
		linked: { $ne: true },
		outcome: { $nin: rejects },
		vetted: 'Yes',
	}).sort({ importedDate: 1 })

	const allT0Claims = await Claim.find({
		division,
		active: true,
		importedDate: { $gte: thirtyOneDaysaAgo },
		tPeriod: 'T000',
		outcome: { $nin: rejects },
		vetted: 'Yes',
	})

	const allT0ClaimsWithout4C = await Claim.find({
		division,
		active: true,
		importedDate: { $gte: thirtyOneDaysaAgo },
		tPeriod: 'T000',
		// linked       : true,
		fourC: 'No',
		linked: { $ne: true },
		outcome: { $nin: rejects },
	}).sort({ importedDate: 1 })

	const allT0ClaimsWith4C = await Claim.find({
		division,
		active: true,
		importedDate: { $gte: thirtyOneDaysaAgo },
		tPeriod: 'T000',
		// linked       : true,
		$or: [{ fourC: 'Yes' }, { linked: true }],
		outcome: { $nin: rejects },
	})

	const doa4cCoveragePercent = Math.round((allDoaClaimsWith4C.length / allDoaClaims.length) * 100)

	const doa4cNotCoveragePercent = 100 - +doa4cCoveragePercent

	const t04cCoveragePercent = Math.round((allT0ClaimsWith4C.length / allT0Claims.length) * 100)

	const to4cNotCoveragePercent = 100 - +t04cCoveragePercent

	const repeatsCurrentMonth = await Doa25pt.find({
		division,
		gradedAt: { $gte: thirtyOneDaysaAgo },
		grade: 'Major',
		count: { $gt: 0 },
	})
	const repeatsPrevMonth = await Doa25pt.find({
		division,
		gradedAt: { $lte: thirtyOneDaysaAgo, $gte: sixtyTwoDaysaAgo },
		grade: 'Major',
		count: { $gt: 0 },
	})

	const majorEscapesRepeatCurrent = repeatsCurrentMonth.length

	const majorEscapesRepeatPrev = repeatsPrevMonth.length

	let majorEscapeRepeatColor = 'white'

	if (majorEscapesRepeatCurrent <= majorEscapesRepeatPrev) {
		majorEscapeRepeatColor = 'green'
	} else {
		majorEscapeRepeatColor = 'red'
	}

	function mode(arr) {
		const counts = {}
		let maxCount = 0
		let maxKey
		// Count how many times each object (or really its string representation)
		// appears, and keep track of the highest count we've seen.
		for (let i = 0; i < arr.length; i++) {
			const key = arr[i]
			const count = (counts[key] = (counts[key] || 0) + 1)
			if (count > maxCount) {
				maxCount = count
				maxKey = key
			}
		}
		// Return (one of) the highest keys we've seen, or undefined.
		return maxKey
	}

	const top50DataDOA = await Claim.aggregate([
		{
			$match: {
				division,
				active: true,
				tPeriod: 'DOA',
				outcome: {
					$nin: ['Reject', 'Z Code'],
				},
				$or: [
					{ buildDate: { $regex: fiveMonthsAgo } },
					{ buildDate: { $regex: fourMonthsAgo } },
					{ buildDate: { $regex: threeMonthsAgo } },
					{ buildDate: { $regex: twoMonthsAgo } },
					{ buildDate: { $regex: oneMonthAgo } },
					{ buildDate: { $regex: thisMonth } },
				],
			},
		},

		{
			$group: {
				_id: '$failedPart',
				concernArr: { $addToSet: '$concern' },
				ragArr: { $addToSet: '$rag' },
				top50OpenDateArr: { $addToSet: '$top50OpenedDate' },
				top50ContainedDateArr: { $addToSet: '$top50ContainedDate' },
				top50ClosedDateArr: { $addToSet: '$top50ClosedDate' },
				closureDateArr: { $addToSet: '$closureDate' },
				asdJoshArr: { $addToSet: '$asdJosh' },
				actionArr: { $addToSet: '$action' },
				championArr: { $addToSet: '$champion' },
				sccJoshArr: { $addToSet: '$sccJosh' },
				divisionArr: { $addToSet: '$division' },
				areaArr: { $addToSet: '$area' },
				linkedArr: { $addToSet: '$top50Linked' },
				top50LinkedToArr: { $addToSet: '$top50LinkedTo' },
				buildDateArr: {
					$push: {
						$substr: ['$buildDate', 3, 10],
					},
				},
				importedDateArr: {
					$push: {
						importedDate: '$importedDate',
					},
				},
				// claimsArr: {
				// 	$push: {
				// 		claimNumber: '$claimNumber',
				// 		closureDate: '$closureDate',
				// 	},
				// },

				count: { $sum: 1 },
			},
		},
		{
			$addFields: {
				month1: [],
				month2: [],
				month3: [],
				month4: [],
				month5: [],
				month6: [],
				month7: [],
				month8: [],
				month9: [],
				month10: [],
				month11: [],
				status: '',
				asd: '',
				color: 'grey',
				percentageCont: 0,
				fourCArr: [],
				failedCutIn: false,
				daysOpen: '--',
				daysContained: '--',
				daysRemaining: '--',
				daysRemainingColor: '',
				fourCIssued: 'No',
				cabsCount: 0,
				psCount: 0,
				axlesCount: 0,
				hbuCount: 0,
				fourCLinked: false,
				linkedTo: '',
				linkedFourC: '',
				inOtherTop50: false,
				claimInLast48Hours: '',
				trend: 'same',
			},
		},
		// { $sort: { count: -1, _id: 1 } },

		{ $sort: { count: -1, ragArr: -1, _id: 1 } },
		{ $limit: 50 },
	])

	for (let p of top50DataDOA) {
		p.fourCLinked = p.linkedArr[0]
		if (p.fourCLinked && p.top50LinkedToArr) {
			p.top50LinkedToArr.sort()
			p.linkedTo = p.top50LinkedToArr[0]
			p.linkedFourC = await Claim.findById(p.linkedTo)
			p.status = p.linkedFourC.status
		} else {
			p.status = p.ragArr[0]
		}
	}

	let openDOA = 0
	let containedDOA = 0
	let closedDOA = 0
	// let noActionCount = top50DataDOA.length - openCount - containedCount - closedCount

	for (let t of top50DataDOA) {
		// t.status = mode(t.statusArr.sort())

		if (t.status === 'Open') openDOA++
		if (t.status === 'Contained') containedDOA++
		if (t.status === 'Closed') closedDOA++
	}

	const doaTop50Red = Math.round((openDOA / top50DataDOA.length) * 100)
	const doaTop50Amber = Math.round((containedDOA / top50DataDOA.length) * 100)
	const doaTop50Green = Math.round((closedDOA / top50DataDOA.length) * 100)

	const noActionPercentDOA = 100 - doaTop50Red - doaTop50Amber - doaTop50Green

	const top50DataT0 = await Claim.aggregate([
		{
			$match: {
				division,
				active: true,
				tPeriod: 'T000',
				outcome: {
					$nin: ['Reject', 'Z Code'],
				},
				$or: [
					{ buildDate: { $regex: fiveMonthsAgo } },
					{ buildDate: { $regex: fourMonthsAgo } },
					{ buildDate: { $regex: threeMonthsAgo } },
					{ buildDate: { $regex: twoMonthsAgo } },
					{ buildDate: { $regex: oneMonthAgo } },
					{ buildDate: { $regex: thisMonth } },
				],
			},
		},

		{
			$group: {
				_id: '$failedPart',
				concernArr: { $addToSet: '$concern' },
				ragArr: { $addToSet: '$rag' },
				top50OpenDateArr: { $addToSet: '$top50OpenedDate' },
				top50ContainedDateArr: { $addToSet: '$top50ContainedDate' },
				top50ClosedDateArr: { $addToSet: '$top50ClosedDate' },
				closureDateArr: { $addToSet: '$closureDate' },
				asdJoshArr: { $addToSet: '$asdJosh' },
				actionArr: { $addToSet: '$action' },
				championArr: { $addToSet: '$champion' },
				sccJoshArr: { $addToSet: '$sccJosh' },
				divisionArr: { $addToSet: '$division' },
				areaArr: { $addToSet: '$area' },
				linkedArr: { $addToSet: '$top50Linked' },
				top50LinkedToArr: { $addToSet: '$top50LinkedTo' },
				buildDateArr: {
					$push: {
						$substr: ['$buildDate', 3, 10],
					},
				},
				importedDateArr: {
					$push: {
						importedDate: '$importedDate',
					},
				},
				// claimsArr: {
				// 	$push: {
				// 		claimNumber: '$claimNumber',
				// 		closureDate: '$closureDate',
				// 	},
				// },

				count: { $sum: 1 },
			},
		},
		{
			$addFields: {
				month1: [],
				month2: [],
				month3: [],
				month4: [],
				month5: [],
				month6: [],
				month7: [],
				month8: [],
				month9: [],
				month10: [],
				month11: [],
				status: '',
				asd: '',
				color: 'grey',
				percentageCont: 0,
				fourCArr: [],
				failedCutIn: false,
				daysOpen: '--',
				daysContained: '--',
				daysRemaining: '--',
				daysRemainingColor: '',
				fourCIssued: 'No',
				cabsCount: 0,
				psCount: 0,
				axlesCount: 0,
				hbuCount: 0,
				fourCLinked: false,
				linkedTo: '',
				linkedFourC: '',
				inOtherTop50: false,
				claimInLast48Hours: '',
				trend: 'same',
			},
		},
		// { $sort: { count: -1, _id: 1 } },

		{ $sort: { count: -1, ragArr: -1, _id: 1 } },
		{ $limit: 50 },
	])

	for (let p of top50DataT0) {
		p.fourCLinked = p.linkedArr[0]
		if (p.fourCLinked && p.top50LinkedToArr) {
			p.top50LinkedToArr.sort()
			p.linkedTo = p.top50LinkedToArr[0]
			p.linkedFourC = await Claim.findById(p.linkedTo)
			p.status = p.linkedFourC.status
		} else {
			p.status = p.ragArr[0]
		}
	}

	let openT0 = 0
	let containedT0 = 0
	let closedT0 = 0

	for (let t of top50DataT0) {
		if (t.status === 'Open') openT0++
		if (t.status === 'Contained') containedT0++
		if (t.status === 'Closed') closedT0++
	}

	const t0Top50Red = Math.round((openT0 / top50DataT0.length) * 100)
	const t0Top50Amber = Math.round((containedT0 / top50DataT0.length) * 100)
	const t0Top50Green = Math.round((closedT0 / top50DataT0.length) * 100)
	const noActionPercentT0 = 100 - t0Top50Red - t0Top50Amber - t0Top50Green

	const dealerShortMonths = mri.map((m) => m.dealer_short_months).filter((m) => m !== 'N/A')

	const dates = [
		{
			month: moment().subtract(20, 'months').format('MM'),
			year: moment().subtract(20, 'months').format('YYYY'),
			date: moment().subtract(20, 'months').format('MMM-YY'),
		},
		{
			month: moment().subtract(19, 'months').format('MM'),
			year: moment().subtract(19, 'months').format('YYYY'),
			date: moment().subtract(19, 'months').format('MMM-YY'),
		},
		{
			month: moment().subtract(18, 'months').format('MM'),
			year: moment().subtract(18, 'months').format('YYYY'),
			date: moment().subtract(18, 'months').format('MMM-YY'),
		},
		{
			month: moment().subtract(17, 'months').format('MM'),
			year: moment().subtract(17, 'months').format('YYYY'),
			date: moment().subtract(17, 'months').format('MMM-YY'),
		},
		{
			month: moment().subtract(16, 'months').format('MM'),
			year: moment().subtract(16, 'months').format('YYYY'),
			date: moment().subtract(16, 'months').format('MMM-YY'),
		},
		{
			month: moment().subtract(15, 'months').format('MM'),
			year: moment().subtract(15, 'months').format('YYYY'),
			date: moment().subtract(15, 'months').format('MMM-YY'),
		},
		{
			month: moment().subtract(14, 'months').format('MM'),
			year: moment().subtract(14, 'months').format('YYYY'),
			date: moment().subtract(14, 'months').format('MMM-YY'),
		},
		{
			month: moment().subtract(13, 'months').format('MM'),
			year: moment().subtract(13, 'months').format('YYYY'),
			date: moment().subtract(13, 'months').format('MMM-YY'),
		},
		{
			month: moment().subtract(12, 'months').format('MM'),
			year: moment().subtract(12, 'months').format('YYYY'),
			date: moment().subtract(12, 'months').format('MMM-YY'),
		},
		{
			month: moment().subtract(11, 'months').format('MM'),
			year: moment().subtract(11, 'months').format('YYYY'),
			date: moment().subtract(11, 'months').format('MMM-YY'),
		},
		{
			month: moment().subtract(10, 'months').format('MM'),
			year: moment().subtract(10, 'months').format('YYYY'),
			date: moment().subtract(10, 'months').format('MMM-YY'),
		},
		{
			month: moment().subtract(9, 'months').format('MM'),
			year: moment().subtract(9, 'months').format('YYYY'),
			date: moment().subtract(9, 'months').format('MMM-YY'),
		},
		{
			month: moment().subtract(8, 'months').format('MM'),
			year: moment().subtract(8, 'months').format('YYYY'),
			date: moment().subtract(8, 'months').format('MMM-YY'),
		},
		{
			month: moment().subtract(7, 'months').format('MM'),
			year: moment().subtract(7, 'months').format('YYYY'),
			date: moment().subtract(7, 'months').format('MMM-YY'),
		},
		{
			month: moment().subtract(6, 'months').format('MM'),
			year: moment().subtract(6, 'months').format('YYYY'),
			date: moment().subtract(6, 'months').format('MMM-YY'),
		},
		{
			month: moment().subtract(5, 'months').format('MM'),
			year: moment().subtract(5, 'months').format('YYYY'),
			date: moment().subtract(5, 'months').format('MMM-YY'),
		},
		{
			month: moment().subtract(4, 'months').format('MM'),
			year: moment().subtract(4, 'months').format('YYYY'),
			date: moment().subtract(4, 'months').format('MMM-YY'),
		},
		{
			month: moment().subtract(3, 'months').format('MM'),
			year: moment().subtract(3, 'months').format('YYYY'),
			date: moment().subtract(3, 'months').format('MMM-YY'),
		},
		{
			month: moment().subtract(2, 'months').format('MM'),
			year: moment().subtract(2, 'months').format('YYYY'),
			date: moment().subtract(2, 'months').format('MMM-YY'),
		},
		{
			month: moment().subtract(1, 'months').format('MM'),
			year: moment().subtract(1, 'months').format('YYYY'),
			date: moment().subtract(1, 'months').format('MMM-YY'),
		},
		{
			month: moment().subtract(0, 'months').format('MM'),
			year: moment().subtract(0, 'months').format('YYYY'),
			date: moment().subtract(0, 'months').format('MMM-YY'),
		},
	]

	let escapeArr = []

	for (let d of dates) {
		let thedate = d.date
		let escapes = await await Doa25pt.aggregate([
			{
				$match: {
					division: division,
					grade: 'Major',
				},
			},
			{
				$project: {
					_id: 0,
					month: { $month: '$buildDate' },
					year: { $year: '$buildDate' },
				},
			},
			{
				$match: {
					month: +d.month,
					year: +d.year,
				},
			},
		])

		let escapesNumber = escapes.length

		escapeArr.push({
			thedate,
			escapesNumber,
		})
	}

	const escapeMonths = escapeArr.map((e) => e.thedate)
	const escapeData = escapeArr.map((e) => e.escapesNumber)

	// const bhlSDBuildOne = await Doa25pt.aggregate([
	// 	{
	// 		$match: {
	// 			division: {
	// 				$in: ['BHL', 'SD'],
	// 			},
	// 			grade: 'Major',
	// 			count: { $lt: 1 },
	// 		},
	// 	},
	// 	{
	// 		$project: {
	// 			_id: 0,
	// 			month: { $month: '$buildDate' },
	// 			year: { $year: '$buildDate' },
	// 		},
	// 	},
	// 	{
	// 		$match: {
	// 			month: +sevenMonthsAgoNumber,
	// 			year: +sevenMonthsAgoNumberY,
	// 		},
	// 	},
	//)

	res.render('dash/qmrd2', {
		division,
		escapeMonths,
		escapeData,
		dpuMonths,
		dealerShortMonths,
		internalDpuRaw,
		internalDpuData,
		internalDpuTarget,
		internalCfcRaw,
		internalCfcData,
		internalCfcTarget,
		allDoaClaimsWith4C,
		allDoaClaims,
		allT0Claims,
		allT0ClaimsWith4C,
		allDoaClaimsWithout4C,
		allT0ClaimsWithout4C,
		noActionPercentDOA,
		noActionPercentT0,

		mriDoaDealers,
		mriT0Dealers,
		dpuTracks,
		doaImprovements,
		theMonths,
		shortMonths,
		daoDPU,
		doaDPUMax,
		daoRFT,
		daoDPUTarget,
		daoRFTTarget,
		t0DPU,
		t0DPUTarget,
		t0DPUMax,
		t0RFT,
		t0RFTTarget,
		escapeDPU,
		escapeDPUMax,
		escapeTarget,
		doaDealerColor,
		t0CustomerColor,
		escapeColor,
		majorEscapesRepeatCurrent,
		majorEscapesRepeatPrev,
		doaTop50RepeatPercentCurrent,
		doaTop50RepeatPercentPrev,
		doaTop50RepeatPercentCurrentColor,
		doa4cCoveragePercent,
		doa4cNotCoveragePercent,
		t04cCoveragePercent,
		to4cNotCoveragePercent,
		doaTop50Red,
		doaTop50Amber,
		doaTop50Green,
		t0Top50Red,
		t0Top50Amber,
		t0Top50Green,
		top10DealerRft,
		top10DealerRftTarget,
		top10CustomerRft,
		top10CustomerRftTarget,
		// top10DealerRftColor,
		top10CustomerRftColor,
		majorEscapeRepeatColor,

		internalImprovements,
		t0Top50RepeatPercentCurrent,
		t0Top50RepeatPercentPrev,
		t0Top50RepeatPercentCurrentColor,
	})
}

module.exports.qmrc2 = async (req, res) => {
	const { division } = req.params
	function mode(arr) {
		const counts = {}
		let maxCount = 0
		let maxKey
		// Count how many times each object (or really its string representation)
		// appears, and keep track of the highest count we've seen.
		for (let i = 0; i < arr.length; i++) {
			const key = arr[i]
			const count = (counts[key] = (counts[key] || 0) + 1)
			if (count > maxCount) {
				maxCount = count
				maxKey = key
			}
		}
		// Return (one of) the highest keys we've seen, or undefined.
		return maxKey
	}

	const mri = await Mri.aggregate([
		{
			$match: {
				division,
			},
		},
		// {
		// 	$project:{
		// 		_id:-1,
		// 		doa_dpu:1,
		// 	}
		// }
	])

	const daoDPU = mri.map((m) => +parseFloat(m.doa_dpu).toFixed(3))

	const doaDPUMax = +parseFloat((Math.max(...daoDPU.filter((value) => !Number.isNaN(value))) / 100) * 400).toFixed(3)

	// const daoDPUTarget = mri.map((m) => +parseFloat(m.doa_dpu_target).toFixed(3))

	// const daoRFT = mri.map((m) => Math.round(m.doa_rft_percent))

	const daoRFTTarget = mri.map((m) => Math.round(m.doa_rft_target))

	//start of customer
	const theMonths = mri.map((m) => m.month)

	const shortMonths = mri.map((m) => m.short_months).filter((m) => m !== '')

	const extraShortMonths = mri.map((m) => m.extra_short_months).filter((m) => m !== 'N/A')

	const t3Rft = mri.map((m) => Math.round(m.t3_rft))
	const t1Rft = mri.map((m) => Math.round(m.t1_rft))

	const t3RFTTarget = mri.map((m) => Math.round(m.t3_rft_target))

	const t3DPU = mri.map((m) => +parseFloat(m.t3_dpu).toFixed(3))
	const t1DPU = mri.map((m) => +parseFloat(m.t1_dpu).toFixed(3))

	const t3DPUTarget = mri.map((m) => +parseFloat(m.t3_dpu_target).toFixed(3))

	const t3DPUMax = +parseFloat((Math.max(...t3DPU.filter((value) => !Number.isNaN(value))) / 100) * 200).toFixed(3)

	// t0 color status

	const t3RFTLatest = t3Rft.filter((value) => !Number.isNaN(value))[t3Rft.filter((value) => !Number.isNaN(value)).length - 1]

	const t3RFTPrev = t3Rft.filter((value) => !Number.isNaN(value))[t3Rft.filter((value) => !Number.isNaN(value)).length - 2]

	const t3RFTLatestTarget = t3RFTTarget.filter((value) => !Number.isNaN(value))[0]

	//below target but above last month  => Amber
	if (+t3RFTLatest <= +t3RFTLatestTarget && +t3RFTLatest >= +t3RFTPrev) t3RftColor = 'orange'

	//belowtarget also less than last month  => Red
	if (+t3RFTLatest <= +t3RFTLatestTarget && +t3RFTLatest <= +t3RFTPrev) t3RftColor = 'red'

	//above target
	if (+t3RFTLatest >= +t3RFTLatestTarget) t3RftColor = 'green'

	// t3 dpu color status

	const t3DPULatest = t3DPU.filter((value) => !Number.isNaN(value))[t3DPU.filter((value) => !Number.isNaN(value)).length - 1]

	const t3DPUPrev = t3DPU.filter((value) => !Number.isNaN(value))[t3DPU.filter((value) => !Number.isNaN(value)).length - 2]

	const t3DPULatestTarget = t3DPUTarget.filter((value) => !Number.isNaN(value))[0]

	//Over target but below last month  => Amber
	if (+t3DPULatest >= +t3DPULatestTarget && +t3DPULatest <= +t3DPUPrev) t3DPUColor = 'orange'

	//Over target also more than last month  => Red
	if (+t3DPULatest >= +t3DPULatestTarget && +t3DPULatest >= +t3DPUPrev) t3DPUColor = 'red'

	//below target
	if (+t3DPULatest <= +t3DPULatestTarget) t3DPUColor = 'green'

	const t3Top50RepeatCurrent = mri.map((m) => m.t3_top50_repeat_percent).filter((m) => m !== 'N/A')[
		mri.map((m) => m.t3_top50_repeat_percent).filter((m) => m !== 'N/A').length - 1
	]

	const t3Top50RepeatPrev = mri.map((m) => m.t3_top50_repeat_percent).filter((m) => m !== 'N/A')[
		mri.map((m) => m.t3_top50_repeat_percent).filter((m) => m !== 'N/A').length - 2
	]

	if (+t3Top50RepeatCurrent <= +t3Top50RepeatPrev) {
		t3Top5RepeatPercentColor = 'green'
	} else {
		t3Top5RepeatPercentColor = 'red'
	}

	const t1LeakDPU = mri.map((m) => +parseFloat(m.t1_leaks_dpu).toFixed(3))

	const t1LeakDPUMax = +parseFloat((Math.max(...t1LeakDPU.filter((value) => !Number.isNaN(value))) / 100) * 400).toFixed(3)

	const t1LeakDPUTarget = mri.map((m) => +parseFloat(m.t1_leaks_dpu_target).toFixed(3))

	const t3LeakDPU = mri.map((m) => +parseFloat(m.t3_leaks_dpu).toFixed(3))

	const t3LeakDPUMax = +parseFloat((Math.max(...t3LeakDPU.filter((value) => !Number.isNaN(value))) / 100) * 150).toFixed(3)

	const t3LeakDPUTarget = mri.map((m) => +parseFloat(m.t3_leaks_dpu_traget).toFixed(3))

	//end of customer

	const t0DPU = mri.map((m) => +parseFloat(m.t0_dpu).toFixed(3))

	const t0DPUTarget = mri.map((m) => +parseFloat(m.t0_dpu_target).toFixed(3))

	const t0DPUMax = +parseFloat((Math.max(...t0DPU.filter((value) => !Number.isNaN(value))) / 100) * 400).toFixed(3)

	const t0RFT = mri.map((m) => Math.round(m.t0_rft))

	const t0RFTTarget = mri.map((m) => Math.round(m.t0_rft_target))

	const escapeDPU = mri.map((m) => +parseFloat(m.escape_dpu).toFixed(3))

	const escapeDPUMax = +parseFloat((Math.max(...escapeDPU.filter((value) => !Number.isNaN(value))) / 100) * 180).toFixed(3)

	const escapeTarget = mri.map((m) => +parseFloat(m.escape_dpu_target).toFixed(3))

	let doaDealerColor = 'white'

	if (
		daoDPU.filter((value) => !Number.isNaN(value))[daoDPU.filter((value) => !Number.isNaN(value)).length - 1] <=
		daoDPU.filter((value) => !Number.isNaN(value))[daoDPU.filter((value) => !Number.isNaN(value)).length - 2]
	) {
		doaDealerColor = 'green'
	} else {
		doaDealerColor = 'red'
	}

	if (
		t0DPU.filter((value) => !Number.isNaN(value))[t0DPU.filter((value) => !Number.isNaN(value)).length - 1] <=
		t0DPU.filter((value) => !Number.isNaN(value))[t0DPU.filter((value) => !Number.isNaN(value)).length - 2]
	) {
		t0CustomerColor = 'green'
	} else {
		t0CustomerColor = 'red'
	}

	if (
		escapeDPU.filter((value) => !Number.isNaN(value))[escapeDPU.filter((value) => !Number.isNaN(value)).length - 1] <=
		escapeDPU.filter((value) => !Number.isNaN(value))[escapeDPU.filter((value) => !Number.isNaN(value)).length - 2]
	) {
		escapeColor = 'green'
	} else {
		escapeColor = 'red'
	}

	const majorEscapesRepeatCurrent = mri.map((m) => m.major_escape_repeats).filter((m) => m !== undefined)[
		mri.map((m) => m.major_escape_repeats).filter((m) => m !== undefined).length - 1
	]
	const majorEscapesRepeatPrev = mri.map((m) => m.major_escape_repeats).filter((m) => m !== undefined)[
		mri.map((m) => m.major_escape_repeats).filter((m) => m !== undefined).length - 2
	]

	const doa4cCoveragePercent = mri.map((m) => m.doa_4c_coverage_percent).filter((m) => m !== undefined)[0]

	const doa4cNotCoveragePercent = 100 - +doa4cCoveragePercent

	const t04cCoveragePercent = mri.map((m) => m.t0_4c_coverage_percent).filter((m) => m !== undefined)[0]

	const to4cNotCoveragePercent = 100 - +t04cCoveragePercent

	const top10DealerRft = mri.map((m) => Math.round(m.top10_dealer_rft)).splice(11)

	const top10DealerRftTarget = mri.map((m) => Math.round(m.top10_dealer_rft_target)).splice(11)

	const top10CustomerRft = mri.map((m) => Math.round(m.top10_customer_rft)).splice(11)

	const top10CustomerRftTarget = mri.map((m) => Math.round(m.top10_customer_rft_target)).splice(11)

	// let top10DealerRftColor = 'white'

	if (majorEscapesRepeatCurrent <= majorEscapesRepeatPrev) {
		majorEscapeRepeatColor = 'green'
	} else {
		majorEscapeRepeatColor = 'red'
	}

	const t3Improvements = await Qmr.find({
		division,
		type: 't3_leak_improvement',
	})
	const t3FocusArea = await Qmr.find({
		division,
		type: 't3_leak_focus_area',
	})

	const serviceTop10OperationsLate = mri.map((m) => m.service_top10_operations_late).splice(11)

 

	const serviceTop10OperationsTotal = mri.map((m) => m.service_top10_operations_total).splice(11)



	const serviceTop10SupplierLate = mri.map((m) => m.service_top10_supplier_late).splice(11)

	const serviceTop10SupplierTotal = mri.map((m) => m.service_top10_supplier_total).splice(11)

	const t3OperationsRft = mri.map((m) => m.t3_operations_rft)
	const t3OperationsRftTarget = mri.map((m) => m.t3_operations_rft_target)

	const t3OperationsDpu = mri.map((m) => m.t3_operations_dpu)
	const t3OperationsDpuTarget = mri.map((m) => m.t3_operations_dpu_target)

	const t3SupplierRft = mri.map((m) => m.t3_supplier_rft)
	const t3SupplierRftTarget = mri.map((m) => m.t3_supplier_rft_target)

	const t3SupplierDpu = mri.map((m) => m.t3_supplier_dpu)
	const t3SupplierDpuTarget = mri.map((m) => m.t3_supplier_dpu_target)

	const t3DesignRft = mri.map((m) => m.t3_design_rft)
	const t3DesignRftTarget = mri.map((m) => m.t3_design_rft_target)

	const t3DesignDpu = mri.map((m) => m.t3_design_dpu)
	const t3DesignDpuTarget = mri.map((m) => m.t3_design_dpu_target)

	const top50DataT3 = await Claim.aggregate([
		{
			$match: {
				division,
				active: true,
				tPeriod: { $in: ['T000', 'T001', 'T002', 'T003'] },
				outcome: {
					$nin: ['Reject', 'Z Code'],
				},
				$or: [
					{ buildDate: { $regex: tenMonthsAgo } },
					{ buildDate: { $regex: nineMonthsAgo } },
					{ buildDate: { $regex: eightMonthsAgo } },
					{ buildDate: { $regex: sevenMonthsAgo } },
					{ buildDate: { $regex: sixMonthsAgo } },
					{ buildDate: { $regex: fiveMonthsAgo } },
					{ buildDate: { $regex: fourMonthsAgo } },
					{ buildDate: { $regex: threeMonthsAgo } },
					{ buildDate: { $regex: twoMonthsAgo } },
					{ buildDate: { $regex: oneMonthAgo } },
					{ buildDate: { $regex: thisMonth } },
				],
			},
		},
		{
			$group: {
				_id: '$failedPart',
				concernArr: { $addToSet: '$concern' },
				ragArr: { $addToSet: '$rag' },
				top50OpenDateArr: { $addToSet: '$top50OpenedDate' },
				top50ContainedDateArr: { $addToSet: '$top50ContainedDate' },
				top50ClosedDateArr: { $addToSet: '$top50ClosedDate' },
				closureDateArr: { $addToSet: '$closureDate' },
				asdJoshArr: { $addToSet: '$asdJosh' },
				actionArr: { $addToSet: '$action' },
				championArr: { $addToSet: '$champion' },
				sccJoshArr: { $addToSet: '$sccJosh' },
				divisionArr: { $addToSet: '$division' },
				areaArr: { $addToSet: '$area' },
				linkedArr: { $addToSet: '$top50Linked' },
				top50LinkedToArr: { $addToSet: '$top50LinkedTo' },
				buildDateArr: {
					$push: {
						$substr: ['$buildDate', 3, 10],
					},
				},
				importedDateArr: {
					$push: {
						importedDate: '$importedDate',
					},
				},
				// claimsArr: {
				// 	$push: {
				// 		claimNumber: '$claimNumber',
				// 		closureDate: '$closureDate',
				// 	},
				// },

				count: { $sum: 1 },
			},
		},
		{
			$addFields: {
				month1: [],
				month2: [],
				month3: [],
				month4: [],
				month5: [],
				month6: [],
				month7: [],
				month8: [],
				month9: [],
				month10: [],
				month11: [],
				status: '',
				asd: '',
				color: 'grey',
				percentageCont: 0,
				fourCArr: [],
				failedCutIn: false,
				daysOpen: '--',
				daysContained: '--',
				daysRemaining: '--',
				daysRemainingColor: '',
				fourCIssued: 'No',
				cabsCount: 0,
				psCount: 0,
				axlesCount: 0,
				hbuCount: 0,
				fourCLinked: false,
				linkedTo: '',
				linkedFourC: '',
				inOtherTop50: false,
				claimInLast48Hours: '',
				trend: 'same',
			},
		},
		// { $sort: { count: -1, _id: 1 } },

		{ $sort: { count: -1, ragArr: -1, _id: 1 } },
		{ $limit: 50 },
	])

	let openT3 = 0
	let containedT3 = 0
	let closedT3 = 0

	for (let t of top50DataT3) {
		t.fourCLinked = t.linkedArr[0]
		if (t.fourCLinked) {
			t.linkedTo = t.top50LinkedToArr[0]
			t.linkedFourC = await Claim.findById(t.linkedTo)
			t.status = t.linkedFourC.status
		} else {
			t.status = t.ragArr[0]
		}

		if (t.status === 'Open') openT3++
		if (t.status === 'Contained') containedT3++
		if (t.status === 'Closed') closedT3++
	}

	const t3Top50Red = Math.round((openT3 / top50DataT3.length) * 100)
	const t3Top50Amber = Math.round((containedT3 / top50DataT3.length) * 100)
	const t3Top50Green = Math.round((closedT3 / top50DataT3.length) * 100)

	const noActionPercentT3 = 100 - t3Top50Red - t3Top50Amber - t3Top50Green

	res.render('dash/qmrc2', {
		division,
		daoRFTTarget,
		t3Improvements,
		t3FocusArea,
		doaDPUMax,
		theMonths,
		shortMonths,
		extraShortMonths,
		t3DPU,
		t3DPUMax,
		t3Rft,
		t3RftColor,
		t3DPUTarget,
		t3RFTTarget,
		t3DPUColor,
		t3Top50Red,
		t3Top50Amber,
		t3Top50Green,
		t3Top50RepeatCurrent,
		t3Top50RepeatPrev,
		t3Top5RepeatPercentColor,
		t1LeakDPU,
		t1LeakDPUMax,
		t1LeakDPUTarget,
		t3LeakDPU,
		t3LeakDPUMax,
		t3LeakDPUTarget,
		noActionPercentT3,

		t0DPU,
		t0DPUTarget,
		t0DPUMax,
		t0RFT,
		t0RFTTarget,
		escapeDPU,
		escapeDPUMax,
		escapeTarget,
		doaDealerColor,
		t0CustomerColor,
		escapeColor,
		majorEscapesRepeatCurrent,
		majorEscapesRepeatPrev,

		serviceTop10OperationsLate,
		serviceTop10OperationsTotal,
		serviceTop10SupplierLate,
		serviceTop10SupplierTotal,
		t3OperationsRft,
		t3OperationsRftTarget,
		t3OperationsDpu,
		t3OperationsDpuTarget,
		t3SupplierRft,
		t3SupplierRftTarget,
		t3SupplierDpu,
		t3SupplierDpuTarget,
		t3DesignRft,
		t3DesignRftTarget,
		t3DesignDpu,
		t3DesignDpuTarget,
		t1Rft,
		t1DPU,
	})
}
module.exports.updateQmr = async (req, res, next) => {
	const { id } = req.params

	const qmr = await Qmr.findByIdAndUpdate(id, {
		...req.body,
	})

	// console.log(req.body)

	res.redirect(`/dash/qmrd/${qmr.division}`)
	// res.redirect(`/dash/qmrd/LDL`)
}
module.exports.updateQmrCustomer = async (req, res, next) => {
	const { id } = req.params

	const qmr = await Qmr.findByIdAndUpdate(id, {
		...req.body,
	})

	// console.log(req.body)

	res.redirect(`/dash/qmrc/${qmr.division}`)
	// res.redirect(`/dash/qmrd/LDL`)
}

module.exports.updateCabsMri = async (req, res, next) => {
	const { id } = req.params

	const mri = await CabMri.findByIdAndUpdate(id, {
		...req.body,
	})

	// console.log(req.body)

	res.redirect(`/dash/qmrdcabs`)
	// res.redirect(`/dash/qmrd/LDL`)
}

// qmr cabs

module.exports.qmrdCabs = async (req, res) => {
	const division = 'Cabs'
	const startOfYear = new Date('2022, 01, 01')

	const mri = await Mri.aggregate([
		{
			$match: {
				division: 'LDL',
			},
		},
	])

	const seventeenWeeksAgo = new Date(moment().subtract(16, 'weeks'))

	const buildsByWeek = await Retail.aggregate([
		{
			$match: {},
		},
		{
			$addFields: {
				formattedBuild: {
					$dateFromString: {
						dateString: '$buildDate',
						format: '%d/%m/%Y',
					},
				},
			},
		},
		{
			$match: {
				formattedBuild: { $gte: seventeenWeeksAgo },
			},
		},
		{
			$project: {
				week: { $week: '$formattedBuild' },
			},
		},
		{
			$group: {
				_id: { week: '$week' },
				count: { $sum: 1 },
			},
		},
		{ $sort: { _id: 1 } },
	])

	const majorsByWeek = await Claim.aggregate([
		{
			$match: {
				area: 'Cabs Systems',
				level: 'Major',
				fourC: 'Yes',
			},
		},
		{
			$addFields: {
				formattedBuild: {
					$dateFromString: {
						dateString: '$buildDate',
						format: '%d/%m/%Y',
					},
				},
			},
		},
		{
			$match: {
				formattedBuild: { $gte: seventeenWeeksAgo },
			},
		},
		{
			$project: {
				week: { $week: '$formattedBuild' },
			},
		},
		{
			$group: {
				_id: { week: '$week' },
				count: { $sum: 1 },
			},
		},
		{ $sort: { _id: 1 } },
	])

	const majorsByWeekByDiv = await Claim.aggregate([
		{
			$match: {
				area: 'Cabs Systems',
				level: 'Major',
				fourC: 'Yes',
			},
		},
		{
			$addFields: {
				formattedBuild: {
					$dateFromString: {
						dateString: '$buildDate',
						format: '%d/%m/%Y',
					},
				},
			},
		},
		{
			$match: {
				formattedBuild: { $gte: seventeenWeeksAgo },
			},
		},
		{
			$project: {
				week: { $week: '$formattedBuild' },
				division: 1,
				buildDate: 1,
				claimNumber: 1,
				vettedAt: 1,
				model: 1,
				name: 1,
				description: 1,
				status: 1,
			},
		},
		{
			$group: {
				_id: {
					week: '$week',
				},
				division: { $push: '$division' },
				// majors   : { $push: '$claimNumber' },
				majors: {
					$push: {
						twNumber: '$claimNumber',
						imported: '$vettedAt',
						division: '$division',
						model: '$model',
						name: '$name',
						buildDate: '$buildDate',
						narrative: '$description',
						status: '$status',
					},
				},
				count: { $sum: 1 },
			},
		},
		{ $sort: { _id: 1 } },
	])

	let weeks = [
		sixteenWeeksAgo,
		fifteenWeeksAgo,
		fourteenWeeksAgo,
		thirteenWeeksAgo,
		twelveWeeksAgo,
		elevenWeeksAgo,
		tenWeeksAgo,
		nineWeeksAgo,
		eightWeeksAgo,
		sevenWeeksAgo,
		sixWeeksAgo,
		fiveWeeksAgo,
		fourWeeksAgo,
		threeWeeksAgo,
		twoWeeksAgo,
		lastWeek,
		// thisWeek,
	]

	// console.log(thisWeek)

	let weeksDataArr = []
	let weeksDpuArr = []
	function getFirstMondayOfWeek(weekNo) {
		if (weekNo > thisWeek) {
			firstMonday = new Date(new Date().getFullYear() - 1, 0, 4, 0, 0, 0, 0)
		} else {
			firstMonday = new Date(new Date().getFullYear(), 0, 4, 0, 0, 0, 0)
		}

		while (firstMonday.getDay() != 1) {
			firstMonday.setDate(firstMonday.getDate() - 1)
		}
		if (1 <= weekNo && weekNo <= 52) return firstMonday.setDate(firstMonday.getDate() + 7 * (weekNo - 1))

		firstMonday.setDate(firstMonday.getDate() + 7 * (weekNo - 1))
		if ((weekNo = 53 && firstMonday.getDate() >= 22 && firstMonday.getDate() <= 28)) return firstMonday
		return null
	}

	for (let w of weeks) {
		let weekNum = w
		let date = new Date(getFirstMondayOfWeek(w))
		let bhl = 0
		let cp = 0
		let em = 0
		let hp = 0
		let ldl = 0
		let lp = 0
		let sd = 0
		let total = 0
		let majorsArr = []

		for (let d of majorsByWeekByDiv) {
			if (d._id.week === w) {
				bhl = countOccurrences(d.division, 'BHL')
				cp = countOccurrences(d.division, 'CP')
				em = countOccurrences(d.division, 'EM')
				hp = countOccurrences(d.division, 'HP')
				ldl = countOccurrences(d.division, 'LDL')
				lp = countOccurrences(d.division, 'LP')
				sd = countOccurrences(d.division, 'SD')
				total = d.count
				majorsArr = d.majors
			}
		}
		weeksDataArr.push({
			weekNum,
			date,
			bhl,
			cp,
			em,
			hp,
			ldl,
			lp,
			sd,
			total,
			majorsArr,
		})

		let build = 0
		let majors = 0

		for (let b of buildsByWeek) {
			if (b._id.week === w) {
				build = b.count
			}
		}
		for (let m of majorsByWeek) {
			if (m._id.week === w) {
				majors = m.count
			}
		}

		let majorDpu = (+majors / +build).toFixed(4)

		weeksDpuArr.push(majorDpu)
	}

	// months
	const theMonths = mri.map((m) => m.month)

	const shortMonths = mri.map((m) => m.short_months).filter((m) => m !== undefined)

	const extraShortMonths = mri.map((m) => m.extra_short_months).filter((m) => m !== '')

	const monthDtata = await Qmr.find({
		type: 'dpu_month',
	})

	const dpuMonths = monthDtata.map((m) => m.name)

	const cabLdlLine = await CabMri.find({
		name: 'ldlLine',
	})
	const cabBhlLine = await CabMri.find({
		name: 'bhlLine',
	})
	const cabCheadleLine = await CabMri.find({
		name: 'cheadleLine',
	})

	const cabsRftInDiv = await CabMri.find({
		name: 'rftInDiv',
	})

	const cabsRftInDivStats = [
		cabsRftInDiv[0].jan,
		cabsRftInDiv[0].feb,
		cabsRftInDiv[0].mar,
		cabsRftInDiv[0].apr,
		cabsRftInDiv[0].may,
		cabsRftInDiv[0].jun,
		cabsRftInDiv[0].jul,
		cabsRftInDiv[0].aug,
		cabsRftInDiv[0].sep,
		cabsRftInDiv[0].oct,
		cabsRftInDiv[0].nov,
		cabsRftInDiv[0].dec,
	]

	const cabsRftInDivTarget = [
		cabsRftInDiv[0].jan_target,
		cabsRftInDiv[0].feb_target,
		cabsRftInDiv[0].mar_target,
		cabsRftInDiv[0].apr_target,
		cabsRftInDiv[0].may_target,
		cabsRftInDiv[0].jun_target,
		cabsRftInDiv[0].jul_target,
		cabsRftInDiv[0].aug_target,
		cabsRftInDiv[0].sep_target,
		cabsRftInDiv[0].oct_target,
		cabsRftInDiv[0].nov_target,
		cabsRftInDiv[0].dec_target,
	]

	const ldlDPU = [
		cabLdlLine[0].jan,
		cabLdlLine[0].feb,
		cabLdlLine[0].mar,
		cabLdlLine[0].apr,
		cabLdlLine[0].may,
		cabLdlLine[0].jun,
		cabLdlLine[0].jul,
		cabLdlLine[0].aug,
		cabLdlLine[0].sep,
		cabLdlLine[0].oct,
		cabLdlLine[0].nov,
		cabLdlLine[0].dec,
	]
	const bhlDPU = [
		cabBhlLine[0].jan,
		cabBhlLine[0].feb,
		cabBhlLine[0].mar,
		cabBhlLine[0].apr,
		cabBhlLine[0].may,
		cabBhlLine[0].jun,
		cabBhlLine[0].jul,
		cabBhlLine[0].aug,
		cabBhlLine[0].sep,
		cabBhlLine[0].oct,
		cabBhlLine[0].nov,
		cabBhlLine[0].dec,
	]
	const cheadleDPU = [
		cabCheadleLine[0].jan,
		cabCheadleLine[0].feb,
		cabCheadleLine[0].mar,
		cabCheadleLine[0].apr,
		cabCheadleLine[0].may,
		cabCheadleLine[0].jun,
		cabCheadleLine[0].jul,
		cabCheadleLine[0].aug,
		cabCheadleLine[0].sep,
		cabCheadleLine[0].oct,
		cabCheadleLine[0].nov,
		cabCheadleLine[0].dec,
	]

	const ldlDPUTarget = [
		cabLdlLine[0].jan_target,
		cabLdlLine[0].feb_target,
		cabLdlLine[0].mar_target,
		cabLdlLine[0].apr_target,
		cabLdlLine[0].may_target,
		cabLdlLine[0].jun_target,
		cabLdlLine[0].jul_target,
		cabLdlLine[0].aug_target,
		cabLdlLine[0].sep_target,
		cabLdlLine[0].oct_target,
		cabLdlLine[0].nov_target,
		cabLdlLine[0].dec_target,
	]
	const bhlDPUTarget = [
		cabBhlLine[0].jan_target,
		cabBhlLine[0].feb_target,
		cabBhlLine[0].mar_target,
		cabBhlLine[0].apr_target,
		cabBhlLine[0].may_target,
		cabBhlLine[0].jun_target,
		cabBhlLine[0].jul_target,
		cabBhlLine[0].aug_target,
		cabBhlLine[0].sep_target,
		cabBhlLine[0].oct_target,
		cabBhlLine[0].nov_target,
		cabBhlLine[0].dec_target,
	]
	const cheadleDPUTarget = [
		cabCheadleLine[0].jan_target,
		cabCheadleLine[0].feb_target,
		cabCheadleLine[0].mar_target,
		cabCheadleLine[0].apr_target,
		cabCheadleLine[0].may_target,
		cabCheadleLine[0].jun_target,
		cabCheadleLine[0].jul_target,
		cabCheadleLine[0].aug_target,
		cabCheadleLine[0].sep_target,
		cabCheadleLine[0].oct_target,
		cabCheadleLine[0].nov_target,
		cabCheadleLine[0].dec_target,
	]

	const top5Dpu = await CabMri.find({ name: 'dpu_top_5' })

	const closuresOps = await CabMri.find({ name: 'top10ClosuresOps' })

	const closuresSUpplier = await CabMri.find({ name: 'top10ClosuresSupp' })

	const top10ClosuresOpsStats = [
		closuresOps[0].jan,
		closuresOps[0].feb,
		closuresOps[0].mar,
		closuresOps[0].apr,
		closuresOps[0].may,
		closuresOps[0].jun,
		closuresOps[0].jul,
		closuresOps[0].aug,
		closuresOps[0].sep,
		closuresOps[0].oct,
		closuresOps[0].nov,
		closuresOps[0].dec,
	]
	const top10ClosuresOpsStatsLate = [
		closuresOps[0].jan_target,
		closuresOps[0].feb_target,
		closuresOps[0].mar_target,
		closuresOps[0].apr_target,
		closuresOps[0].may_target,
		closuresOps[0].jun_target,
		closuresOps[0].jul_target,
		closuresOps[0].aug_target,
		closuresOps[0].sep_target,
		closuresOps[0].oct_target,
		closuresOps[0].nov_target,
		closuresOps[0].dec_target,
	]

	const top10ClosuresSuppStats = [
		closuresSUpplier[0].jan,
		closuresSUpplier[0].feb,
		closuresSUpplier[0].mar,
		closuresSUpplier[0].apr,
		closuresSUpplier[0].may,
		closuresSUpplier[0].jun,
		closuresSUpplier[0].jul,
		closuresSUpplier[0].aug,
		closuresSUpplier[0].sep,
		closuresSUpplier[0].oct,
		closuresSUpplier[0].nov,
		closuresSUpplier[0].dec,
	]
	const top10ClosuresSuppStatsLate = [
		closuresSUpplier[0].jan_target,
		closuresSUpplier[0].feb_target,
		closuresSUpplier[0].mar_target,
		closuresSUpplier[0].apr_target,
		closuresSUpplier[0].may_target,
		closuresSUpplier[0].jun_target,
		closuresSUpplier[0].jul_target,
		closuresSUpplier[0].aug_target,
		closuresSUpplier[0].sep_target,
		closuresSUpplier[0].oct_target,
		closuresSUpplier[0].nov_target,
		closuresSUpplier[0].dec_target,
	]

	const top50DataT3 = await Claim.aggregate([
		{
			$match: {
				area: 'Cabs Systems',
				tPeriod: { $in: ['T000', 'T001', 'T002', 'T003'] },
				// status   : { $in: [ 'Open', 'Contained', 'Closed' ] },
				outcome: {
					$nin: ['Reject', 'Z Code'],
				},
				$or: [
					{ buildDate: { $regex: tenMonthsAgo } },
					{ buildDate: { $regex: nineMonthsAgo } },
					{ buildDate: { $regex: eightMonthsAgo } },
					{ buildDate: { $regex: sevenMonthsAgo } },
					{ buildDate: { $regex: sixMonthsAgo } },
					{ buildDate: { $regex: fiveMonthsAgo } },
					{ buildDate: { $regex: fourMonthsAgo } },
					{ buildDate: { $regex: threeMonthsAgo } },
					{ buildDate: { $regex: twoMonthsAgo } },
					{ buildDate: { $regex: oneMonthAgo } },
					{ buildDate: { $regex: thisMonth } },
				],
			},
		},
		{
			$group: {
				_id: '$failedPart',
				statusArr: { $push: '$cabsRag' },
				count: { $sum: 1 },
			},
		},
		{
			$addFields: {
				status: [],
			},
		},
		{ $sort: { count: -1, _id: 1 } },
		{ $limit: 50 },
	])
	let openT3 = 0
	let containedT3 = 0
	let closedT3 = 0

	function mode(arr) {
		const counts = {}
		let maxCount = 0
		let maxKey
		// Count how many times each object (or really its string representation)
		// appears, and keep track of the highest count we've seen.
		for (let i = 0; i < arr.length; i++) {
			const key = arr[i]
			const count = (counts[key] = (counts[key] || 0) + 1)
			if (count > maxCount) {
				maxCount = count
				maxKey = key
			}
		}
		// Return (one of) the highest keys we've seen, or undefined.
		return maxKey
	}

	for (let t of top50DataT3) {
		t.status = mode(t.statusArr.sort())

		if (t.status === 'Open') openT3++
		if (t.status == null) openT3++
		if (t.status === 'Contained') containedT3++
		if (t.status === 'Closed') closedT3++
	}

	const t3Top50Red = Math.round((openT3 / top50DataT3.length) * 100)
	const t3Top50Amber = Math.round((containedT3 / top50DataT3.length) * 100)
	const t3Top50Green = Math.round((closedT3 / top50DataT3.length) * 100)

	res.render('dash/qmrdcabs', {
		division,
		dpuMonths,
		extraShortMonths,

		weeks,

		t3Top50Red,
		t3Top50Amber,
		t3Top50Green,

		weeksDataArr,
		weeksDpuArr,

		closuresOps,
		closuresSUpplier,
		top10ClosuresOpsStats,
		top10ClosuresOpsStatsLate,
		top10ClosuresSuppStats,
		top10ClosuresSuppStatsLate,

		cabLdlLine,
		cabBhlLine,
		cabCheadleLine,

		ldlDPU,
		bhlDPU,
		cheadleDPU,
		ldlDPUTarget,
		bhlDPUTarget,
		cheadleDPUTarget,

		cabsRftInDiv,
		cabsRftInDivStats,
		cabsRftInDivTarget,

		top5Dpu,

		theMonths,
		shortMonths,
	})
}

module.exports.prediction = async (req, res) => {
	const mri = await Stat.find({})

	const dateLessMOnths = (num) => {
		let formatetdDate = moment().subtract(num, 'months').format('MMM YYYY')
		return formatetdDate
	}
	const dateLessDays = (date, num) => {
		let formatetdDate = moment(date).subtract(num, 'days').format('YYYY, MM, DD')
		let fullDate = new Date(formatetdDate)
		return fullDate
	}
	const dateAddMOnthsFull = (date, num) => {
		let formatetdDate = moment(date).add(num, 'months').format('YYYY, MM, DD, 13:00:00')
		let fullDate = new Date(formatetdDate)
		return fullDate
	}

	const getStatsByMonth = async (date) => {
		const stat = await Stat.findOne({
			month_year: date.toUpperCase(),
			division: 'CABS',
		})
		const toThreePlaces = (num) => {
			let formattedNum = num.toFixed(3)

			if (isNaN(formattedNum)) formattedNum = 0
			return formattedNum
		}

		const getMonthNumberFromName = (month) => {
			return 'JanFebMarAprMayJunJulAugSepOctNovDec'.indexOf(month) / 3 + 1
		}

		const day = 01
		const year = date.substring(4, 8)
		const monthNumber = getMonthNumberFromName(date.substring(0, 3))

		let firstOfBuildMonth = new Date(`${year}, ${monthNumber}, ${day}, 13:00:00`)

		let t3ReportDate = dateAddMOnthsFull(firstOfBuildMonth, 5)

		if (t3ReportDate > new Date()) {
			t3SoldByDate = dateLessDays(t3ReportDate, 90)
		} else {
			t3SoldByDate = dateLessDays(new Date(), 90)
		}

		let t6ReportDate = dateAddMOnthsFull(firstOfBuildMonth, 9)

		if (t6ReportDate > new Date()) {
			t6SoldByDate = dateLessDays(t6ReportDate, 180)
		} else {
			t6SoldByDate = dateLessDays(new Date(), 180)
		}

		// console.log('Build => ', date)
		// console.log('Report => ', t3ReportDate)
		// console.log('Sold By => ', t3SoldByDate)

		// get list of models that have cab from cab systems
		const cabModels = await Cabin.distinct('name')

		const retails = await Cabsretail.aggregate([
			{
				$match: {
					salesModel: { $in: cabModels },
					soldDate: { $ne: '#' },
				},
			},
			{
				$addFields: {
					formattedBuild: {
						$dateFromString: {
							dateString: '$buildDate',
							format: '%d/%m/%Y',
						},
					},
				},
			},
			{
				$addFields: {
					formattedSold: {
						$dateFromString: {
							dateString: '$soldDate',
							format: '%d/%m/%Y',
						},
					},
				},
			},
			{
				$addFields: {
					buildMonth: {
						$month: {
							date: '$formattedBuild',
							timezone: 'Europe/London',
						},
					},
					buildYear: {
						$year: {
							date: '$formattedBuild',
							timezone: 'Europe/London',
						},
					},
				},
			},
			{
				$match: {
					buildMonth: +monthNumber,
					buildYear: +year,
					// formattedSold: { $lt: t3SoldByDate },
				},
			},
			{
				$addFields: {
					t3SoldByDate: t3SoldByDate,
					t6SoldByDate: t6SoldByDate,
				},
			},
			{
				$addFields: {
					in_t3: {
						$cond: [{ $lt: ['$formattedSold', '$t3SoldByDate'] }, 'Yes', 'No'],
					},
					in_t6: {
						$cond: [{ $lt: ['$formattedSold', '$t6SoldByDate'] }, 'Yes', 'No'],
					},
				},
			},
		])

		const t3Retails = retails.filter((item) => item.in_t3 === 'Yes')
		const t6Retails = retails.filter((item) => item.in_t6 === 'Yes')

		const daoRetailsNumber = retails.length
		const t3RetailsNumber = t3Retails.length
		const t6RetailsNumber = t6Retails.length

		const doaSerials = retails.map((t) => t.serialNumber)
		const t3Serials = t3Retails.map((t) => t.serialNumber)
		const t6Serials = t6Retails.map((t) => t.serialNumber)

		const daoClaims = await CabsClaim.find({
			name: { $in: doaSerials },
			tPeriod: 'DOA',
		})
		const t3Claims = await CabsClaim.find({
			name: {
				$in: t3Serials,
			},
			tPeriod: { $in: ['T000', 'T001', 'T002', 'T003'] },
		})
		const t6Claims = await CabsClaim.find({
			name: { $in: t6Serials },
			tPeriod: { $ne: 'DOA' },
		})
		const doaClaimsNumber = daoClaims.length
		const t3ClaimsNumber = t3Claims.length
		const t6ClaimsNumber = t6Claims.length

		const doaPrediction = toThreePlaces(doaClaimsNumber / daoRetailsNumber)
		const t3Prediction = toThreePlaces(t3ClaimsNumber / t3RetailsNumber)
		const t6Prediction = toThreePlaces(t6ClaimsNumber / t6RetailsNumber)

		let doa = 0
		let t3 = 0
		let t6 = 0

		if (stat) {
			doa = toThreePlaces(+stat.doa_dpu)
			t3 = toThreePlaces(+stat.t3_dpu)
			t6 = toThreePlaces(+stat.t6_dpu)
		}

		// console.log('DATE => ', date)
		// console.log('REPORT => ', t6ReportDate)
		// console.log('SOLD => ', t6SoldByDate)
		// console.log('DOA MACHINES => ', daoRetailsNumber)
		// console.log('DOA CLAIMS => ', doaClaimsNumber)
		// console.log('DOA PREDICTION => ', doaPrediction)
		// console.log('T3 MACHINES => ', t3RetailsNumber)
		// console.log('T3 CLAIMS => ', t3ClaimsNumber)
		// console.log('T3 PREDICTION => ', t3Prediction)
		// console.log('T6 MACHINES => ', t6RetailsNumber)
		// console.log('T6 CLAIMS => ', t6ClaimsNumber)
		// console.log('T6 PREDICTION => ', t6Prediction)

		return {
			date,
			doa,
			t3,
			t6,
			daoRetailsNumber,
			t3RetailsNumber,
			t6RetailsNumber,
			doaClaimsNumber,
			t3ClaimsNumber,
			t6ClaimsNumber,
			doaPrediction,
			t3Prediction,
			t6Prediction,
		}
	}

	const seventeenMonthsAgo = dateLessMOnths(17)
	const sixteenMonthsAgo = dateLessMOnths(16)
	const fifteenMonthsAgo = dateLessMOnths(15)
	const fourteenMonthsAgo = dateLessMOnths(14)
	const thirteenMonthsAgo = dateLessMOnths(13)
	const twelveMonthsAgo = dateLessMOnths(12)
	const elevenMonthsAgo = dateLessMOnths(11)
	const tenMonthsAgo = dateLessMOnths(10)
	const nineMonthsAgo = dateLessMOnths(9)
	const eightMonthsAgo = dateLessMOnths(8)
	const sevenMonthsAgo = dateLessMOnths(7)
	const sixMonthsAgo = dateLessMOnths(6)
	const fiveMonthsAgo = dateLessMOnths(5)
	const fourMonthsAgo = dateLessMOnths(4)
	const threeMonthsAgo = dateLessMOnths(3)
	const twoMonthsAgo = dateLessMOnths(2)
	const lastMonthDate = dateLessMOnths(1)
	const thisMonthDate = dateLessMOnths(0)

	const seventeenMonthsAgoStats = await getStatsByMonth(seventeenMonthsAgo)
	const sixteenMonthsAgoStats = await getStatsByMonth(sixteenMonthsAgo)
	const fifteenMonthsAgoStats = await getStatsByMonth(fifteenMonthsAgo)
	const fourteenMonthsAgoStats = await getStatsByMonth(fourteenMonthsAgo)
	const thirteenMonthsAgoStats = await getStatsByMonth(thirteenMonthsAgo)
	const twelveMonthsAgoStats = await getStatsByMonth(twelveMonthsAgo)
	const elevenMonthsAgoStats = await getStatsByMonth(elevenMonthsAgo)
	const tenMonthsAgoStats = await getStatsByMonth(tenMonthsAgo)
	const nineMonthsAgoStats = await getStatsByMonth(nineMonthsAgo)
	const eightMonthsAgoStats = await getStatsByMonth(eightMonthsAgo)
	const sevenMonthsAgoStats = await getStatsByMonth(sevenMonthsAgo)
	const sixMonthsAgoStats = await getStatsByMonth(sixMonthsAgo)
	const fiveMonthsAgoStats = await getStatsByMonth(fiveMonthsAgo)
	const fourMonthsAgoStats = await getStatsByMonth(fourMonthsAgo)
	const threeMonthsAgoStats = await getStatsByMonth(threeMonthsAgo)
	const twoMonthsAgoStats = await getStatsByMonth(twoMonthsAgo)
	const lastMonthAgoStats = await getStatsByMonth(lastMonthDate)
	const thisMonthAgoStats = await getStatsByMonth(thisMonthDate)

	const doaLabelArr = [
		twelveMonthsAgo,
		elevenMonthsAgo,
		tenMonthsAgo,
		nineMonthsAgo,
		eightMonthsAgo,
		sevenMonthsAgo,
		sixMonthsAgo,
		fiveMonthsAgo,
		fourMonthsAgo,
		threeMonthsAgo,
		twoMonthsAgo,
		lastMonthDate,
		thisMonthDate,
	]

	const doaArr = [
		twelveMonthsAgoStats.doa,
		elevenMonthsAgoStats.doa,
		tenMonthsAgoStats.doa,
		nineMonthsAgoStats.doa,
		eightMonthsAgoStats.doa,
		sevenMonthsAgoStats.doa,
		sixMonthsAgoStats.doa,
		fiveMonthsAgoStats.doa,
		fourMonthsAgoStats.doa,
		threeMonthsAgoStats.doa,
		twoMonthsAgoStats.doa,
		lastMonthAgoStats.doa,
		thisMonthAgoStats.doa,
	]
	const doaPredictionArr = [
		twelveMonthsAgoStats.doaPrediction,
		elevenMonthsAgoStats.doaPrediction,
		tenMonthsAgoStats.doaPrediction,
		nineMonthsAgoStats.doaPrediction,
		eightMonthsAgoStats.doaPrediction,
		sevenMonthsAgoStats.doaPrediction,
		sixMonthsAgoStats.doaPrediction,
		fiveMonthsAgoStats.doaPrediction,
		fourMonthsAgoStats.doaPrediction,
		threeMonthsAgoStats.doaPrediction,
		twoMonthsAgoStats.doaPrediction,
		lastMonthAgoStats.doaPrediction,
		thisMonthAgoStats.doaPrediction,
	]

	const doaNumbers = [
		{
			date: twelveMonthsAgoStats.date,
			machines: twelveMonthsAgoStats.daoRetailsNumber,
			claims: twelveMonthsAgoStats.doaClaimsNumber,
			doa: twelveMonthsAgoStats.doa,
			prediction: twelveMonthsAgoStats.doaPrediction,
		},
		{
			date: elevenMonthsAgoStats.date,
			machines: elevenMonthsAgoStats.daoRetailsNumber,
			claims: elevenMonthsAgoStats.doaClaimsNumber,
			doa: elevenMonthsAgoStats.doa,
			prediction: elevenMonthsAgoStats.doaPrediction,
		},
		{
			date: tenMonthsAgoStats.date,
			machines: tenMonthsAgoStats.daoRetailsNumber,
			claims: tenMonthsAgoStats.doaClaimsNumber,
			doa: tenMonthsAgoStats.doa,
			prediction: tenMonthsAgoStats.doaPrediction,
		},
		{
			date: nineMonthsAgoStats.date,
			machines: nineMonthsAgoStats.daoRetailsNumber,
			claims: nineMonthsAgoStats.doaClaimsNumber,
			doa: nineMonthsAgoStats.doa,
			prediction: nineMonthsAgoStats.doaPrediction,
		},
		{
			date: eightMonthsAgoStats.date,
			machines: eightMonthsAgoStats.daoRetailsNumber,
			claims: eightMonthsAgoStats.doaClaimsNumber,
			doa: eightMonthsAgoStats.doa,
			prediction: eightMonthsAgoStats.doaPrediction,
		},
		{
			date: sevenMonthsAgoStats.date,
			machines: sevenMonthsAgoStats.daoRetailsNumber,
			claims: sevenMonthsAgoStats.doaClaimsNumber,
			doa: sevenMonthsAgoStats.doa,
			prediction: sevenMonthsAgoStats.doaPrediction,
		},
		{
			date: sixMonthsAgoStats.date,
			machines: sixMonthsAgoStats.daoRetailsNumber,
			claims: sixMonthsAgoStats.doaClaimsNumber,
			doa: sixMonthsAgoStats.doa,
			prediction: sixMonthsAgoStats.doaPrediction,
		},
		{
			date: fiveMonthsAgoStats.date,
			machines: fiveMonthsAgoStats.daoRetailsNumber,
			claims: fiveMonthsAgoStats.doaClaimsNumber,
			doa: fiveMonthsAgoStats.doa,
			prediction: fiveMonthsAgoStats.doaPrediction,
		},
		{
			date: fourMonthsAgoStats.date,
			machines: fourMonthsAgoStats.daoRetailsNumber,
			claims: fourMonthsAgoStats.doaClaimsNumber,
			doa: fourMonthsAgoStats.doa,
			prediction: fourMonthsAgoStats.doaPrediction,
		},
		{
			date: threeMonthsAgoStats.date,
			machines: threeMonthsAgoStats.daoRetailsNumber,
			claims: threeMonthsAgoStats.doaClaimsNumber,
			doa: threeMonthsAgoStats.doa,
			prediction: threeMonthsAgoStats.doaPrediction,
		},
		{
			date: twoMonthsAgoStats.date,
			machines: twoMonthsAgoStats.daoRetailsNumber,
			claims: twoMonthsAgoStats.doaClaimsNumber,
			doa: twoMonthsAgoStats.doa,
			prediction: twoMonthsAgoStats.doaPrediction,
		},
		{
			date: lastMonthAgoStats.date,
			machines: lastMonthAgoStats.daoRetailsNumber,
			claims: lastMonthAgoStats.doaClaimsNumber,
			doa: lastMonthAgoStats.doa,
			prediction: lastMonthAgoStats.doaPrediction,
		},
		{
			date: thisMonthAgoStats.date,
			machines: thisMonthAgoStats.daoRetailsNumber,
			claims: thisMonthAgoStats.doaClaimsNumber,
			doa: thisMonthAgoStats.doa,
			prediction: thisMonthAgoStats.doaPrediction,
		},
	]

	const t3LabelArr = [
		fourteenMonthsAgo,
		thirteenMonthsAgo,
		twelveMonthsAgo,
		elevenMonthsAgo,
		tenMonthsAgo,
		nineMonthsAgo,
		eightMonthsAgo,
		sevenMonthsAgo,
		sixMonthsAgo,
		fiveMonthsAgo,
		fourMonthsAgo,
		threeMonthsAgo,
		twoMonthsAgo,
	]
	const t3Arr = [
		fourteenMonthsAgoStats.t3,
		thirteenMonthsAgoStats.t3,
		twelveMonthsAgoStats.t3,
		elevenMonthsAgoStats.t3,
		tenMonthsAgoStats.t3,
		nineMonthsAgoStats.t3,
		eightMonthsAgoStats.t3,
		sevenMonthsAgoStats.t3,
		sixMonthsAgoStats.t3,
		fiveMonthsAgoStats.t3,
		fourMonthsAgoStats.t3,
		threeMonthsAgoStats.t3,
		twoMonthsAgoStats.t3,
	]
	const t3PredictionArr = [
		fourteenMonthsAgoStats.t3Prediction,
		thirteenMonthsAgoStats.t3Prediction,
		twelveMonthsAgoStats.t3Prediction,
		elevenMonthsAgoStats.t3Prediction,
		tenMonthsAgoStats.t3Prediction,
		nineMonthsAgoStats.t3Prediction,
		eightMonthsAgoStats.t3Prediction,
		sevenMonthsAgoStats.t3Prediction,
		sixMonthsAgoStats.t3Prediction,
		fiveMonthsAgoStats.t3Prediction,
		fourMonthsAgoStats.t3Prediction,
		threeMonthsAgoStats.t3Prediction,
		twoMonthsAgoStats.t3Prediction,
	]

	const t3Numbers = [
		{
			date: fourteenMonthsAgoStats.date,
			machines: fourteenMonthsAgoStats.t3RetailsNumber,
			claims: fourteenMonthsAgoStats.t3ClaimsNumber,
			doa: fourteenMonthsAgoStats.t3,
			prediction: fourteenMonthsAgoStats.t3Prediction,
		},
		{
			date: thirteenMonthsAgoStats.date,
			machines: thirteenMonthsAgoStats.t3RetailsNumber,
			claims: thirteenMonthsAgoStats.t3ClaimsNumber,
			doa: thirteenMonthsAgoStats.t3,
			prediction: thirteenMonthsAgoStats.t3Prediction,
		},
		{
			date: twelveMonthsAgoStats.date,
			machines: twelveMonthsAgoStats.t3RetailsNumber,
			claims: twelveMonthsAgoStats.t3ClaimsNumber,
			doa: twelveMonthsAgoStats.t3,
			prediction: twelveMonthsAgoStats.t3Prediction,
		},
		{
			date: elevenMonthsAgoStats.date,
			machines: elevenMonthsAgoStats.t3RetailsNumber,
			claims: elevenMonthsAgoStats.t3ClaimsNumber,
			doa: elevenMonthsAgoStats.t3,
			prediction: elevenMonthsAgoStats.t3Prediction,
		},
		{
			date: tenMonthsAgoStats.date,
			machines: tenMonthsAgoStats.t3RetailsNumber,
			claims: tenMonthsAgoStats.t3ClaimsNumber,
			doa: tenMonthsAgoStats.t3,
			prediction: tenMonthsAgoStats.t3Prediction,
		},
		{
			date: nineMonthsAgoStats.date,
			machines: nineMonthsAgoStats.t3RetailsNumber,
			claims: nineMonthsAgoStats.t3ClaimsNumber,
			doa: nineMonthsAgoStats.t3,
			prediction: nineMonthsAgoStats.t3Prediction,
		},
		{
			date: eightMonthsAgoStats.date,
			machines: eightMonthsAgoStats.t3RetailsNumber,
			claims: eightMonthsAgoStats.t3ClaimsNumber,
			doa: eightMonthsAgoStats.t3,
			prediction: eightMonthsAgoStats.t3Prediction,
		},
		{
			date: sevenMonthsAgoStats.date,
			machines: sevenMonthsAgoStats.t3RetailsNumber,
			claims: sevenMonthsAgoStats.t3ClaimsNumber,
			doa: sevenMonthsAgoStats.t3,
			prediction: sevenMonthsAgoStats.t3Prediction,
		},
		{
			date: sixMonthsAgoStats.date,
			machines: sixMonthsAgoStats.t3RetailsNumber,
			claims: sixMonthsAgoStats.t3ClaimsNumber,
			doa: sixMonthsAgoStats.t3,
			prediction: sixMonthsAgoStats.t3Prediction,
		},
		{
			date: fiveMonthsAgoStats.date,
			machines: fiveMonthsAgoStats.t3RetailsNumber,
			claims: fiveMonthsAgoStats.t3ClaimsNumber,
			doa: fiveMonthsAgoStats.t3,
			prediction: fiveMonthsAgoStats.t3Prediction,
		},
		{
			date: fourMonthsAgoStats.date,
			machines: fourMonthsAgoStats.t3RetailsNumber,
			claims: fourMonthsAgoStats.t3ClaimsNumber,
			doa: fourMonthsAgoStats.t3,
			prediction: fourMonthsAgoStats.t3Prediction,
		},
		{
			date: threeMonthsAgoStats.date,
			machines: threeMonthsAgoStats.t3RetailsNumber,
			claims: threeMonthsAgoStats.t3ClaimsNumber,
			doa: threeMonthsAgoStats.t3,
			prediction: threeMonthsAgoStats.t3Prediction,
		},
		{
			date: twoMonthsAgoStats.date,
			machines: twoMonthsAgoStats.t3RetailsNumber,
			claims: twoMonthsAgoStats.t3ClaimsNumber,
			doa: twoMonthsAgoStats.t3,
			prediction: twoMonthsAgoStats.t3Prediction,
		},
	]

	const t6LabelArr = [
		seventeenMonthsAgo,
		sixteenMonthsAgo,
		fifteenMonthsAgo,
		fourteenMonthsAgo,
		thirteenMonthsAgo,
		twelveMonthsAgo,
		elevenMonthsAgo,
		tenMonthsAgo,
		nineMonthsAgo,
		eightMonthsAgo,
		sevenMonthsAgo,
		sixMonthsAgo,
		fiveMonthsAgo,
	]

	const t6Arr = [
		seventeenMonthsAgoStats.t6,
		sixteenMonthsAgoStats.t6,
		fifteenMonthsAgoStats.t6,
		fourteenMonthsAgoStats.t6,
		thirteenMonthsAgoStats.t6,
		twelveMonthsAgoStats.t6,
		elevenMonthsAgoStats.t6,
		tenMonthsAgoStats.t6,
		nineMonthsAgoStats.t6,
		eightMonthsAgoStats.t6,
		sevenMonthsAgoStats.t6,
		sixMonthsAgoStats.t6,
		fiveMonthsAgoStats.t6,
	]
	const t6PredictionArr = [
		seventeenMonthsAgoStats.t6Prediction,
		sixteenMonthsAgoStats.t6Prediction,
		fifteenMonthsAgoStats.t6Prediction,
		fourteenMonthsAgoStats.t6Prediction,
		thirteenMonthsAgoStats.t6Prediction,
		twelveMonthsAgoStats.t6Prediction,
		elevenMonthsAgoStats.t6Prediction,
		tenMonthsAgoStats.t6Prediction,
		nineMonthsAgoStats.t6Prediction,
		eightMonthsAgoStats.t6Prediction,
		sevenMonthsAgoStats.t6Prediction,
		sixMonthsAgoStats.t6Prediction,
		fiveMonthsAgoStats.t6Prediction,
	]

	const t6Numbers = [
		{
			date: seventeenMonthsAgoStats.date,
			machines: seventeenMonthsAgoStats.t6RetailsNumber,
			claims: seventeenMonthsAgoStats.t6ClaimsNumber,
			doa: seventeenMonthsAgoStats.t6,
			prediction: seventeenMonthsAgoStats.t6Prediction,
		},
		{
			date: sixteenMonthsAgoStats.date,
			machines: sixteenMonthsAgoStats.t6RetailsNumber,
			claims: sixteenMonthsAgoStats.t6ClaimsNumber,
			doa: sixteenMonthsAgoStats.t6,
			prediction: sixteenMonthsAgoStats.t6Prediction,
		},
		{
			date: fifteenMonthsAgoStats.date,
			machines: fifteenMonthsAgoStats.t6RetailsNumber,
			claims: fifteenMonthsAgoStats.t6ClaimsNumber,
			doa: fifteenMonthsAgoStats.t6,
			prediction: fifteenMonthsAgoStats.t6Prediction,
		},
		{
			date: fourteenMonthsAgoStats.date,
			machines: fourteenMonthsAgoStats.t6RetailsNumber,
			claims: fourteenMonthsAgoStats.t6ClaimsNumber,
			doa: fourteenMonthsAgoStats.t6,
			prediction: fourteenMonthsAgoStats.t6Prediction,
		},
		{
			date: thirteenMonthsAgoStats.date,
			machines: thirteenMonthsAgoStats.t6RetailsNumber,
			claims: thirteenMonthsAgoStats.t6ClaimsNumber,
			doa: thirteenMonthsAgoStats.t6,
			prediction: thirteenMonthsAgoStats.t6Prediction,
		},
		{
			date: twelveMonthsAgoStats.date,
			machines: twelveMonthsAgoStats.t6RetailsNumber,
			claims: twelveMonthsAgoStats.t6ClaimsNumber,
			doa: twelveMonthsAgoStats.t6,
			prediction: twelveMonthsAgoStats.t6Prediction,
		},
		{
			date: elevenMonthsAgoStats.date,
			machines: elevenMonthsAgoStats.t6RetailsNumber,
			claims: elevenMonthsAgoStats.t6ClaimsNumber,
			doa: elevenMonthsAgoStats.t6,
			prediction: elevenMonthsAgoStats.t6Prediction,
		},
		{
			date: tenMonthsAgoStats.date,
			machines: tenMonthsAgoStats.t6RetailsNumber,
			claims: tenMonthsAgoStats.t6ClaimsNumber,
			doa: tenMonthsAgoStats.t6,
			prediction: tenMonthsAgoStats.t6Prediction,
		},
		{
			date: nineMonthsAgoStats.date,
			machines: nineMonthsAgoStats.t6RetailsNumber,
			claims: nineMonthsAgoStats.t6ClaimsNumber,
			doa: nineMonthsAgoStats.t6,
			prediction: nineMonthsAgoStats.t6Prediction,
		},
		{
			date: eightMonthsAgoStats.date,
			machines: eightMonthsAgoStats.t6RetailsNumber,
			claims: eightMonthsAgoStats.t6ClaimsNumber,
			doa: eightMonthsAgoStats.t6,
			prediction: eightMonthsAgoStats.t6Prediction,
		},
		{
			date: sevenMonthsAgoStats.date,
			machines: sevenMonthsAgoStats.t6RetailsNumber,
			claims: sevenMonthsAgoStats.t6ClaimsNumber,
			doa: sevenMonthsAgoStats.t6,
			prediction: sevenMonthsAgoStats.t6Prediction,
		},
		{
			date: sixMonthsAgoStats.date,
			machines: sixMonthsAgoStats.t6RetailsNumber,
			claims: sixMonthsAgoStats.t6ClaimsNumber,
			doa: sixMonthsAgoStats.t6,
			prediction: sixMonthsAgoStats.t6Prediction,
		},
		{
			date: fiveMonthsAgoStats.date,
			machines: fiveMonthsAgoStats.t6RetailsNumber,
			claims: fiveMonthsAgoStats.t6ClaimsNumber,
			doa: fiveMonthsAgoStats.t6,
			prediction: fiveMonthsAgoStats.t6Prediction,
		},
	]

	res.render('dash/prediction', {
		doaLabelArr,
		t3LabelArr,
		t6LabelArr,
		doaArr,
		doaPredictionArr,
		t3PredictionArr,
		t6PredictionArr,
		t3Arr,
		t6Arr,
		doaNumbers,
		t3Numbers,
		t6Numbers,
	})
}

module.exports.savannahDashT3 = async (req, res) => {
	let division = ['USA']

	/////////////// new workings ///////////////////

	const actuals = await Actual.find({ division: { $in: division } }).limit(15)

	const actualLabels = actuals.map((a) => a.month_year)

	const lastMonth = getLastItemInArray(actualLabels)

	const day = 03
	const year = lastMonth.substring(4, 8)
	const monthNumber = getMonthNumberFromName(lastMonth.substring(0, 3))

	const fullDOALabels = actualLabels //.slice(10, -3) // lastDatePlusOne, lastDatePlusTwo, lastDatePlusThree]
	const fullT3Labels = actualLabels //.slice(0, -2) // lastDatePlusOne]

	let newDOAArr = []
	let newT3Arr = []

	for (let d of fullDOALabels) {
		const data = await getNewDataDOAUsa(division, d)
		newDOAArr.push(data)
	}

	for (let t of fullT3Labels) {
		const data = await getNewDataT3Usa(division, t)
		newT3Arr.push(data)
	}

	const getLastItemsInArrayByPosition = (arr, key, position) => {
		const noUndefined = arr.filter((item) => item && !item[key])

		return noUndefined[position]
	}

	const getLastItemsInArrayByPositionFromEnd = (arr, key, positionFromEnd) => {
		const noUndefined = arr.filter((item) => item && item[key])

		return noUndefined[noUndefined.length - positionFromEnd]
	}

	const newT3PrevLastStat = getLastItemsInArrayByPositionFromEnd(newT3Arr, 'inT3', 2)
	const newT3LastStat = getLastItemsInArrayByPositionFromEnd(newT3Arr, 'inT3', 1)
	const newT3Prediction1 = getLastItemsInArrayByPosition(newT3Arr, 'inT3', 0)
	const newT3Prediction2 = getLastItemsInArrayByPosition(newT3Arr, 'inT3', 1)
	const newT3Prediction3 = getLastItemsInArrayByPosition(newT3Arr, 'inT3', 2)

	const newDOALastStat = getLastItemsInArrayByPositionFromEnd(newDOAArr, 'inDoa', 2)
	const newDOAStat = getLastItemsInArrayByPositionFromEnd(newDOAArr, 'inDoa', 1)

  

	// const newT3UnactionedColorArr = newT3Arr.map((d) => d.unActionedColor)

	// const newT3DPUTargetArr = newT3Arr.map((d) => d.t3DpuTarget)

	const newT3TotalArr = newT3Arr.map((d) => d.totalDPU)
	const newT1LeakArr = newT3Arr.map((d) => d.t1Leak)
	const newT3LeakArr = newT3Arr.map((d) => d.t3Leak)

	const newT3OpenArr = newT3Arr.map((d) => d.openDpu)
	const newT3ContainedArr = newT3Arr.map((d) => d.containedDpu)
	const newT3ClosedArr = newT3Arr.map((d) => d.closedDpu)
	const newT3UnactionedArr = newT3Arr.map((d) => d.unActionedDpu)
	const newT3UnactionedColorArr = newT3Arr.map((d) => d.unActionedColor)
	const newT3RFTArr = newT3Arr.map((d) => d.rft)

	const newT3DPUTargetArr = newT3Arr.map((d) => d.t3DpuTarget)
	const newT3RFTTargetArr = newT3Arr.map((d) => d.t3RftTarget)

	/////////////// end new workings ///////////////////

	const divisions = ['T000', 'T001', 'T002', 'T003']

	const preT3 = moment().subtract(4, 'months').format('YYYY, MM, 01')
	const preT3Date = new Date(preT3)

	const top10FailureCode = await Claim.aggregate([
		{
			$match: {
				division: 'USA',
				tPeriod: { $in: divisions },
			},
		},
		{
			$addFields: {
				formattedBuild: {
					$dateFromString: {
						dateString: '$buildDate',
						format: '%d/%m/%Y',
					},
				},
			},
		},
		{
			$match: {
				formattedBuild: { $gte: preT3Date },
			},
		},
		{
			$group: {
				_id: {
					$substrCP: ['$failedAt', 3, 30],
				},
				count: { $sum: 1 },
			},
		},
		{ $sort: { count: -1, _id: 1 } },
		{ $limit: 10 },
	])

	const top10FailedParts = await Claim.aggregate([
		{
			$match: {
				division: 'USA',
				tPeriod: { $in: divisions },
			},
		},
		{
			$addFields: {
				formattedBuild: {
					$dateFromString: {
						dateString: '$buildDate',
						format: '%d/%m/%Y',
					},
				},
			},
		},
		{
			$match: {
				formattedBuild: { $gte: preT3Date },
			},
		},
		{
			$group: {
				_id: {
					$substrCP: ['$failedPart', 0, 20],
				},
				count: { $sum: 1 },
			},
		},
		{ $sort: { count: -1, _id: 1 } },
		{ $limit: 10 },
	])

	const top10Models = await Claim.aggregate([
		{
			$match: {
				division: 'USA',
				tPeriod: { $in: divisions },
			},
		},
		{
			$addFields: {
				formattedBuild: {
					$dateFromString: {
						dateString: '$buildDate',
						format: '%d/%m/%Y',
					},
				},
			},
		},
		{
			$match: {
				formattedBuild: { $gte: preT3Date },
			},
		},
		{
			$group: {
				_id: '$model',
				count: { $sum: 1 },
			},
		},
		{ $sort: { count: -1, _id: 1 } },
		{ $limit: 10 },
	])

	const top10PartsLeak = await Claim.aggregate([
		{
			$match: {
				division: 'USA',
				tPeriod: { $in: divisions },
				failedAt: 'E -HYDRAULICS',
				dCode: 'L -LEAKING',
			},
		},
		{
			$addFields: {
				formattedBuild: {
					$dateFromString: {
						dateString: '$buildDate',
						format: '%d/%m/%Y',
					},
				},
			},
		},
		{
			$match: {
				formattedBuild: { $gte: preT3Date },
			},
		},
		{
			$group: {
				_id: {
					$substrCP: ['$failedPart', 0, 20],
				},
				count: { $sum: 1 },
			},
		},
		{ $sort: { count: -1, _id: 1 } },
		{ $limit: 5 },
	])

	const top10ModelLeak = await Claim.aggregate([
		{
			$match: {
				division: 'USA',
				tPeriod: { $in: divisions },
				failedAt: 'E -HYDRAULICS',
				dCode: 'L -LEAKING',
			},
		},
		{
			$addFields: {
				formattedBuild: {
					$dateFromString: {
						dateString: '$buildDate',
						format: '%d/%m/%Y',
					},
				},
			},
		},
		{
			$match: {
				formattedBuild: { $gte: preT3Date },
			},
		},
		{
			$group: {
				_id: '$model',
				count: { $sum: 1 },
			},
		},
		{ $sort: { count: -1, _id: 1 } },
		{ $limit: 5 },
	])

	const top10FailedPartsLabels = top10FailedParts.map((f) => f._id)
	const top10FailedPartsData = top10FailedParts.map((f) => f.count)

	const top10FailureCodeLabels = top10FailureCode.map((f) => f._id)
	const top10FailureCodeData = top10FailureCode.map((f) => f.count)

	const top10ModelsLabels = top10Models.map((f) => f._id)
	const top10ModelsData = top10Models.map((f) => f.count)

	const top10PartsLeakLabels = top10PartsLeak.map((f) => f._id)
	const top10PartsLeakData = top10PartsLeak.map((f) => f.count)

	const top10ModelLeakLabels = top10ModelLeak.map((f) => f._id)
	const top10ModelLeakData = top10ModelLeak.map((f) => f.count)

	// prediction stuff

	const dateLessMOnths = (num) => {
		let formatetdDate = moment().subtract(num, 'months').format('MMM-YY')
		return formatetdDate
	}
	const dateLessDays = (date, num) => {
		let formatetdDate = moment(date).subtract(num, 'days').format('YYYY, MM, DD')
		let fullDate = new Date(formatetdDate)
		return fullDate
	}
	const dateAddMOnthsFull = (date, num) => {
		let formatetdDate = moment(date).add(num, 'months').format('YYYY, MM, DD, 13:00:00')
		let fullDate = new Date(formatetdDate)
		return fullDate
	}

	division = 'USA'

	res.render('dash/savannah-dashT3', {
		division,

		fullDOALabels,
		fullT3Labels,

		newT3PrevLastStat,
		newT3LastStat,
		newT3Prediction1,
		newT3Prediction2,
		newT3Prediction3,
		newDOALastStat,
		newDOAStat,

		// newT3DPUTargetArr,

		// newT3UnactionedColorArr,

		newT3TotalArr,
		newT1LeakArr,
		newT3LeakArr,

		//////////////////////////////

		newT3OpenArr,
		newT3ContainedArr,
		newT3ClosedArr,
		newT3UnactionedArr,
		newT3UnactionedColorArr,
		newT3RFTArr,

		newT3DPUTargetArr,
		newT3RFTTargetArr,

		///////////////

		top10FailedPartsLabels,
		top10FailedPartsData,

		top10FailureCodeLabels,
		top10FailureCodeData,

		top10ModelsLabels,
		top10ModelsData,

		top10PartsLeakLabels,
		top10PartsLeakData,

		top10ModelLeakLabels,
		top10ModelLeakData,
	})
}

module.exports.savannahDashDOA = async (req, res) => {
	let division = ['USA']

	const divisions = ['DOA']

	/////////////// new workings ///////////////////

	const actuals = await Actual.find({ division: { $in: division } }).limit(15)

	const actualLabels = actuals.map((a) => a.month_year)

	const lastMonth = getLastItemInArray(actualLabels)

	const day = 03
	const year = lastMonth.substring(4, 8)
	const monthNumber = getMonthNumberFromName(lastMonth.substring(0, 3))

	const fullDOALabels = actualLabels //.slice(0, -2) // lastDatePlusOne, lastDatePlusTwo, lastDatePlusThree]
	const fullT3Labels = actualLabels //.slice(0, -2) // lastDatePlusOne]

	let newDOAArr = []
	let newT3Arr = []

	for (let d of fullDOALabels) {
		const data = await getNewDataDOAUsa(division, d)
		newDOAArr.push(data)
	}

	for (let t of fullT3Labels) {
		const data = await getNewDataT3Usa(division, t)
		newT3Arr.push(data)
	}

	const getLastItemsInArrayByPosition = (arr, key, position) => {
		const noUndefined = arr.filter((item) => item && !item[key])

		return noUndefined[position]
	}

	const getLastItemsInArrayByPositionFromEnd = (arr, key, positionFromEnd) => {
		const noUndefined = arr.filter((item) => item && item[key])

		return noUndefined[noUndefined.length - positionFromEnd]
	}

	const newT3PrevLastStat = getLastItemsInArrayByPositionFromEnd(newT3Arr, 'inT3', 2)
	const newT3LastStat = getLastItemsInArrayByPositionFromEnd(newT3Arr, 'inT3', 1)

	const newDOALastStat = getLastItemsInArrayByPositionFromEnd(newDOAArr, 'inDoa', 2)
	const newDOAStat = getLastItemsInArrayByPositionFromEnd(newDOAArr, 'inDoa', 1)

	///////////////////////////

	const newT3OpenArr = newDOAArr.map((d) => d.openDpu)
	const newT3ContainedArr = newDOAArr.map((d) => d.containedDpu)
	const newT3ClosedArr = newDOAArr.map((d) => d.closedDpu)
	const newT3UnactionedArr = newDOAArr.map((d) => d.unActionedDpu)
	const newT3UnactionedColorArr = newDOAArr.map((d) => d.unActionedColor)
	const newT3RFTArr = newDOAArr.map((d) => d.rft)

	const newT3DPUTargetArr = newDOAArr.map((d) => d.t3DpuTarget)
	const newT3RFTTargetArr = newDOAArr.map((d) => d.t3RftTarget)

	/////////////////////////////////

	/////////////// end new workings ///////////////////

	const preT3 = moment().subtract(5, 'months').format('YYYY, MM, 01')
	const preT3End = moment().subtract(2, 'months').format('YYYY, MM, 01')

	const preT3Month1 = moment().subtract(5, 'months').format('MMM')
	const preT3Month2 = moment().subtract(4, 'months').format('MMM')
	const preT3Month3 = moment().subtract(3, 'months').format('MMM')
	const preT3Month4 = moment().subtract(2, 'months').format('MMM')
	const preT3Month5 = moment().subtract(1, 'months').format('MMM')
	const preT3Month6 = moment().subtract(0, 'months').format('MMM')

	const preT3Date = new Date(preT3)
	const preT3DateEnd = new Date(preT3End)

	const top10FailureCode = await Claim.aggregate([
		{
			$match: {
				division: 'USA',
				tPeriod: { $in: divisions },
			},
		},
		{
			$addFields: {
				formattedBuild: {
					$dateFromString: {
						dateString: '$buildDate',
						format: '%d/%m/%Y',
					},
				},
			},
		},
		{
			$match: {
				formattedBuild: { $gt: preT3Date, $lt: preT3DateEnd },
			},
		},
		{
			$group: {
				_id: {
					$substrCP: ['$failedAt', 3, 30],
				},
				count: { $sum: 1 },
			},
		},
		{ $sort: { count: -1, _id: 1 } },
		{ $limit: 10 },
	])

	const top10FailedParts = await Claim.aggregate([
		{
			$match: {
				division: 'USA',
				tPeriod: { $in: divisions },
			},
		},
		{
			$addFields: {
				formattedBuild: {
					$dateFromString: {
						dateString: '$buildDate',
						format: '%d/%m/%Y',
					},
				},
			},
		},
		{
			$match: {
				formattedBuild: { $gt: preT3Date, $lt: preT3DateEnd },
			},
		},
		{
			$group: {
				_id: {
					$substrCP: ['$failedPart', 0, 20],
				},
				count: { $sum: 1 },
			},
		},
		{ $sort: { count: -1, _id: 1 } },
		{ $limit: 10 },
	])

	const top10Models = await Claim.aggregate([
		{
			$match: {
				division: 'USA',
				tPeriod: { $in: divisions },
			},
		},
		{
			$addFields: {
				formattedBuild: {
					$dateFromString: {
						dateString: '$buildDate',
						format: '%d/%m/%Y',
					},
				},
			},
		},
		{
			$match: {
				formattedBuild: { $gt: preT3Date, $lt: preT3DateEnd },
			},
		},
		{
			$group: {
				_id: '$model',
				count: { $sum: 1 },
			},
		},
		{ $sort: { count: -1, _id: 1 } },
		{ $limit: 10 },
	])

	// new graphs
	const top10FailureCodeNew = await Claim.aggregate([
		{
			$match: {
				division: 'USA',
				tPeriod: { $in: divisions },
			},
		},
		{
			$addFields: {
				formattedBuild: {
					$dateFromString: {
						dateString: '$buildDate',
						format: '%d/%m/%Y',
					},
				},
			},
		},
		{
			$match: {
				formattedBuild: { $gt: preT3DateEnd },
			},
		},
		{
			$group: {
				_id: {
					$substrCP: ['$failedAt', 3, 30],
				},
				count: { $sum: 1 },
			},
		},
		{ $sort: { count: -1, _id: 1 } },
		{ $limit: 10 },
	])

	const top10FailedPartsNew = await Claim.aggregate([
		{
			$match: {
				division: 'USA',
				tPeriod: { $in: divisions },
			},
		},
		{
			$addFields: {
				formattedBuild: {
					$dateFromString: {
						dateString: '$buildDate',
						format: '%d/%m/%Y',
					},
				},
			},
		},
		{
			$match: {
				formattedBuild: { $gt: preT3DateEnd },
			},
		},
		{
			$group: {
				_id: {
					$substrCP: ['$failedPart', 0, 20],
				},
				count: { $sum: 1 },
			},
		},
		{ $sort: { count: -1, _id: 1 } },
		{ $limit: 10 },
	])

	const top10ModelsNew = await Claim.aggregate([
		{
			$match: {
				division: 'USA',
				tPeriod: { $in: divisions },
			},
		},
		{
			$addFields: {
				formattedBuild: {
					$dateFromString: {
						dateString: '$buildDate',
						format: '%d/%m/%Y',
					},
				},
			},
		},
		{
			$match: {
				formattedBuild: { $gt: preT3DateEnd },
			},
		},
		{
			$group: {
				_id: '$model',
				count: { $sum: 1 },
			},
		},
		{ $sort: { count: -1, _id: 1 } },
		{ $limit: 10 },
	])

	const top10FailedPartsLabels = top10FailedParts.map((f) => f._id)
	const top10FailedPartsData = top10FailedParts.map((f) => f.count)

	const top10FailureCodeLabels = top10FailureCode.map((f) => f._id)
	const top10FailureCodeData = top10FailureCode.map((f) => f.count)

	const top10ModelsLabels = top10Models.map((f) => f._id)
	const top10ModelsData = top10Models.map((f) => f.count)

	const top10FailedPartsLabelsNew = top10FailedPartsNew.map((f) => f._id)
	const top10FailedPartsDataNew = top10FailedPartsNew.map((f) => f.count)

	const top10FailureCodeLabelsNew = top10FailureCodeNew.map((f) => f._id)
	const top10FailureCodeDataNew = top10FailureCodeNew.map((f) => f.count)

	const top10ModelsLabelsNew = top10ModelsNew.map((f) => f._id)
	const top10ModelsDataNew = top10ModelsNew.map((f) => f.count)

	// prediction stuff

	const dateLessMOnths = (num) => {
		let formatetdDate = moment().subtract(num, 'months').format('MMM YYYY')
		return formatetdDate
	}
	const dateLessDays = (date, num) => {
		let formatetdDate = moment(date).subtract(num, 'days').format('YYYY, MM, DD')
		let fullDate = new Date(formatetdDate)
		return fullDate
	}
	const dateAddMOnthsFull = (date, num) => {
		let formatetdDate = moment(date).add(num, 'months').format('YYYY, MM, DD, 13:00:00')
		let fullDate = new Date(formatetdDate)
		return fullDate
	}

	const getStatsByMonth = async (date) => {
		const stat = await Actual.findOne({
			month_year: date,
			division: 'USA',
		})

		const toThreePlaces = (num) => {
			let formattedNum = num.toFixed(3)

			if (isNaN(formattedNum)) formattedNum = 0
			return formattedNum
		}

		const getMonthNumberFromName = (month) => {
			return 'JanFebMarAprMayJunJulAugSepOctNovDec'.indexOf(month) / 3 + 1
		}

		const day = 01
		const year = date.substring(4, 8)
		const monthNumber = getMonthNumberFromName(date.substring(0, 3))

		const totalBuild = await Retail.aggregate([
			{
				$match: {
					division: 'USA',
				},
			},
			{
				$addFields: {
					formattedBuild: {
						$dateFromString: {
							dateString: '$buildDate',
							format: '%d/%m/%Y',
						},
					},
				},
			},

			{
				$addFields: {
					buildMonth: {
						$month: {
							date: '$formattedBuild',
							timezone: 'Europe/London',
						},
					},
					buildYear: {
						$year: {
							date: '$formattedBuild',
							timezone: 'Europe/London',
						},
					},
				},
			},
			{
				$match: {
					buildMonth: +monthNumber,
					buildYear: +year,
					// formattedSold: { $lt: t3SoldByDate },
				},
			},
		])

		const buildSerials = totalBuild.map((b) => b.serialNumber)

		const doaFailedMachines = await Claim.distinct('name', {
			name: {
				$in: buildSerials,
			},
			division: 'USA',
			tPeriod: 'DOA',
		})

		const totalBuildNumber = totalBuild.length

		const totalNRFTDOA = doaFailedMachines.length
		const totalRFTDOA = totalBuildNumber - totalNRFTDOA

		const rftPercentDOA = Math.round((totalRFTDOA / totalBuildNumber) * 100) || 100

		const retails = await Retail.aggregate([
			{
				$match: {
					division: 'USA',
					soldDate: { $ne: '#' },
				},
			},
			{
				$addFields: {
					formattedBuild: {
						$dateFromString: {
							dateString: '$buildDate',
							format: '%d/%m/%Y',
						},
					},
				},
			},
			{
				$addFields: {
					formattedSold: {
						$dateFromString: {
							dateString: '$soldDate',
							format: '%d/%m/%Y',
						},
					},
				},
			},
			{
				$addFields: {
					buildMonth: {
						$month: {
							date: '$formattedBuild',
							timezone: 'Europe/London',
						},
					},
					buildYear: {
						$year: {
							date: '$formattedBuild',
							timezone: 'Europe/London',
						},
					},
				},
			},
			{
				$match: {
					buildMonth: +monthNumber,
					buildYear: +year,
					// formattedSold: { $lt: t3SoldByDate },
				},
			},
		])

		const daoRetailsNumber = retails.length

		const doaSerials = retails.map((t) => t.serialNumber)

		const daoClaims = await Claim.find({
			name: { $in: doaSerials },
			tPeriod: 'DOA',
			division: 'USA',
		})

		const doaClaimsNumber = daoClaims.length

		const doaPrediction = toThreePlaces(doaClaimsNumber / daoRetailsNumber)

		let doa = 0

		if (stat) {
			doa = toThreePlaces(+stat.doa_dpu)
		}

		return {
			date,
			doa,

			newT3OpenArr,
			newT3ContainedArr,
			newT3ClosedArr,
			newT3UnactionedArr,
			newT3UnactionedColorArr,
			newT3RFTArr,

			newT3DPUTargetArr,
			newT3RFTTargetArr,

			totalBuildNumber,
			daoRetailsNumber,

			doaClaimsNumber,

			doaPrediction,

			totalNRFTDOA, // nrft number doa
			totalRFTDOA, // rft number doa
			rftPercentDOA, //rft peercent doa

			daoRetailsNumber,
			doaClaimsNumber,
		}
	}

	const twoMonthsAgo = dateLessMOnths(2)

	const twoMonthsAgoStats = await getStatsByMonth(twoMonthsAgo)

	const prediction1 = twoMonthsAgoStats.doaPrediction
	const prediction1Date = twoMonthsAgoStats.date
	const prediction1TotalBuildNumber = twoMonthsAgoStats.totalBuildNumber
	const prediction1InT3 = twoMonthsAgoStats.daoRetailsNumber
	const prediction1InT3Claims = twoMonthsAgoStats.doaClaimsNumber
	const prediction1RFTNUmber = twoMonthsAgoStats.totalRFTDOA
	const prediction1NRFTNUmber = twoMonthsAgoStats.totalNRFTDOA
	const prediction1RFT = twoMonthsAgoStats.rftPercentDOA
	const prediction1NRFT = 10

	const prediction1MRIPercent = Math.round((prediction1InT3 / prediction1TotalBuildNumber) * 100)

	division = 'USA'

	res.render('dash/savannah-dashDOA', {
		division,

		preT3Month1,
		preT3Month2,
		preT3Month3,
		preT3Month4,
		preT3Month5,
		preT3Month6,

		fullDOALabels,
		fullT3Labels,

		newT3PrevLastStat,
		newT3LastStat,

		newDOALastStat,
		newDOAStat,

		newT3OpenArr,
		newT3ContainedArr,
		newT3ClosedArr,
		newT3UnactionedArr,
		newT3RFTArr,
		newT3UnactionedColorArr,
		newT3DPUTargetArr,

		/////////////////

		top10FailedPartsLabels,
		top10FailedPartsData,

		top10FailureCodeLabels,
		top10FailureCodeData,

		top10ModelsLabels,
		top10ModelsData,

		top10FailedPartsLabelsNew,
		top10FailedPartsDataNew,

		top10FailureCodeLabelsNew,
		top10FailureCodeDataNew,

		top10ModelsLabelsNew,
		top10ModelsDataNew,

		prediction1,
		prediction1Date,
		prediction1TotalBuildNumber,
		prediction1InT3,
		prediction1InT3Claims,
		prediction1RFT,
		prediction1NRFT,
		prediction1MRIPercent,
		prediction1RFTNUmber,
		prediction1NRFTNUmber,
	})
}

// let emlpClaims = [
// 	{
// 		supplier: 'GROTE INDUSTRIES EUROPE GMBH',
// 		claimNumber: 201136220,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201303071,
// 	},
// 	{
// 		supplier: 'THOMSON PETTIE LTD',
// 		claimNumber: 201336316,
// 	},
// 	{
// 		supplier: 'RAYNE PRECISION ENGINEERING',
// 		claimNumber: 201212045,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201112597,
// 	},
// 	{
// 		supplier: 'HOLMBURY LTD',
// 		claimNumber: 201346104,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201103940,
// 	},
// 	{
// 		supplier: 'SADDLERS COURT MFG LTD',
// 		claimNumber: 201110117,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201117039,
// 	},
// 	{
// 		supplier: 'FUYAO GLASS INDUSTRY GROUP (2414)',
// 		claimNumber: 201217685,
// 	},
// 	{
// 		supplier: 'KOHLER LOMBARDINI Srl',
// 		claimNumber: 201203303,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201223738,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201262232,
// 	},
// 	{
// 		supplier: 'KINGSPAN WATER & ENERGY LTD',
// 		claimNumber: 201277990,
// 	},
// 	{
// 		supplier: 'NINGBO JINHENG MACHINERY MAN.',
// 		claimNumber: 201250346,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201252941,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201330440,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201335361,
// 	},
// 	{
// 		supplier: 'PLASTIC MOULDING LTD',
// 		claimNumber: 201335353,
// 	},
// 	{
// 		supplier: 'EUROTEC INTERNATIONAL PLC',
// 		claimNumber: 201335299,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS (USD) LTD',
// 		claimNumber: 201332355,
// 	},
// 	{
// 		supplier: 'BLACKWOOD ENG LTD (USD)',
// 		claimNumber: 201106046,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201134345,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201158872,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201180673,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201185037,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201249544,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201326514,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201264674,
// 	},
// 	{
// 		supplier: 'SADDLERS COURT MFG LTD',
// 		claimNumber: 201269508,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201135363,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201159427,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201229923,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201213442,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201223837,
// 	},
// 	{
// 		supplier: 'NORLEC SHEET METAL LTD',
// 		claimNumber: 201259713,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201259707,
// 	},
// 	{
// 		supplier: 'BECKER INDUSTRIAL COATINGS LTD',
// 		claimNumber: 201265690,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201219399,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201220376,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201278224,
// 	},
// 	{
// 		supplier: 'CONCENTRIC HOF GMBH (EUR)',
// 		claimNumber: 201277891,
// 	},
// 	{
// 		supplier: 'ELESA (UK) LTD',
// 		claimNumber: 201273013,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201324740,
// 	},
// 	{
// 		supplier: 'BONY POLYMERS (P) LTD',
// 		claimNumber: 201274902,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201344758,
// 	},
// 	{
// 		supplier: 'HENKEL LOCTITE ADHESIVES LTD',
// 		claimNumber: 201090798,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201106610,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201106035,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201117543,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201106034,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201146674,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201215344,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201236688,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201253168,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201340917,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201292946,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201280891,
// 	},
// 	{
// 		supplier: 'JOHNSON ELECTRIC INTER. AG',
// 		claimNumber: 201237537,
// 	},
// 	{
// 		supplier: 'ADM PRESSINGS LIMITED',
// 		claimNumber: 201218691,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201221038,
// 	},
// 	{
// 		supplier: 'WUXI HONGSHENG HEAT EXCHANGER',
// 		claimNumber: 201221314,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201218962,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201345018,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201356877,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201111441,
// 	},
// 	{
// 		supplier: 'GATES HYDRAULICS  (EUR)',
// 		claimNumber: 201344423,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201356841,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201085757,
// 	},
// 	{
// 		supplier: 'TE CONNECTIVITY (USD)',
// 		claimNumber: 201217592,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201223559,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201279829,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201300333,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201135022,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201150968,
// 	},
// 	{
// 		supplier: 'ZF SERVICES UK LTD (EURO)',
// 		claimNumber: 201146368,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201222168,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL (Europe) GmbH',
// 		claimNumber: 201136798,
// 	},
// 	{
// 		supplier: 'LINECROSS LIMITED',
// 		claimNumber: 201225803,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201213613,
// 	},
// 	{
// 		supplier: 'CONCENTRIC HOF GMBH (EUR)',
// 		claimNumber: 201147901,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201147918,
// 	},
// 	{
// 		supplier: 'ZF SERVICES UK LTD (EURO)',
// 		claimNumber: 201102055,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201145266,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201196496,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201197181,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201199066,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201205205,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201225779,
// 	},
// 	{
// 		supplier: 'ELANDERS LTD',
// 		claimNumber: 201268815,
// 	},
// 	{
// 		supplier: 'SURE POWER INDUSTRIES INC',
// 		claimNumber: 201349638,
// 	},
// 	{
// 		supplier: 'FREUDENBERG SEALING TECHNOLOGIES',
// 		claimNumber: 201300765,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201300792,
// 	},
// 	{
// 		supplier: 'ECAM ENGINEERING LTD',
// 		claimNumber: 201300737,
// 	},
// 	{
// 		supplier: 'WAL LOW CARBON TECHNOLOGY CO LTD',
// 		claimNumber: 201229381,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201345972,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201096464,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201109391,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201284348,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201282037,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201358244,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201358214,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201358216,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201358175,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201358222,
// 	},
// 	{
// 		supplier: 'ZF SERVICES UK LTD (EURO)',
// 		claimNumber: 201134046,
// 	},
// 	{
// 		supplier: 'PEREI LIGHTING',
// 		claimNumber: 201158567,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS (USD) LTD',
// 		claimNumber: 201113572,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201131422,
// 	},
// 	{
// 		supplier: 'BUCHER HYDRAULICS SPA (EUR)',
// 		claimNumber: 201255619,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201182052,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201216847,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201233692,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201224528,
// 	},
// 	{
// 		supplier: 'PERMOID INDUSTRIES LTD',
// 		claimNumber: 201264499,
// 	},
// 	{
// 		supplier: 'METALLINK FLUID POWER (EUR)',
// 		claimNumber: 201334424,
// 	},
// 	{
// 		supplier: 'NEWFIELD FABRICATION CO LTD',
// 		claimNumber: 201334450,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201278995,
// 	},
// 	{
// 		supplier: 'XL ENGINEERING LTD',
// 		claimNumber: 201266342,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201291192,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201308895,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201307156,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201345073,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201109586,
// 	},
// 	{
// 		supplier: 'CONCENTRIC HOF GMBH (EUR)',
// 		claimNumber: 201124046,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201204593,
// 	},
// 	{
// 		supplier: 'DY POWER CORPORATION',
// 		claimNumber: 201313267,
// 	},
// 	{
// 		supplier: 'ZF SERVICES UK LTD (EURO)',
// 		claimNumber: 201250968,
// 	},
// 	{
// 		supplier: 'KABY ENGINEERS LTD',
// 		claimNumber: 201321502,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201284096,
// 	},
// 	{
// 		supplier: 'PAILTON ENGINEERING LIMITED',
// 		claimNumber: 201337388,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201182714,
// 	},
// 	{
// 		supplier: 'Donaldson Filtration Deutschland G',
// 		claimNumber: 201260650,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201262111,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201278632,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201116961,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201265062,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201225546,
// 	},
// 	{
// 		supplier: 'ZF SERVICES UK LTD (EURO)',
// 		claimNumber: 201337375,
// 	},
// 	{
// 		supplier: 'LINECROSS COMPOSITES LTD',
// 		claimNumber: 201083123,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201159114,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201157498,
// 	},
// 	{
// 		supplier: 'COBO SPA',
// 		claimNumber: 201157494,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201236609,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201265552,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201266760,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201252996,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201262019,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201266754,
// 	},
// 	{
// 		supplier: 'MP FILTRI UK LIMITED',
// 		claimNumber: 201276271,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201271092,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201278335,
// 	},
// 	{
// 		supplier: 'KAT MEKATRONIK ÚRÚNLERI A.S',
// 		claimNumber: 201322309,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201151505,
// 	},
// 	{
// 		supplier: 'SADDLERS COURT MFG LTD',
// 		claimNumber: 201341834,
// 	},
// 	{
// 		supplier: 'PFEDA SYNTHETICS PVT LTD',
// 		claimNumber: 201112823,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201310824,
// 	},
// 	{
// 		supplier: 'ELANDERS LTD',
// 		claimNumber: 201135632,
// 	},
// 	{
// 		supplier: 'PRIMARY FLUID POWER',
// 		claimNumber: 201114783,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201136020,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201189346,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201178330,
// 	},
// 	{
// 		supplier: 'KOHLER LOMBARDINI Srl',
// 		claimNumber: 201146122,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201172324,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201172078,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201265055,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201200383,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201179688,
// 	},
// 	{
// 		supplier: 'MANN + HUMMEL (UK) LTD',
// 		claimNumber: 201185314,
// 	},
// 	{
// 		supplier: 'KOHLER LOMBARDINI Srl',
// 		claimNumber: 201203699,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201208912,
// 	},
// 	{
// 		supplier: 'HONGFA EUROPE (EUR)',
// 		claimNumber: 201207052,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201248141,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201291204,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201257088,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201246028,
// 	},
// 	{
// 		supplier: 'TE CONNECTIVITY SOLUTIONS GMBH (EUR',
// 		claimNumber: 201228905,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201291038,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201259472,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201265712,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201243923,
// 	},
// 	{
// 		supplier: 'HELLA FAHRZEUGTEILE GMBH (EUR)',
// 		claimNumber: 201262840,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201296879,
// 	},
// 	{
// 		supplier: 'BURNSIDE EUROCYL LTD',
// 		claimNumber: 201287129,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201344930,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201321297,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201340725,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201344675,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201322598,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201145917,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201248358,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201216906,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201215953,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201235438,
// 	},
// 	{
// 		supplier: 'HOLMBURY LTD',
// 		claimNumber: 201166524,
// 	},
// 	{
// 		supplier: 'ELANDERS LTD',
// 		claimNumber: 201201720,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201248493,
// 	},
// 	{
// 		supplier: 'ELANDERS LTD',
// 		claimNumber: 201330067,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201356452,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201116328,
// 	},
// 	{
// 		supplier: 'ROTATIONAL MOULDINGS LTD',
// 		claimNumber: 201276985,
// 	},
// 	{
// 		supplier: 'VALEO MAGYARORSZAG KFT (EUR)',
// 		claimNumber: 201159392,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201246174,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201177258,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201342394,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201192169,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201333319,
// 	},
// 	{
// 		supplier: 'GIANETTI FAD WHEELS SRL',
// 		claimNumber: 201335158,
// 	},
// 	{
// 		supplier: 'BURGAFLEX UK LTD',
// 		claimNumber: 201318083,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL (Europe) GmbH',
// 		claimNumber: 201303671,
// 	},
// 	{
// 		supplier: 'Not assigned',
// 		claimNumber: 201213638,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201268024,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201350889,
// 	},
// 	{
// 		supplier: 'GATE 7 LTD (GBP)',
// 		claimNumber: 201092982,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201150139,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201264970,
// 	},
// 	{
// 		supplier: 'APEM COMPONENTS LTD',
// 		claimNumber: 201109431,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201230863,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201168987,
// 	},
// 	{
// 		supplier: 'MITCHELL DIESEL LTD (EUR)',
// 		claimNumber: 201250822,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201250830,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201213600,
// 	},
// 	{
// 		supplier: 'EUROTEC INTERNATIONAL PLC',
// 		claimNumber: 201171589,
// 	},
// 	{
// 		supplier: 'Not assigned',
// 		claimNumber: 201155765,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201200543,
// 	},
// 	{
// 		supplier: 'SGH (MOULDS)  LIMITED',
// 		claimNumber: 201214334,
// 	},
// 	{
// 		supplier: 'PHILLIPS & TEMRO',
// 		claimNumber: 201213629,
// 	},
// 	{
// 		supplier: 'LINECROSS COMPOSITES LTD',
// 		claimNumber: 201299996,
// 	},
// 	{
// 		supplier: 'HORST WELDING (HLA)',
// 		claimNumber: 201280285,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201330158,
// 	},
// 	{
// 		supplier: 'L.A.P ELECTRICAL LIMITED',
// 		claimNumber: 201350333,
// 	},
// 	{
// 		supplier: 'GREENWICH ELECTRONICS INC',
// 		claimNumber: 201336462,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201303051,
// 	},
// 	{
// 		supplier: 'KOHLER LOMBARDINI Srl',
// 		claimNumber: 201330154,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201294442,
// 	},
// 	{
// 		supplier: 'WESTON BODY HARDWARE',
// 		claimNumber: 201318093,
// 	},
// 	{
// 		supplier: 'GROTE INDUSTRIES EUROPE GMBH',
// 		claimNumber: 201136219,
// 	},
// 	{
// 		supplier: 'GROTE INDUSTRIES EUROPE GMBH',
// 		claimNumber: 201136218,
// 	},
// 	{
// 		supplier: 'GROTE INDUSTRIES EUROPE GMBH',
// 		claimNumber: 201172882,
// 	},
// 	{
// 		supplier: 'CATTON CONTROLS CABLES LTD',
// 		claimNumber: 201328438,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201328586,
// 	},
// 	{
// 		supplier: 'ZIBO YONGHUA FILTER MAKI',
// 		claimNumber: 201244436,
// 	},
// 	{
// 		supplier: 'SUTTATTI ENTERPRISES PVT LTD',
// 		claimNumber: 201244443,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201239287,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201280315,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201280863,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201353059,
// 	},
// 	{
// 		supplier: 'CARWOOD MOTOR UNITS LTD',
// 		claimNumber: 201178800,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201286312,
// 	},
// 	{
// 		supplier: 'METALLINK FLUID POWER (EUR)',
// 		claimNumber: 201231032,
// 	},
// 	{
// 		supplier: 'ORLACO PRODUCTS BV (EURO)',
// 		claimNumber: 201281651,
// 	},
// 	{
// 		supplier: 'BURTON RUBBER CO. LTD',
// 		claimNumber: 201232478,
// 	},
// 	{
// 		supplier: 'MANPLAS LTD',
// 		claimNumber: 201232528,
// 	},
// 	{
// 		supplier: 'DONALDSON ITALIA SRL',
// 		claimNumber: 201295613,
// 	},
// 	{
// 		supplier: 'DONALDSON ITALIA SRL',
// 		claimNumber: 201320425,
// 	},
// 	{
// 		supplier: 'ZF SERVICES UK LTD (EURO)',
// 		claimNumber: 201124006,
// 	},
// 	{
// 		supplier: 'MP FILTRI UK LIMITED',
// 		claimNumber: 201310231,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD  (GBP)',
// 		claimNumber: 201309026,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201305844,
// 	},
// 	{
// 		supplier: 'BONY POLYMERS (P) LTD',
// 		claimNumber: 201348574,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201133401,
// 	},
// 	{
// 		supplier: 'SURE POWER INDUSTRIES INC',
// 		claimNumber: 201133403,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS (USD) LTD',
// 		claimNumber: 201287767,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201195850,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201249236,
// 	},
// 	{
// 		supplier: 'ELESA (UK) LTD',
// 		claimNumber: 201246317,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201208822,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201327127,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201211086,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201212610,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201272788,
// 	},
// 	{
// 		supplier: 'ZF SERVICES UK LTD (EURO)',
// 		claimNumber: 201215099,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201215115,
// 	},
// 	{
// 		supplier: 'DONALDSON FILTER COMPS LTD',
// 		claimNumber: 201220644,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201220681,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201221947,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201238756,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201150777,
// 	},
// 	{
// 		supplier: 'SSI TECHNOLOGIES INC (EUR)',
// 		claimNumber: 201185434,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201258602,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201283747,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201293941,
// 	},
// 	{
// 		supplier: 'STABILUS GMBH (EUR)',
// 		claimNumber: 201305694,
// 	},
// 	{
// 		supplier: 'Parker Hannifin Corporation',
// 		claimNumber: 201130210,
// 	},
// 	{
// 		supplier: 'DONALDSON FILTER COMPS LTD',
// 		claimNumber: 201097593,
// 	},
// 	{
// 		supplier: 'DONALDSON FILTER COMPS LTD',
// 		claimNumber: 201098213,
// 	},
// 	{
// 		supplier: 'GATES HYDRAULICS  (EUR)',
// 		claimNumber: 201225708,
// 	},
// 	{
// 		supplier: 'TRELLEBORG INDUSTRIAL PROD UK',
// 		claimNumber: 201134460,
// 	},
// 	{
// 		supplier: 'TE CONNECTIVITY SOLUTIONS GmBH (USD',
// 		claimNumber: 201146822,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH. LTD (EUR)',
// 		claimNumber: 201177252,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201308025,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201297983,
// 	},
// 	{
// 		supplier: 'REICH DRIVE SYSTEMS LTD',
// 		claimNumber: 201297394,
// 	},
// 	{
// 		supplier: 'CONCENTRIC HOF GMBH (EUR)',
// 		claimNumber: 201358191,
// 	},
// 	{
// 		supplier: 'HYDAC TECHNOLOGY GMBH',
// 		claimNumber: 201133936,
// 	},
// 	{
// 		supplier: 'FABLINK TOOLSPEC LTD',
// 		claimNumber: 201160309,
// 	},
// 	{
// 		supplier: 'CAMLOC MOTION CONTROL LTD',
// 		claimNumber: 201193609,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201152232,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201340463,
// 	},
// 	{
// 		supplier: 'TECONNEX LTD',
// 		claimNumber: 201264136,
// 	},
// 	{
// 		supplier: 'BLACKWOOD ENG LTD (USD)',
// 		claimNumber: 201191866,
// 	},
// 	{
// 		supplier: 'DC WOODHEAD & PARTNERS LTD',
// 		claimNumber: 201217320,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201276121,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201337497,
// 	},
// 	{
// 		supplier: 'ORLACO PRODUCTS BV (EURO)',
// 		claimNumber: 201309067,
// 	},
// 	{
// 		supplier: 'N.R AUTOMATICS (ENG.) LTD',
// 		claimNumber: 201147758,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201142404,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201174354,
// 	},
// 	{
// 		supplier: 'LINECROSS LIMITED',
// 		claimNumber: 201175185,
// 	},
// 	{
// 		supplier: 'MOVEERO',
// 		claimNumber: 201214607,
// 	},
// 	{
// 		supplier: 'LINECROSS LIMITED',
// 		claimNumber: 201147022,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL LTD',
// 		claimNumber: 201214753,
// 	},
// 	{
// 		supplier: 'FIL FILTRE LTD STI (EUR)',
// 		claimNumber: 201195364,
// 	},
// 	{
// 		supplier: 'TECONNEX LTD',
// 		claimNumber: 201186793,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201190269,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201220594,
// 	},
// 	{
// 		supplier: 'TRELLEBORG SEALING SOLUTIONS',
// 		claimNumber: 201221954,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201227702,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201207843,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201271631,
// 	},
// 	{
// 		supplier: 'THOMSON PETTIE LTD',
// 		claimNumber: 201218625,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201224422,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201237066,
// 	},
// 	{
// 		supplier: 'FABLINK TOOLSPEC LTD',
// 		claimNumber: 201256136,
// 	},
// 	{
// 		supplier: 'Donaldson Filtration Deutschland G',
// 		claimNumber: 201259079,
// 	},
// 	{
// 		supplier: 'ZF SERVICES UK LTD (EURO)',
// 		claimNumber: 201238597,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201229866,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201263226,
// 	},
// 	{
// 		supplier: 'DANFOSS LTD',
// 		claimNumber: 201301299,
// 	},
// 	{
// 		supplier: 'MOVEERO',
// 		claimNumber: 201289874,
// 	},
// 	{
// 		supplier: 'KINGSPAN WATER & ENERGY LTD',
// 		claimNumber: 201279124,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201283654,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201283599,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201291111,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201352792,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201326187,
// 	},
// 	{
// 		supplier: 'HONGFA EUROPE (EUR)',
// 		claimNumber: 201346293,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201346196,
// 	},
// 	{
// 		supplier: 'GRAMMER AG',
// 		claimNumber: 201352743,
// 	},
// 	{
// 		supplier: 'ROBERT BOSCH LIMITED',
// 		claimNumber: 201348418,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201271620,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201203195,
// 	},
// 	{
// 		supplier: 'AAMP GLOBAL LTD (USD)',
// 		claimNumber: 201231201,
// 	},
// 	{
// 		supplier: 'FAIRWAY SEALS LTD.',
// 		claimNumber: 201326272,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201288692,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201126060,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201114668,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201145517,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201183395,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201180874,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201211134,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201150646,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201157946,
// 	},
// 	{
// 		supplier: 'Delphi Powertrain Systems Hun. KFT',
// 		claimNumber: 201216216,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201262268,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201299829,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201096679,
// 	},
// 	{
// 		supplier: 'JOHNSON ELECTRIC INTER. AG',
// 		claimNumber: 201189028,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201232756,
// 	},
// 	{
// 		supplier: 'BORG WARNER AUTOMOTIVE',
// 		claimNumber: 201279592,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201287015,
// 	},
// 	{
// 		supplier: 'LH GROUP (COLEMAN)',
// 		claimNumber: 201345123,
// 	},
// 	{
// 		supplier: 'KABY ENGINEERS LTD',
// 		claimNumber: 201340286,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201105893,
// 	},
// 	{
// 		supplier: 'Parker Hannifin Corporation',
// 		claimNumber: 201096210,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201101540,
// 	},
// 	{
// 		supplier: 'MANPLAS LTD',
// 		claimNumber: 201217958,
// 	},
// 	{
// 		supplier: 'Not assigned',
// 		claimNumber: 201222735,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201243203,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201268096,
// 	},
// 	{
// 		supplier: 'GRENVILLE ENGINEERING LTD',
// 		claimNumber: 201268073,
// 	},
// 	{
// 		supplier: 'THERMOTEC PLASTICS LIMITED',
// 		claimNumber: 201268822,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201268112,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201334626,
// 	},
// 	{
// 		supplier: 'GATES HYDRAULICS  (EUR)',
// 		claimNumber: 201319308,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201293273,
// 	},
// 	{
// 		supplier: 'GRAMMER AG',
// 		claimNumber: 201349025,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201347244,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201352046,
// 	},
// 	{
// 		supplier: 'Parker Hannifin Corporation',
// 		claimNumber: 201108362,
// 	},
// 	{
// 		supplier: 'Parker Hannifin Corporation',
// 		claimNumber: 201086801,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201084908,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD (EUR)',
// 		claimNumber: 201146851,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201267429,
// 	},
// 	{
// 		supplier: 'ELANDERS LTD',
// 		claimNumber: 201147985,
// 	},
// 	{
// 		supplier: 'DANA ITALIA SPA',
// 		claimNumber: 201110052,
// 	},
// 	{
// 		supplier: 'PERMOID INDUSTRIES LTD',
// 		claimNumber: 201110040,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201154708,
// 	},
// 	{
// 		supplier: 'EASTERN ATTACHMENTS LIMITED',
// 		claimNumber: 201189630,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201244235,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201341523,
// 	},
// 	{
// 		supplier: 'CASCADE (UK) LTD',
// 		claimNumber: 201087095,
// 	},
// 	{
// 		supplier: 'JOHNSON ELECTRIC INTER. AG',
// 		claimNumber: 201096236,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201252338,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201232628,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201232665,
// 	},
// 	{
// 		supplier: 'CARRIER ENGINEERS PVT (INR)',
// 		claimNumber: 201213832,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201243569,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201248653,
// 	},
// 	{
// 		supplier: 'KINGSPAN WATER & ENERGY LTD',
// 		claimNumber: 201250724,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201242298,
// 	},
// 	{
// 		supplier: 'ELANDERS LTD',
// 		claimNumber: 201256112,
// 	},
// 	{
// 		supplier: 'SFC SOLUTIONS ITALY S.R.L.',
// 		claimNumber: 201338783,
// 	},
// 	{
// 		supplier: 'XL ENGINEERING LTD',
// 		claimNumber: 201338669,
// 	},
// 	{
// 		supplier: 'LPL SYSTEMS',
// 		claimNumber: 201316830,
// 	},
// 	{
// 		supplier: 'BONY POLYMERS (P) LTD',
// 		claimNumber: 201273089,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201320058,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201348231,
// 	},
// 	{
// 		supplier: 'Not assigned',
// 		claimNumber: 201136275,
// 	},
// 	{
// 		supplier: 'BLACKWOOD ENG LTD (USD)',
// 		claimNumber: 201135072,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201193387,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201280923,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201323719,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201321145,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201353950,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201357500,
// 	},
// 	{
// 		supplier: 'DANFOSS DISTRIBUTION II A/S',
// 		claimNumber: 201357076,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201227023,
// 	},
// 	{
// 		supplier: 'COBO SPA',
// 		claimNumber: 201227018,
// 	},
// 	{
// 		supplier: 'ZF SERVICES UK LTD (EURO)',
// 		claimNumber: 201307382,
// 	},
// 	{
// 		supplier: 'JAMES DAWSON & SONS LTD',
// 		claimNumber: 201309290,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201322097,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL (Europe) GmbH',
// 		claimNumber: 201326243,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201130406,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201200966,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201121442,
// 	},
// 	{
// 		supplier: 'KOHLER LOMBARDINI Srl',
// 		claimNumber: 201129171,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201204084,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201213128,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD  (GBP)',
// 		claimNumber: 201221036,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201198022,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201204588,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201217692,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201217430,
// 	},
// 	{
// 		supplier: 'CONCENTRIC HOF GMBH (EUR)',
// 		claimNumber: 201276098,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201312720,
// 	},
// 	{
// 		supplier: 'LINECROSS LIMITED',
// 		claimNumber: 201108122,
// 	},
// 	{
// 		supplier: 'BENSON COMPONENTS LTD',
// 		claimNumber: 201104362,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201112086,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201080083,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201136587,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL (Europe) GmbH',
// 		claimNumber: 201125973,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201196962,
// 	},
// 	{
// 		supplier: 'DOMETIC UK LTD',
// 		claimNumber: 201110082,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201120888,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201120212,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201164983,
// 	},
// 	{
// 		supplier: 'SSI TECHNOLOGIES INC (EUR)',
// 		claimNumber: 201109997,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201116138,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201111385,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201136186,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201123899,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201118148,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201147087,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL (Europe) GmbH',
// 		claimNumber: 201126014,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201133890,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201120553,
// 	},
// 	{
// 		supplier: 'DANFOSS LTD',
// 		claimNumber: 201126905,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201142664,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201151455,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201151414,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201139183,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201124590,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201137543,
// 	},
// 	{
// 		supplier: 'GSM ALUMINIUM LTD',
// 		claimNumber: 201151051,
// 	},
// 	{
// 		supplier: 'WESTON BODY HARDWARE',
// 		claimNumber: 201188174,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201200072,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201180342,
// 	},
// 	{
// 		supplier: 'SFC SOLUTIONS ITALY S.R.L.',
// 		claimNumber: 201197696,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201182261,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201188272,
// 	},
// 	{
// 		supplier: 'HELLA LTD (EUR)',
// 		claimNumber: 201224406,
// 	},
// 	{
// 		supplier: 'ZF SERVICES UK LTD (EURO)',
// 		claimNumber: 201218881,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201264667,
// 	},
// 	{
// 		supplier: 'METALLINK FLUID POWER (EUR)',
// 		claimNumber: 201180084,
// 	},
// 	{
// 		supplier: 'GATES HYDRAULICS  (EUR)',
// 		claimNumber: 201184511,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201175146,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201180098,
// 	},
// 	{
// 		supplier: 'HELLA LTD (EUR)',
// 		claimNumber: 201186865,
// 	},
// 	{
// 		supplier: 'UK RUBBER & PLASTICS LTD',
// 		claimNumber: 201208624,
// 	},
// 	{
// 		supplier: 'GROTE INDUSTRIES EUROPE GMBH',
// 		claimNumber: 201198197,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201311258,
// 	},
// 	{
// 		supplier: 'HELLA LTD (EUR)',
// 		claimNumber: 201229212,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201196874,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201239136,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201226046,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201232373,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201258117,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201286098,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201286123,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201268479,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201279347,
// 	},
// 	{
// 		supplier: 'SFC SOLUTIONS ITALY S.R.L.',
// 		claimNumber: 201311799,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201268418,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201277812,
// 	},
// 	{
// 		supplier: 'HELLA LTD (EUR)',
// 		claimNumber: 201349199,
// 	},
// 	{
// 		supplier: 'DINEX EXHAUSTS LTD',
// 		claimNumber: 201349216,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201291126,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201094650,
// 	},
// 	{
// 		supplier: 'CUMMINS FILTRATION',
// 		claimNumber: 201099274,
// 	},
// 	{
// 		supplier: 'ZF SERVICES UK LTD (EURO)',
// 		claimNumber: 201096122,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201099866,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201167035,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201167034,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201126948,
// 	},
// 	{
// 		supplier: 'ZF SERVICES UK LTD (EURO)',
// 		claimNumber: 201127569,
// 	},
// 	{
// 		supplier: 'OPTIBELT (UK) LTD.',
// 		claimNumber: 201127539,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201217123,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201154067,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201248425,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201176901,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201185157,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201182283,
// 	},
// 	{
// 		supplier: 'PEREI LIGHTING',
// 		claimNumber: 201188557,
// 	},
// 	{
// 		supplier: 'DONALDSON FILTER COMPS LTD',
// 		claimNumber: 201188544,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201238414,
// 	},
// 	{
// 		supplier: 'CONCENTRIC HOF GMBH (EUR)',
// 		claimNumber: 201237731,
// 	},
// 	{
// 		supplier: 'KINGSPAN WATER & ENERGY LTD',
// 		claimNumber: 201332271,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201231784,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201263146,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201345548,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201284610,
// 	},
// 	{
// 		supplier: 'GKN WHEELS NAGBOL',
// 		claimNumber: 201331559,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201357202,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201352437,
// 	},
// 	{
// 		supplier: 'Parker Hannifin Corporation',
// 		claimNumber: 201324049,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201326273,
// 	},
// 	{
// 		supplier: 'ADM PRESSINGS LIMITED',
// 		claimNumber: 201310070,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201081252,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201090809,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201090851,
// 	},
// 	{
// 		supplier: 'METALLINK FLUID POWER (EUR)',
// 		claimNumber: 201090889,
// 	},
// 	{
// 		supplier: 'SPICER DRIVESHAFT UK',
// 		claimNumber: 201090924,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201090891,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201085019,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201108178,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL (Europe) GmbH',
// 		claimNumber: 201112526,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201118635,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201163184,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201232662,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201141778,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201147478,
// 	},
// 	{
// 		supplier: 'PAILTON ENGINEERING LIMITED',
// 		claimNumber: 201208077,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL (Europe) GmbH',
// 		claimNumber: 201229686,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201326274,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201239343,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201259553,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201263154,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201309282,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201323356,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201290373,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201352579,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201348742,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201349291,
// 	},
// 	{
// 		supplier: 'ADM PRESSINGS LIMITED',
// 		claimNumber: 201120157,
// 	},
// 	{
// 		supplier: 'LAP ELECTRICAL LIMITED',
// 		claimNumber: 201123510,
// 	},
// 	{
// 		supplier: 'LAP ELECTRICAL LIMITED',
// 		claimNumber: 201126865,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201195056,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201273037,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201307299,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD  (GBP)',
// 		claimNumber: 201297131,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201267982,
// 	},
// 	{
// 		supplier: 'METALLINK FLUID POWER (EUR)',
// 		claimNumber: 201247181,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201231601,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201264231,
// 	},
// 	{
// 		supplier: 'VALEO MAGYARORSZAG KFT (EUR)',
// 		claimNumber: 201264221,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201263511,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD  (GBP)',
// 		claimNumber: 201138778,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201137860,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201214076,
// 	},
// 	{
// 		supplier: 'CARRIER ENGINEERS PVT (INR)',
// 		claimNumber: 201214081,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201279935,
// 	},
// 	{
// 		supplier: 'WOOJIN CO LTD',
// 		claimNumber: 201264544,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201323293,
// 	},
// 	{
// 		supplier: 'ZF SERVICES UK LTD (EURO)',
// 		claimNumber: 201279189,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201339452,
// 	},
// 	{
// 		supplier: 'DANFOSS LTD',
// 		claimNumber: 201117051,
// 	},
// 	{
// 		supplier: 'WUXI HONGSHENG HEAT EXCHANGER',
// 		claimNumber: 201091970,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201111171,
// 	},
// 	{
// 		supplier: 'PETFORD TOOLS LIMITED',
// 		claimNumber: 201174369,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL (Europe) GmbH',
// 		claimNumber: 201125713,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201132517,
// 	},
// 	{
// 		supplier: 'VALEO MAGYARORSZAG KFT (EUR)',
// 		claimNumber: 201132468,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201133131,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201173404,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201173455,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201183355,
// 	},
// 	{
// 		supplier: 'GATE 7 LTD (GBP)',
// 		claimNumber: 201183345,
// 	},
// 	{
// 		supplier: 'PLAS-TECH THERMOFORMING LTD',
// 		claimNumber: 201290664,
// 	},
// 	{
// 		supplier: 'GRENVILLE ENGINEERING LTD',
// 		claimNumber: 201203264,
// 	},
// 	{
// 		supplier: 'PETFORD TOOLS LIMITED',
// 		claimNumber: 201213518,
// 	},
// 	{
// 		supplier: 'E/M COATING SERVICES',
// 		claimNumber: 201216640,
// 	},
// 	{
// 		supplier: 'CARRIER ENGINEERS PVT (INR)',
// 		claimNumber: 201225221,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201239813,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201342462,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201324332,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201296475,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201303096,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201318346,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201315646,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201292217,
// 	},
// 	{
// 		supplier: 'GRENVILLE ENGINEERING LTD',
// 		claimNumber: 201333051,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201299728,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201332486,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201322640,
// 	},
// 	{
// 		supplier: 'DANFOSS DISTRIBUTION II A/S',
// 		claimNumber: 201330294,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201337848,
// 	},
// 	{
// 		supplier: 'THOMSON PETTIE LTD',
// 		claimNumber: 201334740,
// 	},
// 	{
// 		supplier: 'CONCENTRIC HOF GMBH (EUR)',
// 		claimNumber: 201340021,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201344804,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201356265,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201094413,
// 	},
// 	{
// 		supplier: 'CUMMINS FILTRATION',
// 		claimNumber: 201097500,
// 	},
// 	{
// 		supplier: 'LINAK UK LTD',
// 		claimNumber: 201242047,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201086399,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201129782,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201114676,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201118002,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201118226,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS',
// 		claimNumber: 201119264,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201106558,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201130655,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201259321,
// 	},
// 	{
// 		supplier: 'THOMSON PETTIE LTD',
// 		claimNumber: 201152081,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201191962,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201203237,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201204649,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201210758,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS (USD) LTD',
// 		claimNumber: 201211576,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201254412,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201279162,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL (Europe) GmbH',
// 		claimNumber: 201279370,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201278572,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201287792,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201235603,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201259311,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201296954,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201247463,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201283332,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201324048,
// 	},
// 	{
// 		supplier: 'GRENVILLE ENGINEERING LTD',
// 		claimNumber: 201277157,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201281120,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201274956,
// 	},
// 	{
// 		supplier: 'THERMOTEC PLASTICS LIMITED',
// 		claimNumber: 201277127,
// 	},
// 	{
// 		supplier: 'SPICER DRIVESHAFT UK',
// 		claimNumber: 201278636,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201278644,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201291328,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201272919,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201309911,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201311918,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201292869,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201139731,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201289709,
// 	},
// 	{
// 		supplier: 'LAP ELECTRICAL LIMITED',
// 		claimNumber: 201139576,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201128530,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201198355,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201229674,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201203825,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201242513,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201240634,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201251445,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201236767,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201236790,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201236766,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201242561,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201302240,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201296980,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201313860,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201317505,
// 	},
// 	{
// 		supplier: 'SSI TECHNOLOGIES INC (EUR)',
// 		claimNumber: 201317531,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201158166,
// 	},
// 	{
// 		supplier: 'ZF SERVICES UK LTD (EURO)',
// 		claimNumber: 201238990,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201209472,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201209473,
// 	},
// 	{
// 		supplier: 'BONY POLYMERS (P) LTD',
// 		claimNumber: 201195798,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201195797,
// 	},
// 	{
// 		supplier: 'DANFOSS LTD',
// 		claimNumber: 201152549,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201222810,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201248712,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201250882,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201275597,
// 	},
// 	{
// 		supplier: 'PETFORD TOOLS LIMITED',
// 		claimNumber: 201275677,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201322389,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201322434,
// 	},
// 	{
// 		supplier: 'LINECROSS LIMITED',
// 		claimNumber: 201306383,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201292678,
// 	},
// 	{
// 		supplier: 'Parker Hannifin Corporation',
// 		claimNumber: 201213652,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201304938,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201296195,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201302939,
// 	},
// 	{
// 		supplier: 'LINAK UK LTD',
// 		claimNumber: 201298008,
// 	},
// 	{
// 		supplier: 'LINAK UK LTD',
// 		claimNumber: 201298627,
// 	},
// 	{
// 		supplier: 'Not assigned',
// 		claimNumber: 201356488,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201357084,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201357476,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201336417,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (USD)',
// 		claimNumber: 201147432,
// 	},
// 	{
// 		supplier: 'BUCHER HYDRAULICS LTD',
// 		claimNumber: 201147380,
// 	},
// 	{
// 		supplier: 'NATIONWIDE BEARINGS',
// 		claimNumber: 201105124,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201128038,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201128063,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201254155,
// 	},
// 	{
// 		supplier: 'ADM PRESSINGS LIMITED',
// 		claimNumber: 201277560,
// 	},
// 	{
// 		supplier: 'THERMOTEC PLASTICS LIMITED',
// 		claimNumber: 201277552,
// 	},
// 	{
// 		supplier: 'ACOUSTAPRODUCTS LIMITED',
// 		claimNumber: 201240765,
// 	},
// 	{
// 		supplier: 'THOMSON PETTIE LTD',
// 		claimNumber: 201240694,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201238211,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201292065,
// 	},
// 	{
// 		supplier: 'MERCURY MATERIAL MANGMNT. LTD',
// 		claimNumber: 201308576,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201307996,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201247297,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201296739,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201296765,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201300102,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201280284,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201288179,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201282110,
// 	},
// 	{
// 		supplier: 'LINECROSS LIMITED',
// 		claimNumber: 201282662,
// 	},
// 	{
// 		supplier: 'FREUDENBERG SEALING TECHNOLOGIES',
// 		claimNumber: 201159990,
// 	},
// 	{
// 		supplier: 'FREUDENBERG SEALING TECHNOLOGIES',
// 		claimNumber: 201160620,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201325516,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201323056,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201323083,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201231511,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201174170,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201177219,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201203138,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201203150,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201205147,
// 	},
// 	{
// 		supplier: 'TE CONNECTIVITY SOLUTIONS GMBH (EUR',
// 		claimNumber: 201160589,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201204499,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201198995,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201293278,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201293245,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201216115,
// 	},
// 	{
// 		supplier: 'FAIRWAY SEALS LTD.',
// 		claimNumber: 201264381,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201084673,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201070019,
// 	},
// 	{
// 		supplier: 'ZF SERVICES UK LTD (EURO)',
// 		claimNumber: 201106124,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201106080,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201106018,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201134048,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201129272,
// 	},
// 	{
// 		supplier: 'ZF SERVICES UK LTD (EURO)',
// 		claimNumber: 201129238,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201132225,
// 	},
// 	{
// 		supplier: 'F.O.R. SPA',
// 		claimNumber: 201095658,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201132745,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS',
// 		claimNumber: 201112949,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201119587,
// 	},
// 	{
// 		supplier: 'LINECROSS LIMITED',
// 		claimNumber: 201136107,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201173856,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201228516,
// 	},
// 	{
// 		supplier: 'ZF FRIEDRICHSHAFEN AG (EUR)',
// 		claimNumber: 201216235,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201117270,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201138360,
// 	},
// 	{
// 		supplier: 'GATE 7 LTD (GBP)',
// 		claimNumber: 201139601,
// 	},
// 	{
// 		supplier: 'BUCHER HYDRAULICS LTD',
// 		claimNumber: 201132488,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201132425,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS (USD) LTD',
// 		claimNumber: 201139011,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201114196,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201127172,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201121576,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201134338,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201140302,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201193002,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201134158,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201133790,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201171036,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201179338,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201141171,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201177900,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201141557,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201119728,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201146629,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201146614,
// 	},
// 	{
// 		supplier: 'PETFORD TOOLS LIMITED',
// 		claimNumber: 201145299,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201146385,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201153003,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD (EUR)',
// 		claimNumber: 201154118,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201154251,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201167940,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201167888,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201149219,
// 	},
// 	{
// 		supplier: 'PETFORD TOOLS LIMITED',
// 		claimNumber: 201137903,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201163162,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201144065,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201144912,
// 	},
// 	{
// 		supplier: 'PEREI LIGHTING',
// 		claimNumber: 201146583,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201146550,
// 	},
// 	{
// 		supplier: 'DONALDSON FILTER COMPS LTD',
// 		claimNumber: 201157814,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201181482,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201164615,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201164638,
// 	},
// 	{
// 		supplier: 'BENSON COMPONENTS LTD',
// 		claimNumber: 201216682,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201154221,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201269483,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201232729,
// 	},
// 	{
// 		supplier: 'BONY POLYMERS (P) LTD',
// 		claimNumber: 201227082,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201251744,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201294643,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201246015,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201182214,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201173906,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201175710,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201184726,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201190299,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201177744,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201261865,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201313293,
// 	},
// 	{
// 		supplier: 'BENSON COMPONENTS LTD',
// 		claimNumber: 201281944,
// 	},
// 	{
// 		supplier: 'TAYLOR ENG & PLASTICS',
// 		claimNumber: 201284270,
// 	},
// 	{
// 		supplier: 'ZF SERVICES UK LTD (EURO)',
// 		claimNumber: 201272265,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201269879,
// 	},
// 	{
// 		supplier: 'ZF SERVICES UK LTD (EURO)',
// 		claimNumber: 201280620,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201335438,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201279779,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201280475,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201281021,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201294118,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD  (GBP)',
// 		claimNumber: 201274903,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201330916,
// 	},
// 	{
// 		supplier: 'GRENVILLE ENGINEERING LTD',
// 		claimNumber: 201307606,
// 	},
// 	{
// 		supplier: 'LINECROSS LIMITED',
// 		claimNumber: 201327117,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201290537,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201326744,
// 	},
// 	{
// 		supplier: 'F.O.R. SPA',
// 		claimNumber: 201326769,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD  (GBP)',
// 		claimNumber: 201281053,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201289263,
// 	},
// 	{
// 		supplier: 'SPICER DRIVESHAFT UK',
// 		claimNumber: 201352225,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201309673,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201326988,
// 	},
// 	{
// 		supplier: 'JAMES DAWSON & SONS LTD',
// 		claimNumber: 201343183,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201347013,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201339991,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201347159,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201354662,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201335327,
// 	},
// 	{
// 		supplier: 'NATIONWIDE BEARINGS',
// 		claimNumber: 201352720,
// 	},
// 	{
// 		supplier: 'WESTON BODY HARDWARE',
// 		claimNumber: 201168221,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201168189,
// 	},
// 	{
// 		supplier: 'LH GROUP (COLEMAN)',
// 		claimNumber: 201168226,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201283058,
// 	},
// 	{
// 		supplier: 'ORLACO PRODUCTS BV (EURO)',
// 		claimNumber: 201300452,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201126230,
// 	},
// 	{
// 		supplier: 'CUMMINS FILTRATION',
// 		claimNumber: 201156893,
// 	},
// 	{
// 		supplier: 'RAYNE PRECISION ENGINEERING',
// 		claimNumber: 201069046,
// 	},
// 	{
// 		supplier: 'WIDNEY MANUF LTD',
// 		claimNumber: 201069854,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD  (GBP)',
// 		claimNumber: 201261805,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201292837,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201120819,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201169384,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201148710,
// 	},
// 	{
// 		supplier: 'ECAM ENGINEERING LTD',
// 		claimNumber: 201163223,
// 	},
// 	{
// 		supplier: 'ECAM ENGINEERING LTD',
// 		claimNumber: 201163272,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201216612,
// 	},
// 	{
// 		supplier: 'WELDED PRESSWORK LTD',
// 		claimNumber: 201224262,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201224606,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201211155,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201205531,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201223049,
// 	},
// 	{
// 		supplier: 'APEM COMPONENTS LTD',
// 		claimNumber: 201222997,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201356036,
// 	},
// 	{
// 		supplier: 'PAILTON ENGINEERING LIMITED',
// 		claimNumber: 201353673,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201337410,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201338552,
// 	},
// 	{
// 		supplier: 'DIPTY LAL JUDGE MAL PVT (INR)',
// 		claimNumber: 201350059,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201085527,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201086166,
// 	},
// 	{
// 		supplier: 'NEWFIELD FABRICATION CO LTD',
// 		claimNumber: 201217216,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201223034,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201123875,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201118321,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201132450,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201157202,
// 	},
// 	{
// 		supplier: 'WHITBY & CHANDLER LTD',
// 		claimNumber: 201212211,
// 	},
// 	{
// 		supplier: 'GRENVILLE ENGINEERING LTD',
// 		claimNumber: 201153725,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD  (GBP)',
// 		claimNumber: 201284125,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201212118,
// 	},
// 	{
// 		supplier: 'WHITBY & CHANDLER LTD',
// 		claimNumber: 201212212,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201222573,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201199252,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201275658,
// 	},
// 	{
// 		supplier: 'SPICER DRIVESHAFT UK',
// 		claimNumber: 201253919,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201253623,
// 	},
// 	{
// 		supplier: 'WHITE DRIVE MOTORS AND STEERING SP',
// 		claimNumber: 201218772,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201263280,
// 	},
// 	{
// 		supplier: 'ZF SERVICES UK LTD (EURO)',
// 		claimNumber: 201270213,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201281895,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201272975,
// 	},
// 	{
// 		supplier: 'THOMSON PETTIE LTD',
// 		claimNumber: 201285497,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201348499,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201349182,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201353458,
// 	},
// 	{
// 		supplier: 'METALLINK FLUID POWER (EUR)',
// 		claimNumber: 201293574,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201297755,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201347500,
// 	},
// 	{
// 		supplier: 'GRENVILLE ENGINEERING LTD',
// 		claimNumber: 201308379,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201227443,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201102649,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201098211,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201102647,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201117851,
// 	},
// 	{
// 		supplier: 'VALEO MAGYARORSZAG KFT (EUR)',
// 		claimNumber: 201184743,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201291963,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201158565,
// 	},
// 	{
// 		supplier: 'JOHNSON ELECTRIC INTER. AG',
// 		claimNumber: 201116864,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201116853,
// 	},
// 	{
// 		supplier: 'JOHNSON ELECTRIC INTER. AG',
// 		claimNumber: 201121499,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD (EUR)',
// 		claimNumber: 201123480,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201121446,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201318627,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201317175,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201316280,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201225567,
// 	},
// 	{
// 		supplier: 'THOMSON PETTIE LTD',
// 		claimNumber: 201309324,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201255966,
// 	},
// 	{
// 		supplier: 'METALLINK FLUID POWER (EUR)',
// 		claimNumber: 201273458,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201243447,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201237352,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201233856,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201234969,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201262922,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201243508,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201355178,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201286766,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201277347,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201305396,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201340566,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201351084,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201352502,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201336999,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201342963,
// 	},
// 	{
// 		supplier: 'ZF SERVICES UK LTD (EURO)',
// 		claimNumber: 201346468,
// 	},
// 	{
// 		supplier: 'VALEO MAGYARORSZAG KFT (EUR)',
// 		claimNumber: 201160162,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201148481,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201137337,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201159438,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201175946,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201152136,
// 	},
// 	{
// 		supplier: 'KABY ENGINEERS LTD',
// 		claimNumber: 201142624,
// 	},
// 	{
// 		supplier: 'KOHLER LOMBARDINI Srl',
// 		claimNumber: 201189747,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201246816,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201251235,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201251200,
// 	},
// 	{
// 		supplier: 'COBO SPA',
// 		claimNumber: 201199676,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201225695,
// 	},
// 	{
// 		supplier: 'MANPLAS LTD',
// 		claimNumber: 201204757,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD  (GBP)',
// 		claimNumber: 201239888,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201282854,
// 	},
// 	{
// 		supplier: 'CATTON CONTROLS CABLES LTD',
// 		claimNumber: 201242943,
// 	},
// 	{
// 		supplier: 'KOHLER LOMBARDINI Srl',
// 		claimNumber: 201268899,
// 	},
// 	{
// 		supplier: 'P K ENGINEERING',
// 		claimNumber: 201301771,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201332528,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201315658,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201251873,
// 	},
// 	{
// 		supplier: 'KOHLER LOMBARDINI Srl',
// 		claimNumber: 201252998,
// 	},
// 	{
// 		supplier: 'HELLA FAHRZEUGTEILE GMBH (EUR)',
// 		claimNumber: 201286706,
// 	},
// 	{
// 		supplier: 'HELLA FAHRZEUGTEILE GMBH (EUR)',
// 		claimNumber: 201272459,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201267930,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201305933,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201292059,
// 	},
// 	{
// 		supplier: 'DANA ITALIA SPA',
// 		claimNumber: 201113298,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201322167,
// 	},
// 	{
// 		supplier: 'FREUDENBERG SEALING TECHNOLOGIES',
// 		claimNumber: 201322156,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201164314,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201262846,
// 	},
// 	{
// 		supplier: 'PLASTIC MOULDING LTD',
// 		claimNumber: 201088841,
// 	},
// 	{
// 		supplier: 'KOHLER LOMBARDINI Srl',
// 		claimNumber: 201092613,
// 	},
// 	{
// 		supplier: 'KOHLER LOMBARDINI Srl',
// 		claimNumber: 201116593,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201090219,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201090285,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201114595,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD (EUR)',
// 		claimNumber: 201122073,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201188610,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201188572,
// 	},
// 	{
// 		supplier: 'DANA ITALIA SPA',
// 		claimNumber: 201111928,
// 	},
// 	{
// 		supplier: 'THOS STOREY FAB. GROUP LTD',
// 		claimNumber: 201123421,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201104333,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201104461,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201202841,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201215787,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201119798,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201116854,
// 	},
// 	{
// 		supplier: 'POCLAIN HYDRAULICS INDUSTRIE',
// 		claimNumber: 201116873,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201202143,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201193765,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201184964,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201196306,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201209193,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201215986,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201221563,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201246638,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201207586,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201239964,
// 	},
// 	{
// 		supplier: 'COBO SPA',
// 		claimNumber: 201327875,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201327505,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201274718,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201256579,
// 	},
// 	{
// 		supplier: 'BURNSIDE EUROCYL LTD',
// 		claimNumber: 201227451,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201356275,
// 	},
// 	{
// 		supplier: 'POCLAIN HYDRAULICS INDUSTRIE',
// 		claimNumber: 201272992,
// 	},
// 	{
// 		supplier: 'VALEO MAGYARORSZAG KFT (EUR)',
// 		claimNumber: 201343457,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201277410,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201348789,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201339106,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201334066,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201343914,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201343906,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201113906,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201119807,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201216893,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201166326,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201169107,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201147485,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201170731,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201157775,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201213972,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201229166,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201157757,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201214359,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201202089,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201213746,
// 	},
// 	{
// 		supplier: 'MITCHELL DIESEL LTD (EUR)',
// 		claimNumber: 201328526,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201284018,
// 	},
// 	{
// 		supplier: 'COBO SPA',
// 		claimNumber: 201341481,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201319111,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201227962,
// 	},
// 	{
// 		supplier: 'ATC DRIVETRAIN UK LTD',
// 		claimNumber: 201356821,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201152159,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201193017,
// 	},
// 	{
// 		supplier: 'PLASTIC MOULDING LTD',
// 		claimNumber: 201224631,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD  (GBP)',
// 		claimNumber: 201186919,
// 	},
// 	{
// 		supplier: 'XIANGSHAN TIANXING AUTO FITTINGS CO',
// 		claimNumber: 201129490,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201155270,
// 	},
// 	{
// 		supplier: 'DANA ITALIA SPA',
// 		claimNumber: 201252859,
// 	},
// 	{
// 		supplier: 'C-TECH ENGINEERS PVT (INR)',
// 		claimNumber: 201293338,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201293280,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201293259,
// 	},
// 	{
// 		supplier: 'COBO SPA',
// 		claimNumber: 201337682,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201094476,
// 	},
// 	{
// 		supplier: 'MITCHELL DIESEL LTD (EUR)',
// 		claimNumber: 201182421,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201134004,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201234099,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201142313,
// 	},
// 	{
// 		supplier: 'MP FILTRI UK LIMITED',
// 		claimNumber: 201190870,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201324997,
// 	},
// 	{
// 		supplier: 'POLYBOND INDIA PVT LTD',
// 		claimNumber: 201341740,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201333937,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201355897,
// 	},
// 	{
// 		supplier: 'LINECROSS LIMITED',
// 		claimNumber: 201348295,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201355160,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201282594,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201158195,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201227007,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201262668,
// 	},
// 	{
// 		supplier: 'KOHLER LOMBARDINI Srl',
// 		claimNumber: 201259832,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201259824,
// 	},
// 	{
// 		supplier: 'TE CONNECTIVITY SOLUTIONS GmBH (USD',
// 		claimNumber: 201354478,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201155167,
// 	},
// 	{
// 		supplier: 'HADLEY HARGREAVES LTD',
// 		claimNumber: 201188457,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201083474,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201167547,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201282603,
// 	},
// 	{
// 		supplier: 'NORLEC SHEET METAL LTD',
// 		claimNumber: 201283817,
// 	},
// 	{
// 		supplier: 'HORST WELDING (HLA)',
// 		claimNumber: 201259750,
// 	},
// 	{
// 		supplier: 'COMESYS LTD',
// 		claimNumber: 201131571,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201272678,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201136236,
// 	},
// 	{
// 		supplier: 'MOTOR COMPONENTS LLC',
// 		claimNumber: 201136284,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201341554,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201315592,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201258664,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201259782,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201231521,
// 	},
// 	{
// 		supplier: 'MITCHELL DIESEL LTD (EUR)',
// 		claimNumber: 201328376,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201259222,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201223412,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201236126,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201277631,
// 	},
// 	{
// 		supplier: 'AIRFAWN CONSULTANTS LTD',
// 		claimNumber: 201330610,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201222016,
// 	},
// 	{
// 		supplier: 'Not assigned',
// 		claimNumber: 201303632,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201268809,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201232139,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201282688,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201313649,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL (Europe) GmbH',
// 		claimNumber: 201318200,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201307374,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201351382,
// 	},
// 	{
// 		supplier: 'CONCENTRIC HOF GMBH (EUR)',
// 		claimNumber: 201283837,
// 	},
// 	{
// 		supplier: 'ECAM ENGINEERING LTD',
// 		claimNumber: 201336390,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201333892,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201326660,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201217904,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201212291,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201225099,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201299310,
// 	},
// 	{
// 		supplier: 'CATTON CONTROLS CABLES LTD',
// 		claimNumber: 201299289,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201300841,
// 	},
// 	{
// 		supplier: 'OMRON ELEC (MILTON KEYNES)',
// 		claimNumber: 201348915,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201135020,
// 	},
// 	{
// 		supplier: 'CATTON CONTROLS CABLES LTD',
// 		claimNumber: 201212427,
// 	},
// 	{
// 		supplier: 'KINGSPAN WATER & ENERGY LTD',
// 		claimNumber: 201329845,
// 	},
// 	{
// 		supplier: 'W. Gessmann GmbH',
// 		claimNumber: 201332198,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201124582,
// 	},
// 	{
// 		supplier: 'CAVOTEC UK LTD',
// 		claimNumber: 201160306,
// 	},
// 	{
// 		supplier: 'METALLINK FLUID POWER (EUR)',
// 		claimNumber: 201165722,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201265112,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201144395,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201231017,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201132010,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201132023,
// 	},
// 	{
// 		supplier: 'BURTON RUBBER CO. LTD',
// 		claimNumber: 201133868,
// 	},
// 	{
// 		supplier: 'KAT MEKATRONIK ÚRÚNLERI A.S',
// 		claimNumber: 201199121,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201258881,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201315817,
// 	},
// 	{
// 		supplier: 'TI GROUP AUTO. SYS.SPA. (EUR)',
// 		claimNumber: 201197628,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201198456,
// 	},
// 	{
// 		supplier: 'IFM ELECTRONIC  (EUR)',
// 		claimNumber: 201314794,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201287811,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201291555,
// 	},
// 	{
// 		supplier: 'LINECROSS LIMITED',
// 		claimNumber: 201250090,
// 	},
// 	{
// 		supplier: 'HADLEY HARGREAVES LTD',
// 		claimNumber: 201321774,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201258995,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201269812,
// 	},
// 	{
// 		supplier: 'CATTON CONTROLS CABLES LTD',
// 		claimNumber: 201276009,
// 	},
// 	{
// 		supplier: 'HELLA LTD (EUR)',
// 		claimNumber: 201303708,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201280193,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201303734,
// 	},
// 	{
// 		supplier: 'ORLACO PRODUCTS BV (EURO)',
// 		claimNumber: 201303533,
// 	},
// 	{
// 		supplier: 'RAYNE PRECISION ENGINEERING',
// 		claimNumber: 201274918,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201319205,
// 	},
// 	{
// 		supplier: 'L.A.P ELECTRICAL LIMITED',
// 		claimNumber: 201319192,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201326369,
// 	},
// 	{
// 		supplier: 'CARRIER ENGINEERS PVT (INR)',
// 		claimNumber: 201332220,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201210260,
// 	},
// 	{
// 		supplier: 'TI GROUP AUTO. SYS.SPA. (EUR)',
// 		claimNumber: 201235849,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201261621,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201300088,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201189269,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201187033,
// 	},
// 	{
// 		supplier: 'CHINA NATIONAL HEAVY DUTY TRUCK',
// 		claimNumber: 201187097,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201215849,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201215893,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201215861,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201160146,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201183419,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201183397,
// 	},
// 	{
// 		supplier: 'LINECROSS LIMITED',
// 		claimNumber: 201173462,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201181451,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201276082,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201208080,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201286523,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201260574,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201233557,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201315746,
// 	},
// 	{
// 		supplier: 'ROBERT BOSCH (EURO) HOMBURG',
// 		claimNumber: 201300430,
// 	},
// 	{
// 		supplier: 'IFM ELECTRONIC  (EUR)',
// 		claimNumber: 201345159,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201091636,
// 	},
// 	{
// 		supplier: 'LH GROUP (COLEMAN)',
// 		claimNumber: 201119206,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201119713,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201131930,
// 	},
// 	{
// 		supplier: 'GROTE INDUSTRIES EUROPE GMBH',
// 		claimNumber: 201200643,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201150645,
// 	},
// 	{
// 		supplier: 'WIDNEY MANUF LTD',
// 		claimNumber: 201164497,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201288222,
// 	},
// 	{
// 		supplier: 'SAVCON LIMITED',
// 		claimNumber: 201303586,
// 	},
// 	{
// 		supplier: 'ELTEK SPA',
// 		claimNumber: 201301661,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201319258,
// 	},
// 	{
// 		supplier: 'FREUDENBERG SEALING TECHNOLOGIES',
// 		claimNumber: 201322381,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201355166,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201123067,
// 	},
// 	{
// 		supplier: 'Parker Hannifin Corporation',
// 		claimNumber: 201097606,
// 	},
// 	{
// 		supplier: 'DONALDSON FILTER COMPS LTD',
// 		claimNumber: 201113547,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201119430,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201118353,
// 	},
// 	{
// 		supplier: 'F.O.R. SPA',
// 		claimNumber: 201089963,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201126653,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201116405,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201133500,
// 	},
// 	{
// 		supplier: 'ZF SERVICES UK LTD (EURO)',
// 		claimNumber: 201249346,
// 	},
// 	{
// 		supplier: 'WIDNEY MANUF LTD',
// 		claimNumber: 201156928,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201212918,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201178539,
// 	},
// 	{
// 		supplier: 'RAYNE PRECISION ENGINEERING',
// 		claimNumber: 201209738,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201221330,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201145186,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201291341,
// 	},
// 	{
// 		supplier: 'SENSATA TECHNOLOGIES GMBH',
// 		claimNumber: 201148855,
// 	},
// 	{
// 		supplier: 'Not assigned',
// 		claimNumber: 201292667,
// 	},
// 	{
// 		supplier: 'SFC SOLUTIONS ITALY S.R.L.',
// 		claimNumber: 201221995,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201261873,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201295626,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201336397,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201109640,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201137926,
// 	},
// 	{
// 		supplier: 'REICH DRIVE SYSTEMS LTD',
// 		claimNumber: 201312939,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201308539,
// 	},
// 	{
// 		supplier: 'REICH DRIVE SYSTEMS LTD',
// 		claimNumber: 201316082,
// 	},
// 	{
// 		supplier: 'CAMLOC MOTION CONTROL LTD',
// 		claimNumber: 201304297,
// 	},
// 	{
// 		supplier: 'REICH DRIVE SYSTEMS LTD',
// 		claimNumber: 201280908,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201254942,
// 	},
// 	{
// 		supplier: 'Parker Hannifin Corporation',
// 		claimNumber: 201249449,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201315608,
// 	},
// 	{
// 		supplier: 'ROBERT BOSCH LIMITED',
// 		claimNumber: 201112250,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201140911,
// 	},
// 	{
// 		supplier: 'DONALDSON SAS (EUR)',
// 		claimNumber: 201135619,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201134920,
// 	},
// 	{
// 		supplier: 'LINECROSS LIMITED',
// 		claimNumber: 201165230,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201215162,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201154108,
// 	},
// 	{
// 		supplier: 'ROBERT BOSCH LIMITED',
// 		claimNumber: 201139604,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH. LTD (EUR)',
// 		claimNumber: 201159032,
// 	},
// 	{
// 		supplier: 'TI GROUP AUTO. SYS.SPA. (EUR)',
// 		claimNumber: 201187412,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201181981,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201179644,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201319507,
// 	},
// 	{
// 		supplier: 'IFM ELECTRONIC  (EUR)',
// 		claimNumber: 201210568,
// 	},
// 	{
// 		supplier: 'NGK SPARK PLUGS (UK) LTD',
// 		claimNumber: 201192604,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201213277,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201227840,
// 	},
// 	{
// 		supplier: 'FUYAO GLASS INDUSTRY GROUP (2414)',
// 		claimNumber: 201299597,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201227117,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201324497,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201293539,
// 	},
// 	{
// 		supplier: 'HONGFA EUROPE (EUR)',
// 		claimNumber: 201277517,
// 	},
// 	{
// 		supplier: 'FRAENKISCHE CZ (EUR)',
// 		claimNumber: 201305272,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201346931,
// 	},
// 	{
// 		supplier: 'SAFIM SPA',
// 		claimNumber: 201358063,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201122409,
// 	},
// 	{
// 		supplier: 'TECONNEX LTD',
// 		claimNumber: 201182683,
// 	},
// 	{
// 		supplier: 'TECONNEX LTD',
// 		claimNumber: 201202855,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201275363,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201207727,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201207725,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201294578,
// 	},
// 	{
// 		supplier: 'GRAMMER AG',
// 		claimNumber: 201342518,
// 	},
// 	{
// 		supplier: 'HYDROTECHNIK UK LTD (EUR)',
// 		claimNumber: 201342832,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201109326,
// 	},
// 	{
// 		supplier: 'National Högsäter Performance Pol',
// 		claimNumber: 201109307,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201109766,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201131355,
// 	},
// 	{
// 		supplier: 'VDL BELGIUM',
// 		claimNumber: 201130005,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201202192,
// 	},
// 	{
// 		supplier: 'LA FRANCE CORP.',
// 		claimNumber: 201318597,
// 	},
// 	{
// 		supplier: 'ROBERT BOSCH LIMITED',
// 		claimNumber: 201327422,
// 	},
// 	{
// 		supplier: 'ZF FRIEDRICHSHAFEN AG (EUR)',
// 		claimNumber: 201132424,
// 	},
// 	{
// 		supplier: 'APEM COMPONENTS LTD',
// 		claimNumber: 201127912,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201136478,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201125938,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201142031,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201150876,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201210550,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201114590,
// 	},
// 	{
// 		supplier: 'CAMLOC MOTION CONTROL LTD',
// 		claimNumber: 201166786,
// 	},
// 	{
// 		supplier: 'WASHINGTON METALWORKS LIMITED',
// 		claimNumber: 201147051,
// 	},
// 	{
// 		supplier: 'FUYAO GLASS INDUSTRY GROUP (2414)',
// 		claimNumber: 201169416,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201238575,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD  (GBP)',
// 		claimNumber: 201347527,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201129757,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201175695,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201204747,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201144658,
// 	},
// 	{
// 		supplier: 'VDL BELGIUM',
// 		claimNumber: 201146054,
// 	},
// 	{
// 		supplier: 'METALLINK FLUID POWER (EUR)',
// 		claimNumber: 201141262,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201147350,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201186845,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201142126,
// 	},
// 	{
// 		supplier: 'BECKER INDUSTRIAL COATINGS LTD',
// 		claimNumber: 201142001,
// 	},
// 	{
// 		supplier: 'HITACHI AUTO SYSTEM (VAT)',
// 		claimNumber: 201151854,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201138966,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201196925,
// 	},
// 	{
// 		supplier: 'LPL SYSTEMS',
// 		claimNumber: 201162675,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201152810,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201152815,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201159729,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201178221,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201170725,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201164066,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201142755,
// 	},
// 	{
// 		supplier: 'GRAMMER AG',
// 		claimNumber: 201142174,
// 	},
// 	{
// 		supplier: 'Delphi Powertrain Systems Hun. KFT',
// 		claimNumber: 201178271,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201192552,
// 	},
// 	{
// 		supplier: 'GATES HYDRAULICS  (EUR)',
// 		claimNumber: 201141242,
// 	},
// 	{
// 		supplier: 'BURNSIDE EUROCYL LTD',
// 		claimNumber: 201193025,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201200909,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201176287,
// 	},
// 	{
// 		supplier: 'CAMLOC MOTION CONTROL LTD',
// 		claimNumber: 201176324,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201149162,
// 	},
// 	{
// 		supplier: 'TECONNEX LTD',
// 		claimNumber: 201190058,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201170868,
// 	},
// 	{
// 		supplier: 'GNA GEARS LIMITED  (INR)',
// 		claimNumber: 201184586,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201193116,
// 	},
// 	{
// 		supplier: 'HENKEL LOCTITE ADHESIVES LTD',
// 		claimNumber: 201191206,
// 	},
// 	{
// 		supplier: 'TECONNEX LTD',
// 		claimNumber: 201194877,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201191095,
// 	},
// 	{
// 		supplier: 'GRAMMER AG',
// 		claimNumber: 201208828,
// 	},
// 	{
// 		supplier: 'CAMLOC MOTION CONTROL LTD',
// 		claimNumber: 201201609,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201193120,
// 	},
// 	{
// 		supplier: 'CAMLOC MOTION CONTROL LTD',
// 		claimNumber: 201217782,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201193297,
// 	},
// 	{
// 		supplier: 'MANN + HUMMEL (UK) LTD',
// 		claimNumber: 201212420,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201243085,
// 	},
// 	{
// 		supplier: 'FUYAO GLASS INDUSTRY GROUP (2414)',
// 		claimNumber: 201195637,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201195464,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201195439,
// 	},
// 	{
// 		supplier: 'NYLACAST LIMITED',
// 		claimNumber: 201213991,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201211238,
// 	},
// 	{
// 		supplier: 'ROBERT BOSCH LIMITED',
// 		claimNumber: 201201518,
// 	},
// 	{
// 		supplier: 'KINGSPAN WATER & ENERGY LTD',
// 		claimNumber: 201237750,
// 	},
// 	{
// 		supplier: 'THOMSON PETTIE LTD',
// 		claimNumber: 201200866,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201205378,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201237810,
// 	},
// 	{
// 		supplier: 'FABLINK TANK SYSTEMS LIMITED',
// 		claimNumber: 201198261,
// 	},
// 	{
// 		supplier: 'PFEDA SYNTHETICS PVT LTD',
// 		claimNumber: 201198101,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201205715,
// 	},
// 	{
// 		supplier: 'NGK SPARK PLUGS (UK) LTD',
// 		claimNumber: 201220487,
// 	},
// 	{
// 		supplier: 'CAMLOC MOTION CONTROL LTD',
// 		claimNumber: 201236488,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201197679,
// 	},
// 	{
// 		supplier: 'GRAMMER AG',
// 		claimNumber: 201204438,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201212598,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201195192,
// 	},
// 	{
// 		supplier: 'ROBERT BOSCH LIMITED',
// 		claimNumber: 201202785,
// 	},
// 	{
// 		supplier: 'SENTINEL MANUFACTURING LTD',
// 		claimNumber: 201198698,
// 	},
// 	{
// 		supplier: 'EUROTEC INTERNATIONAL PLC',
// 		claimNumber: 201223597,
// 	},
// 	{
// 		supplier: 'LA FRANCE CORP.',
// 		claimNumber: 201223669,
// 	},
// 	{
// 		supplier: 'FABLINK TANK SYSTEMS LIMITED',
// 		claimNumber: 201235794,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201206164,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201241687,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201246038,
// 	},
// 	{
// 		supplier: 'SSI TECHNOLOGIES INC (EUR)',
// 		claimNumber: 201291832,
// 	},
// 	{
// 		supplier: 'ROBERT BOSCH LIMITED',
// 		claimNumber: 201216961,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201219720,
// 	},
// 	{
// 		supplier: 'DONALDSON SAS (EUR)',
// 		claimNumber: 201245925,
// 	},
// 	{
// 		supplier: 'FRANKLIN SILENCERS LIMITED',
// 		claimNumber: 201221204,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201225166,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201225319,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201246285,
// 	},
// 	{
// 		supplier: 'GATE 7 LTD (GBP)',
// 		claimNumber: 201225174,
// 	},
// 	{
// 		supplier: 'TECNI-FORM LTD',
// 		claimNumber: 201225173,
// 	},
// 	{
// 		supplier: 'ROBERT BOSCH LIMITED',
// 		claimNumber: 201218280,
// 	},
// 	{
// 		supplier: 'MITRAS AUTOMOTIVE LTD',
// 		claimNumber: 201220573,
// 	},
// 	{
// 		supplier: 'PFEDA SYNTHETICS PVT LTD',
// 		claimNumber: 201211184,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201217147,
// 	},
// 	{
// 		supplier: 'ROBERT BOSCH LIMITED',
// 		claimNumber: 201215359,
// 	},
// 	{
// 		supplier: 'ROQUET HYDRAULICS, SL',
// 		claimNumber: 201229503,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201220434,
// 	},
// 	{
// 		supplier: 'EATON HYDRAULICS',
// 		claimNumber: 201229975,
// 	},
// 	{
// 		supplier: 'DC WOODHEAD & PARTNERS LTD',
// 		claimNumber: 201223831,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201218640,
// 	},
// 	{
// 		supplier: 'DANFOSS LTD',
// 		claimNumber: 201216524,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201214063,
// 	},
// 	{
// 		supplier: 'GATES UNITTA INDIA COMPANY PVT LTD',
// 		claimNumber: 201231775,
// 	},
// 	{
// 		supplier: 'NGK SPARK PLUGS (UK) LTD',
// 		claimNumber: 201231740,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201295513,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201308382,
// 	},
// 	{
// 		supplier: 'VARM PRESS E-GEN ENG PVT LTD (INR)',
// 		claimNumber: 201225627,
// 	},
// 	{
// 		supplier: 'HPM LTD',
// 		claimNumber: 201225619,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201225519,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201271981,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201215785,
// 	},
// 	{
// 		supplier: 'DANFOSS LTD',
// 		claimNumber: 201241774,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201297598,
// 	},
// 	{
// 		supplier: 'ELANDERS LTD',
// 		claimNumber: 201350460,
// 	},
// 	{
// 		supplier: 'BURGAFLEX UK LTD',
// 		claimNumber: 201246920,
// 	},
// 	{
// 		supplier: 'LPL SYSTEMS',
// 		claimNumber: 201262262,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD (EUR)',
// 		claimNumber: 201332955,
// 	},
// 	{
// 		supplier: 'GARRETT MOTION SARL',
// 		claimNumber: 201334817,
// 	},
// 	{
// 		supplier: 'ROBERT BOSCH LIMITED',
// 		claimNumber: 201297206,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201250709,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201256819,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201252502,
// 	},
// 	{
// 		supplier: 'FABLINK TANK SYSTEMS LIMITED',
// 		claimNumber: 201264200,
// 	},
// 	{
// 		supplier: 'LINHAI QISHENG RUBBER AND PLASTIC',
// 		claimNumber: 201231213,
// 	},
// 	{
// 		supplier: 'DANFOSS LTD',
// 		claimNumber: 201292972,
// 	},
// 	{
// 		supplier: 'BURGAFLEX UK LTD',
// 		claimNumber: 201292979,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201296510,
// 	},
// 	{
// 		supplier: 'COMESYS LTD',
// 		claimNumber: 201296485,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201282276,
// 	},
// 	{
// 		supplier: 'DANFOSS LTD',
// 		claimNumber: 201282550,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201263184,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201265869,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201316439,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201316475,
// 	},
// 	{
// 		supplier: 'NYLACAST LIMITED',
// 		claimNumber: 201247175,
// 	},
// 	{
// 		supplier: 'ROBERT BOSCH LIMITED',
// 		claimNumber: 201262569,
// 	},
// 	{
// 		supplier: 'COMESYS LTD',
// 		claimNumber: 201258246,
// 	},
// 	{
// 		supplier: 'LINECROSS LIMITED',
// 		claimNumber: 201304155,
// 	},
// 	{
// 		supplier: 'EATON HYDRAULICS',
// 		claimNumber: 201302846,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201255941,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD  (GBP)',
// 		claimNumber: 201265438,
// 	},
// 	{
// 		supplier: 'ORLACO PRODUCTS BV (EURO)',
// 		claimNumber: 201306084,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201271801,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201288788,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201286945,
// 	},
// 	{
// 		supplier: 'CLYDESDALE JONES',
// 		claimNumber: 201265409,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201282497,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL LTD',
// 		claimNumber: 201276167,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201272743,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201337966,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201297192,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201276132,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201271155,
// 	},
// 	{
// 		supplier: 'ATC DRIVETRAIN UK LTD',
// 		claimNumber: 201343784,
// 	},
// 	{
// 		supplier: 'CONCENTRIC BIRMINGHAM LTD',
// 		claimNumber: 201343772,
// 	},
// 	{
// 		supplier: 'GARRETT MOTION SARL',
// 		claimNumber: 201276395,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201276385,
// 	},
// 	{
// 		supplier: 'MOVEERO',
// 		claimNumber: 201279521,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201279523,
// 	},
// 	{
// 		supplier: 'ROBERT BOSCH LIMITED',
// 		claimNumber: 201316421,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201298231,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201303450,
// 	},
// 	{
// 		supplier: 'PROFIVE ENGINEERING PVT LTD',
// 		claimNumber: 201300598,
// 	},
// 	{
// 		supplier: 'CHELL ENGINEERING LTD',
// 		claimNumber: 201285615,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201295031,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201306105,
// 	},
// 	{
// 		supplier: 'LPL SYSTEMS',
// 		claimNumber: 201306575,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201303497,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201296323,
// 	},
// 	{
// 		supplier: 'GATES HYDRAULICS  (EUR)',
// 		claimNumber: 201305193,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201308923,
// 	},
// 	{
// 		supplier: 'EUROTEC INTERNATIONAL PLC',
// 		claimNumber: 201298366,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS (USD) LTD',
// 		claimNumber: 201332505,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH. LTD (EUR)',
// 		claimNumber: 201312513,
// 	},
// 	{
// 		supplier: 'SAFIM SPA',
// 		claimNumber: 201312082,
// 	},
// 	{
// 		supplier: 'M BARNWELL SERVICES LTD.',
// 		claimNumber: 201327103,
// 	},
// 	{
// 		supplier: 'DANFOSS DISTRIBUTION II A/S (USD)',
// 		claimNumber: 201348750,
// 	},
// 	{
// 		supplier: 'DONALDSON FILTER COMP (EUR)',
// 		claimNumber: 201350594,
// 	},
// 	{
// 		supplier: 'SUMMIT ENGINEERING',
// 		claimNumber: 201349069,
// 	},
// 	{
// 		supplier: 'MITRAS AUTOMOTIVE LTD',
// 		claimNumber: 201340811,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201354927,
// 	},
// 	{
// 		supplier: 'JAMES DAWSON & SONS LTD',
// 		claimNumber: 201326234,
// 	},
// 	{
// 		supplier: 'FABLINK TANK SYSTEMS LIMITED',
// 		claimNumber: 201339786,
// 	},
// 	{
// 		supplier: 'EATON HYDRAULICS',
// 		claimNumber: 201331642,
// 	},
// 	{
// 		supplier: 'JOHNSON ELECTRIC INTER. AG',
// 		claimNumber: 201322809,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201322739,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201316812,
// 	},
// 	{
// 		supplier: 'GRAMMER AG',
// 		claimNumber: 201322765,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201326827,
// 	},
// 	{
// 		supplier: 'SENSATA TECH. HOLLAND BV (EUR)',
// 		claimNumber: 201339346,
// 	},
// 	{
// 		supplier: 'MAHLE Electric Drives Slovenija d.o',
// 		claimNumber: 201344121,
// 	},
// 	{
// 		supplier: 'ROBERT BOSCH LIMITED',
// 		claimNumber: 201350722,
// 	},
// 	{
// 		supplier: 'FUYAO GLASS INDUSTRY GROUP (2414)',
// 		claimNumber: 201345687,
// 	},
// 	{
// 		supplier: 'DONALDSON SAS (EUR)',
// 		claimNumber: 201334335,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201348397,
// 	},
// 	{
// 		supplier: 'ECCO Safety Group',
// 		claimNumber: 201356230,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201346804,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201354885,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201350714,
// 	},
// 	{
// 		supplier: 'GATES HYDRAULICS  (EUR)',
// 		claimNumber: 201147508,
// 	},
// 	{
// 		supplier: 'BIRMINGHAM SPECIALITIES LTD',
// 		claimNumber: 201173869,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201155578,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201210137,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201194990,
// 	},
// 	{
// 		supplier: 'CAMLOC MOTION CONTROL LTD',
// 		claimNumber: 201197491,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201233189,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201233283,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201290245,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201315461,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201323411,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201326293,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201200395,
// 	},
// 	{
// 		supplier: 'KABY ENGINEERS LTD',
// 		claimNumber: 201207152,
// 	},
// 	{
// 		supplier: 'NYLACAST LIMITED',
// 		claimNumber: 201253074,
// 	},
// 	{
// 		supplier: 'ORLACO PRODUCTS BV (EURO)',
// 		claimNumber: 201355675,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201112383,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201146587,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201196167,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201126338,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201126280,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201126056,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201129368,
// 	},
// 	{
// 		supplier: 'IFM ELECTRONIC  (EUR)',
// 		claimNumber: 201132031,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201141897,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201119282,
// 	},
// 	{
// 		supplier: 'SAFIM SPA',
// 		claimNumber: 201141217,
// 	},
// 	{
// 		supplier: 'BIRMINGHAM SPECIALITIES LTD',
// 		claimNumber: 201178230,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201208463,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201127126,
// 	},
// 	{
// 		supplier: 'APEM COMPONENTS LTD',
// 		claimNumber: 201127141,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201125119,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201127615,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201173832,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201174742,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201148719,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201148816,
// 	},
// 	{
// 		supplier: 'BILL BENNETT ENGINEERING LTD',
// 		claimNumber: 201173290,
// 	},
// 	{
// 		supplier: 'METALLINK FLUID POWER (EUR)',
// 		claimNumber: 201175141,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201145005,
// 	},
// 	{
// 		supplier: 'KINGSPAN WATER & ENERGY LTD',
// 		claimNumber: 201177807,
// 	},
// 	{
// 		supplier: 'CAMLOC MOTION CONTROL LTD',
// 		claimNumber: 201212065,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201210278,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201256196,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201195333,
// 	},
// 	{
// 		supplier: 'EUROTEC INTERNATIONAL PLC',
// 		claimNumber: 201148811,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD  (GBP)',
// 		claimNumber: 201172810,
// 	},
// 	{
// 		supplier: 'HITACHI AUTO SYSTEM (VAT)',
// 		claimNumber: 201170308,
// 	},
// 	{
// 		supplier: 'OFFICINE METALLURGICHE (EUR)',
// 		claimNumber: 201170225,
// 	},
// 	{
// 		supplier: 'LEXICRAFT LIMITED',
// 		claimNumber: 201170285,
// 	},
// 	{
// 		supplier: 'GRENVILLE ENGINEERING LTD',
// 		claimNumber: 201206567,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201220978,
// 	},
// 	{
// 		supplier: 'GROTE INDUSTRIES EUROPE GMBH',
// 		claimNumber: 201180686,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201181027,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201157314,
// 	},
// 	{
// 		supplier: 'KABY ENGINEERS LTD',
// 		claimNumber: 201165199,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201226065,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201185890,
// 	},
// 	{
// 		supplier: 'KABY ENGINEERS LTD',
// 		claimNumber: 201232867,
// 	},
// 	{
// 		supplier: 'COMESYS LTD',
// 		claimNumber: 201203733,
// 	},
// 	{
// 		supplier: 'FABLINK TANK SYSTEMS LIMITED',
// 		claimNumber: 201190458,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201210833,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201206327,
// 	},
// 	{
// 		supplier: 'ORLACO PRODUCTS BV (EURO)',
// 		claimNumber: 201259690,
// 	},
// 	{
// 		supplier: 'Delphi Powertrain Systems Hun. KFT',
// 		claimNumber: 201217053,
// 	},
// 	{
// 		supplier: 'DANFOSS LTD',
// 		claimNumber: 201328864,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201201690,
// 	},
// 	{
// 		supplier: 'HONGSHENG THERMAL SYSTEM LTD',
// 		claimNumber: 201264820,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201350834,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201246412,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201252378,
// 	},
// 	{
// 		supplier: 'METALLINK FLUID POWER (EUR)',
// 		claimNumber: 201352253,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201352391,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201268354,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201272448,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201315415,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201286758,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201293423,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201305959,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201308747,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201320103,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201316638,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201314370,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201348106,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201342027,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201319800,
// 	},
// 	{
// 		supplier: 'ROBERT BOSCH LIMITED',
// 		claimNumber: 201315307,
// 	},
// 	{
// 		supplier: 'BILL BENNETT ENGINEERING LTD',
// 		claimNumber: 201317703,
// 	},
// 	{
// 		supplier: 'GT EMISSIONS SYSTEMS LTD',
// 		claimNumber: 201317648,
// 	},
// 	{
// 		supplier: 'BUCHER HYDRAULICS LTD',
// 		claimNumber: 201335570,
// 	},
// 	{
// 		supplier: 'SOFIMA IND. FILTERS (SHANGHAI)',
// 		claimNumber: 201333115,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201333142,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201335552,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201335540,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201332650,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201328063,
// 	},
// 	{
// 		supplier: 'SAFIM SPA',
// 		claimNumber: 201343952,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201353160,
// 	},
// 	{
// 		supplier: 'GATES HYDRAULICS  (EUR)',
// 		claimNumber: 201352150,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201177868,
// 	},
// 	{
// 		supplier: 'MP FILTRI UK LIMITED',
// 		claimNumber: 201209890,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201209877,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201209835,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201137427,
// 	},
// 	{
// 		supplier: 'PHILLIPS & TEMRO',
// 		claimNumber: 201232821,
// 	},
// 	{
// 		supplier: 'GRAMMER AG',
// 		claimNumber: 201253552,
// 	},
// 	{
// 		supplier: 'LH GROUP (COLEMAN)',
// 		claimNumber: 201209806,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201254926,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201311723,
// 	},
// 	{
// 		supplier: 'FAIRWAY SEALS LTD.',
// 		claimNumber: 201215527,
// 	},
// 	{
// 		supplier: 'GATES HYDRAULICS  (EUR)',
// 		claimNumber: 201308022,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201222004,
// 	},
// 	{
// 		supplier: 'SPICER DRIVESHAFT UK',
// 		claimNumber: 201215502,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201223432,
// 	},
// 	{
// 		supplier: 'DC WOODHEAD & PARTNERS LTD',
// 		claimNumber: 201223430,
// 	},
// 	{
// 		supplier: 'GATES HYDRAULICS  (EUR)',
// 		claimNumber: 201260387,
// 	},
// 	{
// 		supplier: 'Not assigned',
// 		claimNumber: 201301594,
// 	},
// 	{
// 		supplier: 'HELLA LTD (EUR)',
// 		claimNumber: 201301601,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS (USD) LTD',
// 		claimNumber: 201301646,
// 	},
// 	{
// 		supplier: 'TONG YANG MOOLSAN CO LTD',
// 		claimNumber: 201301671,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201324371,
// 	},
// 	{
// 		supplier: 'FAIRWAY SEALS LTD.',
// 		claimNumber: 201246725,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201287579,
// 	},
// 	{
// 		supplier: 'BURGAFLEX UK LTD',
// 		claimNumber: 201283206,
// 	},
// 	{
// 		supplier: 'M BARNWELL SERVICES LTD.',
// 		claimNumber: 201281443,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201318679,
// 	},
// 	{
// 		supplier: 'LINECROSS COMPOSITES LTD',
// 		claimNumber: 201299926,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201310354,
// 	},
// 	{
// 		supplier: 'LINECROSS COMPOSITES LTD',
// 		claimNumber: 201315600,
// 	},
// 	{
// 		supplier: 'LINECROSS COMPOSITES LTD',
// 		claimNumber: 201319230,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201333312,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS (USD) LTD',
// 		claimNumber: 201144515,
// 	},
// 	{
// 		supplier: 'GATES HYDRAULICS  (EUR)',
// 		claimNumber: 201335154,
// 	},
// 	{
// 		supplier: 'BURGAFLEX UK LTD',
// 		claimNumber: 201356519,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201085795,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201117115,
// 	},
// 	{
// 		supplier: 'SAFIM SPA',
// 		claimNumber: 201117207,
// 	},
// 	{
// 		supplier: 'BORG WARNER AUTOMOTIVE',
// 		claimNumber: 201070915,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201069218,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201075295,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201089065,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201097387,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201134693,
// 	},
// 	{
// 		supplier: 'BORG WARNER AUTOMOTIVE',
// 		claimNumber: 201086884,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201098647,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201088299,
// 	},
// 	{
// 		supplier: 'UNILATHE LTD',
// 		claimNumber: 201118703,
// 	},
// 	{
// 		supplier: 'LPL SYSTEMS',
// 		claimNumber: 201089853,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201090554,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201104008,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201102254,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201097467,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201102667,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201102690,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201102694,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201107192,
// 	},
// 	{
// 		supplier: 'PFEDA SYNTHETICS PVT LTD',
// 		claimNumber: 201107327,
// 	},
// 	{
// 		supplier: 'ROBERT BOSCH LIMITED',
// 		claimNumber: 201107270,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201090391,
// 	},
// 	{
// 		supplier: 'CIRTEQ LIMITED',
// 		claimNumber: 201104830,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201086782,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201096297,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201110946,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201114246,
// 	},
// 	{
// 		supplier: 'WESTON BODY HARDWARE',
// 		claimNumber: 201100180,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201083272,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201089978,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201091610,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201104484,
// 	},
// 	{
// 		supplier: 'ROBERT BOSCH LIMITED',
// 		claimNumber: 201104394,
// 	},
// 	{
// 		supplier: 'ROBERT BOSCH LIMITED',
// 		claimNumber: 201097633,
// 	},
// 	{
// 		supplier: 'BENSON COMPONENTS LTD',
// 		claimNumber: 201098693,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201108449,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201102693,
// 	},
// 	{
// 		supplier: 'ROBERT BOSCH LIMITED',
// 		claimNumber: 201225776,
// 	},
// 	{
// 		supplier: 'SSI TECHNOLOGIES INC (EUR)',
// 		claimNumber: 201214883,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201130329,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD (EUR)',
// 		claimNumber: 201113010,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201113063,
// 	},
// 	{
// 		supplier: 'KINGSPAN WATER & ENERGY LTD',
// 		claimNumber: 201263364,
// 	},
// 	{
// 		supplier: 'SSI TECHNOLOGIES INC (EUR)',
// 		claimNumber: 201263444,
// 	},
// 	{
// 		supplier: 'RING AUTOMOTIVE LTD',
// 		claimNumber: 201293342,
// 	},
// 	{
// 		supplier: 'SSI TECHNOLOGIES INC (EUR)',
// 		claimNumber: 201282664,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201215543,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201314827,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201218417,
// 	},
// 	{
// 		supplier: 'HOLMBURY LTD',
// 		claimNumber: 201227021,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201216123,
// 	},
// 	{
// 		supplier: 'FAIRWAY SEALS LTD.',
// 		claimNumber: 201194057,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201257998,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201257997,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201259754,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201257972,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201347763,
// 	},
// 	{
// 		supplier: 'TRECARN ENGINEERING LTD',
// 		claimNumber: 201346518,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201347215,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201347175,
// 	},
// 	{
// 		supplier: 'SOFIMA IND. FILTERS (SHANGHAI)',
// 		claimNumber: 201183429,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201179497,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201220423,
// 	},
// 	{
// 		supplier: 'RAYNE PRECISION ENGINEERING',
// 		claimNumber: 201332233,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201218576,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201167144,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201265482,
// 	},
// 	{
// 		supplier: 'KOHLER LOMBARDINI Srl',
// 		claimNumber: 201277182,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201248512,
// 	},
// 	{
// 		supplier: 'LPL SYSTEMS',
// 		claimNumber: 201278956,
// 	},
// 	{
// 		supplier: 'CONCENTRIC HOF GMBH (EUR)',
// 		claimNumber: 201114161,
// 	},
// 	{
// 		supplier: 'DINACIL SL  (EUR)',
// 		claimNumber: 201172343,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201067131,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201068308,
// 	},
// 	{
// 		supplier: 'JOHNSON ELECTRIC INTER. AG',
// 		claimNumber: 201073418,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201107448,
// 	},
// 	{
// 		supplier: 'KRF (UK) LTD (USD)',
// 		claimNumber: 201085121,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201085132,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201119649,
// 	},
// 	{
// 		supplier: 'LPL SYSTEMS',
// 		claimNumber: 201254738,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201217715,
// 	},
// 	{
// 		supplier: 'PRIMARY FLUID POWER',
// 		claimNumber: 201146334,
// 	},
// 	{
// 		supplier: 'FREUDENBERG SEALING TECHNOLOGIES',
// 		claimNumber: 201120823,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201184512,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201300396,
// 	},
// 	{
// 		supplier: 'FUYAO GLASS INDUSTRY GROUP (2414)',
// 		claimNumber: 201317414,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201253728,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201258975,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201239329,
// 	},
// 	{
// 		supplier: 'LPL SYSTEMS',
// 		claimNumber: 201227909,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201318487,
// 	},
// 	{
// 		supplier: 'LPL SYSTEMS',
// 		claimNumber: 201224685,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201331200,
// 	},
// 	{
// 		supplier: 'LPL SYSTEMS',
// 		claimNumber: 201352434,
// 	},
// 	{
// 		supplier: 'KOHLER LOMBARDINI Srl',
// 		claimNumber: 201232561,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201236504,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201227333,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201312575,
// 	},
// 	{
// 		supplier: 'LPL SYSTEMS',
// 		claimNumber: 201312542,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201323795,
// 	},
// 	{
// 		supplier: 'LINECROSS LIMITED',
// 		claimNumber: 201248554,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201259587,
// 	},
// 	{
// 		supplier: 'DANFOSS LTD',
// 		claimNumber: 201270990,
// 	},
// 	{
// 		supplier: 'LPL SYSTEMS',
// 		claimNumber: 201281633,
// 	},
// 	{
// 		supplier: 'LPL SYSTEMS',
// 		claimNumber: 201280708,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201341386,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201325177,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201336549,
// 	},
// 	{
// 		supplier: 'LPL SYSTEMS',
// 		claimNumber: 201351186,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201153633,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201155330,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201178099,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201215712,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201214715,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201223524,
// 	},
// 	{
// 		supplier: 'KAT MEKATRONIK ÚRÚNLERI A.S',
// 		claimNumber: 201334332,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201108293,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201179310,
// 	},
// 	{
// 		supplier: 'KOHLER LOMBARDINI Srl',
// 		claimNumber: 201109406,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201159361,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201220768,
// 	},
// 	{
// 		supplier: 'JCB INDIA (SERV) DELHI (INR)',
// 		claimNumber: 201180449,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201153361,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201197756,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201158270,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201159996,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201323171,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201331015,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201334026,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201322148,
// 	},
// 	{
// 		supplier: 'GATES HYDRAULICS  (EUR)',
// 		claimNumber: 201108118,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201200161,
// 	},
// 	{
// 		supplier: 'MITCHELL DIESEL LTD (EUR)',
// 		claimNumber: 201102929,
// 	},
// 	{
// 		supplier: 'GATES HYDRAULICS  (EUR)',
// 		claimNumber: 201131974,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201153904,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201200182,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201251069,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201281740,
// 	},
// 	{
// 		supplier: 'GROTE INDUSTRIES EUROPE GMBH',
// 		claimNumber: 201211242,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201253222,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201240870,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201108110,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201276067,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201127223,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201153140,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201157225,
// 	},
// 	{
// 		supplier: 'IFM ELECTRONIC  (EUR)',
// 		claimNumber: 201155529,
// 	},
// 	{
// 		supplier: 'SSI TECHNOLOGIES INC (EUR)',
// 		claimNumber: 201129139,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201151001,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201140377,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201151506,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201196834,
// 	},
// 	{
// 		supplier: 'BUCHER HYDRAULICS SPA (EUR)',
// 		claimNumber: 201181956,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201181946,
// 	},
// 	{
// 		supplier: 'GATES HYDRAULICS  (EUR)',
// 		claimNumber: 201200202,
// 	},
// 	{
// 		supplier: 'GROTE INDUSTRIES EUROPE GMBH',
// 		claimNumber: 201203770,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201241807,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201357695,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201276077,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201266819,
// 	},
// 	{
// 		supplier: 'ORLACO PRODUCTS BV (EURO)',
// 		claimNumber: 201271050,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201273187,
// 	},
// 	{
// 		supplier: 'CONCENTRIC HOF GMBH (EUR)',
// 		claimNumber: 201302654,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201281918,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201342174,
// 	},
// 	{
// 		supplier: 'THOMSON PETTIE LTD',
// 		claimNumber: 201342216,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201342177,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201268567,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201292445,
// 	},
// 	{
// 		supplier: 'BUCHER HYDRAULICS LTD',
// 		claimNumber: 201331953,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201133608,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL (Europe) GmbH',
// 		claimNumber: 201128525,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201133272,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201140731,
// 	},
// 	{
// 		supplier: 'SUMMIT ENGINEERING',
// 		claimNumber: 201140470,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201139205,
// 	},
// 	{
// 		supplier: 'PERMOID INDUSTRIES LTD',
// 		claimNumber: 201133634,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201149893,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201135878,
// 	},
// 	{
// 		supplier: 'ROSTON CASTINGS',
// 		claimNumber: 201146873,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201226642,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201178866,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201169274,
// 	},
// 	{
// 		supplier: 'L.A.P ELECTRICAL LIMITED',
// 		claimNumber: 201190401,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201190283,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201233832,
// 	},
// 	{
// 		supplier: 'ORLACO PRODUCTS BV (EURO)',
// 		claimNumber: 201267019,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201276101,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201353326,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201276215,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201292186,
// 	},
// 	{
// 		supplier: 'ZF SERVICES UK LTD (EURO)',
// 		claimNumber: 201304793,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201312474,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD  (GBP)',
// 		claimNumber: 201294199,
// 	},
// 	{
// 		supplier: 'KIOWA LIMITED',
// 		claimNumber: 201354874,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201321423,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201331814,
// 	},
// 	{
// 		supplier: 'THOMSON PETTIE LTD',
// 		claimNumber: 201333775,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201356164,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201095857,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS (USD) LTD',
// 		claimNumber: 201090980,
// 	},
// 	{
// 		supplier: 'SKF (UK) LTD (LUTON)',
// 		claimNumber: 201090981,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201090940,
// 	},
// 	{
// 		supplier: 'ASHTREE VISION AND SAFETY LTD',
// 		claimNumber: 201090970,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201090794,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201090805,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201253589,
// 	},
// 	{
// 		supplier: 'E/M COATING SERVICES',
// 		claimNumber: 201254352,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201254362,
// 	},
// 	{
// 		supplier: 'ZF SERVICES UK LTD (EURO)',
// 		claimNumber: 201177586,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201150521,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201188835,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201188221,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201288618,
// 	},
// 	{
// 		supplier: 'WHITE DRIVE MOTORS AND STEERING SP',
// 		claimNumber: 201232332,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201278209,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201286554,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201282776,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201340159,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201327358,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201165349,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201307780,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201318927,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201154724,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH. LTD (EUR)',
// 		claimNumber: 201169103,
// 	},
// 	{
// 		supplier: 'WOOJIN CO LTD',
// 		claimNumber: 201246639,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201246670,
// 	},
// 	{
// 		supplier: 'ZF SERVICES UK LTD (EURO)',
// 		claimNumber: 201312692,
// 	},
// 	{
// 		supplier: 'THOMSON PETTIE LTD',
// 		claimNumber: 201320674,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201295527,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201142275,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201253043,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201312022,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201347717,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201314418,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201351099,
// 	},
// 	{
// 		supplier: 'CARRIER ENGINEERS PVT (INR)',
// 		claimNumber: 201326568,
// 	},
// 	{
// 		supplier: 'THERMOTEC PLASTICS LIMITED',
// 		claimNumber: 201324586,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201353148,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201112019,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201126405,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201137072,
// 	},
// 	{
// 		supplier: 'THOMSON PETTIE LTD',
// 		claimNumber: 201131278,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD (EUR)',
// 		claimNumber: 201143954,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201159825,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201265084,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201219150,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201238672,
// 	},
// 	{
// 		supplier: 'Liuzhou Risun Filter Co.,Ltd',
// 		claimNumber: 201246925,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201253383,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201246270,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201218800,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201215139,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201218717,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201221067,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201218808,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201241412,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201272182,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201295935,
// 	},
// 	{
// 		supplier: 'LINAK UK LTD',
// 		claimNumber: 201296595,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201301941,
// 	},
// 	{
// 		supplier: 'ZF SERVICES UK LTD (EURO)',
// 		claimNumber: 201318347,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201145089,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201148561,
// 	},
// 	{
// 		supplier: 'TE CONNECTIVITY (USD)',
// 		claimNumber: 201150855,
// 	},
// 	{
// 		supplier: 'WIDNEY MANUF LTD',
// 		claimNumber: 201155531,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201158785,
// 	},
// 	{
// 		supplier: 'THERMOTEC PLASTICS LIMITED',
// 		claimNumber: 201158780,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201139413,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201142134,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201197545,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201220261,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201203831,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201260760,
// 	},
// 	{
// 		supplier: 'ZF SERVICES UK LTD (EURO)',
// 		claimNumber: 201336156,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201276265,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201246606,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201267505,
// 	},
// 	{
// 		supplier: 'SSI TECHNOLOGIES INC (EUR)',
// 		claimNumber: 201279095,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201284050,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201287280,
// 	},
// 	{
// 		supplier: 'FREUDENBERG SEALING TECHNOLOGIES',
// 		claimNumber: 201334529,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201338096,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201345874,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201244355,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201206487,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201240741,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201355838,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201217383,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201217366,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201221462,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201221426,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201226436,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201302938,
// 	},
// 	{
// 		supplier: 'HELLA LTD (EUR)',
// 		claimNumber: 201234058,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201220796,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD  (GBP)',
// 		claimNumber: 201231500,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201197248,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201238191,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201257409,
// 	},
// 	{
// 		supplier: 'RAYNE PRECISION ENGINEERING',
// 		claimNumber: 201259758,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201231441,
// 	},
// 	{
// 		supplier: 'GATE 7 LTD (GBP)',
// 		claimNumber: 201231438,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201250250,
// 	},
// 	{
// 		supplier: 'CUMMINS UK AFTERMARKET',
// 		claimNumber: 201320541,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201320496,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201275704,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201275744,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201124283,
// 	},
// 	{
// 		supplier: 'PAILTON ENGINEERING LIMITED',
// 		claimNumber: 201231003,
// 	},
// 	{
// 		supplier: 'THERMOTEC PLASTICS LIMITED',
// 		claimNumber: 201353303,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201323102,
// 	},
// 	{
// 		supplier: 'APEM COMPONENTS LTD',
// 		claimNumber: 201088890,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201081632,
// 	},
// 	{
// 		supplier: 'ZF SERVICES UK LTD (EURO)',
// 		claimNumber: 201108610,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201141294,
// 	},
// 	{
// 		supplier: 'Diametric Technical Ltd',
// 		claimNumber: 201264049,
// 	},
// 	{
// 		supplier: 'WESTON BODY HARDWARE',
// 		claimNumber: 201217558,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201217579,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201128918,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201132319,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL (Europe) GmbH',
// 		claimNumber: 201122645,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS',
// 		claimNumber: 201136903,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS',
// 		claimNumber: 201139512,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201149004,
// 	},
// 	{
// 		supplier: 'KAT MEKATRONIK ÚRÚNLERI A.S',
// 		claimNumber: 201134604,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201119433,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201134904,
// 	},
// 	{
// 		supplier: 'BURTON RUBBER CO. LTD',
// 		claimNumber: 201134953,
// 	},
// 	{
// 		supplier: 'JCB INDIA (SERV) DELHI (INR)',
// 		claimNumber: 201118815,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201136010,
// 	},
// 	{
// 		supplier: 'JOHNSON ELECTRIC INTER. AG',
// 		claimNumber: 201145960,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201145940,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201216681,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201167041,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201145117,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201190163,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201182366,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201187979,
// 	},
// 	{
// 		supplier: 'STABILUS GMBH (EUR)',
// 		claimNumber: 201178232,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201226961,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201226948,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201221914,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201201508,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201199914,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201282005,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201349989,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201271921,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201279075,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201292185,
// 	},
// 	{
// 		supplier: 'NSI GROUP LTD',
// 		claimNumber: 201308790,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201302101,
// 	},
// 	{
// 		supplier: 'JAMES DAWSON & SONS LTD',
// 		claimNumber: 201306782,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201310582,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201346908,
// 	},
// 	{
// 		supplier: 'ROCKINGER AGRICULTURE GMBH',
// 		claimNumber: 201337320,
// 	},
// 	{
// 		supplier: 'PERMOID INDUSTRIES LTD',
// 		claimNumber: 201241181,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201119941,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201142680,
// 	},
// 	{
// 		supplier: 'LINECROSS LIMITED',
// 		claimNumber: 201175892,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201163758,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201173327,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201212144,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201231110,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201286940,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201351192,
// 	},
// 	{
// 		supplier: 'METALLINK FLUID POWER (EUR)',
// 		claimNumber: 201340400,
// 	},
// 	{
// 		supplier: 'CONCENTRIC HOF GMBH (EUR)',
// 		claimNumber: 201355513,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201216969,
// 	},
// 	{
// 		supplier: 'LINECROSS LIMITED',
// 		claimNumber: 201142639,
// 	},
// 	{
// 		supplier: 'JOHNSON ELECTRIC INTER. AG',
// 		claimNumber: 201149220,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201231184,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201180670,
// 	},
// 	{
// 		supplier: 'GROTE INDUSTRIES EUROPE GMBH',
// 		claimNumber: 201236376,
// 	},
// 	{
// 		supplier: 'L.A.P ELECTRICAL LIMITED',
// 		claimNumber: 201279981,
// 	},
// 	{
// 		supplier: 'JOHNSON ELECTRIC INTER. AG',
// 		claimNumber: 201219789,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201225402,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201270500,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201277320,
// 	},
// 	{
// 		supplier: 'L.A.P ELECTRICAL LIMITED',
// 		claimNumber: 201273437,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201302842,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201291752,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201295294,
// 	},
// 	{
// 		supplier: 'L.A.P ELECTRICAL LIMITED',
// 		claimNumber: 201273557,
// 	},
// 	{
// 		supplier: 'WIDNEY MANUF LTD',
// 		claimNumber: 201278823,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201233341,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201233325,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201233340,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201330245,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201284490,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201160475,
// 	},
// 	{
// 		supplier: 'DANFOSS LTD',
// 		claimNumber: 201160498,
// 	},
// 	{
// 		supplier: 'RAYNE PRECISION ENGINEERING',
// 		claimNumber: 201112344,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201128138,
// 	},
// 	{
// 		supplier: 'THOMSON PETTIE LTD',
// 		claimNumber: 201138599,
// 	},
// 	{
// 		supplier: 'DY POWER CORPORATION',
// 		claimNumber: 201138615,
// 	},
// 	{
// 		supplier: 'GSM ALUMINIUM LTD',
// 		claimNumber: 201143737,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201170361,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201151974,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201129598,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201132541,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201141089,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201256379,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201235084,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201234949,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201241886,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS (USD) LTD',
// 		claimNumber: 201244042,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201266364,
// 	},
// 	{
// 		supplier: 'JOHNSON ELECTRIC INTER. AG',
// 		claimNumber: 201272001,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201277425,
// 	},
// 	{
// 		supplier: 'L.A.P ELECTRICAL LIMITED',
// 		claimNumber: 201273436,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201275369,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201192172,
// 	},
// 	{
// 		supplier: 'FAIRWAY SEALS LTD.',
// 		claimNumber: 201147448,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD (EUR)',
// 		claimNumber: 201115780,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201140814,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD  (GBP)',
// 		claimNumber: 201189218,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201241392,
// 	},
// 	{
// 		supplier: 'KABY ENGINEERS LTD',
// 		claimNumber: 201189197,
// 	},
// 	{
// 		supplier: 'BENSON COMPONENTS LTD',
// 		claimNumber: 201211150,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS (USD) LTD',
// 		claimNumber: 201167402,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201167768,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201231805,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201205992,
// 	},
// 	{
// 		supplier: 'TRIMARK EUROPE LTD',
// 		claimNumber: 201231597,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201247935,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201238460,
// 	},
// 	{
// 		supplier: 'P K ENGINEERING',
// 		claimNumber: 201232892,
// 	},
// 	{
// 		supplier: 'CATTON CONTROLS CABLES LTD',
// 		claimNumber: 201221774,
// 	},
// 	{
// 		supplier: 'KOHLER LOMBARDINI Srl',
// 		claimNumber: 201241127,
// 	},
// 	{
// 		supplier: 'KOHLER LOMBARDINI Srl',
// 		claimNumber: 201293190,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201293191,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201265315,
// 	},
// 	{
// 		supplier: 'P K ENGINEERING',
// 		claimNumber: 201265550,
// 	},
// 	{
// 		supplier: 'WALVOIL SPA',
// 		claimNumber: 201265823,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201299034,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201173323,
// 	},
// 	{
// 		supplier: 'WALVOIL SPA',
// 		claimNumber: 201207489,
// 	},
// 	{
// 		supplier: 'KOHLER LOMBARDINI Srl',
// 		claimNumber: 201279880,
// 	},
// 	{
// 		supplier: 'CARLISLE BRAKE PRODUCTS',
// 		claimNumber: 201295366,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201204735,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201161932,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201227792,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201204068,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201141202,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL LTD',
// 		claimNumber: 201210772,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201190969,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201153073,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201179454,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201215172,
// 	},
// 	{
// 		supplier: 'KAT MEKATRONIK ÚRÚNLERI A.S',
// 		claimNumber: 201210063,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201206855,
// 	},
// 	{
// 		supplier: 'BURNSIDE EUROCYL LTD',
// 		claimNumber: 201203766,
// 	},
// 	{
// 		supplier: 'MP FILTRI UK LIMITED',
// 		claimNumber: 201280548,
// 	},
// 	{
// 		supplier: 'VALEO MAGYARORSZAG KFT (EUR)',
// 		claimNumber: 201277880,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201219112,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201236981,
// 	},
// 	{
// 		supplier: 'DANFOSS LTD',
// 		claimNumber: 201241589,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201239826,
// 	},
// 	{
// 		supplier: 'KOHLER LOMBARDINI Srl',
// 		claimNumber: 201256268,
// 	},
// 	{
// 		supplier: 'PERMOID INDUSTRIES LTD',
// 		claimNumber: 201341814,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201268273,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201276264,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201281299,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201288319,
// 	},
// 	{
// 		supplier: 'POCLAIN HYDRAULICS INDUSTRIE',
// 		claimNumber: 201344128,
// 	},
// 	{
// 		supplier: 'VALEO MAGYARORSZAG KFT (EUR)',
// 		claimNumber: 201322552,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201205601,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201282012,
// 	},
// 	{
// 		supplier: 'MOTOR COMPONENTS LLC',
// 		claimNumber: 201281995,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201234475,
// 	},
// 	{
// 		supplier: 'FREUDENBERG SEALING TECHNOLOGIES',
// 		claimNumber: 201203684,
// 	},
// 	{
// 		supplier: 'FLAMBEAU EUROPLAST LTD',
// 		claimNumber: 201277115,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201265935,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201269849,
// 	},
// 	{
// 		supplier: 'KOHLER LOMBARDINI Srl',
// 		claimNumber: 201262877,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201131032,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201231444,
// 	},
// 	{
// 		supplier: 'COBO SPA',
// 		claimNumber: 201287090,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201174179,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201176112,
// 	},
// 	{
// 		supplier: 'POCLAIN HYDRAULICS INDUSTRIE',
// 		claimNumber: 201123161,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201124896,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201132799,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201285840,
// 	},
// 	{
// 		supplier: 'POCLAIN HYDRAULICS INDUSTRIE',
// 		claimNumber: 201230186,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201263383,
// 	},
// 	{
// 		supplier: 'CARLISLE BRAKE PRODUCTS',
// 		claimNumber: 201321141,
// 	},
// 	{
// 		supplier: 'Not assigned',
// 		claimNumber: 201355158,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201315624,
// 	},
// 	{
// 		supplier: 'POCLAIN HYDRAULICS INDUSTRIE',
// 		claimNumber: 201321204,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201157735,
// 	},
// 	{
// 		supplier: 'FAULD PRECISION MACHINING CO',
// 		claimNumber: 201157613,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201154019,
// 	},
// 	{
// 		supplier: 'METALLINK FLUID POWER (EUR)',
// 		claimNumber: 201335249,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201260720,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201341790,
// 	},
// 	{
// 		supplier: 'TRELLEBORG INDUSTRIAL PROD UK',
// 		claimNumber: 201146314,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201192223,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201205219,
// 	},
// 	{
// 		supplier: 'METALLINK FLUID POWER (EUR)',
// 		claimNumber: 201193322,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL (Europe) GmbH',
// 		claimNumber: 201338377,
// 	},
// 	{
// 		supplier: 'ROBERT BOSCH (EURO) HOMBURG',
// 		claimNumber: 201160639,
// 	},
// 	{
// 		supplier: 'WITZENMANN UK LTD',
// 		claimNumber: 201154543,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201117221,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201147457,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201155926,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201206561,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201205899,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201209603,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201242285,
// 	},
// 	{
// 		supplier: 'D L ELECTRICAL SUPPLIERS LTD',
// 		claimNumber: 201345552,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD  (GBP)',
// 		claimNumber: 201301847,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201201974,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201211501,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201195406,
// 	},
// 	{
// 		supplier: 'L.A.P ELECTRICAL LIMITED',
// 		claimNumber: 201263905,
// 	},
// 	{
// 		supplier: 'IFM ELECTRONIC  (EUR)',
// 		claimNumber: 201289896,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201294830,
// 	},
// 	{
// 		supplier: 'MAHLE Electric Drives Slovenija d.o',
// 		claimNumber: 201309677,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201303920,
// 	},
// 	{
// 		supplier: 'MAHLE Electric Drives Slovenija d.o',
// 		claimNumber: 201303909,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201318296,
// 	},
// 	{
// 		supplier: 'IFM ELECTRONIC  (EUR)',
// 		claimNumber: 201208865,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201213843,
// 	},
// 	{
// 		supplier: 'SENSATA TECHNOLOGIES GMBH',
// 		claimNumber: 201208857,
// 	},
// 	{
// 		supplier: 'GATE 7 LTD (GBP)',
// 		claimNumber: 201213860,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201226782,
// 	},
// 	{
// 		supplier: 'ROBERT BOSCH LIMITED',
// 		claimNumber: 201218851,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201202708,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201223029,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201294947,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201316259,
// 	},
// 	{
// 		supplier: 'MANN + HUMMEL (UK) LTD',
// 		claimNumber: 201316236,
// 	},
// 	{
// 		supplier: 'TRIMARK EUROPE LTD',
// 		claimNumber: 201316272,
// 	},
// 	{
// 		supplier: 'L.A.P ELECTRICAL LIMITED',
// 		claimNumber: 201316271,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201336975,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201337003,
// 	},
// 	{
// 		supplier: 'SFC SOLUTIONS ITALY S.R.L.',
// 		claimNumber: 201257549,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201257551,
// 	},
// 	{
// 		supplier: 'PHILLIPS & TEMRO',
// 		claimNumber: 201220425,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201224889,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201301271,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201209338,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201240817,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201293421,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201270401,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201300387,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201163741,
// 	},
// 	{
// 		supplier: 'Parker Hannifin Corporation',
// 		claimNumber: 201094898,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201120715,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201155340,
// 	},
// 	{
// 		supplier: 'LINECROSS LIMITED',
// 		claimNumber: 201155341,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201149278,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201282657,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201175842,
// 	},
// 	{
// 		supplier: 'DONALDSON FILTER COMPS LTD',
// 		claimNumber: 201108857,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201130196,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201118361,
// 	},
// 	{
// 		supplier: 'LINECROSS LIMITED',
// 		claimNumber: 201107539,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201125373,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201112325,
// 	},
// 	{
// 		supplier: 'DONALDSON FILTER COMPS LTD',
// 		claimNumber: 201112334,
// 	},
// 	{
// 		supplier: 'DONALDSON FILTER COMP (EUR)',
// 		claimNumber: 201126639,
// 	},
// 	{
// 		supplier: 'JCB INDIA (SERV) DELHI (INR)',
// 		claimNumber: 201126643,
// 	},
// 	{
// 		supplier: 'ZF SERVICES UK LTD (EURO)',
// 		claimNumber: 201126642,
// 	},
// 	{
// 		supplier: 'NESAN OTOMOTIV SAN TIC (EUR)',
// 		claimNumber: 201126657,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201126660,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201140943,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201119412,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201194601,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201156929,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201229321,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201206366,
// 	},
// 	{
// 		supplier: 'CONCENTRIC HOF GMBH (EUR)',
// 		claimNumber: 201275050,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201160573,
// 	},
// 	{
// 		supplier: 'BURGAFLEX UK LTD',
// 		claimNumber: 201160617,
// 	},
// 	{
// 		supplier: 'ORLACO PRODUCTS BV (EURO)',
// 		claimNumber: 201130118,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201161910,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201338209,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201346564,
// 	},
// 	{
// 		supplier: 'BORGWARNER MOBILITY POLAND SP. Z O.',
// 		claimNumber: 201136083,
// 	},
// 	{
// 		supplier: 'FUYAO GLASS INDUSTRY GROUP (2414)',
// 		claimNumber: 201135893,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201171674,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201171665,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201157280,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201150401,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201150298,
// 	},
// 	{
// 		supplier: 'CAMLOC MOTION CONTROL LTD',
// 		claimNumber: 201158669,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201165038,
// 	},
// 	{
// 		supplier: 'METALLINK FLUID POWER (EUR)',
// 		claimNumber: 201162547,
// 	},
// 	{
// 		supplier: 'BILL BENNETT ENGINEERING LTD',
// 		claimNumber: 201156653,
// 	},
// 	{
// 		supplier: 'M BARNWELL SERVICES LTD.',
// 		claimNumber: 201236736,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201197918,
// 	},
// 	{
// 		supplier: 'ROBERT BOSCH LIMITED',
// 		claimNumber: 201200616,
// 	},
// 	{
// 		supplier: 'ROBERT BOSCH LIMITED',
// 		claimNumber: 201203979,
// 	},
// 	{
// 		supplier: 'TECONNEX LTD',
// 		claimNumber: 201203978,
// 	},
// 	{
// 		supplier: 'HONGFA EUROPE (EUR)',
// 		claimNumber: 201254415,
// 	},
// 	{
// 		supplier: 'ELANDERS LTD',
// 		claimNumber: 201268590,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201323286,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201233752,
// 	},
// 	{
// 		supplier: 'IFM ELECTRONIC  (EUR)',
// 		claimNumber: 201289215,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201276088,
// 	},
// 	{
// 		supplier: 'GRAMMER AG',
// 		claimNumber: 201275985,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201254661,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201274478,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201267175,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201267883,
// 	},
// 	{
// 		supplier: 'HBS SRL (EUR)',
// 		claimNumber: 201286244,
// 	},
// 	{
// 		supplier: 'DONALDSON SAS (EUR)',
// 		claimNumber: 201270967,
// 	},
// 	{
// 		supplier: 'SAFIM SPA',
// 		claimNumber: 201294567,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201349412,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201356921,
// 	},
// 	{
// 		supplier: 'TRAVEN TECHNOLOGY',
// 		claimNumber: 201228397,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201203358,
// 	},
// 	{
// 		supplier: 'MERCURY MATERIAL MANGMNT. LTD',
// 		claimNumber: 201224758,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201224058,
// 	},
// 	{
// 		supplier: 'FRAENKISCHE CZ (EUR)',
// 		claimNumber: 201226165,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201274150,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201279346,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201219119,
// 	},
// 	{
// 		supplier: 'CAMLOC MOTION CONTROL LTD',
// 		claimNumber: 201123916,
// 	},
// 	{
// 		supplier: 'ACOUSTAFOAM LTD',
// 		claimNumber: 201126365,
// 	},
// 	{
// 		supplier: 'BIRMINGHAM SPECIALITIES LTD',
// 		claimNumber: 201150979,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201190267,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201139113,
// 	},
// 	{
// 		supplier: 'DONALDSON SAS (EUR)',
// 		claimNumber: 201140634,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201144498,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201161575,
// 	},
// 	{
// 		supplier: 'INDO AUTOTECH LTD (INR)',
// 		claimNumber: 201157252,
// 	},
// 	{
// 		supplier: 'VDL BELGIUM',
// 		claimNumber: 201142279,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201148849,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201147522,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201164972,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201146943,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201171780,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201187922,
// 	},
// 	{
// 		supplier: 'CARRIER ENGINEERS PVT (INR)',
// 		claimNumber: 201187918,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201247406,
// 	},
// 	{
// 		supplier: 'TECONNEX LTD',
// 		claimNumber: 201197891,
// 	},
// 	{
// 		supplier: 'TECONNEX LTD',
// 		claimNumber: 201167728,
// 	},
// 	{
// 		supplier: 'WURTH ELECTRONICS UK LTD',
// 		claimNumber: 201293634,
// 	},
// 	{
// 		supplier: 'CAMLOC MOTION CONTROL LTD',
// 		claimNumber: 201178468,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL LTD',
// 		claimNumber: 201175068,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201155998,
// 	},
// 	{
// 		supplier: 'BURGAFLEX UK LTD',
// 		claimNumber: 201175316,
// 	},
// 	{
// 		supplier: 'BIRMINGHAM SPECIALITIES LTD',
// 		claimNumber: 201159757,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201175357,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201161572,
// 	},
// 	{
// 		supplier: 'HENKEL LOCTITE ADHESIVES LTD',
// 		claimNumber: 201172746,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201162548,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201161656,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201161625,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201163855,
// 	},
// 	{
// 		supplier: 'HONGFA EUROPE (EUR)',
// 		claimNumber: 201170037,
// 	},
// 	{
// 		supplier: 'GRAMMER AG',
// 		claimNumber: 201184200,
// 	},
// 	{
// 		supplier: 'CAMLOC MOTION CONTROL LTD',
// 		claimNumber: 201190049,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201179127,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201179137,
// 	},
// 	{
// 		supplier: 'BORGWARNER TECHNOLOGIES LIMITED',
// 		claimNumber: 201208582,
// 	},
// 	{
// 		supplier: 'CAMLOC MOTION CONTROL LTD',
// 		claimNumber: 201227547,
// 	},
// 	{
// 		supplier: 'AAMP GLOBAL LTD (USD)',
// 		claimNumber: 201205268,
// 	},
// 	{
// 		supplier: 'FUYAO GLASS INDUSTRY GROUP (2414)',
// 		claimNumber: 201181289,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201181302,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201193952,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201184466,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201205026,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201229117,
// 	},
// 	{
// 		supplier: 'GATES HYDRAULICS  (EUR)',
// 		claimNumber: 201210567,
// 	},
// 	{
// 		supplier: 'KINGSPAN WATER & ENERGY LTD',
// 		claimNumber: 201201692,
// 	},
// 	{
// 		supplier: 'METALLINK FLUID POWER (EUR)',
// 		claimNumber: 201201638,
// 	},
// 	{
// 		supplier: 'EATON HYDRAULICS',
// 		claimNumber: 201207551,
// 	},
// 	{
// 		supplier: 'SAFIM SPA',
// 		claimNumber: 201234793,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201287525,
// 	},
// 	{
// 		supplier: 'MP FILTRI UK LIMITED',
// 		claimNumber: 201238782,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201221705,
// 	},
// 	{
// 		supplier: 'CAMLOC MOTION CONTROL LTD',
// 		claimNumber: 201220301,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201220320,
// 	},
// 	{
// 		supplier: 'APEM COMPONENTS LTD',
// 		claimNumber: 201235058,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201235091,
// 	},
// 	{
// 		supplier: 'PERMOID INDUSTRIES LTD',
// 		claimNumber: 201263897,
// 	},
// 	{
// 		supplier: 'LINECROSS LIMITED',
// 		claimNumber: 201213415,
// 	},
// 	{
// 		supplier: 'DONALDSON SAS (EUR)',
// 		claimNumber: 201245926,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201246531,
// 	},
// 	{
// 		supplier: 'DONALDSON SAS (EUR)',
// 		claimNumber: 201215800,
// 	},
// 	{
// 		supplier: 'Not assigned',
// 		claimNumber: 201358009,
// 	},
// 	{
// 		supplier: 'VDL BELGIUM',
// 		claimNumber: 201233762,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201220496,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201220509,
// 	},
// 	{
// 		supplier: 'CAMLOC MOTION CONTROL LTD',
// 		claimNumber: 201302817,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201225460,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201255095,
// 	},
// 	{
// 		supplier: 'ROQUET HYDRAULICS, SL',
// 		claimNumber: 201301822,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201304643,
// 	},
// 	{
// 		supplier: 'TECONNEX LTD',
// 		claimNumber: 201240381,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201263862,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201238651,
// 	},
// 	{
// 		supplier: 'MAHLE ELECTRIC DRIVES TAICANG CO LT',
// 		claimNumber: 201238620,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201239115,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201236442,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201239748,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201223711,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201250705,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201326397,
// 	},
// 	{
// 		supplier: 'CONCENTRIC BIRMINGHAM LTD',
// 		claimNumber: 201263248,
// 	},
// 	{
// 		supplier: 'BORGWARNER TECHNOLOGIES LIMITED',
// 		claimNumber: 201232111,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201230112,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201261826,
// 	},
// 	{
// 		supplier: 'JOHNSON ELECTRIC INTER. AG',
// 		claimNumber: 201265336,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201251199,
// 	},
// 	{
// 		supplier: 'BIRMINGHAM SPECIALITIES LTD',
// 		claimNumber: 201263179,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201335347,
// 	},
// 	{
// 		supplier: 'VALEO MAGYARORSZAG KFT (EUR)',
// 		claimNumber: 201352092,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201245717,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201337133,
// 	},
// 	{
// 		supplier: 'ROBERT BOSCH LIMITED',
// 		claimNumber: 201253851,
// 	},
// 	{
// 		supplier: 'JOHNSON ELECTRIC INTER. AG',
// 		claimNumber: 201271412,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201266360,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201265868,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201311139,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201311175,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201311162,
// 	},
// 	{
// 		supplier: 'ATC DRIVETRAIN UK LTD',
// 		claimNumber: 201305929,
// 	},
// 	{
// 		supplier: 'FREUDENBERG SEALING TECHNOLOGIES',
// 		claimNumber: 201273076,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201270257,
// 	},
// 	{
// 		supplier: 'ROBERT BOSCH LIMITED',
// 		claimNumber: 201277286,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201350091,
// 	},
// 	{
// 		supplier: 'DONALDSON SAS (EUR)',
// 		claimNumber: 201289331,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201288715,
// 	},
// 	{
// 		supplier: 'D L ELECTRICAL SUPPLIERS LTD',
// 		claimNumber: 201314573,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201316839,
// 	},
// 	{
// 		supplier: 'NYLACAST LIMITED',
// 		claimNumber: 201316824,
// 	},
// 	{
// 		supplier: 'FAULD PRECISION MACHINING CO',
// 		claimNumber: 201316806,
// 	},
// 	{
// 		supplier: 'ROBERT BOSCH LIMITED',
// 		claimNumber: 201320886,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201283006,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201313182,
// 	},
// 	{
// 		supplier: 'DANFOSS DISTRIBUTION II A/S',
// 		claimNumber: 201295904,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201328993,
// 	},
// 	{
// 		supplier: 'DANFOSS DISTRIBUTION II A/S',
// 		claimNumber: 201306783,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201309996,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201323491,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201324862,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201317707,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201320750,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201320338,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201323958,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201355428,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201336832,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201333813,
// 	},
// 	{
// 		supplier: 'DANFOSS DISTRIBUTION II A/S (USD)',
// 		claimNumber: 201329678,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201338094,
// 	},
// 	{
// 		supplier: 'EATON HYDRAULICS',
// 		claimNumber: 201327588,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201347357,
// 	},
// 	{
// 		supplier: 'EATON HYDRAULICS',
// 		claimNumber: 201342880,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201329572,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201351029,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201354218,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201349480,
// 	},
// 	{
// 		supplier: 'DONALDSON SAS (EUR)',
// 		claimNumber: 201356307,
// 	},
// 	{
// 		supplier: 'Not assigned',
// 		claimNumber: 201357997,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201358034,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201337517,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201352266,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201350516,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201160788,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201164375,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201202099,
// 	},
// 	{
// 		supplier: 'KABY ENGINEERS LTD',
// 		claimNumber: 201236083,
// 	},
// 	{
// 		supplier: 'CAMLOC MOTION CONTROL LTD',
// 		claimNumber: 201226521,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201226598,
// 	},
// 	{
// 		supplier: 'National Högsäter Performance Pol',
// 		claimNumber: 201326519,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201315376,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201314039,
// 	},
// 	{
// 		supplier: 'RAAL SA',
// 		claimNumber: 201307568,
// 	},
// 	{
// 		supplier: 'BORGWARNER TECHNOLOGIES LIMITED',
// 		claimNumber: 201356257,
// 	},
// 	{
// 		supplier: 'NORLEC SHEET METAL LTD',
// 		claimNumber: 201156720,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201129787,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201139749,
// 	},
// 	{
// 		supplier: 'CAMLOC MOTION CONTROL LTD',
// 		claimNumber: 201212199,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201134859,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH. LTD (EUR)',
// 		claimNumber: 201126364,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS (USD) LTD',
// 		claimNumber: 201133146,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201163246,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201232033,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201154415,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201154321,
// 	},
// 	{
// 		supplier: 'BIRMINGHAM SPECIALITIES LTD',
// 		claimNumber: 201156136,
// 	},
// 	{
// 		supplier: 'CAMLOC MOTION CONTROL LTD',
// 		claimNumber: 201156793,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201225042,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201181221,
// 	},
// 	{
// 		supplier: 'KABY ENGINEERS LTD',
// 		claimNumber: 201182664,
// 	},
// 	{
// 		supplier: 'MOVEERO',
// 		claimNumber: 201202218,
// 	},
// 	{
// 		supplier: 'FUYAO GLASS INDUSTRY GROUP (2414)',
// 		claimNumber: 201206778,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201209072,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201208921,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201209090,
// 	},
// 	{
// 		supplier: 'FRANKLIN SILENCERS LIMITED',
// 		claimNumber: 201305090,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201181378,
// 	},
// 	{
// 		supplier: 'Delphi Powertrain Systems Hun. KFT',
// 		claimNumber: 201216236,
// 	},
// 	{
// 		supplier: 'KINGSPAN WATER & ENERGY LTD',
// 		claimNumber: 201245393,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201219946,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201192966,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201205700,
// 	},
// 	{
// 		supplier: 'DOGA ITALIA SRL',
// 		claimNumber: 201205697,
// 	},
// 	{
// 		supplier: 'TRAVEN TECHNOLOGY',
// 		claimNumber: 201205657,
// 	},
// 	{
// 		supplier: 'OFFICINE METALLURGICHE (EUR)',
// 		claimNumber: 201204713,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201222523,
// 	},
// 	{
// 		supplier: 'BUCHER HYDRAULICS LTD',
// 		claimNumber: 201241430,
// 	},
// 	{
// 		supplier: 'FUYAO GLASS INDUSTRY GROUP (2414)',
// 		claimNumber: 201215947,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201235065,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201220549,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201220380,
// 	},
// 	{
// 		supplier: 'HORTON EUROPE GMBH & CO KG (EUR)',
// 		claimNumber: 201274428,
// 	},
// 	{
// 		supplier: 'GNUTTI CARLO UK LTD',
// 		claimNumber: 201264160,
// 	},
// 	{
// 		supplier: 'ROBERT BOSCH LIMITED',
// 		claimNumber: 201268969,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201306495,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201283458,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201284158,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201333117,
// 	},
// 	{
// 		supplier: 'ROBERT BOSCH LIMITED',
// 		claimNumber: 201302516,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201301144,
// 	},
// 	{
// 		supplier: 'Not assigned',
// 		claimNumber: 201356747,
// 	},
// 	{
// 		supplier: 'B&T Exact GmbH',
// 		claimNumber: 201303912,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201317959,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201309052,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201313386,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201324846,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201338766,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201339184,
// 	},
// 	{
// 		supplier: 'NSI GROUP LTD',
// 		claimNumber: 201329628,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201350619,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201349353,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201351133,
// 	},
// 	{
// 		supplier: 'SAFIM SPA',
// 		claimNumber: 201356824,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201356889,
// 	},
// 	{
// 		supplier: 'MANPLAS LTD',
// 		claimNumber: 201181167,
// 	},
// 	{
// 		supplier: 'BONY POLYMERS (P) LTD',
// 		claimNumber: 201213628,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201209847,
// 	},
// 	{
// 		supplier: 'TE CONNECTIVITY SOLUTIONS GMBH',
// 		claimNumber: 201209867,
// 	},
// 	{
// 		supplier: 'MEAS FRANCE (EUR)',
// 		claimNumber: 201335857,
// 	},
// 	{
// 		supplier: 'HEXSTONE LTD. T/A ICON FAST.',
// 		claimNumber: 201262780,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS (USD) LTD',
// 		claimNumber: 201270804,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201300062,
// 	},
// 	{
// 		supplier: 'LINECROSS COMPOSITES LTD',
// 		claimNumber: 201340323,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201313037,
// 	},
// 	{
// 		supplier: 'FAIRWAY SEALS LTD.',
// 		claimNumber: 201339623,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201355153,
// 	},
// 	{
// 		supplier: 'AMERICAN ZETTLER INC',
// 		claimNumber: 201091678,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201083220,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201087799,
// 	},
// 	{
// 		supplier: 'QUINTON MAJOR LIMITED',
// 		claimNumber: 201140980,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201089879,
// 	},
// 	{
// 		supplier: 'JOHNSON ELECTRIC INTER. AG',
// 		claimNumber: 201101836,
// 	},
// 	{
// 		supplier: 'JOHNSON ELECTRIC INTER. AG',
// 		claimNumber: 201107118,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201105191,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201127088,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS (USD) LTD',
// 		claimNumber: 201114150,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS',
// 		claimNumber: 201093967,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201114950,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS (USD) LTD',
// 		claimNumber: 201115290,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201118347,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201125634,
// 	},
// 	{
// 		supplier: 'SAFIM SPA',
// 		claimNumber: 201102501,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201102502,
// 	},
// 	{
// 		supplier: 'GIANETTI FAD WHEELS SRL',
// 		claimNumber: 201105574,
// 	},
// 	{
// 		supplier: 'SAFIM SPA',
// 		claimNumber: 201120347,
// 	},
// 	{
// 		supplier: 'HYDROTECHNIK UK LTD (EUR)',
// 		claimNumber: 201114166,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201121242,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201119115,
// 	},
// 	{
// 		supplier: 'KINGSPAN WATER & ENERGY LTD',
// 		claimNumber: 201114201,
// 	},
// 	{
// 		supplier: 'MP FILTRI UK LIMITED',
// 		claimNumber: 201111176,
// 	},
// 	{
// 		supplier: 'FAULD PRECISION MACHINING CO',
// 		claimNumber: 201108198,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201116913,
// 	},
// 	{
// 		supplier: 'SAFIM SPA',
// 		claimNumber: 201114195,
// 	},
// 	{
// 		supplier: 'MP FILTRI UK LIMITED',
// 		claimNumber: 201129776,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201124474,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201109064,
// 	},
// 	{
// 		supplier: 'GRENVILLE ENGINEERING LTD',
// 		claimNumber: 201120864,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201120847,
// 	},
// 	{
// 		supplier: 'KINGSPAN WATER & ENERGY LTD',
// 		claimNumber: 201120876,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201240215,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201296757,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201288896,
// 	},
// 	{
// 		supplier: 'GRAMMER AG',
// 		claimNumber: 201333327,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201236848,
// 	},
// 	{
// 		supplier: 'HEXSTONE LTD. T/A ICON FAST.',
// 		claimNumber: 201238969,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201309770,
// 	},
// 	{
// 		supplier: 'C-TECH ENGINEERS PVT (INR)',
// 		claimNumber: 201279637,
// 	},
// 	{
// 		supplier: 'BURNSIDE EUROCYL LTD',
// 		claimNumber: 201306374,
// 	},
// 	{
// 		supplier: 'HAPPICH VEHICLE (EUR) & IND',
// 		claimNumber: 201357485,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201344587,
// 	},
// 	{
// 		supplier: 'MANPLAS LTD',
// 		claimNumber: 201159887,
// 	},
// 	{
// 		supplier: 'HPM LTD',
// 		claimNumber: 201205937,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201226842,
// 	},
// 	{
// 		supplier: 'LPL SYSTEMS',
// 		claimNumber: 201264572,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201297838,
// 	},
// 	{
// 		supplier: 'DANFOSS DISTRIBUTION II A/S',
// 		claimNumber: 201340532,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201340560,
// 	},
// 	{
// 		supplier: 'LPL SYSTEMS',
// 		claimNumber: 201337481,
// 	},
// 	{
// 		supplier: 'POCLAIN HYDRAULICS INDUSTRIE',
// 		claimNumber: 201124981,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201207777,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201207836,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201159071,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201137852,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201162581,
// 	},
// 	{
// 		supplier: 'POCLAIN HYDRAULICS INDUSTRIE',
// 		claimNumber: 201154148,
// 	},
// 	{
// 		supplier: 'DANFOSS LTD',
// 		claimNumber: 201146871,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201158782,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201139042,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201131503,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201157363,
// 	},
// 	{
// 		supplier: 'FUYAO GLASS INDUSTRY GROUP (2414)',
// 		claimNumber: 201222872,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201182158,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201181583,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201217290,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201335940,
// 	},
// 	{
// 		supplier: 'DANFOSS LTD',
// 		claimNumber: 201240374,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201239709,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201263151,
// 	},
// 	{
// 		supplier: 'LPL SYSTEMS',
// 		claimNumber: 201292898,
// 	},
// 	{
// 		supplier: 'LPL SYSTEMS',
// 		claimNumber: 201336092,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201272340,
// 	},
// 	{
// 		supplier: 'LPL SYSTEMS',
// 		claimNumber: 201261390,
// 	},
// 	{
// 		supplier: 'CARLISLE BRAKE PRODUCTS',
// 		claimNumber: 201268270,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201293581,
// 	},
// 	{
// 		supplier: 'LPL SYSTEMS',
// 		claimNumber: 201301056,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201336137,
// 	},
// 	{
// 		supplier: 'ELANDERS LTD',
// 		claimNumber: 201338013,
// 	},
// 	{
// 		supplier: 'DANFOSS DISTRIBUTION II A/S',
// 		claimNumber: 201348523,
// 	},
// 	{
// 		supplier: 'POCLAIN HYDRAULICS INDUSTRIE',
// 		claimNumber: 201347955,
// 	},
// 	{
// 		supplier: 'LPL SYSTEMS',
// 		claimNumber: 201225251,
// 	},
// 	{
// 		supplier: 'LPL SYSTEMS',
// 		claimNumber: 201229233,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201186719,
// 	},
// 	{
// 		supplier: 'LPL SYSTEMS',
// 		claimNumber: 201226239,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201166230,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201158770,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201162881,
// 	},
// 	{
// 		supplier: 'KONGSBERG POWER PROD SYSTEMS I LLC',
// 		claimNumber: 201169078,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201338348,
// 	},
// 	{
// 		supplier: 'TRAVEN TECHNOLOGY',
// 		claimNumber: 201352895,
// 	},
// 	{
// 		supplier: 'P K ENGINEERING',
// 		claimNumber: 201121203,
// 	},
// 	{
// 		supplier: 'KOHLER LOMBARDINI Srl',
// 		claimNumber: 201156000,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201170864,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201191043,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201226511,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201273667,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201273676,
// 	},
// 	{
// 		supplier: 'COMESYS LTD',
// 		claimNumber: 201281927,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201348609,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201268177,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201330018,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201226184,
// 	},
// 	{
// 		supplier: 'PETFORD TOOLS LIMITED',
// 		claimNumber: 201253116,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201253095,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201260148,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201315725,
// 	},
// 	{
// 		supplier: 'JAMES DAWSON & SONS LTD',
// 		claimNumber: 201121620,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201160050,
// 	},
// 	{
// 		supplier: 'PLAS-TECH THERMOFORMING LTD',
// 		claimNumber: 201147147,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201180811,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201164940,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201118947,
// 	},
// 	{
// 		supplier: 'WIDNEY MANUF LTD',
// 		claimNumber: 201190529,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH. LTD (EUR)',
// 		claimNumber: 201159037,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201169434,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201172614,
// 	},
// 	{
// 		supplier: 'METALLINK FLUID POWER (EUR)',
// 		claimNumber: 201220952,
// 	},
// 	{
// 		supplier: 'ZF SERVICES UK LTD (EURO)',
// 		claimNumber: 201276588,
// 	},
// 	{
// 		supplier: 'ZF SERVICES UK LTD (EURO)',
// 		claimNumber: 201284966,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201233819,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201241792,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201255863,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201260844,
// 	},
// 	{
// 		supplier: 'KONGSBERG AUTOMOTIVE SRO',
// 		claimNumber: 201230658,
// 	},
// 	{
// 		supplier: 'HELLA LTD (EUR)',
// 		claimNumber: 201279399,
// 	},
// 	{
// 		supplier: 'UK RUBBER & PLASTICS LTD',
// 		claimNumber: 201352725,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201324582,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201340075,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201350100,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201111854,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201169923,
// 	},
// 	{
// 		supplier: 'ZF SERVICES UK LTD (EURO)',
// 		claimNumber: 201125044,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201140735,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201157869,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201172992,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201247889,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201276179,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201281678,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201296069,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201295018,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201320889,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201309477,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201346395,
// 	},
// 	{
// 		supplier: 'NATIONWIDE BEARINGS',
// 		claimNumber: 201338713,
// 	},
// 	{
// 		supplier: 'SSI TECHNOLOGIES INC (EUR)',
// 		claimNumber: 201350539,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201112510,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201168091,
// 	},
// 	{
// 		supplier: 'ORLACO PRODUCTS BV (EURO)',
// 		claimNumber: 201121800,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201153860,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201233822,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201182349,
// 	},
// 	{
// 		supplier: 'RAYNE PRECISION ENGINEERING',
// 		claimNumber: 201177772,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201187986,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201203470,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201204813,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201213129,
// 	},
// 	{
// 		supplier: 'PETFORD TOOLS LIMITED',
// 		claimNumber: 201234556,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201291579,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201300439,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201329740,
// 	},
// 	{
// 		supplier: 'ORLACO PRODUCTS BV (EURO)',
// 		claimNumber: 201352297,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201125989,
// 	},
// 	{
// 		supplier: 'PRITEX LTD',
// 		claimNumber: 201133747,
// 	},
// 	{
// 		supplier: 'Diametric Technical Ltd',
// 		claimNumber: 201133749,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201319961,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201283646,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201340453,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201335110,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201322223,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201245205,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201251951,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201138780,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201164083,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201212070,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201323465,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201248315,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201258362,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201349303,
// 	},
// 	{
// 		supplier: 'ORLACO PRODUCTS BV (EURO)',
// 		claimNumber: 201349277,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201107586,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201121033,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201120570,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201135984,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201140088,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201145066,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201156894,
// 	},
// 	{
// 		supplier: 'PETFORD TOOLS LIMITED',
// 		claimNumber: 201159582,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201160315,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201149345,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201159892,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201173257,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201181662,
// 	},
// 	{
// 		supplier: 'ORLACO PRODUCTS BV (EURO)',
// 		claimNumber: 201181626,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201197387,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201291262,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201234157,
// 	},
// 	{
// 		supplier: 'GRENVILLE ENGINEERING LTD',
// 		claimNumber: 201244686,
// 	},
// 	{
// 		supplier: 'BUCHER HYDRAULICS SPA (EUR)',
// 		claimNumber: 201254488,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201279119,
// 	},
// 	{
// 		supplier: 'NYLACAST LIMITED',
// 		claimNumber: 201255019,
// 	},
// 	{
// 		supplier: 'PAILTON ENGINEERING LIMITED',
// 		claimNumber: 201235788,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201249050,
// 	},
// 	{
// 		supplier: 'NYLACAST LIMITED',
// 		claimNumber: 201255150,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201250401,
// 	},
// 	{
// 		supplier: 'ZF SERVICES UK LTD (EURO)',
// 		claimNumber: 201240528,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201266755,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201288118,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201302081,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201309980,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201301163,
// 	},
// 	{
// 		supplier: 'SFC SOLUTIONS ITALY S.R.L.',
// 		claimNumber: 201114984,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201177318,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201177333,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201162890,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201169970,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201304461,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201211059,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201234490,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201271744,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201292098,
// 	},
// 	{
// 		supplier: 'GATE 7 LTD (GBP)',
// 		claimNumber: 201266968,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201259089,
// 	},
// 	{
// 		supplier: 'FAULD PRECISION MACHINING CO',
// 		claimNumber: 201313534,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201262280,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201128043,
// 	},
// 	{
// 		supplier: 'SOFIMA IND. FILTERS (SHANGHAI)',
// 		claimNumber: 201193399,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201294476,
// 	},
// 	{
// 		supplier: 'ZF SERVICES UK LTD (EURO)',
// 		claimNumber: 201134436,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201220137,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201233413,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201254956,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201234807,
// 	},
// 	{
// 		supplier: 'GATE 7 LTD (GBP)',
// 		claimNumber: 201247226,
// 	},
// 	{
// 		supplier: 'PANASONIC ELECTRIC WORKS UK LTD',
// 		claimNumber: 201295730,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201221384,
// 	},
// 	{
// 		supplier: 'DANFOSS LTD',
// 		claimNumber: 201221391,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201342420,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201342373,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201250861,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201128021,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201356398,
// 	},
// 	{
// 		supplier: 'CUMMINS UK AFTERMARKET',
// 		claimNumber: 201341081,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201285135,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (USD)',
// 		claimNumber: 201349684,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201111888,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201113805,
// 	},
// 	{
// 		supplier: 'ZF SERVICES UK LTD (EURO)',
// 		claimNumber: 201111938,
// 	},
// 	{
// 		supplier: 'ADM PRESSINGS LIMITED',
// 		claimNumber: 201213254,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201137208,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201120217,
// 	},
// 	{
// 		supplier: 'ZF SERVICES UK LTD (EURO)',
// 		claimNumber: 201148998,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201152523,
// 	},
// 	{
// 		supplier: 'BENSON COMPONENTS LTD',
// 		claimNumber: 201186843,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201165663,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201165650,
// 	},
// 	{
// 		supplier: 'ADM PRESSINGS LIMITED',
// 		claimNumber: 201165672,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201160240,
// 	},
// 	{
// 		supplier: 'RAYNE PRECISION ENGINEERING',
// 		claimNumber: 201150316,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201178340,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201169506,
// 	},
// 	{
// 		supplier: 'NATIONWIDE BEARINGS',
// 		claimNumber: 201170723,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201157226,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201166097,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201196904,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201207190,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201209740,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201281601,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201228738,
// 	},
// 	{
// 		supplier: 'CUMMINS FILTRATION',
// 		claimNumber: 201232120,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201231607,
// 	},
// 	{
// 		supplier: 'Liuzhou Risun Filter Co.,Ltd',
// 		claimNumber: 201292178,
// 	},
// 	{
// 		supplier: 'KIOWA LIMITED',
// 		claimNumber: 201219673,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201265358,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201211759,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201208402,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201208397,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201226498,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201298427,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201281050,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201288744,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201295813,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201324099,
// 	},
// 	{
// 		supplier: 'LINAK UK LTD',
// 		claimNumber: 201329343,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201314486,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201306777,
// 	},
// 	{
// 		supplier: 'F.O.R. SPA',
// 		claimNumber: 201331941,
// 	},
// 	{
// 		supplier: 'SSI TECHNOLOGIES INC (EUR)',
// 		claimNumber: 201353556,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201349925,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201148598,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201158718,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201239730,
// 	},
// 	{
// 		supplier: 'STABILUS GMBH (EUR)',
// 		claimNumber: 201245502,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201098272,
// 	},
// 	{
// 		supplier: 'WESTON BODY HARDWARE',
// 		claimNumber: 201135555,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201183253,
// 	},
// 	{
// 		supplier: 'LINECROSS LIMITED',
// 		claimNumber: 201186326,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201253244,
// 	},
// 	{
// 		supplier: 'XL ENGINEERING LTD',
// 		claimNumber: 201142210,
// 	},
// 	{
// 		supplier: 'IFM ELECTRONIC  (EUR)',
// 		claimNumber: 201150972,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201174490,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201182639,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201174113,
// 	},
// 	{
// 		supplier: 'LAP ELECTRICAL LIMITED',
// 		claimNumber: 201154947,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201165810,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201256115,
// 	},
// 	{
// 		supplier: 'RING AUTOMOTIVE LTD',
// 		claimNumber: 201251568,
// 	},
// 	{
// 		supplier: 'E/M COATING SERVICES',
// 		claimNumber: 201239780,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201302707,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD  (GBP)',
// 		claimNumber: 201307555,
// 	},
// 	{
// 		supplier: 'WIDNEY MANUF LTD',
// 		claimNumber: 201326730,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201324870,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201324845,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201247947,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201247944,
// 	},
// 	{
// 		supplier: 'TRIMARK EUROPE LTD',
// 		claimNumber: 201133288,
// 	},
// 	{
// 		supplier: 'THOMSON PETTIE LTD',
// 		claimNumber: 201158726,
// 	},
// 	{
// 		supplier: 'KONGSBERG AUTOMOTIVE SRO',
// 		claimNumber: 201210126,
// 	},
// 	{
// 		supplier: 'DY POWER CORPORATION',
// 		claimNumber: 201132839,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201138504,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201175283,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201174907,
// 	},
// 	{
// 		supplier: 'LINAK UK LTD',
// 		claimNumber: 201174921,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201195783,
// 	},
// 	{
// 		supplier: 'WHITE DRIVE MOTORS AND STEERING SP',
// 		claimNumber: 201254255,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201254074,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201262966,
// 	},
// 	{
// 		supplier: 'MANN + HUMMEL (UK) LTD',
// 		claimNumber: 201259627,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201259856,
// 	},
// 	{
// 		supplier: 'OTAVSKE STROJIRNY A.S. (EUR)',
// 		claimNumber: 201293486,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201326939,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201338555,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201108728,
// 	},
// 	{
// 		supplier: 'COBO SPA',
// 		claimNumber: 201124926,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201119114,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201156049,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201163970,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201143782,
// 	},
// 	{
// 		supplier: 'P K ENGINEERING',
// 		claimNumber: 201166306,
// 	},
// 	{
// 		supplier: 'P K ENGINEERING',
// 		claimNumber: 201196974,
// 	},
// 	{
// 		supplier: 'BURNSIDE EUROCYL LTD',
// 		claimNumber: 201197319,
// 	},
// 	{
// 		supplier: 'KOHLER LOMBARDINI Srl',
// 		claimNumber: 201167099,
// 	},
// 	{
// 		supplier: 'METALLINK FLUID POWER (EUR)',
// 		claimNumber: 201239827,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201275775,
// 	},
// 	{
// 		supplier: 'TRIMARK EUROPE LTD',
// 		claimNumber: 201275781,
// 	},
// 	{
// 		supplier: 'P K ENGINEERING',
// 		claimNumber: 201256577,
// 	},
// 	{
// 		supplier: 'DANA ITALIA SPA',
// 		claimNumber: 201261466,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201261468,
// 	},
// 	{
// 		supplier: 'EUROTEC INTERNATIONAL PLC',
// 		claimNumber: 201261474,
// 	},
// 	{
// 		supplier: 'TE CONNECTIVITY SOLUTIONS GMBH (EUR',
// 		claimNumber: 201241175,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201262060,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD  (GBP)',
// 		claimNumber: 201274421,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201286227,
// 	},
// 	{
// 		supplier: 'P K ENGINEERING',
// 		claimNumber: 201338793,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201348053,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201352854,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201112602,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201217283,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201237348,
// 	},
// 	{
// 		supplier: 'GIANETTI FAD WHEELS SRL',
// 		claimNumber: 201289615,
// 	},
// 	{
// 		supplier: 'CONCENTRIC HOF GMBH (EUR)',
// 		claimNumber: 201308435,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201338824,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201338828,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201357738,
// 	},
// 	{
// 		supplier: 'KOHLER LOMBARDINI Srl',
// 		claimNumber: 201154049,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201145065,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201149830,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201182002,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201152707,
// 	},
// 	{
// 		supplier: 'POCLAIN HYDRAULICS INDUSTRIE',
// 		claimNumber: 201144850,
// 	},
// 	{
// 		supplier: 'GROTE INDUSTRIES EUROPE GMBH',
// 		claimNumber: 201139448,
// 	},
// 	{
// 		supplier: 'POCLAIN HYDRAULICS INDUSTRIE',
// 		claimNumber: 201133397,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201227731,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201205383,
// 	},
// 	{
// 		supplier: 'KOHLER LOMBARDINI Srl',
// 		claimNumber: 201189292,
// 	},
// 	{
// 		supplier: 'LINECROSS COMPOSITES LTD',
// 		claimNumber: 201241455,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201212003,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201233913,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201233922,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201319358,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201281672,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201313891,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201339243,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201173340,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201283894,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201214638,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201345316,
// 	},
// 	{
// 		supplier: 'METALLINK FLUID POWER (EUR)',
// 		claimNumber: 201250133,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201266398,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201240166,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201214214,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL (Europe) GmbH',
// 		claimNumber: 201250875,
// 	},
// 	{
// 		supplier: 'COMESYS LTD',
// 		claimNumber: 201144256,
// 	},
// 	{
// 		supplier: 'PRIMARY FLUID POWER',
// 		claimNumber: 201161094,
// 	},
// 	{
// 		supplier: 'KOHLER LOMBARDINI Srl',
// 		claimNumber: 201160553,
// 	},
// 	{
// 		supplier: 'DANA ITALIA SPA',
// 		claimNumber: 201255760,
// 	},
// 	{
// 		supplier: 'DANA ITALIA SPA',
// 		claimNumber: 201259753,
// 	},
// 	{
// 		supplier: 'KOHLER LOMBARDINI Srl',
// 		claimNumber: 201196491,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD  (GBP)',
// 		claimNumber: 201219288,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201264329,
// 	},
// 	{
// 		supplier: 'OPTIBELT (UK) LTD.',
// 		claimNumber: 201233457,
// 	},
// 	{
// 		supplier: 'STABILUS GMBH (EUR)',
// 		claimNumber: 201274006,
// 	},
// 	{
// 		supplier: 'MERCURY MATERIAL MANGMNT. LTD',
// 		claimNumber: 201334614,
// 	},
// 	{
// 		supplier: 'FREUDENBERG SEALING TECHNOLOGIES',
// 		claimNumber: 201329754,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201264972,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201354518,
// 	},
// 	{
// 		supplier: 'TE CONNECTIVITY SOLUTIONS GMBH (EUR',
// 		claimNumber: 201133995,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201136209,
// 	},
// 	{
// 		supplier: 'CARLISLE BRAKE PRODUCTS',
// 		claimNumber: 201238333,
// 	},
// 	{
// 		supplier: 'HORST WELDING (HLA)',
// 		claimNumber: 201325579,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201202393,
// 	},
// 	{
// 		supplier: 'MITCHELL DIESEL LTD (EUR)',
// 		claimNumber: 201275096,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201242631,
// 	},
// 	{
// 		supplier: 'MITCHELL DIESEL LTD (EUR)',
// 		claimNumber: 201232831,
// 	},
// 	{
// 		supplier: 'MITCHELL DIESEL LTD (EUR)',
// 		claimNumber: 201250225,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201222731,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201275150,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201338373,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201346535,
// 	},
// 	{
// 		supplier: 'PRESTOLITE ELECTRIC LTD',
// 		claimNumber: 201157723,
// 	},
// 	{
// 		supplier: 'PRESTOLITE ELECTRIC LTD',
// 		claimNumber: 201162429,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201170519,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201192105,
// 	},
// 	{
// 		supplier: 'METALLINK FLUID POWER (EUR)',
// 		claimNumber: 201192118,
// 	},
// 	{
// 		supplier: 'VARM PRESS E-GEN ENG PVT LTD (INR)',
// 		claimNumber: 201315504,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201315521,
// 	},
// 	{
// 		supplier: 'IRACROFT LTD (GBP)',
// 		claimNumber: 201250948,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201149539,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD  (GBP)',
// 		claimNumber: 201241889,
// 	},
// 	{
// 		supplier: 'BONY POLYMERS (P) LTD',
// 		claimNumber: 201356541,
// 	},
// 	{
// 		supplier: 'BUCHER HYDRAULICS SPA (EUR)',
// 		claimNumber: 201147843,
// 	},
// 	{
// 		supplier: 'GROTE INDUSTRIES EUROPE GMBH',
// 		claimNumber: 201160626,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201140176,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201144305,
// 	},
// 	{
// 		supplier: 'GROTE INDUSTRIES EUROPE GMBH',
// 		claimNumber: 201160165,
// 	},
// 	{
// 		supplier: 'CONCENTRIC HOF GMBH (EUR)',
// 		claimNumber: 201189799,
// 	},
// 	{
// 		supplier: 'CATTON CONTROLS CABLES LTD',
// 		claimNumber: 201189767,
// 	},
// 	{
// 		supplier: 'KAT MEKATRONIK ÚRÚNLERI A.S',
// 		claimNumber: 201245005,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201188709,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201192542,
// 	},
// 	{
// 		supplier: 'GROTE INDUSTRIES EUROPE GMBH',
// 		claimNumber: 201167724,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201174372,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201202391,
// 	},
// 	{
// 		supplier: 'ZIBO YONGHUA FILTER MAKI',
// 		claimNumber: 201266769,
// 	},
// 	{
// 		supplier: 'Parker Hannifin Corporation',
// 		claimNumber: 201233642,
// 	},
// 	{
// 		supplier: 'Parker Hannifin Corporation',
// 		claimNumber: 201277357,
// 	},
// 	{
// 		supplier: 'CHROMEWELL ENGINEERING PRIVATE LTD',
// 		claimNumber: 201270239,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201218849,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201219746,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201313761,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201272947,
// 	},
// 	{
// 		supplier: 'IFM ELECTRONIC  (EUR)',
// 		claimNumber: 201278559,
// 	},
// 	{
// 		supplier: 'ZF SERVICES UK LTD (EURO)',
// 		claimNumber: 201286701,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201293053,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201283898,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201286525,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201305310,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201333214,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201356660,
// 	},
// 	{
// 		supplier: 'MAHLE Electric Drives Slovenija d.o',
// 		claimNumber: 201258263,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201310279,
// 	},
// 	{
// 		supplier: 'L.A.P ELECTRICAL LIMITED',
// 		claimNumber: 201309823,
// 	},
// 	{
// 		supplier: 'BONY POLYMERS (P) LTD',
// 		claimNumber: 201232489,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201258250,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201307709,
// 	},
// 	{
// 		supplier: 'WURTH ELECTRONICS UK LTD',
// 		claimNumber: 201233007,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201233142,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201217508,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201213818,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201322937,
// 	},
// 	{
// 		supplier: 'PERMOID INDUSTRIES LTD',
// 		claimNumber: 201254430,
// 	},
// 	{
// 		supplier: 'HPM LTD',
// 		claimNumber: 201261330,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201266860,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201280146,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201324566,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201345325,
// 	},
// 	{
// 		supplier: 'HADLEY HARGREAVES LTD',
// 		claimNumber: 201331857,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201332469,
// 	},
// 	{
// 		supplier: 'GATES HYDRAULICS  (EUR)',
// 		claimNumber: 201120063,
// 	},
// 	{
// 		supplier: 'KAT MEKATRONIK ÚRÚNLERI A.S',
// 		claimNumber: 201120679,
// 	},
// 	{
// 		supplier: 'SFC SOLUTIONS ITALY S.R.L.',
// 		claimNumber: 201112492,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201140691,
// 	},
// 	{
// 		supplier: 'ZF SERVICES UK LTD (EURO)',
// 		claimNumber: 201318177,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201196192,
// 	},
// 	{
// 		supplier: 'FREUDENBERG SEALING TECHNOLOGIES',
// 		claimNumber: 201196199,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201155276,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201118354,
// 	},
// 	{
// 		supplier: 'LAP ELECTRICAL LIMITED',
// 		claimNumber: 201138039,
// 	},
// 	{
// 		supplier: 'BORGWARNER TECHNOLOGIES LIMITED',
// 		claimNumber: 201138071,
// 	},
// 	{
// 		supplier: 'Parker Hannifin Corporation',
// 		claimNumber: 201130195,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201149008,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201171050,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201238339,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201162130,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201318899,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH. LTD (EUR)',
// 		claimNumber: 201234010,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201238582,
// 	},
// 	{
// 		supplier: 'ORLACO PRODUCTS BV (EURO)',
// 		claimNumber: 201129080,
// 	},
// 	{
// 		supplier: 'BORGWARNER TECHNOLOGIES LIMITED',
// 		claimNumber: 201123705,
// 	},
// 	{
// 		supplier: 'DONALDSON CZECH REPUBLIC SRO',
// 		claimNumber: 201131179,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201140265,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201153403,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201150576,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201232254,
// 	},
// 	{
// 		supplier: 'HPM LTD',
// 		claimNumber: 201232240,
// 	},
// 	{
// 		supplier: 'CONCENTRIC HOF GMBH (EUR)',
// 		claimNumber: 201176813,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201330148,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201176063,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201164373,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201186803,
// 	},
// 	{
// 		supplier: 'GROTE INDUSTRIES EUROPE GMBH',
// 		claimNumber: 201213154,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201179362,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201163342,
// 	},
// 	{
// 		supplier: 'CAMLOC MOTION CONTROL LTD',
// 		claimNumber: 201169961,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201190372,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201203576,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201165070,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201220956,
// 	},
// 	{
// 		supplier: 'CAMLOC MOTION CONTROL LTD',
// 		claimNumber: 201226135,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201216263,
// 	},
// 	{
// 		supplier: 'TECONNEX LTD',
// 		claimNumber: 201223288,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201230075,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201237444,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201242292,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201298348,
// 	},
// 	{
// 		supplier: 'CAMLOC MOTION CONTROL LTD',
// 		claimNumber: 201248572,
// 	},
// 	{
// 		supplier: 'IGUS (UK) LTD',
// 		claimNumber: 201253789,
// 	},
// 	{
// 		supplier: 'DONALDSON SAS (EUR)',
// 		claimNumber: 201278785,
// 	},
// 	{
// 		supplier: 'FABLINK TANK SYSTEMS LIMITED',
// 		claimNumber: 201284134,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201297121,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201287294,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201309579,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201320679,
// 	},
// 	{
// 		supplier: 'ROBERT BOSCH LIMITED',
// 		claimNumber: 201309896,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201315678,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201321453,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS (USD) LTD',
// 		claimNumber: 201297467,
// 	},
// 	{
// 		supplier: 'LPL SYSTEMS',
// 		claimNumber: 201304746,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201348256,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201348933,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201357166,
// 	},
// 	{
// 		supplier: 'DANFOSS DISTRIBUTION II A/S',
// 		claimNumber: 201357201,
// 	},
// 	{
// 		supplier: 'RING AUTOMOTIVE LTD',
// 		claimNumber: 201243925,
// 	},
// 	{
// 		supplier: 'CAMLOC MOTION CONTROL LTD',
// 		claimNumber: 201149740,
// 	},
// 	{
// 		supplier: 'GROTE INDUSTRIES EUROPE GMBH',
// 		claimNumber: 201165239,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201160224,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201165417,
// 	},
// 	{
// 		supplier: 'OFFICINE METALLURGICHE (EUR)',
// 		claimNumber: 201157231,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201188944,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201155075,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201160432,
// 	},
// 	{
// 		supplier: 'NYLACAST LIMITED',
// 		claimNumber: 201156883,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201163304,
// 	},
// 	{
// 		supplier: 'BIRMINGHAM SPECIALITIES LTD',
// 		claimNumber: 201150672,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201152212,
// 	},
// 	{
// 		supplier: 'DOGA ITALIA SRL',
// 		claimNumber: 201152203,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201156981,
// 	},
// 	{
// 		supplier: 'CAMLOC MOTION CONTROL LTD',
// 		claimNumber: 201229654,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201210790,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201159669,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201160683,
// 	},
// 	{
// 		supplier: 'CAMLOC MOTION CONTROL LTD',
// 		claimNumber: 201214382,
// 	},
// 	{
// 		supplier: 'TECONNEX LTD',
// 		claimNumber: 201172998,
// 	},
// 	{
// 		supplier: 'BIRMINGHAM SPECIALITIES LTD',
// 		claimNumber: 201175740,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201160761,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201183828,
// 	},
// 	{
// 		supplier: 'BIRMINGHAM SPECIALITIES LTD',
// 		claimNumber: 201195336,
// 	},
// 	{
// 		supplier: 'BIRMINGHAM SPECIALITIES LTD',
// 		claimNumber: 201181454,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201202308,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201163353,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201163346,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201165147,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201252745,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201196271,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201183415,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201190789,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201165120,
// 	},
// 	{
// 		supplier: 'TECONNEX LTD',
// 		claimNumber: 201185922,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201186172,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201165176,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201169277,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201178346,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201162755,
// 	},
// 	{
// 		supplier: 'MANN + HUMMEL GMBH',
// 		claimNumber: 201170799,
// 	},
// 	{
// 		supplier: 'Parker Hannifin Corporation',
// 		claimNumber: 201183413,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201201808,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201187425,
// 	},
// 	{
// 		supplier: 'SENTINEL MANUFACTURING LTD',
// 		claimNumber: 201190365,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201190383,
// 	},
// 	{
// 		supplier: 'KAT MEKATRONIK ÚRÚNLERI A.S',
// 		claimNumber: 201173977,
// 	},
// 	{
// 		supplier: 'FUYAO GLASS INDUSTRY GROUP (2414)',
// 		claimNumber: 201222345,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201196775,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201219779,
// 	},
// 	{
// 		supplier: 'CAMLOC MOTION CONTROL LTD',
// 		claimNumber: 201222330,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201214779,
// 	},
// 	{
// 		supplier: 'CAMLOC MOTION CONTROL LTD',
// 		claimNumber: 201207444,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201225194,
// 	},
// 	{
// 		supplier: 'ROBERT BOSCH LIMITED',
// 		claimNumber: 201226606,
// 	},
// 	{
// 		supplier: 'CAMLOC MOTION CONTROL LTD',
// 		claimNumber: 201213271,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201213383,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201213373,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201218351,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201218117,
// 	},
// 	{
// 		supplier: 'CAMLOC MOTION CONTROL LTD',
// 		claimNumber: 201223121,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201265333,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201232698,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201224856,
// 	},
// 	{
// 		supplier: 'GRENVILLE ENGINEERING LTD',
// 		claimNumber: 201222668,
// 	},
// 	{
// 		supplier: 'CAMLOC MOTION CONTROL LTD',
// 		claimNumber: 201250952,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL LTD',
// 		claimNumber: 201270438,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201258233,
// 	},
// 	{
// 		supplier: 'ELRING KLINGER AG',
// 		claimNumber: 201258198,
// 	},
// 	{
// 		supplier: 'JOHNSON ELECTRIC INTER. AG',
// 		claimNumber: 201232676,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201227929,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201232555,
// 	},
// 	{
// 		supplier: 'DANFOSS LTD',
// 		claimNumber: 201254620,
// 	},
// 	{
// 		supplier: 'EATON HYDRAULICS',
// 		claimNumber: 201265246,
// 	},
// 	{
// 		supplier: 'GRAMMER AG',
// 		claimNumber: 201248331,
// 	},
// 	{
// 		supplier: 'ORLACO PRODUCTS BV (EURO)',
// 		claimNumber: 201240042,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201242901,
// 	},
// 	{
// 		supplier: 'GRAMMER AG',
// 		claimNumber: 201243757,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201247110,
// 	},
// 	{
// 		supplier: 'FUYAO GLASS INDUSTRY GROUP (2414)',
// 		claimNumber: 201276034,
// 	},
// 	{
// 		supplier: 'FABLINK TANK SYSTEMS LIMITED',
// 		claimNumber: 201244245,
// 	},
// 	{
// 		supplier: 'JOHNSON ELECTRIC INTER. AG',
// 		claimNumber: 201239078,
// 	},
// 	{
// 		supplier: 'CONCENTRIC BIRMINGHAM LTD',
// 		claimNumber: 201271714,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201286600,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201322056,
// 	},
// 	{
// 		supplier: 'PERMOID INDUSTRIES LTD',
// 		claimNumber: 201278360,
// 	},
// 	{
// 		supplier: 'EATON HYDRAULICS',
// 		claimNumber: 201280603,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201283870,
// 	},
// 	{
// 		supplier: 'VALEO MAGYARORSZAG KFT (EUR)',
// 		claimNumber: 201264854,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201293526,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201266595,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201270326,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201279156,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201273159,
// 	},
// 	{
// 		supplier: 'WURTH ELECTRONICS UK LTD',
// 		claimNumber: 201266547,
// 	},
// 	{
// 		supplier: 'CAMLOC MOTION CONTROL LTD',
// 		claimNumber: 201273209,
// 	},
// 	{
// 		supplier: 'DANFOSS DISTRIBUTION II A/S',
// 		claimNumber: 201289999,
// 	},
// 	{
// 		supplier: 'GATES HYDRAULICS  (EUR)',
// 		claimNumber: 201295403,
// 	},
// 	{
// 		supplier: 'MITRAS AUTOMOTIVE LTD',
// 		claimNumber: 201352545,
// 	},
// 	{
// 		supplier: 'RAYNE PRECISION ENGINEERING',
// 		claimNumber: 201283584,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201310216,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201310435,
// 	},
// 	{
// 		supplier: 'GRAMMER AG',
// 		claimNumber: 201314562,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201308742,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201293470,
// 	},
// 	{
// 		supplier: 'GATES HYDRAULICS  (EUR)',
// 		claimNumber: 201298339,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201293509,
// 	},
// 	{
// 		supplier: 'ROBERT BOSCH LIMITED',
// 		claimNumber: 201314713,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201320233,
// 	},
// 	{
// 		supplier: 'Not assigned',
// 		claimNumber: 201318663,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201318639,
// 	},
// 	{
// 		supplier: 'GRENVILLE ENGINEERING LTD',
// 		claimNumber: 201320915,
// 	},
// 	{
// 		supplier: 'GRAMMER AG',
// 		claimNumber: 201330785,
// 	},
// 	{
// 		supplier: 'MANN + HUMMEL (UK) LTD',
// 		claimNumber: 201350719,
// 	},
// 	{
// 		supplier: 'IFM ELECTRONIC  (EUR)',
// 		claimNumber: 201333541,
// 	},
// 	{
// 		supplier: 'ROBERT BOSCH LIMITED',
// 		claimNumber: 201328990,
// 	},
// 	{
// 		supplier: 'Parker Hannifin Corporation',
// 		claimNumber: 201342301,
// 	},
// 	{
// 		supplier: 'COMESYS LTD',
// 		claimNumber: 201320207,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201307867,
// 	},
// 	{
// 		supplier: 'HYDAC TECHNOLOGY GMBH',
// 		claimNumber: 201347026,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201322335,
// 	},
// 	{
// 		supplier: 'JAMES DAWSON & SONS LTD',
// 		claimNumber: 201317125,
// 	},
// 	{
// 		supplier: 'GATES HYDRAULICS  (EUR)',
// 		claimNumber: 201314770,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201312183,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201347081,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201326217,
// 	},
// 	{
// 		supplier: 'DONALDSON ITALIA SRL',
// 		claimNumber: 201329494,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201339947,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201322816,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201322604,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201340623,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201346753,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201353089,
// 	},
// 	{
// 		supplier: 'DANFOSS DISTRIBUTION II A/S (USD)',
// 		claimNumber: 201347051,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201328041,
// 	},
// 	{
// 		supplier: 'HPM LTD',
// 		claimNumber: 201349428,
// 	},
// 	{
// 		supplier: 'DONALDSON SAS (EUR)',
// 		claimNumber: 201357347,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201355053,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201352848,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201350614,
// 	},
// 	{
// 		supplier: 'NGK SPARK PLUGS (UK) LTD',
// 		claimNumber: 201354778,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201171396,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201179344,
// 	},
// 	{
// 		supplier: 'MAHLE Electric Drives Slovenija d.o',
// 		claimNumber: 201213901,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201248336,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201323600,
// 	},
// 	{
// 		supplier: 'SSI TECHNOLOGIES INC (EUR)',
// 		claimNumber: 201315656,
// 	},
// 	{
// 		supplier: 'KAT MEKATRONIK ÚRÚNLERI A.S',
// 		claimNumber: 201356227,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201356748,
// 	},
// 	{
// 		supplier: 'ACOUSTAFOAM LTD',
// 		claimNumber: 201320296,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201147329,
// 	},
// 	{
// 		supplier: 'NORLEC SHEET METAL LTD',
// 		claimNumber: 201156752,
// 	},
// 	{
// 		supplier: 'NORLEC SHEET METAL LTD',
// 		claimNumber: 201154344,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201226260,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201226264,
// 	},
// 	{
// 		supplier: 'PERMOID INDUSTRIES LTD',
// 		claimNumber: 201214837,
// 	},
// 	{
// 		supplier: 'BIRMINGHAM SPECIALITIES LTD',
// 		claimNumber: 201182385,
// 	},
// 	{
// 		supplier: 'THOMSON PETTIE LTD',
// 		claimNumber: 201190382,
// 	},
// 	{
// 		supplier: 'NORLEC SHEET METAL LTD',
// 		claimNumber: 201191161,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201235269,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201153674,
// 	},
// 	{
// 		supplier: 'CAMLOC MOTION CONTROL LTD',
// 		claimNumber: 201198607,
// 	},
// 	{
// 		supplier: 'BIRMINGHAM SPECIALITIES LTD',
// 		claimNumber: 201150925,
// 	},
// 	{
// 		supplier: 'ROBERT BOSCH LIMITED',
// 		claimNumber: 201152893,
// 	},
// 	{
// 		supplier: 'APEM COMPONENTS LTD',
// 		claimNumber: 201162540,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201144754,
// 	},
// 	{
// 		supplier: 'BIRMINGHAM SPECIALITIES LTD',
// 		claimNumber: 201158004,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201159605,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201185012,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201171710,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201171700,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201199045,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201162300,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201165589,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201247413,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201190673,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201177153,
// 	},
// 	{
// 		supplier: 'SENSATA TECHNOLOGIES GMBH',
// 		claimNumber: 201182208,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201183529,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201261072,
// 	},
// 	{
// 		supplier: 'GATES HYDRAULICS  (EUR)',
// 		claimNumber: 201261028,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201195223,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201202355,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201186153,
// 	},
// 	{
// 		supplier: 'CAMLOC MOTION CONTROL LTD',
// 		claimNumber: 201220969,
// 	},
// 	{
// 		supplier: 'GRENVILLE ENGINEERING LTD',
// 		claimNumber: 201202598,
// 	},
// 	{
// 		supplier: 'JIANGSU HENGFU INDU TECH CO.,LTD.',
// 		claimNumber: 201202279,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201304871,
// 	},
// 	{
// 		supplier: 'THOMSON PETTIE LTD',
// 		claimNumber: 201237185,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201230800,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201174654,
// 	},
// 	{
// 		supplier: 'Parker Hannifin Corporation',
// 		claimNumber: 201230567,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201235445,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201259518,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201242836,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201228301,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201243670,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201232317,
// 	},
// 	{
// 		supplier: 'KABY ENGINEERS LTD',
// 		claimNumber: 201232369,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201280613,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201350821,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201276231,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201280055,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201290262,
// 	},
// 	{
// 		supplier: 'MITRAS AUTOMOTIVE LTD',
// 		claimNumber: 201295310,
// 	},
// 	{
// 		supplier: 'KABY ENGINEERS LTD',
// 		claimNumber: 201305500,
// 	},
// 	{
// 		supplier: 'MILESTONE GEARS PVT LTD',
// 		claimNumber: 201357136,
// 	},
// 	{
// 		supplier: 'GATES HYDRAULICS  (EUR)',
// 		claimNumber: 201339373,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201321627,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201350622,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201357746,
// 	},
// 	{
// 		supplier: 'HOLMBURY LTD',
// 		claimNumber: 201161813,
// 	},
// 	{
// 		supplier: 'EUROTEC INTERNATIONAL PLC',
// 		claimNumber: 201314291,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201159934,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201281470,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201290403,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201290467,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201262744,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201240778,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201341051,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201333976,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201111914,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS (USD) LTD',
// 		claimNumber: 201121564,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201163911,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201138153,
// 	},
// 	{
// 		supplier: 'Parker Hannifin Corporation',
// 		claimNumber: 201097315,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201103403,
// 	},
// 	{
// 		supplier: 'E/M COATING SERVICES',
// 		claimNumber: 201108647,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201127277,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201140791,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201140752,
// 	},
// 	{
// 		supplier: 'SAFIM SPA',
// 		claimNumber: 201112047,
// 	},
// 	{
// 		supplier: 'GATE 7 LTD (GBP)',
// 		claimNumber: 201127830,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201135903,
// 	},
// 	{
// 		supplier: 'TRAVEN TECHNOLOGY',
// 		claimNumber: 201113886,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201135316,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201132283,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201131674,
// 	},
// 	{
// 		supplier: 'KINGSPAN WATER & ENERGY LTD',
// 		claimNumber: 201138300,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201138256,
// 	},
// 	{
// 		supplier: 'TIMKEN EUROPE',
// 		claimNumber: 201118801,
// 	},
// 	{
// 		supplier: 'MP FILTRI UK LIMITED',
// 		claimNumber: 201115581,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201136062,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201129701,
// 	},
// 	{
// 		supplier: 'SHREE GANESH ENG WORKS',
// 		claimNumber: 201120890,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201147884,
// 	},
// 	{
// 		supplier: 'BORGWARNER TECHNOLOGIES LIMITED',
// 		claimNumber: 201147882,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201139288,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201319226,
// 	},
// 	{
// 		supplier: 'Not assigned',
// 		claimNumber: 201308008,
// 	},
// 	{
// 		supplier: 'TRAVEN TECHNOLOGY',
// 		claimNumber: 201308032,
// 	},
// 	{
// 		supplier: 'VALEO MAGYARORSZAG KFT (EUR)',
// 		claimNumber: 201311662,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201269357,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201296210,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201340311,
// 	},
// 	{
// 		supplier: 'GRAMMER AG',
// 		claimNumber: 201350974,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201130244,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201325960,
// 	},
// 	{
// 		supplier: 'SFC SOLUTIONS ITALY S.R.L.',
// 		claimNumber: 201199513,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201202039,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201291046,
// 	},
// 	{
// 		supplier: 'DANA ITALIA SPA',
// 		claimNumber: 201313961,
// 	},
// 	{
// 		supplier: 'LPL SYSTEMS',
// 		claimNumber: 201160352,
// 	},
// 	{
// 		supplier: 'POCLAIN HYDRAULICS INDUSTRIE',
// 		claimNumber: 201157868,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201141827,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201156020,
// 	},
// 	{
// 		supplier: 'POCLAIN HYDRAULICS INDUSTRIE',
// 		claimNumber: 201156158,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201267700,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201146884,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201206791,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201228318,
// 	},
// 	{
// 		supplier: 'FREUDENBERG SEALING TECHNOLOGIES',
// 		claimNumber: 201319975,
// 	},
// 	{
// 		supplier: 'KUWAIT PETROLEUM (BELGIUM) NV',
// 		claimNumber: 201320004,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201277716,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201230027,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201237840,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201243663,
// 	},
// 	{
// 		supplier: 'PRIMARY FLUID POWER',
// 		claimNumber: 201267176,
// 	},
// 	{
// 		supplier: 'BORG WARNER COOL. SYS. GMBH',
// 		claimNumber: 201268948,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD  (GBP)',
// 		claimNumber: 201267125,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201272037,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201352707,
// 	},
// 	{
// 		supplier: 'POCLAIN HYDRAULICS INDUSTRIE',
// 		claimNumber: 201299020,
// 	},
// 	{
// 		supplier: 'DANFOSS LTD',
// 		claimNumber: 201270452,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201290648,
// 	},
// 	{
// 		supplier: 'DANFOSS DISTRIBUTION II A/S',
// 		claimNumber: 201320001,
// 	},
// 	{
// 		supplier: 'DANFOSS LTD',
// 		claimNumber: 201308792,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201335295,
// 	},
// 	{
// 		supplier: 'PRIMARY FLUID POWER',
// 		claimNumber: 201307592,
// 	},
// 	{
// 		supplier: 'LPL SYSTEMS',
// 		claimNumber: 201188823,
// 	},
// 	{
// 		supplier: 'LPL SYSTEMS',
// 		claimNumber: 201233263,
// 	},
// 	{
// 		supplier: 'COBO SPA',
// 		claimNumber: 201241520,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201326965,
// 	},
// 	{
// 		supplier: 'FREUDENBERG SEALING TECHNOLOGIES',
// 		claimNumber: 201318897,
// 	},
// 	{
// 		supplier: 'KOHLER LOMBARDINI Srl',
// 		claimNumber: 201318894,
// 	},
// 	{
// 		supplier: 'MANPLAS LTD',
// 		claimNumber: 201318856,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD  (GBP)',
// 		claimNumber: 201318840,
// 	},
// 	{
// 		supplier: 'HOLMBURY LTD',
// 		claimNumber: 201208542,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201276360,
// 	},
// 	{
// 		supplier: 'BONY POLYMERS (P) LTD',
// 		claimNumber: 201331708,
// 	},
// 	{
// 		supplier: 'ELANDERS LTD',
// 		claimNumber: 201185409,
// 	},
// 	{
// 		supplier: 'BONY POLYMERS (P) LTD',
// 		claimNumber: 201316002,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201180952,
// 	},
// 	{
// 		supplier: 'ZF SERVICES UK LTD (EURO)',
// 		claimNumber: 201353880,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201265268,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201129568,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201111910,
// 	},
// 	{
// 		supplier: 'HONGFA EUROPE (EUR)',
// 		claimNumber: 201103234,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201129126,
// 	},
// 	{
// 		supplier: 'PLASTIC MOULDING LTD',
// 		claimNumber: 201159837,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201206374,
// 	},
// 	{
// 		supplier: 'SADDLERS COURT MFG LTD',
// 		claimNumber: 201206395,
// 	},
// 	{
// 		supplier: 'COBO SPA',
// 		claimNumber: 201175155,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201211630,
// 	},
// 	{
// 		supplier: 'Parker Hannifin Corporation',
// 		claimNumber: 201194805,
// 	},
// 	{
// 		supplier: 'Parker Hannifin Corporation',
// 		claimNumber: 201201755,
// 	},
// 	{
// 		supplier: 'RAAL SA',
// 		claimNumber: 201202634,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD  (GBP)',
// 		claimNumber: 201233638,
// 	},
// 	{
// 		supplier: 'DESAI ENGINNERS (INR)',
// 		claimNumber: 201223170,
// 	},
// 	{
// 		supplier: 'HONGFA EUROPE (EUR)',
// 		claimNumber: 201195595,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201195583,
// 	},
// 	{
// 		supplier: 'WALVOIL SPA',
// 		claimNumber: 201221226,
// 	},
// 	{
// 		supplier: 'COMESYS LTD',
// 		claimNumber: 201262513,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201241109,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201341983,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201241626,
// 	},
// 	{
// 		supplier: 'PERMOID INDUSTRIES LTD',
// 		claimNumber: 201246579,
// 	},
// 	{
// 		supplier: 'COBO SPA',
// 		claimNumber: 201245386,
// 	},
// 	{
// 		supplier: 'QUINTON MAJOR LIMITED',
// 		claimNumber: 201330406,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201330441,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201330408,
// 	},
// 	{
// 		supplier: 'POCLAIN HYDRAULICS INDUSTRIE',
// 		claimNumber: 201307217,
// 	},
// 	{
// 		supplier: 'APEM COMPONENTS LTD',
// 		claimNumber: 201354081,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201347484,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201116739,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201115334,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH. LTD (EUR)',
// 		claimNumber: 201116769,
// 	},
// 	{
// 		supplier: 'FASTER S.R.L',
// 		claimNumber: 201116768,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201116773,
// 	},
// 	{
// 		supplier: 'KINGSPAN WATER & ENERGY LTD',
// 		claimNumber: 201091749,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201102219,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201166791,
// 	},
// 	{
// 		supplier: 'PERMOID INDUSTRIES LTD',
// 		claimNumber: 201118764,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201106004,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201118638,
// 	},
// 	{
// 		supplier: 'ZF SERVICES UK LTD (EURO)',
// 		claimNumber: 201119762,
// 	},
// 	{
// 		supplier: 'LAP ELECTRICAL LIMITED',
// 		claimNumber: 201104817,
// 	},
// 	{
// 		supplier: 'B A CAULKETT LIMITED',
// 		claimNumber: 201104447,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201111097,
// 	},
// 	{
// 		supplier: 'HELLA LTD (EUR)',
// 		claimNumber: 201118602,
// 	},
// 	{
// 		supplier: 'HELLA LTD (EUR)',
// 		claimNumber: 201120914,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201137713,
// 	},
// 	{
// 		supplier: 'DANFOSS LTD',
// 		claimNumber: 201139985,
// 	},
// 	{
// 		supplier: 'CONCENTRIC HOF GMBH (EUR)',
// 		claimNumber: 201139976,
// 	},
// 	{
// 		supplier: 'CHELL ENGINEERING LTD',
// 		claimNumber: 201131709,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201121716,
// 	},
// 	{
// 		supplier: 'KABY ENGINEERS LTD',
// 		claimNumber: 201124627,
// 	},
// 	{
// 		supplier: 'HELLA LTD (EUR)',
// 		claimNumber: 201181397,
// 	},
// 	{
// 		supplier: 'ELANDERS LTD',
// 		claimNumber: 201181199,
// 	},
// 	{
// 		supplier: 'ZF SERVICES UK LTD (EURO)',
// 		claimNumber: 201189934,
// 	},
// 	{
// 		supplier: 'HELLA LTD (EUR)',
// 		claimNumber: 201159209,
// 	},
// 	{
// 		supplier: 'BROADWATER MOULDINGS LTD',
// 		claimNumber: 201228868,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201163777,
// 	},
// 	{
// 		supplier: 'BROADWATER MOULDINGS LTD',
// 		claimNumber: 201239390,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201174974,
// 	},
// 	{
// 		supplier: 'BURTON RUBBER CO. LTD',
// 		claimNumber: 201170190,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201195981,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201202623,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201195538,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201195503,
// 	},
// 	{
// 		supplier: 'HELLA LTD (EUR)',
// 		claimNumber: 201253241,
// 	},
// 	{
// 		supplier: 'BIG BEAR PLASTIC PRODS. LTD',
// 		claimNumber: 201253169,
// 	},
// 	{
// 		supplier: 'PERMOID INDUSTRIES LTD',
// 		claimNumber: 201270553,
// 	},
// 	{
// 		supplier: 'MCAULEY FABRICATION LTD',
// 		claimNumber: 201226154,
// 	},
// 	{
// 		supplier: 'GROTE INDUSTRIES EUROPE GMBH',
// 		claimNumber: 201228884,
// 	},
// 	{
// 		supplier: 'RAYNE PRECISION ENGINEERING',
// 		claimNumber: 201261515,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201239803,
// 	},
// 	{
// 		supplier: 'ELANDERS LTD',
// 		claimNumber: 201229656,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201233290,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201315392,
// 	},
// 	{
// 		supplier: 'UK RUBBER & PLASTICS LTD',
// 		claimNumber: 201274886,
// 	},
// 	{
// 		supplier: 'HELLA LTD (EUR)',
// 		claimNumber: 201262554,
// 	},
// 	{
// 		supplier: 'THOS STOREY FAB. GROUP LTD',
// 		claimNumber: 201287523,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201287667,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201287703,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201280023,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201322085,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201340743,
// 	},
// 	{
// 		supplier: 'FASTER S.R.L',
// 		claimNumber: 201340699,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201330803,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201340671,
// 	},
// 	{
// 		supplier: 'ROCKINGER AGRICULTURE GMBH',
// 		claimNumber: 201354903,
// 	},
// 	{
// 		supplier: 'FASTER S.R.L',
// 		claimNumber: 201353585,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201353123,
// 	},
// 	{
// 		supplier: 'HORTON EUROPE GMBH & CO KG (EUR)',
// 		claimNumber: 201353644,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201347003,
// 	},
// 	{
// 		supplier: 'PNJ ENGINEERING SERVICES LTD',
// 		claimNumber: 201339180,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201349257,
// 	},
// 	{
// 		supplier: 'PERMOID INDUSTRIES LTD',
// 		claimNumber: 201140683,
// 	},
// 	{
// 		supplier: 'GRENVILLE ENGINEERING LTD',
// 		claimNumber: 201086733,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201097115,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201096819,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201097087,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201096207,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201096485,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS (USD) LTD',
// 		claimNumber: 201106430,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201131097,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201140859,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201106455,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201133833,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201114122,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201145389,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201156940,
// 	},
// 	{
// 		supplier: 'TAYLOR ENG & PLASTICS',
// 		claimNumber: 201156638,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201156908,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201154444,
// 	},
// 	{
// 		supplier: 'ELANDERS LTD',
// 		claimNumber: 201158868,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201160951,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201239036,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD  (GBP)',
// 		claimNumber: 201193762,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201211101,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201209548,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201238722,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201231237,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201231261,
// 	},
// 	{
// 		supplier: 'PERMOID INDUSTRIES LTD',
// 		claimNumber: 201318552,
// 	},
// 	{
// 		supplier: 'WOOJIN CO LTD',
// 		claimNumber: 201247057,
// 	},
// 	{
// 		supplier: 'PERMOID INDUSTRIES LTD',
// 		claimNumber: 201272181,
// 	},
// 	{
// 		supplier: 'MITCHELL RUBBER EUROPE',
// 		claimNumber: 201233893,
// 	},
// 	{
// 		supplier: 'ORLACO PRODUCTS BV (EURO)',
// 		claimNumber: 201336659,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201276880,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201267253,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201279319,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201303892,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201260699,
// 	},
// 	{
// 		supplier: 'TE CONNECTIVITY SOLUTIONS GmBH (USD',
// 		claimNumber: 201276063,
// 	},
// 	{
// 		supplier: 'CHERRY PRODUCTS LTD',
// 		claimNumber: 201293383,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201331776,
// 	},
// 	{
// 		supplier: 'ALBERT JAGGER LIMITED',
// 		claimNumber: 201330478,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201328855,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201330315,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201331085,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201338061,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201339669,
// 	},
// 	{
// 		supplier: 'ADM PRESSINGS LIMITED',
// 		claimNumber: 201339678,
// 	},
// 	{
// 		supplier: 'LINECROSS LIMITED',
// 		claimNumber: 201288732,
// 	},
// 	{
// 		supplier: 'KINGSPAN WATER & ENERGY LTD',
// 		claimNumber: 201286815,
// 	},
// 	{
// 		supplier: 'MICHELIN TYRE PLC (EUR)',
// 		claimNumber: 201345478,
// 	},
// 	{
// 		supplier: 'DANFOSS DISTRIBUTION II A/S',
// 		claimNumber: 201340660,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201312505,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201322285,
// 	},
// 	{
// 		supplier: 'BONY POLYMERS (P) LTD',
// 		claimNumber: 201325400,
// 	},
// 	{
// 		supplier: 'CONCENTRIC HOF GMBH (EUR)',
// 		claimNumber: 201307745,
// 	},
// 	{
// 		supplier: 'ARTHUR STEPHENSON ENGINEERS',
// 		claimNumber: 201356686,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201356673,
// 	},
// 	{
// 		supplier: 'PAILTON ENGINEERING LIMITED',
// 		claimNumber: 201330814,
// 	},
// 	{
// 		supplier: 'STEPHENSONS',
// 		claimNumber: 201333122,
// 	},
// 	{
// 		supplier: 'TAYLOR ENG & PLASTICS',
// 		claimNumber: 201333106,
// 	},
// 	{
// 		supplier: 'METALLINK FLUID POWER (EUR)',
// 		claimNumber: 201346844,
// 	},
// 	{
// 		supplier: 'GATE 7 LTD (GBP)',
// 		claimNumber: 201247555,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201109796,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS',
// 		claimNumber: 201096065,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201136352,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201146915,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201137809,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201256077,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201161699,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201162175,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201266324,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201283969,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201220741,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201293463,
// 	},
// 	{
// 		supplier: 'ELANDERS LTD',
// 		claimNumber: 201228009,
// 	},
// 	{
// 		supplier: 'WHITE DRIVE MOTORS AND STEERING SP',
// 		claimNumber: 201239937,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201229007,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201291598,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201287629,
// 	},
// 	{
// 		supplier: 'KAYLEE TRANSFERS LIMITED',
// 		claimNumber: 201255255,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201289083,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201276535,
// 	},
// 	{
// 		supplier: 'KINGSPAN WATER & ENERGY LTD',
// 		claimNumber: 201289040,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201289027,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201288996,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201289045,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201282801,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201324272,
// 	},
// 	{
// 		supplier: 'ELANDERS LTD',
// 		claimNumber: 201288591,
// 	},
// 	{
// 		supplier: 'THOMSON PETTIE LTD',
// 		claimNumber: 201344085,
// 	},
// 	{
// 		supplier: 'DESAI ENGINNERS (INR)',
// 		claimNumber: 201334134,
// 	},
// 	{
// 		supplier: 'NATIONWIDE BEARINGS',
// 		claimNumber: 201334144,
// 	},
// 	{
// 		supplier: 'PERMOID INDUSTRIES LTD',
// 		claimNumber: 201353654,
// 	},
// 	{
// 		supplier: 'TAIKISHA ENG INDIA PRIVATE LTD',
// 		claimNumber: 201108438,
// 	},
// 	{
// 		supplier: 'MERCURY MATERIAL MANGMNT. LTD',
// 		claimNumber: 201108436,
// 	},
// 	{
// 		supplier: 'MANN + HUMMEL (UK) LTD',
// 		claimNumber: 201238558,
// 	},
// 	{
// 		supplier: 'PERMOID INDUSTRIES LTD',
// 		claimNumber: 201348614,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201308849,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201308843,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201278882,
// 	},
// 	{
// 		supplier: 'Not assigned',
// 		claimNumber: 201353050,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201198932,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201207335,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201210724,
// 	},
// 	{
// 		supplier: 'STABILUS GMBH (EUR)',
// 		claimNumber: 201210786,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201210653,
// 	},
// 	{
// 		supplier: 'GSM ALUMINIUM LTD',
// 		claimNumber: 201210765,
// 	},
// 	{
// 		supplier: 'THOMSON PETTIE LTD',
// 		claimNumber: 201210690,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201210810,
// 	},
// 	{
// 		supplier: 'PERMOID INDUSTRIES LTD',
// 		claimNumber: 201228369,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201353996,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201276100,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201310795,
// 	},
// 	{
// 		supplier: 'BENSON COMPONENTS LTD',
// 		claimNumber: 201313778,
// 	},
// 	{
// 		supplier: 'PERMOID INDUSTRIES LTD',
// 		claimNumber: 201349215,
// 	},
// 	{
// 		supplier: 'METALLINK FLUID POWER (EUR)',
// 		claimNumber: 201349330,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201348793,
// 	},
// 	{
// 		supplier: 'F.O.R. SPA',
// 		claimNumber: 201084386,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201176742,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201099864,
// 	},
// 	{
// 		supplier: 'PERMOID INDUSTRIES LTD',
// 		claimNumber: 201120378,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201120283,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201127102,
// 	},
// 	{
// 		supplier: 'ADM PRESSINGS LIMITED',
// 		claimNumber: 201152672,
// 	},
// 	{
// 		supplier: 'TAIKISHA ENG INDIA PRIVATE LTD',
// 		claimNumber: 201128668,
// 	},
// 	{
// 		supplier: 'BLACKWOOD ENG LTD (USD)',
// 		claimNumber: 201168567,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201207540,
// 	},
// 	{
// 		supplier: 'ZF SERVICES UK LTD (EURO)',
// 		claimNumber: 201232564,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201333876,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201333874,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201258983,
// 	},
// 	{
// 		supplier: 'THOMSON PETTIE LTD',
// 		claimNumber: 201261367,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201324723,
// 	},
// 	{
// 		supplier: 'THOMSON PETTIE LTD',
// 		claimNumber: 201308904,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201294862,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201294595,
// 	},
// 	{
// 		supplier: 'L.A.P ELECTRICAL LIMITED',
// 		claimNumber: 201307570,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201313888,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201329616,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201329615,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201333747,
// 	},
// 	{
// 		supplier: 'METALLINK FLUID POWER (EUR)',
// 		claimNumber: 201081565,
// 	},
// 	{
// 		supplier: 'XL ENGINEERING LTD',
// 		claimNumber: 201118727,
// 	},
// 	{
// 		supplier: 'THOMSON PETTIE LTD',
// 		claimNumber: 201237057,
// 	},
// 	{
// 		supplier: 'THERMOTEC PLASTICS LIMITED',
// 		claimNumber: 201238375,
// 	},
// 	{
// 		supplier: 'IFM ELECTRONIC  (EUR)',
// 		claimNumber: 201163110,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201163076,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201163089,
// 	},
// 	{
// 		supplier: 'LINECROSS LIMITED',
// 		claimNumber: 201190502,
// 	},
// 	{
// 		supplier: 'SURE POWER INDUSTRIES INC',
// 		claimNumber: 201192866,
// 	},
// 	{
// 		supplier: 'TE CONNECTIVITY SOLUTIONS GmBH (USD',
// 		claimNumber: 201220655,
// 	},
// 	{
// 		supplier: 'THOMSON PETTIE LTD',
// 		claimNumber: 201303667,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201303645,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS (USD) LTD',
// 		claimNumber: 201303668,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS (USD) LTD',
// 		claimNumber: 201237450,
// 	},
// 	{
// 		supplier: 'MERCURY MATERIAL MANGMNT. LTD',
// 		claimNumber: 201267670,
// 	},
// 	{
// 		supplier: 'TAYLOR ENG & PLASTICS',
// 		claimNumber: 201275200,
// 	},
// 	{
// 		supplier: 'NEWFIELD FABRICATION CO LTD',
// 		claimNumber: 201261701,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201272518,
// 	},
// 	{
// 		supplier: 'MCAM SURLON INDIA LTD',
// 		claimNumber: 201278599,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201275858,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201266501,
// 	},
// 	{
// 		supplier: 'RAYNE PRECISION ENGINEERING',
// 		claimNumber: 201263006,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201263469,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201273561,
// 	},
// 	{
// 		supplier: 'GRENVILLE ENGINEERING LTD',
// 		claimNumber: 201115828,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201124039,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201144625,
// 	},
// 	{
// 		supplier: 'CONCENTRIC HOF GMBH (EUR)',
// 		claimNumber: 201136910,
// 	},
// 	{
// 		supplier: 'VARM PRESS E-GEN ENG PVT LTD (INR)',
// 		claimNumber: 201188569,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201248228,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201226205,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201215754,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201282581,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201282563,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201282557,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201269273,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201269909,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201269941,
// 	},
// 	{
// 		supplier: 'PERMOID INDUSTRIES LTD',
// 		claimNumber: 201259061,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201332205,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201291577,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201298176,
// 	},
// 	{
// 		supplier: 'ALDRIDGE FABRICATIONS (AF) LTD',
// 		claimNumber: 201348518,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201130284,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201155225,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201162922,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201185463,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201202462,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201204571,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201204564,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201203189,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201320475,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201334616,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201252157,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201242557,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201238918,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201238940,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201304941,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201306286,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201314268,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201301596,
// 	},
// 	{
// 		supplier: 'ZF SERVICES UK LTD (EURO)',
// 		claimNumber: 201301578,
// 	},
// 	{
// 		supplier: 'BONY POLYMERS (P) LTD',
// 		claimNumber: 201301663,
// 	},
// 	{
// 		supplier: 'Not assigned',
// 		claimNumber: 201301610,
// 	},
// 	{
// 		supplier: 'JAMES DAWSON & SONS LTD',
// 		claimNumber: 201301583,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201353939,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201353921,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS (USD) LTD',
// 		claimNumber: 201325531,
// 	},
// 	{
// 		supplier: 'A ONE TYRES (DROMORE) LTD',
// 		claimNumber: 201353360,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201331404,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201329107,
// 	},
// 	{
// 		supplier: 'L.A.P ELECTRICAL LIMITED',
// 		claimNumber: 201352070,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (USD)',
// 		claimNumber: 201139308,
// 	},
// 	{
// 		supplier: 'PANASONIC ELECTRIC WORKS UK LTD',
// 		claimNumber: 201119465,
// 	},
// 	{
// 		supplier: 'KAT MEKATRONIK ÚRÚNLERI A.S',
// 		claimNumber: 201140370,
// 	},
// 	{
// 		supplier: 'LINECROSS LIMITED',
// 		claimNumber: 201116832,
// 	},
// 	{
// 		supplier: 'CONCENTRIC HOF GMBH (EUR)',
// 		claimNumber: 201179936,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201197180,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201248018,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (USD)',
// 		claimNumber: 201135719,
// 	},
// 	{
// 		supplier: 'CHROMEWELL ENGINEERING PRIVATE LTD',
// 		claimNumber: 201081730,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201082325,
// 	},
// 	{
// 		supplier: 'KINGSPAN WATER & ENERGY LTD',
// 		claimNumber: 201081741,
// 	},
// 	{
// 		supplier: 'PERMOID INDUSTRIES LTD',
// 		claimNumber: 201081770,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201081720,
// 	},
// 	{
// 		supplier: 'PERMOID INDUSTRIES LTD',
// 		claimNumber: 201100671,
// 	},
// 	{
// 		supplier: 'Not assigned',
// 		claimNumber: 201100680,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201123197,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201092956,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201198977,
// 	},
// 	{
// 		supplier: 'L.A.P ELECTRICAL LIMITED',
// 		claimNumber: 201199001,
// 	},
// 	{
// 		supplier: 'ORLACO PRODUCTS BV (EURO)',
// 		claimNumber: 201198992,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201196479,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201146241,
// 	},
// 	{
// 		supplier: 'BUCHER HYDRAULICS LTD',
// 		claimNumber: 201146206,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201146250,
// 	},
// 	{
// 		supplier: 'KAYLEE TRANSFERS LIMITED',
// 		claimNumber: 201146236,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201128011,
// 	},
// 	{
// 		supplier: 'BURTON RUBBER CO. LTD',
// 		claimNumber: 201170516,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201170515,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201164140,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201178656,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201183091,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201190211,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201326691,
// 	},
// 	{
// 		supplier: 'WESTON BODY HARDWARE',
// 		claimNumber: 201245536,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL (Europe) GmbH',
// 		claimNumber: 201260460,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201254914,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201279602,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201299933,
// 	},
// 	{
// 		supplier: 'TE CONNECTIVITY SOLUTIONS GmBH (USD',
// 		claimNumber: 201320457,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201280245,
// 	},
// 	{
// 		supplier: 'SFC SOLUTIONS ITALY S.R.L.',
// 		claimNumber: 201350311,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201312872,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201339637,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201317286,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201300777,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201298003,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201325020,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201329105,
// 	},
// 	{
// 		supplier: 'CHROMEWELL ENGINEERING PRIVATE LTD',
// 		claimNumber: 201343853,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201275093,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201143731,
// 	},
// 	{
// 		supplier: 'MICHELIN TYRE PLC (EUR)',
// 		claimNumber: 201226412,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201311617,
// 	},
// 	{
// 		supplier: 'BONY POLYMERS (P) LTD',
// 		claimNumber: 201353992,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (USD)',
// 		claimNumber: 201353966,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201353902,
// 	},
// 	{
// 		supplier: 'DK PACKING AND CASEMAKING LTD',
// 		claimNumber: 201357435,
// 	},
// 	{
// 		supplier: 'WIDNEY MANUF LTD',
// 		claimNumber: 201227052,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201212313,
// 	},
// 	{
// 		supplier: 'SUMMIT ENGINEERING',
// 		claimNumber: 201227055,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201324441,
// 	},
// 	{
// 		supplier: 'L.A.P ELECTRICAL LIMITED',
// 		claimNumber: 201327817,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201343367,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201095783,
// 	},
// 	{
// 		supplier: 'WESTON BODY HARDWARE',
// 		claimNumber: 201170444,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201169743,
// 	},
// 	{
// 		supplier: 'ORLACO PRODUCTS BV (EURO)',
// 		claimNumber: 201170480,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201118456,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201186083,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201325559,
// 	},
// 	{
// 		supplier: 'TAYLOR ENG & PLASTICS',
// 		claimNumber: 201357427,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201333974,
// 	},
// 	{
// 		supplier: 'HADLEY HARGREAVES LTD',
// 		claimNumber: 201321890,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201353954,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201313350,
// 	},
// 	{
// 		supplier: 'PERMOID INDUSTRIES LTD',
// 		claimNumber: 201252240,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201236156,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201280912,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201288889,
// 	},
// 	{
// 		supplier: 'RING AUTOMOTIVE LTD',
// 		claimNumber: 201095037,
// 	},
// 	{
// 		supplier: 'LINECROSS LIMITED',
// 		claimNumber: 201061840,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS',
// 		claimNumber: 201092667,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS',
// 		claimNumber: 201129346,
// 	},
// 	{
// 		supplier: 'THOMSON PETTIE LTD',
// 		claimNumber: 201120417,
// 	},
// 	{
// 		supplier: 'PERMOID INDUSTRIES LTD',
// 		claimNumber: 201138528,
// 	},
// 	{
// 		supplier: 'GRENVILLE ENGINEERING LTD',
// 		claimNumber: 201093310,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201093250,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201094308,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201119864,
// 	},
// 	{
// 		supplier: 'PERMOID INDUSTRIES LTD',
// 		claimNumber: 201127990,
// 	},
// 	{
// 		supplier: 'ZF SERVICES UK LTD (EURO)',
// 		claimNumber: 201118604,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201171069,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201116610,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201110692,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201110672,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201110863,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201149732,
// 	},
// 	{
// 		supplier: 'GROTE INDUSTRIES EUROPE GMBH',
// 		claimNumber: 201116506,
// 	},
// 	{
// 		supplier: 'THOMSON PETTIE LTD',
// 		claimNumber: 201145003,
// 	},
// 	{
// 		supplier: 'GROTE INDUSTRIES EUROPE GMBH',
// 		claimNumber: 201138794,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201114573,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201183653,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201152238,
// 	},
// 	{
// 		supplier: 'BENSON COMPONENTS LTD',
// 		claimNumber: 201201062,
// 	},
// 	{
// 		supplier: 'LAP ELECTRICAL LIMITED',
// 		claimNumber: 201126424,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201129694,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201129655,
// 	},
// 	{
// 		supplier: 'BURTON RUBBER CO. LTD',
// 		claimNumber: 201148635,
// 	},
// 	{
// 		supplier: 'BURTON RUBBER CO. LTD',
// 		claimNumber: 201148650,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201156994,
// 	},
// 	{
// 		supplier: 'MITCHELL RUBBER EUROPE',
// 		claimNumber: 201149474,
// 	},
// 	{
// 		supplier: 'F.O.R. SPA',
// 		claimNumber: 201160634,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201161159,
// 	},
// 	{
// 		supplier: 'PEREI LIGHTING',
// 		claimNumber: 201156985,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201156983,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201153889,
// 	},
// 	{
// 		supplier: 'WIDNEY MANUF LTD',
// 		claimNumber: 201194599,
// 	},
// 	{
// 		supplier: 'JOHNSON ELECTRIC INTER. AG',
// 		claimNumber: 201150556,
// 	},
// 	{
// 		supplier: 'JOHNSON ELECTRIC INTER. AG',
// 		claimNumber: 201162283,
// 	},
// 	{
// 		supplier: 'Parker Hannifin Corporation',
// 		claimNumber: 201188417,
// 	},
// 	{
// 		supplier: 'Parker Hannifin Corporation',
// 		claimNumber: 201188432,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201204953,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201218616,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201175301,
// 	},
// 	{
// 		supplier: 'JOHNSON ELECTRIC INTER. AG',
// 		claimNumber: 201168858,
// 	},
// 	{
// 		supplier: 'BURTON RUBBER CO. LTD',
// 		claimNumber: 201169840,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201170764,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201169935,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201251559,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201176912,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201179090,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201177607,
// 	},
// 	{
// 		supplier: 'XL ENGINEERING LTD',
// 		claimNumber: 201197866,
// 	},
// 	{
// 		supplier: 'TAYLOR ENG & PLASTICS',
// 		claimNumber: 201194185,
// 	},
// 	{
// 		supplier: 'PERMOID INDUSTRIES LTD',
// 		claimNumber: 201230056,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201190356,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201204903,
// 	},
// 	{
// 		supplier: 'PERMOID INDUSTRIES LTD',
// 		claimNumber: 201207482,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201190417,
// 	},
// 	{
// 		supplier: 'CHROMEWELL ENGINEERING PRIVATE LTD',
// 		claimNumber: 201213455,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201202038,
// 	},
// 	{
// 		supplier: 'CUMMINS FILTRATION',
// 		claimNumber: 201191777,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201202928,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201253790,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201283986,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201237958,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201255848,
// 	},
// 	{
// 		supplier: 'ADM PRESSINGS LIMITED',
// 		claimNumber: 201241812,
// 	},
// 	{
// 		supplier: 'GATE 7 LTD (GBP)',
// 		claimNumber: 201249314,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201244126,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201251300,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201296617,
// 	},
// 	{
// 		supplier: 'TAYLOR ENG & PLASTICS',
// 		claimNumber: 201321369,
// 	},
// 	{
// 		supplier: 'PERMOID INDUSTRIES LTD',
// 		claimNumber: 201327552,
// 	},
// 	{
// 		supplier: 'Diametric Technical Ltd',
// 		claimNumber: 201255160,
// 	},
// 	{
// 		supplier: 'LINECROSS LIMITED',
// 		claimNumber: 201260868,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201324101,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201334713,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201321076,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201350432,
// 	},
// 	{
// 		supplier: 'PETFORD TOOLS LIMITED',
// 		claimNumber: 201289873,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201276649,
// 	},
// 	{
// 		supplier: 'THERMOTEC PLASTICS LIMITED',
// 		claimNumber: 201279430,
// 	},
// 	{
// 		supplier: 'BLACKWOOD ENG LTD (USD)',
// 		claimNumber: 201268215,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201330993,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201331466,
// 	},
// 	{
// 		supplier: 'DANFOSS LTD',
// 		claimNumber: 201263925,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201329850,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201305837,
// 	},
// 	{
// 		supplier: 'GOLD & WASSALL (HINGES) LTD',
// 		claimNumber: 201305872,
// 	},
// 	{
// 		supplier: 'PERMOID INDUSTRIES LTD',
// 		claimNumber: 201305785,
// 	},
// 	{
// 		supplier: 'WASHINGTON METALWORKS LIMITED',
// 		claimNumber: 201305861,
// 	},
// 	{
// 		supplier: 'VALEO MAGYARORSZAG KFT (EUR)',
// 		claimNumber: 201305860,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201327028,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201326202,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201286794,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201286792,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201309559,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201299079,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL (Europe) GmbH',
// 		claimNumber: 201317989,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201318645,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201353234,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201350224,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH. LTD (EUR)',
// 		claimNumber: 201343160,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201322287,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201353242,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201347162,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201330538,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201329710,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201337791,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201348204,
// 	},
// 	{
// 		supplier: 'TAIKISHA ENG INDIA PRIVATE LTD',
// 		claimNumber: 201354700,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS (USD) LTD',
// 		claimNumber: 201338453,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201340398,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201147142,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201147200,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201207840,
// 	},
// 	{
// 		supplier: 'RAYNE PRECISION ENGINEERING',
// 		claimNumber: 201065404,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201065661,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201160451,
// 	},
// 	{
// 		supplier: 'TE CONNECTIVITY SOLUTIONS GmBH (USD',
// 		claimNumber: 201109660,
// 	},
// 	{
// 		supplier: 'CONCENTRIC HOF GMBH (EUR)',
// 		claimNumber: 201115484,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201115242,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201163567,
// 	},
// 	{
// 		supplier: 'SURE POWER INDUSTRIES INC',
// 		claimNumber: 201216246,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201181228,
// 	},
// 	{
// 		supplier: 'NATIONWIDE BEARINGS',
// 		claimNumber: 201208850,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201208856,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201203217,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201344540,
// 	},
// 	{
// 		supplier: 'DANFOSS DISTRIBUTION II A/S',
// 		claimNumber: 201312447,
// 	},
// 	{
// 		supplier: 'THOMSON PETTIE LTD',
// 		claimNumber: 201331703,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201327493,
// 	},
// 	{
// 		supplier: 'BLACKWOOD ENG LTD (USD)',
// 		claimNumber: 201334125,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201343782,
// 	},
// 	{
// 		supplier: 'RAYNE PRECISION ENGINEERING',
// 		claimNumber: 201327015,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201335564,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201356950,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201147323,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201146660,
// 	},
// 	{
// 		supplier: 'RAYNE PRECISION ENGINEERING',
// 		claimNumber: 201244053,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201187486,
// 	},
// 	{
// 		supplier: 'METALLINK FLUID POWER (EUR)',
// 		claimNumber: 201187506,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201189710,
// 	},
// 	{
// 		supplier: 'NEWFIELD FABRICATION CO LTD',
// 		claimNumber: 201187488,
// 	},
// 	{
// 		supplier: 'THOMSON PETTIE LTD',
// 		claimNumber: 201234985,
// 	},
// 	{
// 		supplier: 'THOMSON PETTIE LTD',
// 		claimNumber: 201306086,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201316754,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201315009,
// 	},
// 	{
// 		supplier: 'ORLACO PRODUCTS BV (EURO)',
// 		claimNumber: 201224288,
// 	},
// 	{
// 		supplier: 'ORLACO PRODUCTS BV (EURO)',
// 		claimNumber: 201229287,
// 	},
// 	{
// 		supplier: 'TAYLOR ENG & PLASTICS',
// 		claimNumber: 201258094,
// 	},
// 	{
// 		supplier: 'THOMSON PETTIE LTD',
// 		claimNumber: 201345533,
// 	},
// 	{
// 		supplier: 'ADM PRESSINGS LIMITED',
// 		claimNumber: 201355371,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201340086,
// 	},
// 	{
// 		supplier: 'JOHNSON ELECTRIC INTER. AG',
// 		claimNumber: 201347568,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201301083,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201320165,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201317557,
// 	},
// 	{
// 		supplier: 'GROENEVELD TRANSPORT EFFICIENCY',
// 		claimNumber: 201319539,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201315222,
// 	},
// 	{
// 		supplier: 'CONCENTRIC HOF GMBH (EUR)',
// 		claimNumber: 201354069,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201209750,
// 	},
// 	{
// 		supplier: 'HYDRAULIC SYSTEM PRODUCTS LTD',
// 		claimNumber: 201063916,
// 	},
// 	{
// 		supplier: 'BURGAFLEX UK LTD',
// 		claimNumber: 201141337,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201141329,
// 	},
// 	{
// 		supplier: 'TE CONNECTIVITY GERMANY GMBH (GBP)',
// 		claimNumber: 201179840,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201104480,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201306191,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201306174,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201305518,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201217124,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201217112,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201183113,
// 	},
// 	{
// 		supplier: 'PERMOID INDUSTRIES LTD',
// 		claimNumber: 201294649,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201345180,
// 	},
// 	{
// 		supplier: 'THERMOTEC PLASTICS LIMITED',
// 		claimNumber: 201247798,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201283669,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201350249,
// 	},
// 	{
// 		supplier: 'CONCENTRIC HOF GMBH (EUR)',
// 		claimNumber: 201317913,
// 	},
// 	{
// 		supplier: 'CONCENTRIC HOF GMBH (EUR)',
// 		claimNumber: 201337376,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201337372,
// 	},
// 	{
// 		supplier: 'ORLACO PRODUCTS BV (EURO)',
// 		claimNumber: 201342117,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201329702,
// 	},
// 	{
// 		supplier: 'CUMMINS UK AFTERMARKET',
// 		claimNumber: 201352573,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201353235,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD  (GBP)',
// 		claimNumber: 201355048,
// 	},
// 	{
// 		supplier: 'BECKER INDUSTRIAL COATINGS LTD',
// 		claimNumber: 201339321,
// 	},
// 	{
// 		supplier: 'XL ENGINEERING LTD',
// 		claimNumber: 201339304,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201339314,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201116308,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201103520,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201092908,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201113617,
// 	},
// 	{
// 		supplier: 'Not assigned',
// 		claimNumber: 201137348,
// 	},
// 	{
// 		supplier: 'ALBERT JAGGER LIMITED',
// 		claimNumber: 201262722,
// 	},
// 	{
// 		supplier: 'RAAL SA',
// 		claimNumber: 201262704,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201093273,
// 	},
// 	{
// 		supplier: 'METALLINK FLUID POWER (EUR)',
// 		claimNumber: 201093274,
// 	},
// 	{
// 		supplier: 'MANPLAS LTD',
// 		claimNumber: 201092523,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201170529,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201173676,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201153859,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201123419,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201123456,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201195018,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201195138,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201113352,
// 	},
// 	{
// 		supplier: 'PHILLIPS & TEMRO',
// 		claimNumber: 201097411,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201115610,
// 	},
// 	{
// 		supplier: 'National Högsäter Performance Pol',
// 		claimNumber: 201115605,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201133692,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201137336,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201128403,
// 	},
// 	{
// 		supplier: 'WUXI CITY GUANYUN H. EXCHANGER',
// 		claimNumber: 201122619,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201133674,
// 	},
// 	{
// 		supplier: 'COBO SPA',
// 		claimNumber: 201134344,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201134049,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201151781,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201132503,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201132489,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201132516,
// 	},
// 	{
// 		supplier: 'FUYAO GLASS INDUSTRY GROUP (2414)',
// 		claimNumber: 201132030,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201156661,
// 	},
// 	{
// 		supplier: 'HOLMBURY LTD',
// 		claimNumber: 201200331,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201134297,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201134026,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201151782,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201128276,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201192457,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL LTD',
// 		claimNumber: 201216050,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201204797,
// 	},
// 	{
// 		supplier: 'HONGFA EUROPE (EUR)',
// 		claimNumber: 201215358,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201206196,
// 	},
// 	{
// 		supplier: 'HELLA LTD (EUR)',
// 		claimNumber: 201214518,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201229638,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201271391,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201271392,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201311441,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201228956,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201252937,
// 	},
// 	{
// 		supplier: 'DANA ITALIA SPA',
// 		claimNumber: 201234122,
// 	},
// 	{
// 		supplier: 'TE CONNECTIVITY SOLUTIONS GMBH (EUR',
// 		claimNumber: 201288040,
// 	},
// 	{
// 		supplier: 'SHANGDONG SHUOCHENG MACHINERY',
// 		claimNumber: 201240858,
// 	},
// 	{
// 		supplier: 'CLYDESDALE JONES',
// 		claimNumber: 201238467,
// 	},
// 	{
// 		supplier: 'KAYLEE TRANSFERS LIMITED',
// 		claimNumber: 201251131,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201273902,
// 	},
// 	{
// 		supplier: 'HELLA FAHRZEUGTEILE GMBH (EUR)',
// 		claimNumber: 201258039,
// 	},
// 	{
// 		supplier: 'HELLA FAHRZEUGTEILE GMBH (EUR)',
// 		claimNumber: 201257692,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201304385,
// 	},
// 	{
// 		supplier: 'HELLA FAHRZEUGTEILE GMBH (EUR)',
// 		claimNumber: 201295556,
// 	},
// 	{
// 		supplier: 'HELLA FAHRZEUGTEILE GMBH (EUR)',
// 		claimNumber: 201321735,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201305304,
// 	},
// 	{
// 		supplier: 'LH GROUP (COLEMAN)',
// 		claimNumber: 201348224,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201271956,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201271992,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201267451,
// 	},
// 	{
// 		supplier: 'LINECROSS LIMITED',
// 		claimNumber: 201266753,
// 	},
// 	{
// 		supplier: 'MULTI-COLOR STEVENAGE ENGLAND',
// 		claimNumber: 201357797,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201267223,
// 	},
// 	{
// 		supplier: 'STABILUS GMBH (EUR)',
// 		claimNumber: 201277721,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201281660,
// 	},
// 	{
// 		supplier: 'MOTOR COMPONENTS LLC',
// 		claimNumber: 201320712,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201339150,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201285570,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201283933,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201285204,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201297578,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201279849,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201285999,
// 	},
// 	{
// 		supplier: 'National Högsäter Performance Pol',
// 		claimNumber: 201286196,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201286271,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201292179,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201316411,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201316383,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201316387,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201353020,
// 	},
// 	{
// 		supplier: 'FUYAO GLASS INDUSTRY GROUP (2414)',
// 		claimNumber: 201353998,
// 	},
// 	{
// 		supplier: 'FUYAO GLASS INDUSTRY GROUP (2414)',
// 		claimNumber: 201357222,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201348679,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201080971,
// 	},
// 	{
// 		supplier: 'HONGFA EUROPE (EUR)',
// 		claimNumber: 201078939,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201125663,
// 	},
// 	{
// 		supplier: 'KOHLER LOMBARDINI Srl',
// 		claimNumber: 201156237,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201234265,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201179167,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201231257,
// 	},
// 	{
// 		supplier: 'MERCURY MATERIAL MANGMNT. LTD',
// 		claimNumber: 201267080,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201254673,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201246870,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201255310,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201255320,
// 	},
// 	{
// 		supplier: 'GATE 7 LTD (GBP)',
// 		claimNumber: 201270198,
// 	},
// 	{
// 		supplier: 'KOHLER LOMBARDINI Srl',
// 		claimNumber: 201275476,
// 	},
// 	{
// 		supplier: 'THOS STOREY FAB. GROUP LTD',
// 		claimNumber: 201268656,
// 	},
// 	{
// 		supplier: 'COBO SPA',
// 		claimNumber: 201262630,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201339091,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201080159,
// 	},
// 	{
// 		supplier: 'LINECROSS LIMITED',
// 		claimNumber: 201078438,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201083098,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201157106,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201104603,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD (EUR)',
// 		claimNumber: 201087372,
// 	},
// 	{
// 		supplier: 'LINECROSS COMPOSITES LTD',
// 		claimNumber: 201083141,
// 	},
// 	{
// 		supplier: 'LINECROSS COMPOSITES LTD',
// 		claimNumber: 201083150,
// 	},
// 	{
// 		supplier: 'HONGFA EUROPE (EUR)',
// 		claimNumber: 201102714,
// 	},
// 	{
// 		supplier: 'LINECROSS COMPOSITES LTD',
// 		claimNumber: 201090474,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201099353,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201104262,
// 	},
// 	{
// 		supplier: 'CON MECH (ENGINEERS) LTD',
// 		claimNumber: 201104263,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201099413,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201099255,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201143791,
// 	},
// 	{
// 		supplier: 'COBO SPA',
// 		claimNumber: 201153843,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201164661,
// 	},
// 	{
// 		supplier: 'COBO SPA',
// 		claimNumber: 201134230,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201137585,
// 	},
// 	{
// 		supplier: 'HELLA LTD (EUR)',
// 		claimNumber: 201136509,
// 	},
// 	{
// 		supplier: 'DANA ITALIA SPA',
// 		claimNumber: 201185180,
// 	},
// 	{
// 		supplier: 'OPTIBELT (UK) LTD.',
// 		claimNumber: 201185138,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201185191,
// 	},
// 	{
// 		supplier: 'DANA ITALIA SPA',
// 		claimNumber: 201185229,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201136366,
// 	},
// 	{
// 		supplier: 'COBO SPA',
// 		claimNumber: 201156346,
// 	},
// 	{
// 		supplier: 'WESTON BODY HARDWARE',
// 		claimNumber: 201205319,
// 	},
// 	{
// 		supplier: 'LH GROUP (COLEMAN)',
// 		claimNumber: 201140211,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201195479,
// 	},
// 	{
// 		supplier: 'L.A.P ELECTRICAL LIMITED',
// 		claimNumber: 201162657,
// 	},
// 	{
// 		supplier: 'GATE 7 LTD (GBP)',
// 		claimNumber: 201174499,
// 	},
// 	{
// 		supplier: 'LINECROSS LIMITED',
// 		claimNumber: 201227756,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201191589,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201201673,
// 	},
// 	{
// 		supplier: 'ROTATIONAL MOULDINGS LTD',
// 		claimNumber: 201201656,
// 	},
// 	{
// 		supplier: 'KOHLER LOMBARDINI Srl',
// 		claimNumber: 201201626,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201178078,
// 	},
// 	{
// 		supplier: 'KOHLER LOMBARDINI Srl',
// 		claimNumber: 201174332,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201189143,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201189135,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201188934,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201189151,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201180158,
// 	},
// 	{
// 		supplier: 'DANA ITALIA SPA',
// 		claimNumber: 201207697,
// 	},
// 	{
// 		supplier: 'COBO SPA',
// 		claimNumber: 201213490,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201197359,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201186109,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201201741,
// 	},
// 	{
// 		supplier: 'KOHLER LOMBARDINI Srl',
// 		claimNumber: 201216230,
// 	},
// 	{
// 		supplier: 'LINECROSS COMPOSITES LTD',
// 		claimNumber: 201205238,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201293165,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201247926,
// 	},
// 	{
// 		supplier: 'SHREE GANESH ENG WORKS',
// 		claimNumber: 201228320,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201237320,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201218037,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201218190,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201235853,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201218008,
// 	},
// 	{
// 		supplier: 'HONGFA EUROPE (EUR)',
// 		claimNumber: 201249750,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201278182,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201284893,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201252229,
// 	},
// 	{
// 		supplier: 'GROTE INDUSTRIES EUROPE GMBH',
// 		claimNumber: 201242156,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201259923,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201252697,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201270356,
// 	},
// 	{
// 		supplier: 'SADDLERS COURT MFG LTD',
// 		claimNumber: 201276537,
// 	},
// 	{
// 		supplier: 'SADDLERS COURT MFG LTD',
// 		claimNumber: 201251907,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201252623,
// 	},
// 	{
// 		supplier: 'LH GROUP (COLEMAN)',
// 		claimNumber: 201251890,
// 	},
// 	{
// 		supplier: 'COBO SPA',
// 		claimNumber: 201305219,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201263546,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201263707,
// 	},
// 	{
// 		supplier: 'LH GROUP (COLEMAN)',
// 		claimNumber: 201252936,
// 	},
// 	{
// 		supplier: 'LH GROUP (COLEMAN)',
// 		claimNumber: 201263025,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201254586,
// 	},
// 	{
// 		supplier: 'COBO SPA',
// 		claimNumber: 201261517,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201269523,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201322876,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201298900,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201288287,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201266034,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201264632,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201314028,
// 	},
// 	{
// 		supplier: 'LINECROSS COMPOSITES LTD',
// 		claimNumber: 201262475,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201352269,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201342561,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201290754,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201314595,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201313784,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS (USD) LTD',
// 		claimNumber: 201289243,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201310372,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201310385,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201325806,
// 	},
// 	{
// 		supplier: 'KOHLER LOMBARDINI Srl',
// 		claimNumber: 201354938,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201292087,
// 	},
// 	{
// 		supplier: 'PILKINGTON AUTOMOTIVE FINLAND OY',
// 		claimNumber: 201296334,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH. LTD (EUR)',
// 		claimNumber: 201299749,
// 	},
// 	{
// 		supplier: 'DANA ITALIA SPA',
// 		claimNumber: 201307622,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201345020,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201348591,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201319650,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201329319,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201328276,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201328284,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201317702,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201317909,
// 	},
// 	{
// 		supplier: 'JIANGSU HENGFU INDU TECH CO.,LTD.',
// 		claimNumber: 201317885,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201317755,
// 	},
// 	{
// 		supplier: 'DANFOSS LTD',
// 		claimNumber: 201325823,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201324126,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201334137,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201339138,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201339328,
// 	},
// 	{
// 		supplier: 'Not assigned',
// 		claimNumber: 201355587,
// 	},
// 	{
// 		supplier: 'WELDED PRESSWORK LTD',
// 		claimNumber: 201348542,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201137265,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201159711,
// 	},
// 	{
// 		supplier: 'GATE 7 LTD (GBP)',
// 		claimNumber: 201166682,
// 	},
// 	{
// 		supplier: 'DANFOSS LTD',
// 		claimNumber: 201169891,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201166329,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201133227,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201169758,
// 	},
// 	{
// 		supplier: 'SPICER DRIVESHAFT UK',
// 		claimNumber: 201173163,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201200025,
// 	},
// 	{
// 		supplier: 'KINGSPAN WATER & ENERGY LTD',
// 		claimNumber: 201179989,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201191571,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201206528,
// 	},
// 	{
// 		supplier: 'DANFOSS LTD',
// 		claimNumber: 201246874,
// 	},
// 	{
// 		supplier: 'LINECROSS LIMITED',
// 		claimNumber: 201185927,
// 	},
// 	{
// 		supplier: 'KOHLER LOMBARDINI Srl',
// 		claimNumber: 201213355,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201212483,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201199512,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201197462,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201217170,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201217138,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201222845,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201237291,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201237253,
// 	},
// 	{
// 		supplier: 'HELLA LTD (EUR)',
// 		claimNumber: 201243480,
// 	},
// 	{
// 		supplier: 'KAYLEE TRANSFERS LIMITED',
// 		claimNumber: 201271030,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201237055,
// 	},
// 	{
// 		supplier: 'LINECROSS COMPOSITES LTD',
// 		claimNumber: 201247460,
// 	},
// 	{
// 		supplier: 'BLACKWOOD ENG LTD (USD)',
// 		claimNumber: 201228847,
// 	},
// 	{
// 		supplier: 'DANFOSS LTD',
// 		claimNumber: 201284150,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201317377,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201318947,
// 	},
// 	{
// 		supplier: 'GATE 7 LTD (GBP)',
// 		claimNumber: 201329144,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201317387,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201357696,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201240067,
// 	},
// 	{
// 		supplier: 'SADDLERS COURT MFG LTD',
// 		claimNumber: 201248352,
// 	},
// 	{
// 		supplier: 'COBO SPA',
// 		claimNumber: 201248319,
// 	},
// 	{
// 		supplier: 'LH GROUP (COLEMAN)',
// 		claimNumber: 201274495,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201313085,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201307233,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201307278,
// 	},
// 	{
// 		supplier: 'DANA ITALIA SPA',
// 		claimNumber: 201307285,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201325845,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201358025,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201209158,
// 	},
// 	{
// 		supplier: 'ELANDERS LTD',
// 		claimNumber: 201204033,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201286400,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201168998,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201179290,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201299909,
// 	},
// 	{
// 		supplier: 'HORST WELDING (HLA)',
// 		claimNumber: 201179900,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201167008,
// 	},
// 	{
// 		supplier: 'HELLA LTD (EUR)',
// 		claimNumber: 201090035,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201090090,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201084080,
// 	},
// 	{
// 		supplier: 'Not assigned',
// 		claimNumber: 201079412,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201102751,
// 	},
// 	{
// 		supplier: 'MITCHELL DIESEL LTD (EUR)',
// 		claimNumber: 201144802,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201118455,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201126712,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201134498,
// 	},
// 	{
// 		supplier: 'Not assigned',
// 		claimNumber: 201134507,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201143724,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201113676,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201136295,
// 	},
// 	{
// 		supplier: 'GATE 7 LTD (GBP)',
// 		claimNumber: 201142378,
// 	},
// 	{
// 		supplier: 'KIOWA LIMITED',
// 		claimNumber: 201136208,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201165468,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201123150,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL LTD',
// 		claimNumber: 201142385,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201150784,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201150778,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201150723,
// 	},
// 	{
// 		supplier: 'HORST WELDING (HLA)',
// 		claimNumber: 201177209,
// 	},
// 	{
// 		supplier: 'LINECROSS LIMITED',
// 		claimNumber: 201172239,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201209876,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201153270,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201203912,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201181131,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201175518,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201334609,
// 	},
// 	{
// 		supplier: 'KOHLER LOMBARDINI Srl',
// 		claimNumber: 201187874,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201182475,
// 	},
// 	{
// 		supplier: 'Not assigned',
// 		claimNumber: 201182486,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201205180,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201288960,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201287117,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201299939,
// 	},
// 	{
// 		supplier: 'COBO SPA',
// 		claimNumber: 201348957,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201256970,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL (Europe) GmbH',
// 		claimNumber: 201300043,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201300787,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201282629,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201283755,
// 	},
// 	{
// 		supplier: 'BURGAFLEX UK LTD',
// 		claimNumber: 201297954,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201287089,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201295672,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201296773,
// 	},
// 	{
// 		supplier: 'KOHLER LOMBARDINI Srl',
// 		claimNumber: 201345935,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201330648,
// 	},
// 	{
// 		supplier: 'GRENVILLE ENGINEERING LTD',
// 		claimNumber: 201358190,
// 	},
// 	{
// 		supplier: 'HELLA LTD (EUR)',
// 		claimNumber: 201100660,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201086619,
// 	},
// 	{
// 		supplier: 'Not assigned',
// 		claimNumber: 201086670,
// 	},
// 	{
// 		supplier: 'MITCHELL DIESEL LTD (EUR)',
// 		claimNumber: 201184308,
// 	},
// 	{
// 		supplier: 'POCLAIN HYDRAULICS INDUSTRIE',
// 		claimNumber: 201150151,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201150116,
// 	},
// 	{
// 		supplier: 'MP FILTRI UK LIMITED',
// 		claimNumber: 201177228,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201344602,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201305621,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201340978,
// 	},
// 	{
// 		supplier: 'SPICER DRIVESHAFT UK',
// 		claimNumber: 201292694,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201293846,
// 	},
// 	{
// 		supplier: 'BORG WARNER COOL. SYS. GMBH',
// 		claimNumber: 201096426,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201130362,
// 	},
// 	{
// 		supplier: 'HORST WELDING (HLA)',
// 		claimNumber: 201119472,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201092851,
// 	},
// 	{
// 		supplier: 'HELLA LTD (EUR)',
// 		claimNumber: 201092844,
// 	},
// 	{
// 		supplier: 'RING AUTOMOTIVE LTD',
// 		claimNumber: 201268025,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201258663,
// 	},
// 	{
// 		supplier: 'KOHLER LOMBARDINI Srl',
// 		claimNumber: 201228142,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201143028,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201128026,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201128014,
// 	},
// 	{
// 		supplier: 'STANDARD MOTOR PRODUCTS LTD',
// 		claimNumber: 201172237,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201144831,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201137411,
// 	},
// 	{
// 		supplier: 'MITCHELL DIESEL LTD (EUR)',
// 		claimNumber: 201136250,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201137395,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201141064,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201171004,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201176774,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201181839,
// 	},
// 	{
// 		supplier: 'HONGFA EUROPE (EUR)',
// 		claimNumber: 201183163,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201186069,
// 	},
// 	{
// 		supplier: 'OPTIBELT (UK) LTD.',
// 		claimNumber: 201222821,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201248073,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201243827,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201243848,
// 	},
// 	{
// 		supplier: 'EUROTEC INTERNATIONAL PLC',
// 		claimNumber: 201248072,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201231446,
// 	},
// 	{
// 		supplier: 'PHILLIPS & TEMRO',
// 		claimNumber: 201224012,
// 	},
// 	{
// 		supplier: 'BONY POLYMERS (P) LTD',
// 		claimNumber: 201213648,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL (Europe) GmbH',
// 		claimNumber: 201289766,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201248734,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL LTD',
// 		claimNumber: 201248770,
// 	},
// 	{
// 		supplier: 'EUROTEC INTERNATIONAL PLC',
// 		claimNumber: 201248705,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201240677,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201240743,
// 	},
// 	{
// 		supplier: 'HADLEY HARGREAVES LTD',
// 		claimNumber: 201240688,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201243822,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201296157,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201259267,
// 	},
// 	{
// 		supplier: 'Not assigned',
// 		claimNumber: 201295096,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD  (GBP)',
// 		claimNumber: 201266193,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201287062,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL (Europe) GmbH',
// 		claimNumber: 201266198,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201266156,
// 	},
// 	{
// 		supplier: 'HONGFA EUROPE (EUR)',
// 		claimNumber: 201277629,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL (Europe) GmbH',
// 		claimNumber: 201327872,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201296226,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201341570,
// 	},
// 	{
// 		supplier: 'RAYNE PRECISION ENGINEERING',
// 		claimNumber: 201305751,
// 	},
// 	{
// 		supplier: 'XL ENGINEERING LTD',
// 		claimNumber: 201303608,
// 	},
// 	{
// 		supplier: 'EUROTEC INTERNATIONAL PLC',
// 		claimNumber: 201303616,
// 	},
// 	{
// 		supplier: 'VEPS INDUSTRIES PVT LTD',
// 		claimNumber: 201318149,
// 	},
// 	{
// 		supplier: 'KINGSPAN WATER & ENERGY LTD',
// 		claimNumber: 201343058,
// 	},
// 	{
// 		supplier: 'ELANDERS LTD',
// 		claimNumber: 201325545,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201353290,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201330122,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201350933,
// 	},
// 	{
// 		supplier: 'Not assigned',
// 		claimNumber: 201352661,
// 	},
// 	{
// 		supplier: 'ZF SERVICES UK LTD (EURO)',
// 		claimNumber: 201097486,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201107611,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201107594,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201114485,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201114488,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201111027,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201114489,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201117351,
// 	},
// 	{
// 		supplier: 'PERMOID INDUSTRIES LTD',
// 		claimNumber: 201174869,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201201191,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL (Europe) GmbH',
// 		claimNumber: 201228265,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201212409,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201179715,
// 	},
// 	{
// 		supplier: 'CATTON CONTROLS CABLES LTD',
// 		claimNumber: 201244446,
// 	},
// 	{
// 		supplier: 'BONY POLYMERS (P) LTD',
// 		claimNumber: 201224065,
// 	},
// 	{
// 		supplier: 'METALLINK FLUID POWER (EUR)',
// 		claimNumber: 201288131,
// 	},
// 	{
// 		supplier: 'BONY POLYMERS (P) LTD',
// 		claimNumber: 201220883,
// 	},
// 	{
// 		supplier: 'ELANDERS LTD',
// 		claimNumber: 201274548,
// 	},
// 	{
// 		supplier: 'ZF SERVICES UK LTD (EURO)',
// 		claimNumber: 201291541,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201233035,
// 	},
// 	{
// 		supplier: 'GATES HYDRAULICS  (EUR)',
// 		claimNumber: 201275024,
// 	},
// 	{
// 		supplier: 'BONY POLYMERS (P) LTD',
// 		claimNumber: 201281603,
// 	},
// 	{
// 		supplier: 'BONY POLYMERS (P) LTD',
// 		claimNumber: 201331483,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201345301,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201286561,
// 	},
// 	{
// 		supplier: 'L.A.P ELECTRICAL LIMITED',
// 		claimNumber: 201357597,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201095108,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201164215,
// 	},
// 	{
// 		supplier: 'CLYDESDALE JONES',
// 		claimNumber: 201251572,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201292709,
// 	},
// 	{
// 		supplier: 'ZF SERVICES UK LTD (EURO)',
// 		claimNumber: 201350207,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201199106,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201199989,
// 	},
// 	{
// 		supplier: 'BURTON RUBBER CO. LTD',
// 		claimNumber: 201084491,
// 	},
// 	{
// 		supplier: 'BURTON RUBBER CO. LTD',
// 		claimNumber: 201085225,
// 	},
// 	{
// 		supplier: 'HADLEY HARGREAVES LTD',
// 		claimNumber: 201097097,
// 	},
// 	{
// 		supplier: 'KINGSPAN WATER & ENERGY LTD',
// 		claimNumber: 201347293,
// 	},
// 	{
// 		supplier: 'OMRON ELEC (MILTON KEYNES)',
// 		claimNumber: 201353229,
// 	},
// 	{
// 		supplier: 'GRENVILLE ENGINEERING LTD',
// 		claimNumber: 201354022,
// 	},
// 	{
// 		supplier: 'GROTE INDUSTRIES EUROPE GMBH',
// 		claimNumber: 201097358,
// 	},
// 	{
// 		supplier: 'BURTON RUBBER CO. LTD',
// 		claimNumber: 201118285,
// 	},
// 	{
// 		supplier: 'BURTON RUBBER CO. LTD',
// 		claimNumber: 201118272,
// 	},
// 	{
// 		supplier: 'D L ELECTRICAL SUPPLIERS LTD',
// 		claimNumber: 201118269,
// 	},
// 	{
// 		supplier: 'BURTON RUBBER CO. LTD',
// 		claimNumber: 201155245,
// 	},
// 	{
// 		supplier: 'CONCENTRIC HOF GMBH (EUR)',
// 		claimNumber: 201139729,
// 	},
// 	{
// 		supplier: 'ROTATIONAL MOULDINGS LTD',
// 		claimNumber: 201237307,
// 	},
// 	{
// 		supplier: 'BONY POLYMERS (P) LTD',
// 		claimNumber: 201227645,
// 	},
// 	{
// 		supplier: 'ROTATIONAL MOULDINGS LTD',
// 		claimNumber: 201227618,
// 	},
// 	{
// 		supplier: 'ELANDERS LTD',
// 		claimNumber: 201346500,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201310991,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201304478,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS (USD) LTD',
// 		claimNumber: 201304146,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201304190,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201296295,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201098847,
// 	},
// 	{
// 		supplier: 'METALLINK FLUID POWER (EUR)',
// 		claimNumber: 201173000,
// 	},
// 	{
// 		supplier: 'METALLINK FLUID POWER (EUR)',
// 		claimNumber: 201172991,
// 	},
// 	{
// 		supplier: 'Liuzhou RimD Machinery Company Ltd',
// 		claimNumber: 201213981,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD  (GBP)',
// 		claimNumber: 201330703,
// 	},
// 	{
// 		supplier: 'GRENVILLE ENGINEERING LTD',
// 		claimNumber: 201339516,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201198834,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201293187,
// 	},
// 	{
// 		supplier: 'BONY POLYMERS (P) LTD',
// 		claimNumber: 201331595,
// 	},
// 	{
// 		supplier: 'BURTON RUBBER CO. LTD',
// 		claimNumber: 201089866,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201089920,
// 	},
// 	{
// 		supplier: 'CUMMINS UK (SERVICE REPAIRS)',
// 		claimNumber: 201089861,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD (EUR)',
// 		claimNumber: 201089882,
// 	},
// 	{
// 		supplier: 'SURE POWER INDUSTRIES INC',
// 		claimNumber: 201167719,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201167718,
// 	},
// 	{
// 		supplier: 'SHANDONG SUN WEARPARTS CO.,LTD',
// 		claimNumber: 201234850,
// 	},
// 	{
// 		supplier: 'SURE POWER INDUSTRIES INC',
// 		claimNumber: 201168306,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201193015,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201237636,
// 	},
// 	{
// 		supplier: 'RAAL SA',
// 		claimNumber: 201198517,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201207311,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201223699,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201241577,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201232248,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201236960,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201246470,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS (USD) LTD',
// 		claimNumber: 201255097,
// 	},
// 	{
// 		supplier: 'TAYLOR ENG & PLASTICS',
// 		claimNumber: 201253140,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201255137,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201253273,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201252959,
// 	},
// 	{
// 		supplier: 'ROBERT BOSCH LIMITED',
// 		claimNumber: 201266477,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201261066,
// 	},
// 	{
// 		supplier: 'TAYLOR ENG & PLASTICS',
// 		claimNumber: 201253174,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201253297,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201260854,
// 	},
// 	{
// 		supplier: 'TAYLOR ENG & PLASTICS',
// 		claimNumber: 201253650,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201253629,
// 	},
// 	{
// 		supplier: 'TAYLOR ENG & PLASTICS',
// 		claimNumber: 201256016,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201255139,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201254686,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201300871,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201288442,
// 	},
// 	{
// 		supplier: 'TAYLOR ENG & PLASTICS',
// 		claimNumber: 201265147,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201264769,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201285922,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201267510,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201255446,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201274809,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201264001,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201266559,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201288065,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201286540,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201266557,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201281162,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201279931,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201329389,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201297132,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201356579,
// 	},
// 	{
// 		supplier: 'PERMOID INDUSTRIES LTD',
// 		claimNumber: 201356720,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201243261,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201184582,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201245500,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201286939,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201286970,
// 	},
// 	{
// 		supplier: 'ROBERT BOSCH (EURO) HOMBURG',
// 		claimNumber: 201233009,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201353640,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201245496,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201310274,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201270712,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201271375,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201270662,
// 	},
// 	{
// 		supplier: 'CARRIER ENGINEERS PVT (INR)',
// 		claimNumber: 201334458,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201322532,
// 	},
// 	{
// 		supplier: 'TRICORN (NO LONGER IN USE)',
// 		claimNumber: 201199899,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201138815,
// 	},
// 	{
// 		supplier: 'ELANDERS LTD',
// 		claimNumber: 201183531,
// 	},
// 	{
// 		supplier: 'PERMOID INDUSTRIES LTD',
// 		claimNumber: 201259684,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201268453,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201185860,
// 	},
// 	{
// 		supplier: 'ORLACO PRODUCTS BV (EURO)',
// 		claimNumber: 201262056,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201264456,
// 	},
// 	{
// 		supplier: 'TRICORN (NO LONGER IN USE)',
// 		claimNumber: 201186799,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201202088,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201238567,
// 	},
// 	{
// 		supplier: 'BURGAFLEX UK LTD',
// 		claimNumber: 201266876,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201223766,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201233545,
// 	},
// 	{
// 		supplier: 'THERMOTEC PLASTICS LIMITED',
// 		claimNumber: 201335509,
// 	},
// 	{
// 		supplier: 'WHITE DRIVE MOTORS AND STEERING',
// 		claimNumber: 201335024,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201276890,
// 	},
// 	{
// 		supplier: 'NEWFIELD FABRICATION CO LTD',
// 		claimNumber: 201322078,
// 	},
// 	{
// 		supplier: 'CONCENTRIC HOF GMBH (EUR)',
// 		claimNumber: 201321597,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201285965,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201276380,
// 	},
// 	{
// 		supplier: 'BIG BEAR PLASTIC PRODS. LTD',
// 		claimNumber: 201293645,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201287319,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201334177,
// 	},
// 	{
// 		supplier: 'WASHINGTON METALWORKS LIMITED',
// 		claimNumber: 201339691,
// 	},
// 	{
// 		supplier: 'GRENVILLE ENGINEERING LTD',
// 		claimNumber: 201340632,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201189959,
// 	},
// 	{
// 		supplier: 'LINECROSS LIMITED',
// 		claimNumber: 201085528,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201090709,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201090706,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201089981,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201104309,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201115689,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201151365,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201193386,
// 	},
// 	{
// 		supplier: 'MAHLE LETRIKA (SUZHOU) AUTOMO',
// 		claimNumber: 201092524,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS',
// 		claimNumber: 201098250,
// 	},
// 	{
// 		supplier: 'WASHINGTON METALWORKS LIMITED',
// 		claimNumber: 201100228,
// 	},
// 	{
// 		supplier: 'ELANDERS LTD',
// 		claimNumber: 201100088,
// 	},
// 	{
// 		supplier: 'BORGWARNER TECHNOLOGIES LIMITED',
// 		claimNumber: 201237099,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201110956,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201091844,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201154555,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201154556,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201126658,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201126644,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201207156,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201132708,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201222075,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201217313,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201222074,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201182600,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201150655,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201133221,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201134302,
// 	},
// 	{
// 		supplier: 'HTA GROUP LIMITED',
// 		claimNumber: 201143518,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201159505,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201171633,
// 	},
// 	{
// 		supplier: 'THOS STOREY FAB. GROUP LTD',
// 		claimNumber: 201138763,
// 	},
// 	{
// 		supplier: 'THOS STOREY FAB. GROUP LTD',
// 		claimNumber: 201168018,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201090113,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201090123,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201090109,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201151993,
// 	},
// 	{
// 		supplier: 'NSI GROUP LTD',
// 		claimNumber: 201117363,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201101990,
// 	},
// 	{
// 		supplier: 'THERMOTEC PLASTICS LIMITED',
// 		claimNumber: 201224022,
// 	},
// 	{
// 		supplier: 'Not assigned',
// 		claimNumber: 201224021,
// 	},
// 	{
// 		supplier: 'L.A.P ELECTRICAL LIMITED',
// 		claimNumber: 201326020,
// 	},
// 	{
// 		supplier: 'TAYLOR ENG & PLASTICS',
// 		claimNumber: 201074551,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201111787,
// 	},
// 	{
// 		supplier: 'BLACKWOOD ENG LTD (USD)',
// 		claimNumber: 201138715,
// 	},
// 	{
// 		supplier: 'PETFORD TOOLS LIMITED',
// 		claimNumber: 201167575,
// 	},
// 	{
// 		supplier: 'MAHLE Electric Drives Slovenija d.o',
// 		claimNumber: 201111742,
// 	},
// 	{
// 		supplier: 'THOS STOREY FAB. GROUP LTD',
// 		claimNumber: 201097864,
// 	},
// 	{
// 		supplier: 'SUMMIT ENGINEERING',
// 		claimNumber: 201105511,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201095743,
// 	},
// 	{
// 		supplier: 'SADDLERS COURT MFG LTD',
// 		claimNumber: 201238181,
// 	},
// 	{
// 		supplier: 'CONCENTRIC HOF GMBH (EUR)',
// 		claimNumber: 201330085,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201228160,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201214298,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201264976,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201232773,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201277046,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201272110,
// 	},
// 	{
// 		supplier: 'ORLACO PRODUCTS BV (EURO)',
// 		claimNumber: 201276993,
// 	},
// 	{
// 		supplier: 'REICH DRIVE SYSTEMS LTD',
// 		claimNumber: 201245551,
// 	},
// 	{
// 		supplier: 'REICH DRIVE SYSTEMS LTD',
// 		claimNumber: 201296197,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL (Europe) GmbH',
// 		claimNumber: 201329764,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201330649,
// 	},
// 	{
// 		supplier: 'GRAMMER AG',
// 		claimNumber: 201245901,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201160436,
// 	},
// 	{
// 		supplier: 'NGK SPARK PLUGS (UK) LTD',
// 		claimNumber: 201120560,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201139114,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201144357,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201179447,
// 	},
// 	{
// 		supplier: 'HORTON EUROPE GMBH & CO KG (EUR)',
// 		claimNumber: 201142657,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201123314,
// 	},
// 	{
// 		supplier: 'LINECROSS LIMITED',
// 		claimNumber: 201138123,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201185307,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201184675,
// 	},
// 	{
// 		supplier: 'DANFOSS LTD',
// 		claimNumber: 201188031,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201132487,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201134803,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201139190,
// 	},
// 	{
// 		supplier: 'GRAMMER AG',
// 		claimNumber: 201177621,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201156380,
// 	},
// 	{
// 		supplier: 'LA FRANCE CORP.',
// 		claimNumber: 201255987,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201204406,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201196987,
// 	},
// 	{
// 		supplier: 'ECCO Safety Group',
// 		claimNumber: 201186281,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201186864,
// 	},
// 	{
// 		supplier: 'FUYAO GLASS INDUSTRY GROUP (2414)',
// 		claimNumber: 201207389,
// 	},
// 	{
// 		supplier: 'FUYAO GLASS INDUSTRY GROUP (2414)',
// 		claimNumber: 201223726,
// 	},
// 	{
// 		supplier: 'TRICORN (NO LONGER IN USE)',
// 		claimNumber: 201223742,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201189492,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201204825,
// 	},
// 	{
// 		supplier: 'ALPHA MANUFACTURING',
// 		claimNumber: 201207618,
// 	},
// 	{
// 		supplier: 'JAMES DAWSON & SONS LTD',
// 		claimNumber: 201217279,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201239081,
// 	},
// 	{
// 		supplier: 'DC WOODHEAD & PARTNERS LTD',
// 		claimNumber: 201213494,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201244190,
// 	},
// 	{
// 		supplier: 'GATES HYDRAULICS  (EUR)',
// 		claimNumber: 201244075,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201244169,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201231266,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201227951,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201246290,
// 	},
// 	{
// 		supplier: 'FAULD PRECISION MACHINING CO',
// 		claimNumber: 201259901,
// 	},
// 	{
// 		supplier: 'KINGSPAN WATER & ENERGY LTD',
// 		claimNumber: 201271939,
// 	},
// 	{
// 		supplier: 'GRENVILLE ENGINEERING LTD',
// 		claimNumber: 201257570,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201274525,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LLP (USD)',
// 		claimNumber: 201288677,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201354034,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201354035,
// 	},
// 	{
// 		supplier: 'CAMLOC MOTION CONTROL LTD',
// 		claimNumber: 201354005,
// 	},
// 	{
// 		supplier: 'FUYAO GLASS INDUSTRY GROUP (2414)',
// 		claimNumber: 201333695,
// 	},
// 	{
// 		supplier: 'FUYAO GLASS INDUSTRY GROUP (2414)',
// 		claimNumber: 201336258,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201334455,
// 	},
// 	{
// 		supplier: 'GATES HYDRAULICS  (EUR)',
// 		claimNumber: 201338034,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201339688,
// 	},
// 	{
// 		supplier: 'FUYAO GLASS INDUSTRY GROUP (2414)',
// 		claimNumber: 201352369,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201354259,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201180100,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201168461,
// 	},
// 	{
// 		supplier: 'CAMLOC MOTION CONTROL LTD',
// 		claimNumber: 201237751,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201203388,
// 	},
// 	{
// 		supplier: 'SOFIMA IND. FILTERS (SHANGHAI)',
// 		claimNumber: 201210407,
// 	},
// 	{
// 		supplier: 'LAYSTALL ENG (EUR)  CO LTD',
// 		claimNumber: 201249923,
// 	},
// 	{
// 		supplier: 'BURNSIDE EUROCYL LTD',
// 		claimNumber: 201284163,
// 	},
// 	{
// 		supplier: 'DONALDSON SAS (EUR)',
// 		claimNumber: 201112272,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201114307,
// 	},
// 	{
// 		supplier: 'ALLIED ENTERPRISES INC.',
// 		claimNumber: 201121641,
// 	},
// 	{
// 		supplier: 'NGK SPARK PLUGS (UK) LTD',
// 		claimNumber: 201113993,
// 	},
// 	{
// 		supplier: 'FUYAO GLASS INDUSTRY GROUP (2414)',
// 		claimNumber: 201119797,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201145534,
// 	},
// 	{
// 		supplier: 'FUYAO GLASS INDUSTRY GROUP (2414)',
// 		claimNumber: 201112912,
// 	},
// 	{
// 		supplier: 'LH GROUP (COLEMAN)',
// 		claimNumber: 201117171,
// 	},
// 	{
// 		supplier: 'GROTE INDUSTRIES EUROPE GMBH',
// 		claimNumber: 201119165,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201113358,
// 	},
// 	{
// 		supplier: 'SAFIM SPA',
// 		claimNumber: 201159648,
// 	},
// 	{
// 		supplier: 'SFC SOLUTIONS ITALY S.R.L.',
// 		claimNumber: 201119326,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201173108,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201173113,
// 	},
// 	{
// 		supplier: 'FUYAO GLASS INDUSTRY GROUP (2414)',
// 		claimNumber: 201140144,
// 	},
// 	{
// 		supplier: 'CATTON CONTROLS CABLES LTD',
// 		claimNumber: 201153365,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201144394,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201154821,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201173910,
// 	},
// 	{
// 		supplier: 'HITACHI AUTO SYSTEM (VAT)',
// 		claimNumber: 201129159,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201190268,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201134342,
// 	},
// 	{
// 		supplier: 'SFC SOLUTIONS ITALY S.R.L.',
// 		claimNumber: 201131449,
// 	},
// 	{
// 		supplier: 'CHELL ENGINEERING LTD',
// 		claimNumber: 201168268,
// 	},
// 	{
// 		supplier: 'SPICER DRIVESHAFT UK',
// 		claimNumber: 201129195,
// 	},
// 	{
// 		supplier: 'FUYAO GLASS INDUSTRY GROUP (2414)',
// 		claimNumber: 201141903,
// 	},
// 	{
// 		supplier: 'FUYAO GLASS INDUSTRY GROUP (2414)',
// 		claimNumber: 201154869,
// 	},
// 	{
// 		supplier: 'MANN + HUMMEL GMBH',
// 		claimNumber: 201138163,
// 	},
// 	{
// 		supplier: 'BECKER INDUSTRIAL COATINGS LTD',
// 		claimNumber: 201141874,
// 	},
// 	{
// 		supplier: 'FUYAO GLASS INDUSTRY GROUP (2414)',
// 		claimNumber: 201147134,
// 	},
// 	{
// 		supplier: 'Liuzhou RimD Machinery Company Ltd',
// 		claimNumber: 201156798,
// 	},
// 	{
// 		supplier: 'GIANETTI FAD WHEELS SRL',
// 		claimNumber: 201169963,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201153482,
// 	},
// 	{
// 		supplier: 'LINECROSS LIMITED',
// 		claimNumber: 201157520,
// 	},
// 	{
// 		supplier: 'RAYNE PRECISION ENGINEERING',
// 		claimNumber: 201174994,
// 	},
// 	{
// 		supplier: 'RAAL SA',
// 		claimNumber: 201160415,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201180110,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201184932,
// 	},
// 	{
// 		supplier: 'HENKEL LOCTITE ADHESIVES LTD',
// 		claimNumber: 201173046,
// 	},
// 	{
// 		supplier: 'GARRETT MOTION SARL',
// 		claimNumber: 201179788,
// 	},
// 	{
// 		supplier: 'FUYAO GLASS INDUSTRY GROUP (2414)',
// 		claimNumber: 201185642,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL LTD',
// 		claimNumber: 201189121,
// 	},
// 	{
// 		supplier: 'CAMLOC MOTION CONTROL LTD',
// 		claimNumber: 201193097,
// 	},
// 	{
// 		supplier: 'NEWFIELD FABRICATION CO LTD',
// 		claimNumber: 201185576,
// 	},
// 	{
// 		supplier: 'ECCO Safety Group',
// 		claimNumber: 201185683,
// 	},
// 	{
// 		supplier: 'Diametric Technical Ltd',
// 		claimNumber: 201182160,
// 	},
// 	{
// 		supplier: 'ECCO Safety Group',
// 		claimNumber: 201182130,
// 	},
// 	{
// 		supplier: 'BLACKWOOD ENG LTD (USD)',
// 		claimNumber: 201186860,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201185708,
// 	},
// 	{
// 		supplier: 'FUYAO GLASS INDUSTRY GROUP (2414)',
// 		claimNumber: 201216362,
// 	},
// 	{
// 		supplier: 'FUYAO GLASS INDUSTRY GROUP (2414)',
// 		claimNumber: 201196072,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201196082,
// 	},
// 	{
// 		supplier: 'PNJ ENGINEERING SERVICES LTD',
// 		claimNumber: 201192037,
// 	},
// 	{
// 		supplier: 'ECCO Safety Group',
// 		claimNumber: 201191930,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201196400,
// 	},
// 	{
// 		supplier: 'LINECROSS LIMITED',
// 		claimNumber: 201242333,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201197680,
// 	},
// 	{
// 		supplier: 'APEM COMPONENTS LTD',
// 		claimNumber: 201197377,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201187418,
// 	},
// 	{
// 		supplier: 'CAMLOC MOTION CONTROL LTD',
// 		claimNumber: 201207572,
// 	},
// 	{
// 		supplier: 'MP FILTRI UK LIMITED',
// 		claimNumber: 201200126,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201196115,
// 	},
// 	{
// 		supplier: 'FABLINK TANK SYSTEMS LIMITED',
// 		claimNumber: 201196413,
// 	},
// 	{
// 		supplier: 'XIANGSHAN TIANXING AUTO FITTINGS CO',
// 		claimNumber: 201216614,
// 	},
// 	{
// 		supplier: 'FUYAO GLASS INDUSTRY GROUP (2414)',
// 		claimNumber: 201191016,
// 	},
// 	{
// 		supplier: 'PIMSA AUTOMOTIVE UK LTD',
// 		claimNumber: 201195438,
// 	},
// 	{
// 		supplier: 'FUYAO GLASS INDUSTRY GROUP (2414)',
// 		claimNumber: 201212930,
// 	},
// 	{
// 		supplier: 'CAMLOC MOTION CONTROL LTD',
// 		claimNumber: 201257680,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201207139,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201201713,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201201393,
// 	},
// 	{
// 		supplier: 'ROBERT BOSCH LIMITED',
// 		claimNumber: 201210721,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201198247,
// 	},
// 	{
// 		supplier: 'ACOUSTAFOAM LTD',
// 		claimNumber: 201204200,
// 	},
// 	{
// 		supplier: 'TRELLEBORG SEALING SOLUTIONS',
// 		claimNumber: 201207076,
// 	},
// 	{
// 		supplier: 'NGK SPARK PLUGS (UK) LTD',
// 		claimNumber: 201208601,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201197512,
// 	},
// 	{
// 		supplier: 'LINECROSS LIMITED',
// 		claimNumber: 201196936,
// 	},
// 	{
// 		supplier: 'SUMMIT ENGINEERING',
// 		claimNumber: 201196024,
// 	},
// 	{
// 		supplier: 'LINECROSS LIMITED',
// 		claimNumber: 201205359,
// 	},
// 	{
// 		supplier: 'PIMSA OTOMOTIVE AS (EUR)',
// 		claimNumber: 201224689,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201224251,
// 	},
// 	{
// 		supplier: 'KAYLEE TRANSFERS LIMITED',
// 		claimNumber: 201205660,
// 	},
// 	{
// 		supplier: 'Parker Hannifin Corporation',
// 		claimNumber: 201219944,
// 	},
// 	{
// 		supplier: 'GIANETTI FAD WHEELS SRL',
// 		claimNumber: 201219823,
// 	},
// 	{
// 		supplier: 'ELANDERS LTD',
// 		claimNumber: 201227718,
// 	},
// 	{
// 		supplier: 'HYDAC TECHNOLOGY GMBH',
// 		claimNumber: 201223584,
// 	},
// 	{
// 		supplier: 'ELANDERS LTD',
// 		claimNumber: 201233273,
// 	},
// 	{
// 		supplier: 'BLACKWOOD ENG LTD (USD)',
// 		claimNumber: 201222391,
// 	},
// 	{
// 		supplier: 'GRAMMER AG',
// 		claimNumber: 201230804,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201233220,
// 	},
// 	{
// 		supplier: 'FUYAO GLASS INDUSTRY GROUP (2414)',
// 		claimNumber: 201249033,
// 	},
// 	{
// 		supplier: 'EATON HYDRAULICS',
// 		claimNumber: 201225485,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201225480,
// 	},
// 	{
// 		supplier: 'GRENVILLE ENGINEERING LTD',
// 		claimNumber: 201225443,
// 	},
// 	{
// 		supplier: 'BILL BENNETT ENGINEERING LTD',
// 		claimNumber: 201241535,
// 	},
// 	{
// 		supplier: 'ROBERT BOSCH LIMITED',
// 		claimNumber: 201236093,
// 	},
// 	{
// 		supplier: 'Donaldson Filtration Deutschland G',
// 		claimNumber: 201239938,
// 	},
// 	{
// 		supplier: 'National Högsäter Performance Pol',
// 		claimNumber: 201264036,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201282803,
// 	},
// 	{
// 		supplier: 'DANFOSS LTD',
// 		claimNumber: 201291624,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201285481,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201240628,
// 	},
// 	{
// 		supplier: 'RAAL SA',
// 		claimNumber: 201250398,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201272413,
// 	},
// 	{
// 		supplier: 'GATES HYDRAULICS  (EUR)',
// 		claimNumber: 201261597,
// 	},
// 	{
// 		supplier: 'SAFIM SPA',
// 		claimNumber: 201261632,
// 	},
// 	{
// 		supplier: 'KAYLEE TRANSFERS LIMITED',
// 		claimNumber: 201255575,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201268913,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201276601,
// 	},
// 	{
// 		supplier: 'FUYAO GLASS INDUSTRY GROUP (2414)',
// 		claimNumber: 201239481,
// 	},
// 	{
// 		supplier: 'Parker Hannifin Corporation',
// 		claimNumber: 201312746,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201252247,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201280031,
// 	},
// 	{
// 		supplier: 'THOMSON PETTIE LTD',
// 		claimNumber: 201285608,
// 	},
// 	{
// 		supplier: 'FABLINK TANK SYSTEMS LIMITED',
// 		claimNumber: 201258217,
// 	},
// 	{
// 		supplier: 'RAAL SA',
// 		claimNumber: 201253022,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201290091,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201269715,
// 	},
// 	{
// 		supplier: 'FRANKLIN SILENCERS LIMITED',
// 		claimNumber: 201281992,
// 	},
// 	{
// 		supplier: 'FASTER S.R.L',
// 		claimNumber: 201265453,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201269407,
// 	},
// 	{
// 		supplier: 'CASCADE (UK) LTD',
// 		claimNumber: 201269883,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201279318,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201335442,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201295540,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201333144,
// 	},
// 	{
// 		supplier: 'FUYAO GLASS INDUSTRY GROUP (2414)',
// 		claimNumber: 201275275,
// 	},
// 	{
// 		supplier: 'DOGA ITALIA SRL',
// 		claimNumber: 201274213,
// 	},
// 	{
// 		supplier: 'STAUFF UK',
// 		claimNumber: 201267739,
// 	},
// 	{
// 		supplier: 'BORG WARNER COOL. SYS. GMBH',
// 		claimNumber: 201297834,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201346400,
// 	},
// 	{
// 		supplier: 'Parker Hannifin Corporation',
// 		claimNumber: 201289140,
// 	},
// 	{
// 		supplier: 'SUMMIT ENGINEERING',
// 		claimNumber: 201291143,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201291095,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201291830,
// 	},
// 	{
// 		supplier: 'ROBERT BOSCH LIMITED',
// 		claimNumber: 201288538,
// 	},
// 	{
// 		supplier: 'ORLACO PRODUCTS BV (EURO)',
// 		claimNumber: 201291939,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201293060,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201351453,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201286079,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201307595,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201289142,
// 	},
// 	{
// 		supplier: 'HONGSHENG THERMAL SYSTEM LTD',
// 		claimNumber: 201325143,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201308962,
// 	},
// 	{
// 		supplier: 'RAYNE PRECISION ENGINEERING',
// 		claimNumber: 201286587,
// 	},
// 	{
// 		supplier: 'BURGAFLEX UK LTD',
// 		claimNumber: 201291100,
// 	},
// 	{
// 		supplier: 'Parker Hannifin Corporation',
// 		claimNumber: 201319974,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201301377,
// 	},
// 	{
// 		supplier: 'SOFIMA IND. FILTERS (SHANGHAI)',
// 		claimNumber: 201303835,
// 	},
// 	{
// 		supplier: 'DONALDSON ITALIA SRL',
// 		claimNumber: 201309975,
// 	},
// 	{
// 		supplier: 'FUYAO GLASS INDUSTRY GROUP (2414)',
// 		claimNumber: 201306637,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201306714,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201306687,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201302696,
// 	},
// 	{
// 		supplier: 'MOVEERO',
// 		claimNumber: 201312187,
// 	},
// 	{
// 		supplier: 'JIANGSU FEIDA BAOKAI ELEC(USD)',
// 		claimNumber: 201310629,
// 	},
// 	{
// 		supplier: 'RAYNE PRECISION ENGINEERING',
// 		claimNumber: 201299852,
// 	},
// 	{
// 		supplier: 'SAFIM SPA',
// 		claimNumber: 201310076,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201305201,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201329180,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL LTD',
// 		claimNumber: 201307204,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201309642,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201351580,
// 	},
// 	{
// 		supplier: 'DC WOODHEAD & PARTNERS LTD',
// 		claimNumber: 201351754,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201351524,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201351602,
// 	},
// 	{
// 		supplier: 'SGH (MOULDS)  LIMITED',
// 		claimNumber: 201351734,
// 	},
// 	{
// 		supplier: 'CHELL ENGINEERING LTD',
// 		claimNumber: 201351774,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201351770,
// 	},
// 	{
// 		supplier: 'BURNSIDE EUROCYL LTD',
// 		claimNumber: 201326850,
// 	},
// 	{
// 		supplier: 'BECKER INDUSTRIAL COATINGS LTD',
// 		claimNumber: 201327072,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201326957,
// 	},
// 	{
// 		supplier: 'PEREI LIGHTING',
// 		claimNumber: 201331849,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201348000,
// 	},
// 	{
// 		supplier: 'PFEDA SYNTHETICS PVT LTD',
// 		claimNumber: 201330500,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201330752,
// 	},
// 	{
// 		supplier: 'THOMSON PETTIE LTD',
// 		claimNumber: 201340564,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201340536,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201346856,
// 	},
// 	{
// 		supplier: 'GATES HYDRAULICS  (EUR)',
// 		claimNumber: 201344061,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201344017,
// 	},
// 	{
// 		supplier: 'CHELL ENGINEERING LTD',
// 		claimNumber: 201344033,
// 	},
// 	{
// 		supplier: 'BILL BENNETT ENGINEERING LTD',
// 		claimNumber: 201356156,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201347017,
// 	},
// 	{
// 		supplier: 'LINECROSS LIMITED',
// 		claimNumber: 201349046,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201355721,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201356926,
// 	},
// 	{
// 		supplier: 'BECKER INDUSTRIAL COATINGS LTD',
// 		claimNumber: 201353108,
// 	},
// 	{
// 		supplier: 'ECCO Safety Group',
// 		claimNumber: 201352841,
// 	},
// 	{
// 		supplier: 'Not assigned',
// 		claimNumber: 201354949,
// 	},
// 	{
// 		supplier: 'AAMP GLOBAL LTD (USD)',
// 		claimNumber: 201356270,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201127805,
// 	},
// 	{
// 		supplier: 'CLYDESDALE JONES',
// 		claimNumber: 201206112,
// 	},
// 	{
// 		supplier: 'OFFICINE METALLURGICHE (EUR)',
// 		claimNumber: 201205972,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201242199,
// 	},
// 	{
// 		supplier: 'FUYAO GLASS INDUSTRY GROUP (2414)',
// 		claimNumber: 201357877,
// 	},
// 	{
// 		supplier: 'LPL SYSTEMS',
// 		claimNumber: 201327995,
// 	},
// 	{
// 		supplier: 'KAT MEKATRONIK ÚRÚNLERI A.S',
// 		claimNumber: 201243361,
// 	},
// 	{
// 		supplier: 'ALDRIDGE FABRICATIONS (AF) LTD',
// 		claimNumber: 201290285,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201112106,
// 	},
// 	{
// 		supplier: 'SFC SOLUTIONS ITALY S.R.L.',
// 		claimNumber: 201112029,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201112084,
// 	},
// 	{
// 		supplier: 'BURNSIDE EUROCYL LTD',
// 		claimNumber: 201112901,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201140217,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201140163,
// 	},
// 	{
// 		supplier: 'SAFIM SPA',
// 		claimNumber: 201140262,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201140236,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201168492,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201129803,
// 	},
// 	{
// 		supplier: 'SAFIM SPA',
// 		claimNumber: 201201028,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201156009,
// 	},
// 	{
// 		supplier: 'BECKER INDUSTRIAL COATINGS LTD',
// 		claimNumber: 201144038,
// 	},
// 	{
// 		supplier: 'RAYNE PRECISION ENGINEERING',
// 		claimNumber: 201154989,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201175353,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201149357,
// 	},
// 	{
// 		supplier: 'CAMLOC MOTION CONTROL LTD',
// 		claimNumber: 201161609,
// 	},
// 	{
// 		supplier: 'LAP ELECTRICAL LIMITED',
// 		claimNumber: 201161685,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201163898,
// 	},
// 	{
// 		supplier: 'NGK SPARK PLUGS (UK) LTD',
// 		claimNumber: 201170383,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201175714,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201187768,
// 	},
// 	{
// 		supplier: 'MP FILTRI UK LIMITED',
// 		claimNumber: 201191169,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201204277,
// 	},
// 	{
// 		supplier: 'METALLINK FLUID POWER (EUR)',
// 		claimNumber: 201206883,
// 	},
// 	{
// 		supplier: 'MICHELIN TYRE PLC (EUR)',
// 		claimNumber: 201264524,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201203442,
// 	},
// 	{
// 		supplier: 'THERMOTEC PLASTICS LIMITED',
// 		claimNumber: 201203368,
// 	},
// 	{
// 		supplier: 'FABLINK TOOLSPEC LTD',
// 		claimNumber: 201239668,
// 	},
// 	{
// 		supplier: 'KINGSPAN WATER & ENERGY LTD',
// 		claimNumber: 201218057,
// 	},
// 	{
// 		supplier: 'RAYNE PRECISION ENGINEERING',
// 		claimNumber: 201262036,
// 	},
// 	{
// 		supplier: 'MANPLAS LTD',
// 		claimNumber: 201232403,
// 	},
// 	{
// 		supplier: 'BECKER INDUSTRIAL COATINGS LTD',
// 		claimNumber: 201232390,
// 	},
// 	{
// 		supplier: 'FIL FILTRE LTD STI (EUR)',
// 		claimNumber: 201232398,
// 	},
// 	{
// 		supplier: 'HENKEL LOCTITE ADHESIVES LTD',
// 		claimNumber: 201248147,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201242304,
// 	},
// 	{
// 		supplier: 'ORLACO PRODUCTS BV (EURO)',
// 		claimNumber: 201288320,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201253587,
// 	},
// 	{
// 		supplier: 'GRENVILLE ENGINEERING LTD',
// 		claimNumber: 201256199,
// 	},
// 	{
// 		supplier: 'GRENVILLE ENGINEERING LTD',
// 		claimNumber: 201256237,
// 	},
// 	{
// 		supplier: 'GRENVILLE ENGINEERING LTD',
// 		claimNumber: 201260644,
// 	},
// 	{
// 		supplier: 'ZF FRIEDRICHSHAFEN AG (EUR)',
// 		claimNumber: 201264532,
// 	},
// 	{
// 		supplier: 'CATTON CONTROLS CABLES LTD',
// 		claimNumber: 201279560,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201307206,
// 	},
// 	{
// 		supplier: 'L.A.P ELECTRICAL LIMITED',
// 		claimNumber: 201290830,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201291413,
// 	},
// 	{
// 		supplier: 'METALLINK FLUID POWER (EUR)',
// 		claimNumber: 201290717,
// 	},
// 	{
// 		supplier: 'LAYSTALL ENG (GBP) CO LTD',
// 		claimNumber: 201314423,
// 	},
// 	{
// 		supplier: 'BLACKWOOD ENG LTD (USD)',
// 		claimNumber: 201327641,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201311353,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201329671,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201336883,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201344372,
// 	},
// 	{
// 		supplier: 'CHELL ENGINEERING LTD',
// 		claimNumber: 201342617,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201351867,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201350573,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201352368,
// 	},
// 	{
// 		supplier: 'MERCURY MATERIAL MANGMNT. LTD',
// 		claimNumber: 201348772,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201350035,
// 	},
// 	{
// 		supplier: 'ROCKINGER AGRICULTURE GMBH',
// 		claimNumber: 201355592,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201085317,
// 	},
// 	{
// 		supplier: 'ACOUSTAFOAM LTD',
// 		claimNumber: 201079221,
// 	},
// 	{
// 		supplier: 'VALEO MAGYARORSZAG KFT (EUR)',
// 		claimNumber: 201142187,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201122181,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201107633,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201106991,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201151362,
// 	},
// 	{
// 		supplier: 'HUSCO INTERNATIONAL PARTNERS LLP',
// 		claimNumber: 201133970,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201139314,
// 	},
// 	{
// 		supplier: 'GATES UNITTA INDIA COMPANY PVT LTD',
// 		claimNumber: 201138726,
// 	},
// 	{
// 		supplier: 'GRAMMER AG',
// 		claimNumber: 201167024,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201186620,
// 	},
// 	{
// 		supplier: 'LH GROUP (COLEMAN)',
// 		claimNumber: 201209887,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201189077,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201184802,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201189063,
// 	},
// 	{
// 		supplier: 'KINGSPAN WATER & ENERGY LTD',
// 		claimNumber: 201196494,
// 	},
// 	{
// 		supplier: 'GROTE INDUSTRIES EUROPE GMBH',
// 		claimNumber: 201197222,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201203866,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201204492,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201214893,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201217348,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201263802,
// 	},
// 	{
// 		supplier: 'SSI TECHNOLOGIES INC (EUR)',
// 		claimNumber: 201280783,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201277608,
// 	},
// 	{
// 		supplier: 'MERCURY MATERIAL MANGMNT. LTD',
// 		claimNumber: 201231501,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201237611,
// 	},
// 	{
// 		supplier: 'BONY POLYMERS (P) LTD',
// 		claimNumber: 201243817,
// 	},
// 	{
// 		supplier: 'BONY POLYMERS (P) LTD',
// 		claimNumber: 201237612,
// 	},
// 	{
// 		supplier: 'Parker Hannifin Corporation',
// 		claimNumber: 201269414,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201268751,
// 	},
// 	{
// 		supplier: 'OFFICINE METALLURGICHE (EUR)',
// 		claimNumber: 201246185,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD  (GBP)',
// 		claimNumber: 201244423,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD  (GBP)',
// 		claimNumber: 201248124,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201253561,
// 	},
// 	{
// 		supplier: 'RAAL SA',
// 		claimNumber: 201300806,
// 	},
// 	{
// 		supplier: 'LINECROSS COMPOSITES LTD',
// 		claimNumber: 201275738,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201290455,
// 	},
// 	{
// 		supplier: 'DONALDSON FILTER COMP (EUR)',
// 		claimNumber: 201290477,
// 	},
// 	{
// 		supplier: 'NYLACAST LIMITED',
// 		claimNumber: 201325571,
// 	},
// 	{
// 		supplier: 'ALLIED ENTERPRISES INC.',
// 		claimNumber: 201328374,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201325533,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201341033,
// 	},
// 	{
// 		supplier: 'VEPS INDUSTRIES PVT LTD',
// 		claimNumber: 201333291,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS (USD) LTD',
// 		claimNumber: 201337656,
// 	},
// 	{
// 		supplier: 'LH GROUP (COLEMAN)',
// 		claimNumber: 201351998,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201325024,
// 	},
// 	{
// 		supplier: 'LH GROUP (COLEMAN)',
// 		claimNumber: 201342354,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201314829,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS (USD) LTD',
// 		claimNumber: 201312880,
// 	},
// 	{
// 		supplier: 'LH GROUP (COLEMAN)',
// 		claimNumber: 201342325,
// 	},
// 	{
// 		supplier: 'SSI TECHNOLOGIES INC (EUR)',
// 		claimNumber: 201343030,
// 	},
// 	{
// 		supplier: 'LH GROUP (COLEMAN)',
// 		claimNumber: 201350312,
// 	},
// 	{
// 		supplier: 'NORLEC SHEET METAL LTD',
// 		claimNumber: 201343078,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201345174,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201327215,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201340238,
// 	},
// 	{
// 		supplier: 'BURGAFLEX UK LTD',
// 		claimNumber: 201303047,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201324328,
// 	},
// 	{
// 		supplier: 'GRENVILLE ENGINEERING LTD',
// 		claimNumber: 201076398,
// 	},
// 	{
// 		supplier: 'HELLA FAHRZEUGTEILE GMBH (EUR)',
// 		claimNumber: 201075273,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201089155,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201070431,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201073573,
// 	},
// 	{
// 		supplier: 'HELLA LTD (EUR)',
// 		claimNumber: 201065796,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL (Europe) GmbH',
// 		claimNumber: 201071117,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201092716,
// 	},
// 	{
// 		supplier: 'BILL BENNETT ENGINEERING LTD',
// 		claimNumber: 201067314,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201071739,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201100863,
// 	},
// 	{
// 		supplier: 'NATIONWIDE BEARINGS',
// 		claimNumber: 201100888,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201071775,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201084268,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201084380,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS',
// 		claimNumber: 201108148,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201107547,
// 	},
// 	{
// 		supplier: 'BENSON COMPONENTS LTD',
// 		claimNumber: 201088770,
// 	},
// 	{
// 		supplier: 'KINGSPAN WATER & ENERGY LTD',
// 		claimNumber: 201110100,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201111651,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL LTD',
// 		claimNumber: 201138532,
// 	},
// 	{
// 		supplier: 'LH GROUP (COLEMAN)',
// 		claimNumber: 201138317,
// 	},
// 	{
// 		supplier: 'SUMMIT ENGINEERING',
// 		claimNumber: 201138350,
// 	},
// 	{
// 		supplier: 'GRENVILLE ENGINEERING LTD',
// 		claimNumber: 201138342,
// 	},
// 	{
// 		supplier: 'BECKER INDUSTRIAL COATINGS LTD',
// 		claimNumber: 201138283,
// 	},
// 	{
// 		supplier: 'HENKEL LOCTITE ADHESIVES LTD',
// 		claimNumber: 201098612,
// 	},
// 	{
// 		supplier: 'AKWEL RUDNIK CZECH REP. (USD)',
// 		claimNumber: 201130669,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201071510,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201134940,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201079607,
// 	},
// 	{
// 		supplier: 'OFFICINE METALLURGICHE (EUR)',
// 		claimNumber: 201097558,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS',
// 		claimNumber: 201100602,
// 	},
// 	{
// 		supplier: 'SBE SOCIETA BULLONERIA(GBP)',
// 		claimNumber: 201133961,
// 	},
// 	{
// 		supplier: 'FUYAO GLASS INDUSTRY GROUP (2414)',
// 		claimNumber: 201117419,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201117888,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201128030,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201128036,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201128022,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201181166,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201139829,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201157705,
// 	},
// 	{
// 		supplier: 'EPCO PRODUCTS INC',
// 		claimNumber: 201204501,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201157660,
// 	},
// 	{
// 		supplier: 'RING AUTOMOTIVE LTD',
// 		claimNumber: 201187851,
// 	},
// 	{
// 		supplier: 'RAYNE PRECISION ENGINEERING',
// 		claimNumber: 201159938,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201183784,
// 	},
// 	{
// 		supplier: 'KINGSPAN WATER & ENERGY LTD',
// 		claimNumber: 201210228,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201206496,
// 	},
// 	{
// 		supplier: 'MAHLE Electric Drives Slovenija d.o',
// 		claimNumber: 201206503,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201211946,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201208761,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201197800,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201234063,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201254929,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201240216,
// 	},
// 	{
// 		supplier: 'FREUDENBERG SEALING TECHNOLOGIES',
// 		claimNumber: 201239594,
// 	},
// 	{
// 		supplier: 'DK PACKING AND CASEMAKING LTD',
// 		claimNumber: 201240249,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201288922,
// 	},
// 	{
// 		supplier: 'GRENVILLE ENGINEERING LTD',
// 		claimNumber: 201288962,
// 	},
// 	{
// 		supplier: 'MCAM SURLON INDIA LTD',
// 		claimNumber: 201289753,
// 	},
// 	{
// 		supplier: 'AIRFAWN CONSULTANTS LTD',
// 		claimNumber: 201288930,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201318117,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201325518,
// 	},
// 	{
// 		supplier: 'GRENVILLE ENGINEERING LTD',
// 		claimNumber: 201316554,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201269422,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201268816,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201268805,
// 	},
// 	{
// 		supplier: 'GRENVILLE ENGINEERING LTD',
// 		claimNumber: 201269400,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD  (GBP)',
// 		claimNumber: 201268804,
// 	},
// 	{
// 		supplier: 'SSI TECHNOLOGIES INC (EUR)',
// 		claimNumber: 201274024,
// 	},
// 	{
// 		supplier: 'KINGSPAN WATER & ENERGY LTD',
// 		claimNumber: 201274031,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201274029,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201273989,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201274041,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201345122,
// 	},
// 	{
// 		supplier: 'BENSON COMPONENTS LTD',
// 		claimNumber: 201290918,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201325586,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201341641,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201341671,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201355163,
// 	},
// 	{
// 		supplier: 'LH GROUP (COLEMAN)',
// 		claimNumber: 201345181,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201348268,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201174900,
// 	},
// 	{
// 		supplier: 'MILLFIELD COMPOSITES LIMITED',
// 		claimNumber: 201280314,
// 	},
// 	{
// 		supplier: 'MILLFIELD COMPOSITES LIMITED',
// 		claimNumber: 201194388,
// 	},
// 	{
// 		supplier: 'ECAM ENGINEERING LTD',
// 		claimNumber: 201194306,
// 	},
// 	{
// 		supplier: 'PERMOID INDUSTRIES LTD',
// 		claimNumber: 201221758,
// 	},
// 	{
// 		supplier: 'ECAM ENGINEERING LTD',
// 		claimNumber: 201221650,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201221749,
// 	},
// 	{
// 		supplier: 'ALLIED ENTERPRISES INC.',
// 		claimNumber: 201339517,
// 	},
// 	{
// 		supplier: 'BORG WARNER AUTOMOTIVE',
// 		claimNumber: 201339661,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201216806,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201216815,
// 	},
// 	{
// 		supplier: 'MAHLE ELECTRIC DRIVES TAICANG CO LT',
// 		claimNumber: 201238002,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201304238,
// 	},
// 	{
// 		supplier: 'XL ENGINEERING LTD',
// 		claimNumber: 201345275,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201164905,
// 	},
// 	{
// 		supplier: 'WELDED PRESSWORK LTD',
// 		claimNumber: 201357223,
// 	},
// 	{
// 		supplier: 'BONY POLYMERS (P) LTD',
// 		claimNumber: 201353102,
// 	},
// 	{
// 		supplier: 'DANA ITALIA SPA',
// 		claimNumber: 201353450,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201353046,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201351767,
// 	},
// 	{
// 		supplier: 'THOMSON PETTIE LTD',
// 		claimNumber: 201353386,
// 	},
// 	{
// 		supplier: 'HADLEY HARGREAVES LTD',
// 		claimNumber: 201351697,
// 	},
// 	{
// 		supplier: 'BECKER INDUSTRIAL COATINGS LTD',
// 		claimNumber: 201351699,
// 	},
// 	{
// 		supplier: 'GIANETTI FAD WHEELS SRL',
// 		claimNumber: 201336815,
// 	},
// 	{
// 		supplier: 'KOHLER LOMBARDINI Srl',
// 		claimNumber: 201272185,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201305252,
// 	},
// 	{
// 		supplier: 'COBO SPA',
// 		claimNumber: 201303916,
// 	},
// 	{
// 		supplier: 'THOMSON PETTIE LTD',
// 		claimNumber: 201303952,
// 	},
// 	{
// 		supplier: 'FUYAO GLASS INDUSTRY GROUP (2414)',
// 		claimNumber: 201140820,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201159741,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201159718,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201079278,
// 	},
// 	{
// 		supplier: 'GREENE,TWEED & CO LTD',
// 		claimNumber: 201085323,
// 	},
// 	{
// 		supplier: 'MITCHELL DIESEL LTD (EUR)',
// 		claimNumber: 201152276,
// 	},
// 	{
// 		supplier: 'SFC SOLUTIONS ITALY S.R.L.',
// 		claimNumber: 201155965,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201218063,
// 	},
// 	{
// 		supplier: 'KOHLER LOMBARDINI Srl',
// 		claimNumber: 201171965,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201171803,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201276237,
// 	},
// 	{
// 		supplier: 'AALBERTS SURFACE TECH. HEAT LTD',
// 		claimNumber: 201179647,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD  (GBP)',
// 		claimNumber: 201201409,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201190284,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201181385,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201195099,
// 	},
// 	{
// 		supplier: 'PRITEX LTD',
// 		claimNumber: 201188811,
// 	},
// 	{
// 		supplier: 'COBO SPA',
// 		claimNumber: 201193088,
// 	},
// 	{
// 		supplier: 'COBO SPA',
// 		claimNumber: 201193124,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201208245,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201242977,
// 	},
// 	{
// 		supplier: 'GATE 7 LTD (GBP)',
// 		claimNumber: 201243605,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201243604,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201222495,
// 	},
// 	{
// 		supplier: 'JOHNSON ELECTRIC INTER. AG',
// 		claimNumber: 201215667,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201231033,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201230798,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201230832,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201231016,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201230814,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201230769,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD  (GBP)',
// 		claimNumber: 201232484,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201307779,
// 	},
// 	{
// 		supplier: 'ELANDERS LTD',
// 		claimNumber: 201219444,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201255189,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201264661,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201281317,
// 	},
// 	{
// 		supplier: 'DANFOSS DISTRIBUTION II A/S',
// 		claimNumber: 201298930,
// 	},
// 	{
// 		supplier: 'JOHNSON ELECTRIC INTER. AG',
// 		claimNumber: 201270302,
// 	},
// 	{
// 		supplier: 'ASHTREE VISION AND SAFETY LTD',
// 		claimNumber: 201274356,
// 	},
// 	{
// 		supplier: 'COBO SPA',
// 		claimNumber: 201343215,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201273866,
// 	},
// 	{
// 		supplier: 'EASTERN ATTACHMENTS LIMITED',
// 		claimNumber: 201300828,
// 	},
// 	{
// 		supplier: 'ELANDERS LTD',
// 		claimNumber: 201333043,
// 	},
// 	{
// 		supplier: 'ASHTREE VISION AND SAFETY LTD',
// 		claimNumber: 201318311,
// 	},
// 	{
// 		supplier: 'ASHTREE VISION AND SAFETY LTD',
// 		claimNumber: 201340675,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201353081,
// 	},
// 	{
// 		supplier: 'ROTATIONAL MOULDINGS LTD',
// 		claimNumber: 201353091,
// 	},
// 	{
// 		supplier: 'BECKER INDUSTRIAL COATINGS LTD',
// 		claimNumber: 201351576,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201351671,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201351640,
// 	},
// 	{
// 		supplier: 'LH GROUP (COLEMAN)',
// 		claimNumber: 201351643,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201351804,
// 	},
// 	{
// 		supplier: 'BECKER INDUSTRIAL COATINGS LTD',
// 		claimNumber: 201351592,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201330994,
// 	},
// 	{
// 		supplier: 'LINECROSS LIMITED',
// 		claimNumber: 201346843,
// 	},
// 	{
// 		supplier: 'PRIMARY FLUID POWER',
// 		claimNumber: 201346832,
// 	},
// 	{
// 		supplier: 'GATE 7 LTD (GBP)',
// 		claimNumber: 201347441,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201205267,
// 	},
// 	{
// 		supplier: 'KABY ENGINEERS LTD',
// 		claimNumber: 201205327,
// 	},
// 	{
// 		supplier: 'LPL SYSTEMS',
// 		claimNumber: 201205259,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201136541,
// 	},
// 	{
// 		supplier: 'HELLA LTD (EUR)',
// 		claimNumber: 201136471,
// 	},
// 	{
// 		supplier: 'NORLEC SHEET METAL LTD',
// 		claimNumber: 201153423,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201153152,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201153377,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201237151,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201293471,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201340764,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201340654,
// 	},
// 	{
// 		supplier: 'D LA PORTE SOEHNE GMBH',
// 		claimNumber: 201134451,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201227020,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD  (GBP)',
// 		claimNumber: 201222748,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201183079,
// 	},
// 	{
// 		supplier: 'RAYNE PRECISION ENGINEERING',
// 		claimNumber: 201180498,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201181153,
// 	},
// 	{
// 		supplier: 'KAB SEATING LIMITED (GBP)',
// 		claimNumber: 201217923,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201232152,
// 	},
// 	{
// 		supplier: 'LINECROSS LIMITED',
// 		claimNumber: 201217360,
// 	},
// 	{
// 		supplier: 'ROTATIONAL MOULDINGS LTD',
// 		claimNumber: 201217378,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201217363,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201217364,
// 	},
// 	{
// 		supplier: 'KAYLEE TRANSFERS LIMITED',
// 		claimNumber: 201217410,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201232150,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201327735,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201270765,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201275114,
// 	},
// 	{
// 		supplier: 'EATON INDUSTRIES LP',
// 		claimNumber: 201275084,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201275577,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD  (GBP)',
// 		claimNumber: 201261969,
// 	},
// 	{
// 		supplier: 'DANFOSS DISTRIBUTION II A/S',
// 		claimNumber: 201326649,
// 	},
// 	{
// 		supplier: 'COBO SPA',
// 		claimNumber: 201326640,
// 	},
// 	{
// 		supplier: 'KAYLEE TRANSFERS LIMITED',
// 		claimNumber: 201326673,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201349626,
// 	},
// 	{
// 		supplier: 'HAPPICH VEHICLE (EUR) & IND',
// 		claimNumber: 201323781,
// 	},
// 	{
// 		supplier: 'DANFOSS DISTRIBUTION II A/S',
// 		claimNumber: 201327866,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201327717,
// 	},
// 	{
// 		supplier: 'XL ENGINEERING LTD',
// 		claimNumber: 201356430,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS (EUR) LTD',
// 		claimNumber: 201220814,
// 	},
// 	{
// 		supplier: 'LINECROSS LIMITED',
// 		claimNumber: 201220830,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD  (GBP)',
// 		claimNumber: 201220779,
// 	},
// 	{
// 		supplier: 'COBO SPA',
// 		claimNumber: 201220846,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201220829,
// 	},
// 	{
// 		supplier: 'HELLA LTD (EUR)',
// 		claimNumber: 201121668,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201145835,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201272574,
// 	},
// 	{
// 		supplier: 'UNO Minda Limited',
// 		claimNumber: 201096199,
// 	},
// 	{
// 		supplier: 'UNO Minda Limited',
// 		claimNumber: 201121468,
// 	},
// 	{
// 		supplier: 'PEREI LIGHTING',
// 		claimNumber: 201136736,
// 	},
// 	{
// 		supplier: 'ZUIDBERG FRONTLINE SYSTEMS',
// 		claimNumber: 201263381,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201241247,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201241273,
// 	},
// 	{
// 		supplier: 'DONALDSON SAS (EUR)',
// 		claimNumber: 201259780,
// 	},
// 	{
// 		supplier: 'UNO Minda Limited',
// 		claimNumber: 201259789,
// 	},
// 	{
// 		supplier: 'ELANDERS LTD',
// 		claimNumber: 201263789,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201082943,
// 	},
// 	{
// 		supplier: 'MP FILTRI UK LIMITED',
// 		claimNumber: 201080613,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201270857,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201270858,
// 	},
// 	{
// 		supplier: 'DONALDSON ITALIA SRL',
// 		claimNumber: 201151686,
// 	},
// 	{
// 		supplier: 'GKN AUTOSTRUCTURES LTD',
// 		claimNumber: 201089716,
// 	},
// 	{
// 		supplier: 'KUWAIT PETROLEUM (BELGIUM) NV',
// 		claimNumber: 201106621,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS (USD) LTD',
// 		claimNumber: 201113785,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201165843,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201157336,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201299221,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201270731,
// 	},
// 	{
// 		supplier: 'PANCHAL MANUFACTURING CO PVT LTD',
// 		claimNumber: 201236051,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201270716,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201270722,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201270721,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201270642,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201136740,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201270724,
// 	},
// 	{
// 		supplier: 'DK PACKING AND CASEMAKING LTD',
// 		claimNumber: 201182732,
// 	},
// 	{
// 		supplier: 'SAFIM SPA',
// 		claimNumber: 201171558,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201181059,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201173874,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201153024,
// 	},
// 	{
// 		supplier: 'EUROTEC INTERNATIONAL PLC',
// 		claimNumber: 201239651,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201239636,
// 	},
// 	{
// 		supplier: 'KINGSPAN WATER & ENERGY LTD',
// 		claimNumber: 201160491,
// 	},
// 	{
// 		supplier: 'DONALDSON FILTER COMP (EUR)',
// 		claimNumber: 201186348,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201186366,
// 	},
// 	{
// 		supplier: 'THERMOTEC PLASTICS LIMITED',
// 		claimNumber: 201292439,
// 	},
// 	{
// 		supplier: 'IRACROFT LTD (GBP)',
// 		claimNumber: 201149100,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201152956,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201152924,
// 	},
// 	{
// 		supplier: 'ELANDERS LTD',
// 		claimNumber: 201180574,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201148219,
// 	},
// 	{
// 		supplier: 'CURL MODUCONS (DIV OF PERMOID)',
// 		claimNumber: 201148249,
// 	},
// 	{
// 		supplier: 'ARGO-HYTOS LTD',
// 		claimNumber: 201320345,
// 	},
// 	{
// 		supplier: 'UNO Minda Limited',
// 		claimNumber: 201260905,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201270610,
// 	},
// 	{
// 		supplier: 'SFC SOLUTIONS ITALY S.R.L.',
// 		claimNumber: 201233645,
// 	},
// 	{
// 		supplier: 'ELANDERS LTD',
// 		claimNumber: 201236826,
// 	},
// 	{
// 		supplier: 'GRAZIANO TRASMISSIONI UK LTD',
// 		claimNumber: 201249624,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201270655,
// 	},
// 	{
// 		supplier: 'DIPTY LAL JUDGE MAL PVT (INR)',
// 		claimNumber: 201348927,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201261751,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201237118,
// 	},
// 	{
// 		supplier: 'BURGAFLEX UK LTD',
// 		claimNumber: 201306169,
// 	},
// 	{
// 		supplier: 'GRAZIANO TRASMISSIONI UK LTD',
// 		claimNumber: 201322317,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201241445,
// 	},
// 	{
// 		supplier: 'GKN AUTOSTRUCTURES LTD',
// 		claimNumber: 201251105,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201251115,
// 	},
// 	{
// 		supplier: 'DROMONE ENGINEERING LTD',
// 		claimNumber: 201194888,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201222361,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201212689,
// 	},
// 	{
// 		supplier: 'FREUDENBERG SEALING TECHNOLOGIES',
// 		claimNumber: 201321808,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201257259,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201233728,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201256693,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201269310,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201329368,
// 	},
// 	{
// 		supplier: 'LINECROSS COMPOSITES LTD',
// 		claimNumber: 201270492,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201270429,
// 	},
// 	{
// 		supplier: 'GRAZIANO TRASMISSIONI UK LTD',
// 		claimNumber: 201273807,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201281806,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201290864,
// 	},
// 	{
// 		supplier: 'WALTERSCHEID GMBH (EUR)',
// 		claimNumber: 201302897,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL (Europe) GmbH',
// 		claimNumber: 201305936,
// 	},
// 	{
// 		supplier: 'KNOTT-AVONRIDE LIMITED',
// 		claimNumber: 201343742,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201303480,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201296404,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201315496,
// 	},
// 	{
// 		supplier: 'GRAZIANO TRASMISSIONI UK LTD',
// 		claimNumber: 201351751,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201351752,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201355284,
// 	},
// 	{
// 		supplier: 'LINECROSS LIMITED',
// 		claimNumber: 201355027,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201348676,
// 	},
// 	{
// 		supplier: 'PLATINUM INTERNATIONAL LTD',
// 		claimNumber: 201111824,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201111740,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201159408,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201218555,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201230179,
// 	},
// 	{
// 		supplier: 'ELANDERS LTD',
// 		claimNumber: 201268708,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201311728,
// 	},
// 	{
// 		supplier: 'PFEDA SYNTHETICS PVT LTD',
// 		claimNumber: 201235551,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201325608,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201244937,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201244969,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201234724,
// 	},
// 	{
// 		supplier: 'WALTERSCHEID GMBH (EUR)',
// 		claimNumber: 201203386,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201230928,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL LTD',
// 		claimNumber: 201306362,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201313049,
// 	},
// 	{
// 		supplier: 'TECNI-FORM LTD',
// 		claimNumber: 201286467,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201295088,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201309719,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201297410,
// 	},
// 	{
// 		supplier: 'SOUTHCO MANUFACTURING LTD',
// 		claimNumber: 201297362,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201298664,
// 	},
// 	{
// 		supplier: 'ELANDERS LTD',
// 		claimNumber: 201297374,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201345302,
// 	},
// 	{
// 		supplier: 'GRAZIANO TRANSMISSIONI S.p.A',
// 		claimNumber: 201343068,
// 	},
// 	{
// 		supplier: 'EUROTEC INTERNATIONAL PLC',
// 		claimNumber: 201343025,
// 	},
// 	{
// 		supplier: 'LAM SPA  (EUR)',
// 		claimNumber: 201343038,
// 	},
// 	{
// 		supplier: 'ECCO Safety Group',
// 		claimNumber: 201342944,
// 	},
// 	{
// 		supplier: 'BORG WARNER COOL. SYS. GMBH',
// 		claimNumber: 201154857,
// 	},
// 	{
// 		supplier: 'DENSO MARSTON LTD.',
// 		claimNumber: 201184635,
// 	},
// 	{
// 		supplier: 'BORG WARNER COOL. SYS. GMBH',
// 		claimNumber: 201154864,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL LTD',
// 		claimNumber: 201143229,
// 	},
// 	{
// 		supplier: 'MP FILTRI UK LIMITED',
// 		claimNumber: 201257086,
// 	},
// 	{
// 		supplier: 'GRAZIANO TRANSMISSIONI S.p.A',
// 		claimNumber: 201272253,
// 	},
// 	{
// 		supplier: 'SCHAEFFLER (UK)LTD',
// 		claimNumber: 201265865,
// 	},
// 	{
// 		supplier: 'ROCKINGER AGRICULTURE GMBH',
// 		claimNumber: 201338797,
// 	},
// 	{
// 		supplier: 'SENSATA TECH. HOLLAND BV (EUR)',
// 		claimNumber: 201145972,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201134394,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201234561,
// 	},
// 	{
// 		supplier: 'ALFRED HEYD GMBH',
// 		claimNumber: 201197536,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201207397,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201207320,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201210739,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201226633,
// 	},
// 	{
// 		supplier: 'ACERBIS ITALIA  (EUR)',
// 		claimNumber: 201284098,
// 	},
// 	{
// 		supplier: 'PROVENTIA OY',
// 		claimNumber: 201138927,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201117727,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201143135,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201142725,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201152926,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201201813,
// 	},
// 	{
// 		supplier: 'DENSO MARSTON LTD.',
// 		claimNumber: 201167143,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201167293,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201169335,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201167257,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE SYSTEMS FOR COMMERCIAL',
// 		claimNumber: 201252967,
// 	},
// 	{
// 		supplier: 'DANA ITALIA SPA',
// 		claimNumber: 201269711,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201319146,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201320677,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201174318,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201181703,
// 	},
// 	{
// 		supplier: 'UNO Minda Limited',
// 		claimNumber: 201201838,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201156996,
// 	},
// 	{
// 		supplier: 'JAMES DAWSON & SONS LTD',
// 		claimNumber: 201147348,
// 	},
// 	{
// 		supplier: 'FREUDENBERG SEALING TECHNOLOGIES',
// 		claimNumber: 201204494,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201257200,
// 	},
// 	{
// 		supplier: 'KAT MEKATRONIK ÚRÚNLERI A.S',
// 		claimNumber: 201347833,
// 	},
// 	{
// 		supplier: 'SENSATA TECH. HOLLAND BV (EUR)',
// 		claimNumber: 201138701,
// 	},
// 	{
// 		supplier: 'PEKTRON PLC',
// 		claimNumber: 201145231,
// 	},
// 	{
// 		supplier: 'BURTON RUBBER CO. LTD',
// 		claimNumber: 201147344,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201175470,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201205863,
// 	},
// 	{
// 		supplier: 'OPTIBELT (UK) LTD.',
// 		claimNumber: 201178001,
// 	},
// 	{
// 		supplier: 'BLACKWOOD ENG LTD (USD)',
// 		claimNumber: 201178629,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201141640,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201141641,
// 	},
// 	{
// 		supplier: 'UNO Minda Limited',
// 		claimNumber: 201158307,
// 	},
// 	{
// 		supplier: 'METALLINK FLUID POWER (EUR)',
// 		claimNumber: 201158254,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201187166,
// 	},
// 	{
// 		supplier: 'UNO Minda Limited',
// 		claimNumber: 201158295,
// 	},
// 	{
// 		supplier: 'METALLINK FLUID POWER (EUR)',
// 		claimNumber: 201158255,
// 	},
// 	{
// 		supplier: 'FREUDENBERG SEALING TECHNOLOGIES',
// 		claimNumber: 201158306,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201195888,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201201844,
// 	},
// 	{
// 		supplier: 'GROTE INDUSTRIES EUROPE GMBH',
// 		claimNumber: 201162325,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201217326,
// 	},
// 	{
// 		supplier: 'UNO Minda Limited',
// 		claimNumber: 201158192,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201169713,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201187867,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201184265,
// 	},
// 	{
// 		supplier: 'IRACROFT LTD (GBP)',
// 		claimNumber: 201180425,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201309790,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201283138,
// 	},
// 	{
// 		supplier: 'EUROPEAN SPRINGS LTD',
// 		claimNumber: 201319256,
// 	},
// 	{
// 		supplier: 'MP FILTRI UK LIMITED',
// 		claimNumber: 201352631,
// 	},
// 	{
// 		supplier: 'ZUIDBERG FRONTLINE SYSTEMS',
// 		claimNumber: 201229452,
// 	},
// 	{
// 		supplier: 'ZUIDBERG FRONTLINE SYSTEMS',
// 		claimNumber: 201241995,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201330171,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201321226,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201343034,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201321168,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201278084,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201314326,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201325944,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201326582,
// 	},
// 	{
// 		supplier: 'ROTATIONAL MOULDINGS LTD',
// 		claimNumber: 201078283,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201072708,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201079026,
// 	},
// 	{
// 		supplier: 'TRIMARK EUROPE LTD',
// 		claimNumber: 201107878,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201073047,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201097581,
// 	},
// 	{
// 		supplier: 'WESTON BODY HARDWARE',
// 		claimNumber: 201085959,
// 	},
// 	{
// 		supplier: 'WEBER-HYDRAULIK GMBH',
// 		claimNumber: 201099288,
// 	},
// 	{
// 		supplier: 'CHELL ENGINEERING LTD',
// 		claimNumber: 201102230,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201102325,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201102583,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201083327,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201100864,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201104454,
// 	},
// 	{
// 		supplier: 'DONALDSON FILTER COMP (EUR)',
// 		claimNumber: 201148682,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201148631,
// 	},
// 	{
// 		supplier: 'BECKER INDUSTRIAL COATINGS LTD',
// 		claimNumber: 201148697,
// 	},
// 	{
// 		supplier: 'GROTE INDUSTRIES EUROPE GMBH',
// 		claimNumber: 201152226,
// 	},
// 	{
// 		supplier: 'GROTE INDUSTRIES EUROPE GMBH',
// 		claimNumber: 201152257,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201094412,
// 	},
// 	{
// 		supplier: 'EUROTEC INTERNATIONAL PLC',
// 		claimNumber: 201101031,
// 	},
// 	{
// 		supplier: 'SOUTHCO MANUFACTURING LTD',
// 		claimNumber: 201101052,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201100997,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201097183,
// 	},
// 	{
// 		supplier: 'TRELLEBORG INDUSTRIAL PROD UK',
// 		claimNumber: 201095655,
// 	},
// 	{
// 		supplier: 'GROTE INDUSTRIES EUROPE GMBH',
// 		claimNumber: 201096571,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201158981,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201238714,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201102347,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201097693,
// 	},
// 	{
// 		supplier: 'GRAZIANO TRASMISSIONI UK LTD',
// 		claimNumber: 201088129,
// 	},
// 	{
// 		supplier: 'ROTATIONAL MOULDINGS LTD',
// 		claimNumber: 201126593,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH. LTD (EUR)',
// 		claimNumber: 201099529,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD  (GBP)',
// 		claimNumber: 201108083,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201132248,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201082945,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201089877,
// 	},
// 	{
// 		supplier: 'GROTE INDUSTRIES EUROPE GMBH',
// 		claimNumber: 201093578,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201093603,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201096258,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201104996,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201104979,
// 	},
// 	{
// 		supplier: 'DK PACKING AND CASEMAKING LTD',
// 		claimNumber: 201132108,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201139369,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201157854,
// 	},
// 	{
// 		supplier: 'KABY ENGINEERS LTD',
// 		claimNumber: 201150670,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201151510,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201161585,
// 	},
// 	{
// 		supplier: 'ARGO-HYTOS LTD',
// 		claimNumber: 201152770,
// 	},
// 	{
// 		supplier: 'EUROTEC INTERNATIONAL PLC',
// 		claimNumber: 201152806,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201253397,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201099639,
// 	},
// 	{
// 		supplier: 'IRACROFT LTD (GBP)',
// 		claimNumber: 201109527,
// 	},
// 	{
// 		supplier: 'SAFIM SPA',
// 		claimNumber: 201109617,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201130868,
// 	},
// 	{
// 		supplier: 'DANFOSS POWER SOL LTD (EUR)',
// 		claimNumber: 201137587,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201104708,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201122901,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201140862,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201142188,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201106238,
// 	},
// 	{
// 		supplier: 'COOPER STANDARD AUTO ITALY',
// 		claimNumber: 201121671,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201121682,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201157537,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201102549,
// 	},
// 	{
// 		supplier: 'PROVENTIA OY',
// 		claimNumber: 201118739,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201173911,
// 	},
// 	{
// 		supplier: 'UNO Minda Limited',
// 		claimNumber: 201199982,
// 	},
// 	{
// 		supplier: 'SAVCON LIMITED',
// 		claimNumber: 201177472,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201174620,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201111306,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201109115,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL LTD',
// 		claimNumber: 201110258,
// 	},
// 	{
// 		supplier: 'UNO Minda Limited',
// 		claimNumber: 201119122,
// 	},
// 	{
// 		supplier: 'WEBER-HYDRAULIK GMBH',
// 		claimNumber: 201192521,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201113833,
// 	},
// 	{
// 		supplier: 'GROTE INDUSTRIES EUROPE GMBH',
// 		claimNumber: 201129299,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201126369,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201138205,
// 	},
// 	{
// 		supplier: 'GRAZIANO TRANSMISSIONI S.p.A',
// 		claimNumber: 201138308,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201121635,
// 	},
// 	{
// 		supplier: 'PAILTON ENGINEERING LIMITED',
// 		claimNumber: 201119003,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201119041,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201216901,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201112076,
// 	},
// 	{
// 		supplier: 'PROVENTIA OY',
// 		claimNumber: 201112107,
// 	},
// 	{
// 		supplier: 'UNO Minda Limited',
// 		claimNumber: 201120490,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201117148,
// 	},
// 	{
// 		supplier: 'PROVENTIA OY',
// 		claimNumber: 201181972,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201163418,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201133808,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201137683,
// 	},
// 	{
// 		supplier: 'UNO Minda Limited',
// 		claimNumber: 201157213,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201156505,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH. LTD (EUR)',
// 		claimNumber: 201130634,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201123018,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201116689,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201166079,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201221273,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201108124,
// 	},
// 	{
// 		supplier: 'UNO Minda Limited',
// 		claimNumber: 201117181,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201123855,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201250666,
// 	},
// 	{
// 		supplier: 'GKN WHEELS NAGBOL',
// 		claimNumber: 201155627,
// 	},
// 	{
// 		supplier: 'GRAZIANO TRASMISSIONI UK LTD',
// 		claimNumber: 201131761,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201134420,
// 	},
// 	{
// 		supplier: 'SAFIM SPA',
// 		claimNumber: 201133940,
// 	},
// 	{
// 		supplier: 'DK PACKING AND CASEMAKING LTD',
// 		claimNumber: 201168664,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201154111,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201125848,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201143864,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201143861,
// 	},
// 	{
// 		supplier: 'FORSTER AND HALES LTD',
// 		claimNumber: 201136029,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201154262,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201141496,
// 	},
// 	{
// 		supplier: 'ROTATIONAL MOULDINGS LTD',
// 		claimNumber: 201143960,
// 	},
// 	{
// 		supplier: 'DANFOSS POWER SOL LTD (EUR)',
// 		claimNumber: 201161644,
// 	},
// 	{
// 		supplier: 'PEREI LIGHTING',
// 		claimNumber: 201146123,
// 	},
// 	{
// 		supplier: 'PEREI LIGHTING',
// 		claimNumber: 201165040,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201278211,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201271957,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201277246,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201301996,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201305217,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201117213,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201121117,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201178548,
// 	},
// 	{
// 		supplier: 'UNO Minda Limited',
// 		claimNumber: 201179436,
// 	},
// 	{
// 		supplier: 'BURGAFLEX UK LTD',
// 		claimNumber: 201252362,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD',
// 		claimNumber: 201160283,
// 	},
// 	{
// 		supplier: 'GRAZIANO TRASMISSIONI UK LTD',
// 		claimNumber: 201142108,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201153122,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201137240,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201138850,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201129270,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201297765,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201171146,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201199642,
// 	},
// 	{
// 		supplier: 'SENSATA TECH. HOLLAND BV (EUR)',
// 		claimNumber: 201200098,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201127058,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201142540,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201158681,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201147028,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201150601,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201170147,
// 	},
// 	{
// 		supplier: 'WEBER-HYDRAULIK GMBH',
// 		claimNumber: 201263545,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201187545,
// 	},
// 	{
// 		supplier: 'PROVENTIA OY',
// 		claimNumber: 201150437,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201184637,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201166781,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201150372,
// 	},
// 	{
// 		supplier: 'HENGSTLER ZYLINDER GMBH (EUR)',
// 		claimNumber: 201138259,
// 	},
// 	{
// 		supplier: 'QUARTEX COMPONENTS LIMITED',
// 		claimNumber: 201151070,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201144352,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201160167,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201160105,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201160116,
// 	},
// 	{
// 		supplier: 'PROVENTIA OY',
// 		claimNumber: 201160148,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201162078,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201226094,
// 	},
// 	{
// 		supplier: 'HENGSTLER ZYLINDER GMBH (EUR)',
// 		claimNumber: 201183340,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201144852,
// 	},
// 	{
// 		supplier: 'HENGSTLER ZYLINDER GMBH (EUR)',
// 		claimNumber: 201155279,
// 	},
// 	{
// 		supplier: 'HENGSTLER ZYLINDER GMBH (EUR)',
// 		claimNumber: 201161733,
// 	},
// 	{
// 		supplier: 'PEREI LIGHTING',
// 		claimNumber: 201182223,
// 	},
// 	{
// 		supplier: 'OMRON ELEC (MILTON KEYNES)',
// 		claimNumber: 201182288,
// 	},
// 	{
// 		supplier: 'APEM COMPONENTS LTD',
// 		claimNumber: 201148038,
// 	},
// 	{
// 		supplier: 'GKN WHEELS NAGBOL',
// 		claimNumber: 201136680,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201157823,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201179810,
// 	},
// 	{
// 		supplier: 'AKP FOUNDRIES PVT LTD',
// 		claimNumber: 201159677,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201160370,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201145485,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201149607,
// 	},
// 	{
// 		supplier: 'UNO Minda Limited',
// 		claimNumber: 201197112,
// 	},
// 	{
// 		supplier: 'PROVENTIA OY',
// 		claimNumber: 201150052,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201177641,
// 	},
// 	{
// 		supplier: 'HENGSTLER ZYLINDER GMBH (EUR)',
// 		claimNumber: 201147497,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201233558,
// 	},
// 	{
// 		supplier: 'HONGFA EUROPE (EUR)',
// 		claimNumber: 201160211,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201165114,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201198560,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201181408,
// 	},
// 	{
// 		supplier: 'GRAZIANO TRANSMISSIONI S.p.A',
// 		claimNumber: 201324474,
// 	},
// 	{
// 		supplier: 'PROVENTIA OY',
// 		claimNumber: 201157413,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201193774,
// 	},
// 	{
// 		supplier: 'GRAZIANO TRANSMISSIONI S.p.A',
// 		claimNumber: 201192440,
// 	},
// 	{
// 		supplier: 'GRAZIANO TRANSMISSIONI S.p.A',
// 		claimNumber: 201206219,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201184492,
// 	},
// 	{
// 		supplier: 'WALTERSCHEID GMBH (EUR)',
// 		claimNumber: 201190700,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201174983,
// 	},
// 	{
// 		supplier: 'PEREI LIGHTING',
// 		claimNumber: 201256844,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201273266,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201271274,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201206218,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201200366,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201218638,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201214084,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201260087,
// 	},
// 	{
// 		supplier: 'BLACKWOOD ENG LTD (USD)',
// 		claimNumber: 201276780,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201276140,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201288029,
// 	},
// 	{
// 		supplier: 'XL ENGINEERING LTD',
// 		claimNumber: 201284047,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201328966,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201308668,
// 	},
// 	{
// 		supplier: 'ZUIDBERG FRONTLINE SYSTEMS',
// 		claimNumber: 201217897,
// 	},
// 	{
// 		supplier: 'WEBER-HYDRAULIK GMBH',
// 		claimNumber: 201194210,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201207423,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201275457,
// 	},
// 	{
// 		supplier: 'MERCURY MATERIAL MANGMNT. LTD',
// 		claimNumber: 201226738,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201226099,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201215823,
// 	},
// 	{
// 		supplier: 'ZUIDBERG FRONTLINE SYSTEMS',
// 		claimNumber: 201302043,
// 	},
// 	{
// 		supplier: 'IRACROFT LTD (GBP)',
// 		claimNumber: 201357390,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201214463,
// 	},
// 	{
// 		supplier: 'GROTE INDUSTRIES EUROPE GMBH',
// 		claimNumber: 201238051,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201248497,
// 	},
// 	{
// 		supplier: 'OEM-AUTOMATIC LIMITED',
// 		claimNumber: 201260181,
// 	},
// 	{
// 		supplier: 'UNO Minda Limited',
// 		claimNumber: 201212042,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201220318,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201283656,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201229937,
// 	},
// 	{
// 		supplier: 'ACERBIS ITALIA  (EUR)',
// 		claimNumber: 201240595,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201315012,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201260259,
// 	},
// 	{
// 		supplier: 'GIULIANI CYLINDERS',
// 		claimNumber: 201265791,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201306484,
// 	},
// 	{
// 		supplier: 'GIULIANI CYLINDERS',
// 		claimNumber: 201236832,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201233383,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201227506,
// 	},
// 	{
// 		supplier: 'GKN WHEELS NAGBOL',
// 		claimNumber: 201282150,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201243101,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201257249,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201266643,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201252633,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201254067,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201252503,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201252582,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201260311,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201260068,
// 	},
// 	{
// 		supplier: 'TEX PLASTICS LTD',
// 		claimNumber: 201260116,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201260717,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201263206,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201244794,
// 	},
// 	{
// 		supplier: 'GIULIANI CYLINDERS',
// 		claimNumber: 201266409,
// 	},
// 	{
// 		supplier: 'BURGAFLEX UK LTD',
// 		claimNumber: 201261485,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH. LTD (EUR)',
// 		claimNumber: 201285463,
// 	},
// 	{
// 		supplier: 'FREUDENBERG SEALING TECHNOLOGIES',
// 		claimNumber: 201285291,
// 	},
// 	{
// 		supplier: 'HELLA LTD (EUR)',
// 		claimNumber: 201279974,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201271647,
// 	},
// 	{
// 		supplier: 'GIULIANI CYLINDERS',
// 		claimNumber: 201291132,
// 	},
// 	{
// 		supplier: 'SGH (MOULDS)  LIMITED',
// 		claimNumber: 201296072,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201305783,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201316735,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201340530,
// 	},
// 	{
// 		supplier: 'TECNI-FORM LTD',
// 		claimNumber: 201250543,
// 	},
// 	{
// 		supplier: 'ACERBIS ITALIA  (EUR)',
// 		claimNumber: 201255059,
// 	},
// 	{
// 		supplier: 'GROTE INDUSTRIES EUROPE GMBH',
// 		claimNumber: 201255107,
// 	},
// 	{
// 		supplier: 'HELLA FAHRZEUGTEILE GMBH (EUR)',
// 		claimNumber: 201263958,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201331911,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201295891,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201295964,
// 	},
// 	{
// 		supplier: 'SAFIM SPA',
// 		claimNumber: 201258888,
// 	},
// 	{
// 		supplier: 'SAFIM SPA',
// 		claimNumber: 201265149,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201267898,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201261840,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201281888,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201286762,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201278765,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201273537,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201296503,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201270311,
// 	},
// 	{
// 		supplier: 'KNOTT-AVONRIDE LIMITED',
// 		claimNumber: 201311931,
// 	},
// 	{
// 		supplier: 'KNOTT-AVONRIDE LIMITED',
// 		claimNumber: 201327388,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201290803,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201290873,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201290798,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201283299,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201274802,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201274770,
// 	},
// 	{
// 		supplier: 'ARGO-HYTOS',
// 		claimNumber: 201277461,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201280142,
// 	},
// 	{
// 		supplier: 'CAMLOC MOTION CONTROL LTD',
// 		claimNumber: 201288581,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201294405,
// 	},
// 	{
// 		supplier: 'WEBER-HYDRAULIK GMBH',
// 		claimNumber: 201293776,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201310791,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201275499,
// 	},
// 	{
// 		supplier: 'FREUDENBERG SEALING TECHNOLOGIES',
// 		claimNumber: 201345761,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201300864,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201273748,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201306722,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201325270,
// 	},
// 	{
// 		supplier: 'MP FILTRI UK LIMITED',
// 		claimNumber: 201285594,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201293681,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201280549,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201311218,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201300144,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201347140,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL LTD',
// 		claimNumber: 201348194,
// 	},
// 	{
// 		supplier: 'WEBER-HYDRAULIK GMBH',
// 		claimNumber: 201311200,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201337890,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201314140,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201324803,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201341419,
// 	},
// 	{
// 		supplier: 'SAFIM SPA',
// 		claimNumber: 201326563,
// 	},
// 	{
// 		supplier: 'SFC SOLUTIONS ITALY S.R.L.',
// 		claimNumber: 201324592,
// 	},
// 	{
// 		supplier: 'ARGO-HYTOS',
// 		claimNumber: 201332995,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201312573,
// 	},
// 	{
// 		supplier: 'BURGAFLEX UK LTD',
// 		claimNumber: 201310222,
// 	},
// 	{
// 		supplier: 'ACERBIS ITALIA  (EUR)',
// 		claimNumber: 201303498,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201312701,
// 	},
// 	{
// 		supplier: 'KNOTT-AVONRIDE LIMITED',
// 		claimNumber: 201312742,
// 	},
// 	{
// 		supplier: 'KNOTT-AVONRIDE LIMITED',
// 		claimNumber: 201334859,
// 	},
// 	{
// 		supplier: 'WALTERSCHEID GMBH (EUR)',
// 		claimNumber: 201304012,
// 	},
// 	{
// 		supplier: 'GRAZIANO TRANSMISSIONI S.p.A',
// 		claimNumber: 201350688,
// 	},
// 	{
// 		supplier: 'SAFIM SPA',
// 		claimNumber: 201356672,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201351993,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201330266,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201342084,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201306673,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201321717,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201320421,
// 	},
// 	{
// 		supplier: 'ZUIDBERG FRONTLINE SYSTEMS',
// 		claimNumber: 201322925,
// 	},
// 	{
// 		supplier: 'AGJUNCTION',
// 		claimNumber: 201324786,
// 	},
// 	{
// 		supplier: 'GRAZIANO TRANSMISSIONI S.p.A',
// 		claimNumber: 201313264,
// 	},
// 	{
// 		supplier: 'AGJUNCTION',
// 		claimNumber: 201328718,
// 	},
// 	{
// 		supplier: 'AGJUNCTION',
// 		claimNumber: 201335947,
// 	},
// 	{
// 		supplier: 'PROVENTIA OY',
// 		claimNumber: 201323581,
// 	},
// 	{
// 		supplier: 'IRACROFT LTD (GBP)',
// 		claimNumber: 201317043,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201316817,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201331091,
// 	},
// 	{
// 		supplier: 'ORLACO PRODUCTS BV (EURO)',
// 		claimNumber: 201351896,
// 	},
// 	{
// 		supplier: 'GIULIANI CYLINDERS',
// 		claimNumber: 201322249,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201327599,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201334132,
// 	},
// 	{
// 		supplier: 'DANFOSS LTD',
// 		claimNumber: 201325183,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201331728,
// 	},
// 	{
// 		supplier: 'ROCKINGER AGRICULTURE GMBH',
// 		claimNumber: 201322804,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201333033,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201312630,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201340037,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201356146,
// 	},
// 	{
// 		supplier: 'ARGO-HYTOS LTD',
// 		claimNumber: 201355780,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201355790,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201347391,
// 	},
// 	{
// 		supplier: 'Not assigned',
// 		claimNumber: 201350791,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201347412,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201343363,
// 	},
// 	{
// 		supplier: 'SAFIM SPA',
// 		claimNumber: 201331587,
// 	},
// 	{
// 		supplier: 'FAIRWAY SEALS LTD.',
// 		claimNumber: 201344266,
// 	},
// 	{
// 		supplier: 'LINECROSS COMPOSITES LTD',
// 		claimNumber: 201344186,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201349463,
// 	},
// 	{
// 		supplier: 'SAFIM SPA',
// 		claimNumber: 201336812,
// 	},
// 	{
// 		supplier: 'UNO Minda Limited',
// 		claimNumber: 201334702,
// 	},
// 	{
// 		supplier: 'SAFIM SPA',
// 		claimNumber: 201342597,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201334470,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201342569,
// 	},
// 	{
// 		supplier: 'OPTIBELT (UK) LTD.',
// 		claimNumber: 201338832,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201344036,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201343983,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201346313,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH. LTD (EUR)',
// 		claimNumber: 201356180,
// 	},
// 	{
// 		supplier: 'MCAULEY FABRICATION LTD',
// 		claimNumber: 201337520,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201347911,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201344902,
// 	},
// 	{
// 		supplier: 'COBO SPA',
// 		claimNumber: 201348094,
// 	},
// 	{
// 		supplier: 'WALTERSCHEID GMBH (EUR)',
// 		claimNumber: 201346996,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201346365,
// 	},
// 	{
// 		supplier: 'FORMBEND LTD',
// 		claimNumber: 201337143,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201349132,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201336261,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201346372,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201342854,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201350705,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201346150,
// 	},
// 	{
// 		supplier: 'OPTIBELT (UK) LTD.',
// 		claimNumber: 201340063,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201347426,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201351829,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201352484,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201113578,
// 	},
// 	{
// 		supplier: 'SPICER DRIVESHAFT   (EURO)',
// 		claimNumber: 201121966,
// 	},
// 	{
// 		supplier: 'ZUIDBERG FRONTLINE SYSTEMS',
// 		claimNumber: 201238968,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201182460,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201126143,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201147450,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201267401,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201259776,
// 	},
// 	{
// 		supplier: 'EUROTEC INTERNATIONAL PLC',
// 		claimNumber: 201181734,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201175528,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201223370,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201285768,
// 	},
// 	{
// 		supplier: 'DENSO MARSTON LTD.',
// 		claimNumber: 201299919,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD  (GBP)',
// 		claimNumber: 201313080,
// 	},
// 	{
// 		supplier: 'TECNI-FORM LTD',
// 		claimNumber: 201313068,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD  (GBP)',
// 		claimNumber: 201285165,
// 	},
// 	{
// 		supplier: 'FASTER S.R.L',
// 		claimNumber: 201250173,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201250215,
// 	},
// 	{
// 		supplier: 'IRACROFT LTD (GBP)',
// 		claimNumber: 201196867,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201204049,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201267436,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL LTD',
// 		claimNumber: 201300795,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201288264,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201288853,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201301668,
// 	},
// 	{
// 		supplier: 'XL ENGINEERING LTD',
// 		claimNumber: 201295148,
// 	},
// 	{
// 		supplier: 'Not assigned',
// 		claimNumber: 201275595,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201313609,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201348999,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201284948,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201355770,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201105208,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201125234,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201125172,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201127819,
// 	},
// 	{
// 		supplier: 'CATTON CONTROLS CABLES LTD',
// 		claimNumber: 201116526,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD  (GBP)',
// 		claimNumber: 201113837,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201131251,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201131291,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201131295,
// 	},
// 	{
// 		supplier: 'PAILTON ENGINEERING LIMITED',
// 		claimNumber: 201167054,
// 	},
// 	{
// 		supplier: 'ZIBO YONGHUA FILTER MAKI',
// 		claimNumber: 201167016,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201178413,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201100828,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201173700,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201163176,
// 	},
// 	{
// 		supplier: 'HYDAC TECHNOLOGY GMBH',
// 		claimNumber: 201173423,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201187140,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201203063,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201124572,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201101435,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201257859,
// 	},
// 	{
// 		supplier: 'GRAZIANO TRANSMISSIONI S.p.A',
// 		claimNumber: 201255131,
// 	},
// 	{
// 		supplier: 'GATES HYDRAULICS  (EUR)',
// 		claimNumber: 201096245,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201096088,
// 	},
// 	{
// 		supplier: 'COMESYS LTD',
// 		claimNumber: 201129066,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201113491,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201109347,
// 	},
// 	{
// 		supplier: 'PROVENTIA OY',
// 		claimNumber: 201102664,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201117085,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201114218,
// 	},
// 	{
// 		supplier: 'ZIBO YONGHUA FILTER MAKI',
// 		claimNumber: 201117060,
// 	},
// 	{
// 		supplier: 'GATES HYDRAULICS  (EUR)',
// 		claimNumber: 201117696,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS',
// 		claimNumber: 201121680,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD  (GBP)',
// 		claimNumber: 201173704,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201159208,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201149124,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201149569,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201164987,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201275977,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201265399,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201185809,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201185961,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201174054,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201246114,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201283298,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201283254,
// 	},
// 	{
// 		supplier: 'SENSATA TECHNOLOGIES GMBH',
// 		claimNumber: 201314406,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201210377,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201222474,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201233511,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201291768,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201295518,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201282723,
// 	},
// 	{
// 		supplier: 'DENSO MARSTON LTD.',
// 		claimNumber: 201302442,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201314413,
// 	},
// 	{
// 		supplier: 'SGH (MOULDS)  LIMITED',
// 		claimNumber: 201329952,
// 	},
// 	{
// 		supplier: 'TECNI-FORM LTD',
// 		claimNumber: 201293364,
// 	},
// 	{
// 		supplier: 'ELANDERS LTD',
// 		claimNumber: 201345205,
// 	},
// 	{
// 		supplier: 'MANN + HUMMEL (UK) LTD',
// 		claimNumber: 201336567,
// 	},
// 	{
// 		supplier: 'KINGSPAN WATER & ENERGY LTD',
// 		claimNumber: 201335508,
// 	},
// 	{
// 		supplier: 'AGJUNCTION',
// 		claimNumber: 201309874,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201336647,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201331667,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201344232,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201342218,
// 	},
// 	{
// 		supplier: 'GATES HYDRAULICS  (EUR)',
// 		claimNumber: 201329683,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201309113,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201322629,
// 	},
// 	{
// 		supplier: 'GRAYHILL INC',
// 		claimNumber: 201355800,
// 	},
// 	{
// 		supplier: 'WESTON BODY HARDWARE',
// 		claimNumber: 201139623,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201139620,
// 	},
// 	{
// 		supplier: 'PROVENTIA OY',
// 		claimNumber: 201141512,
// 	},
// 	{
// 		supplier: 'FREUDENBERG SEALING TECHNOLOGIES',
// 		claimNumber: 201141524,
// 	},
// 	{
// 		supplier: 'PEKTRON PLC',
// 		claimNumber: 201270714,
// 	},
// 	{
// 		supplier: 'GIULIANI CYLINDERS',
// 		claimNumber: 201309959,
// 	},
// 	{
// 		supplier: 'KNOTT GMBH (EUR)',
// 		claimNumber: 201267129,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201269693,
// 	},
// 	{
// 		supplier: 'Evo-Sales GmbH',
// 		claimNumber: 201328647,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201184037,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201190734,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201230895,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201222712,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201174904,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201218573,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201176116,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201288232,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201288227,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201204483,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201293302,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201275132,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201354581,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201325686,
// 	},
// 	{
// 		supplier: 'WEBER-HYDRAULIK GMBH',
// 		claimNumber: 201329696,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201313647,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201283176,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201278044,
// 	},
// 	{
// 		supplier: 'WEBER-HYDRAULIK GMBH',
// 		claimNumber: 201292032,
// 	},
// 	{
// 		supplier: 'IRACROFT LTD (GBP)',
// 		claimNumber: 201090145,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201091590,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201121803,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201093053,
// 	},
// 	{
// 		supplier: 'IRACROFT LTD (GBP)',
// 		claimNumber: 201102614,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201102604,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201102503,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201102524,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201123425,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201097479,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201096011,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201095891,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL LTD',
// 		claimNumber: 201110297,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201122378,
// 	},
// 	{
// 		supplier: 'GROTE INDUSTRIES EUROPE GMBH',
// 		claimNumber: 201114282,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201139280,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201128174,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201098030,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201125194,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201110566,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201118525,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201108759,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201130774,
// 	},
// 	{
// 		supplier: 'PEREI LIGHTING',
// 		claimNumber: 201199911,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201111584,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201104963,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201132613,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201104974,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201147321,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201181603,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201109162,
// 	},
// 	{
// 		supplier: 'GRAMMER AG',
// 		claimNumber: 201102683,
// 	},
// 	{
// 		supplier: 'UNO Minda Limited',
// 		claimNumber: 201109580,
// 	},
// 	{
// 		supplier: 'SCHARMULLER GMBH',
// 		claimNumber: 201109535,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH. LTD (EUR)',
// 		claimNumber: 201106030,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201115505,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201240064,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201143383,
// 	},
// 	{
// 		supplier: 'ROTATIONAL MOULDINGS LTD',
// 		claimNumber: 201226825,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201113960,
// 	},
// 	{
// 		supplier: 'DROMONE ENGINEERING LTD',
// 		claimNumber: 201101009,
// 	},
// 	{
// 		supplier: 'ACOUSTAPRODUCTS LIMITED',
// 		claimNumber: 201115270,
// 	},
// 	{
// 		supplier: 'SAFIM SPA',
// 		claimNumber: 201133431,
// 	},
// 	{
// 		supplier: 'PROVENTIA OY',
// 		claimNumber: 201139161,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201132525,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201170632,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201195500,
// 	},
// 	{
// 		supplier: 'IRACROFT LTD (GBP)',
// 		claimNumber: 201113281,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201110923,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201131336,
// 	},
// 	{
// 		supplier: 'GATES HYDRAULICS  (EUR)',
// 		claimNumber: 201131309,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201177369,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201127739,
// 	},
// 	{
// 		supplier: 'CALIX AB (EUR)',
// 		claimNumber: 201155322,
// 	},
// 	{
// 		supplier: 'APEM COMPONENTS LTD',
// 		claimNumber: 201157204,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201136446,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201136404,
// 	},
// 	{
// 		supplier: 'ROTATIONAL MOULDINGS LTD',
// 		claimNumber: 201155387,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201141096,
// 	},
// 	{
// 		supplier: 'GRAZIANO TRASMISSIONI UK LTD',
// 		claimNumber: 201147092,
// 	},
// 	{
// 		supplier: 'DK PACKING AND CASEMAKING LTD',
// 		claimNumber: 201145570,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201151021,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201208295,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201130743,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201132364,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201130872,
// 	},
// 	{
// 		supplier: 'UNO Minda Limited',
// 		claimNumber: 201127044,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201125926,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201129404,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201246093,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201157560,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201155107,
// 	},
// 	{
// 		supplier: 'WALTERSCHEID GMBH (EUR)',
// 		claimNumber: 201133760,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201172071,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201175187,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201352102,
// 	},
// 	{
// 		supplier: 'WALTERSCHEID GMBH (EUR)',
// 		claimNumber: 201141867,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201143101,
// 	},
// 	{
// 		supplier: 'LH GROUP (COLEMAN)',
// 		claimNumber: 201169213,
// 	},
// 	{
// 		supplier: 'GATES HYDRAULICS  (EUR)',
// 		claimNumber: 201147108,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201176720,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201141303,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201143386,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201171507,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201170306,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201245504,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201192839,
// 	},
// 	{
// 		supplier: 'IRACROFT LTD (GBP)',
// 		claimNumber: 201152283,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201152245,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201171464,
// 	},
// 	{
// 		supplier: 'XL ENGINEERING LTD',
// 		claimNumber: 201210805,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201168864,
// 	},
// 	{
// 		supplier: 'FREUDENBERG SEALING TECHNOLOGIES',
// 		claimNumber: 201146855,
// 	},
// 	{
// 		supplier: 'GROTE INDUSTRIES EUROPE GMBH',
// 		claimNumber: 201174385,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201212150,
// 	},
// 	{
// 		supplier: 'MP FILTRI UK LIMITED',
// 		claimNumber: 201152951,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201171067,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201211243,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201186197,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201155590,
// 	},
// 	{
// 		supplier: 'SENSATA TECH. HOLLAND BV (EUR)',
// 		claimNumber: 201162536,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201184371,
// 	},
// 	{
// 		supplier: 'CAMLOC MOTION CONTROL LTD',
// 		claimNumber: 201155625,
// 	},
// 	{
// 		supplier: 'HENGSTLER ZYLINDER GMBH (EUR)',
// 		claimNumber: 201176202,
// 	},
// 	{
// 		supplier: 'GKN WHEELS NAGBOL',
// 		claimNumber: 201172724,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201208246,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201169386,
// 	},
// 	{
// 		supplier: 'HADLEY HARGREAVES LTD',
// 		claimNumber: 201198804,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201181660,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201190271,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201195598,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201184663,
// 	},
// 	{
// 		supplier: 'ELANDERS LTD',
// 		claimNumber: 201204252,
// 	},
// 	{
// 		supplier: 'GRAMMER AG',
// 		claimNumber: 201174628,
// 	},
// 	{
// 		supplier: 'OGNIBENE POWER SPA',
// 		claimNumber: 201194574,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201188893,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201249176,
// 	},
// 	{
// 		supplier: 'WALTERSCHEID GMBH (EUR)',
// 		claimNumber: 201249145,
// 	},
// 	{
// 		supplier: 'PAILTON ENGINEERING LIMITED',
// 		claimNumber: 201200018,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201239310,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201200373,
// 	},
// 	{
// 		supplier: 'KNOTT-AVONRIDE LIMITED',
// 		claimNumber: 201190366,
// 	},
// 	{
// 		supplier: 'PROVENTIA OY',
// 		claimNumber: 201218145,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201239126,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201223054,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201269524,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201267163,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201243028,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201239203,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201312178,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201240671,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201325771,
// 	},
// 	{
// 		supplier: 'SENSATA TECH. HOLLAND BV (EUR)',
// 		claimNumber: 201354412,
// 	},
// 	{
// 		supplier: 'GRAZIANO TRANSMISSIONI S.p.A',
// 		claimNumber: 201354783,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201236288,
// 	},
// 	{
// 		supplier: 'PROVENTIA OY',
// 		claimNumber: 201227937,
// 	},
// 	{
// 		supplier: 'ARGO-HYTOS LTD',
// 		claimNumber: 201238142,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201233948,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201247086,
// 	},
// 	{
// 		supplier: 'KNOTT GMBH (EUR)',
// 		claimNumber: 201261543,
// 	},
// 	{
// 		supplier: 'TRIMARK EUROPE LTD',
// 		claimNumber: 201304194,
// 	},
// 	{
// 		supplier: 'GKN WHEELS NAGBOL',
// 		claimNumber: 201356564,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201252457,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201256472,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201256481,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201262649,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201265852,
// 	},
// 	{
// 		supplier: 'KNOTT-AVONRIDE LIMITED',
// 		claimNumber: 201272393,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201323236,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201272365,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201326531,
// 	},
// 	{
// 		supplier: 'DROMONE ENGINEERING LTD',
// 		claimNumber: 201264608,
// 	},
// 	{
// 		supplier: 'ARGO-HYTOS LTD',
// 		claimNumber: 201294093,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL LTD',
// 		claimNumber: 201257343,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201264500,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE SYSTEMS FOR COMMERCIAL',
// 		claimNumber: 201275430,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201272208,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201282475,
// 	},
// 	{
// 		supplier: 'FREUDENBERG SEALING TECHNOLOGIES',
// 		claimNumber: 201287350,
// 	},
// 	{
// 		supplier: 'HELLA LTD (EUR)',
// 		claimNumber: 201325347,
// 	},
// 	{
// 		supplier: 'UNO Minda Limited',
// 		claimNumber: 201291120,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201296071,
// 	},
// 	{
// 		supplier: 'GRAMMER AG',
// 		claimNumber: 201291668,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201326828,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL LTD',
// 		claimNumber: 201301969,
// 	},
// 	{
// 		supplier: 'IRACROFT LTD (GBP)',
// 		claimNumber: 201332946,
// 	},
// 	{
// 		supplier: 'ARGO-HYTOS LTD',
// 		claimNumber: 201267158,
// 	},
// 	{
// 		supplier: 'ELANDERS LTD',
// 		claimNumber: 201339750,
// 	},
// 	{
// 		supplier: 'KNOTT-AVONRIDE LIMITED',
// 		claimNumber: 201283240,
// 	},
// 	{
// 		supplier: 'GKN WHEELS NAGBOL',
// 		claimNumber: 201283757,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201271722,
// 	},
// 	{
// 		supplier: 'ADM PRESSINGS LIMITED',
// 		claimNumber: 201303531,
// 	},
// 	{
// 		supplier: 'ECCO Safety Group',
// 		claimNumber: 201285379,
// 	},
// 	{
// 		supplier: 'WALTERSCHEID GMBH (EUR)',
// 		claimNumber: 201295797,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201289274,
// 	},
// 	{
// 		supplier: 'GROTE INDUSTRIES EUROPE GMBH',
// 		claimNumber: 201286692,
// 	},
// 	{
// 		supplier: 'GRAZIANO TRANSMISSIONI S.p.A',
// 		claimNumber: 201297516,
// 	},
// 	{
// 		supplier: 'GRAMMER AG',
// 		claimNumber: 201322824,
// 	},
// 	{
// 		supplier: 'WEBER-HYDRAULIK GMBH',
// 		claimNumber: 201321946,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201322805,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201306126,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201306094,
// 	},
// 	{
// 		supplier: 'ARGO-HYTOS LTD',
// 		claimNumber: 201305922,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201308863,
// 	},
// 	{
// 		supplier: 'SAFIM SPA',
// 		claimNumber: 201297209,
// 	},
// 	{
// 		supplier: 'FREUDENBERG SEALING TECHNOLOGIES',
// 		claimNumber: 201308086,
// 	},
// 	{
// 		supplier: 'FREUDENBERG SEALING TECHNOLOGIES',
// 		claimNumber: 201308130,
// 	},
// 	{
// 		supplier: 'DENSO MARSTON LTD.',
// 		claimNumber: 201350202,
// 	},
// 	{
// 		supplier: 'KNOTT GMBH (EUR)',
// 		claimNumber: 201315447,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201310446,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201320720,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201354787,
// 	},
// 	{
// 		supplier: 'SENSATA TECHNOLOGIES GMBH',
// 		claimNumber: 201306546,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201323574,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201311291,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201316320,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201309836,
// 	},
// 	{
// 		supplier: 'ZIBO YONGHUA FILTER MAKI',
// 		claimNumber: 201319000,
// 	},
// 	{
// 		supplier: 'VALEO MAGYARORSZAG KFT (EUR)',
// 		claimNumber: 201318901,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201329582,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201321570,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201322688,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201334904,
// 	},
// 	{
// 		supplier: 'GRAZIANO TRANSMISSIONI S.p.A',
// 		claimNumber: 201319070,
// 	},
// 	{
// 		supplier: 'GRAZIANO TRANSMISSIONI S.p.A',
// 		claimNumber: 201356282,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201356027,
// 	},
// 	{
// 		supplier: 'WALTERSCHEID GMBH (EUR)',
// 		claimNumber: 201337557,
// 	},
// 	{
// 		supplier: 'PEREI LIGHTING',
// 		claimNumber: 201354764,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201327666,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201336865,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201342171,
// 	},
// 	{
// 		supplier: 'GROTE INDUSTRIES EUROPE GMBH',
// 		claimNumber: 201122037,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201259778,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201139844,
// 	},
// 	{
// 		supplier: 'THOS STOREY FAB. GROUP LTD',
// 		claimNumber: 201121979,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201159384,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201165558,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201262724,
// 	},
// 	{
// 		supplier: 'PEREI LIGHTING',
// 		claimNumber: 201207306,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201207294,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD  (GBP)',
// 		claimNumber: 201183913,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201199143,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201201291,
// 	},
// 	{
// 		supplier: 'KAT MEKATRONIK ÚRÚNLERI A.S',
// 		claimNumber: 201212288,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201194615,
// 	},
// 	{
// 		supplier: 'IRACROFT LTD (GBP)',
// 		claimNumber: 201183156,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201193359,
// 	},
// 	{
// 		supplier: 'THOMSON PETTIE LTD',
// 		claimNumber: 201250155,
// 	},
// 	{
// 		supplier: 'ROCKINGER AGRICULTURE GMBH',
// 		claimNumber: 201240197,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201246747,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201294532,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201337668,
// 	},
// 	{
// 		supplier: 'FLEXXAIRE INC (CAD)',
// 		claimNumber: 201285110,
// 	},
// 	{
// 		supplier: 'OPTIBELT (UK) LTD.',
// 		claimNumber: 201282592,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201283199,
// 	},
// 	{
// 		supplier: 'WEBER-HYDRAULIK GMBH',
// 		claimNumber: 201258646,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201296799,
// 	},
// 	{
// 		supplier: 'KNOTT GMBH (EUR)',
// 		claimNumber: 201350263,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201331370,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201314905,
// 	},
// 	{
// 		supplier: 'GATES HYDRAULICS  (EUR)',
// 		claimNumber: 201354582,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201347233,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201093264,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201154957,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201103272,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201100971,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201122900,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201180163,
// 	},
// 	{
// 		supplier: 'BROADWATER MOULDINGS LTD',
// 		claimNumber: 201160974,
// 	},
// 	{
// 		supplier: 'ZUIDBERG FRONTLINE SYSTEMS',
// 		claimNumber: 201160988,
// 	},
// 	{
// 		supplier: 'TRIMARK EUROPE LTD',
// 		claimNumber: 201126581,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201138392,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201168722,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201259353,
// 	},
// 	{
// 		supplier: 'STAUFF UK',
// 		claimNumber: 201259352,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201259355,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201262269,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201240590,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201318484,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201130001,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201224328,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201287768,
// 	},
// 	{
// 		supplier: 'OEM-AUTOMATIC LIMITED',
// 		claimNumber: 201278658,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201235382,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201189393,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201198215,
// 	},
// 	{
// 		supplier: 'WEBER-HYDRAULIK GMBH',
// 		claimNumber: 201356756,
// 	},
// 	{
// 		supplier: 'FREUDENBERG SEALING TECHNOLOGIES',
// 		claimNumber: 201332802,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201195309,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201195873,
// 	},
// 	{
// 		supplier: 'ELANDERS LTD',
// 		claimNumber: 201280333,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201275623,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL LTD',
// 		claimNumber: 201307995,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD  (GBP)',
// 		claimNumber: 201320424,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201354627,
// 	},
// 	{
// 		supplier: 'Not assigned',
// 		claimNumber: 201358105,
// 	},
// 	{
// 		supplier: 'KNOTT GMBH (EUR)',
// 		claimNumber: 201134965,
// 	},
// 	{
// 		supplier: 'UNO Minda Limited',
// 		claimNumber: 201143863,
// 	},
// 	{
// 		supplier: 'UNO Minda Limited',
// 		claimNumber: 201143901,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201146125,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201103747,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201107333,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201131330,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201112574,
// 	},
// 	{
// 		supplier: 'GROTE INDUSTRIES EUROPE GMBH',
// 		claimNumber: 201113826,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201120186,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201120149,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201121224,
// 	},
// 	{
// 		supplier: 'IRACROFT LTD (GBP)',
// 		claimNumber: 201125324,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201114284,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201115782,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201214995,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201132453,
// 	},
// 	{
// 		supplier: 'FREUDENBERG SEALING TECHNOLOGIES',
// 		claimNumber: 201182722,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201141327,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201165643,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201165626,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS (USD) LTD',
// 		claimNumber: 201171120,
// 	},
// 	{
// 		supplier: 'WEBER-HYDRAULIK GMBH',
// 		claimNumber: 201171990,
// 	},
// 	{
// 		supplier: 'WEBER-HYDRAULIK GMBH',
// 		claimNumber: 201182859,
// 	},
// 	{
// 		supplier: 'MP FILTRI UK LIMITED',
// 		claimNumber: 201107283,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201143137,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201117973,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201189983,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201292838,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201142919,
// 	},
// 	{
// 		supplier: 'CHELL ENGINEERING LTD',
// 		claimNumber: 201123489,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201149739,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201248798,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201137302,
// 	},
// 	{
// 		supplier: 'PEREI LIGHTING',
// 		claimNumber: 201157271,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201192447,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201144651,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201152904,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201147663,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201208252,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201142181,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201147045,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201141979,
// 	},
// 	{
// 		supplier: 'PERMOID INDUSTRIES LTD',
// 		claimNumber: 201165257,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201178454,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201250719,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201178426,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201260987,
// 	},
// 	{
// 		supplier: 'IRACROFT LTD (GBP)',
// 		claimNumber: 201178686,
// 	},
// 	{
// 		supplier: 'UNO Minda Limited',
// 		claimNumber: 201174285,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201174277,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201342816,
// 	},
// 	{
// 		supplier: 'ROTATIONAL MOULDINGS LTD',
// 		claimNumber: 201186367,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201160218,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201183438,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201183443,
// 	},
// 	{
// 		supplier: 'PEREI LIGHTING',
// 		claimNumber: 201206758,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201189883,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201158553,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201222843,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201190675,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201178929,
// 	},
// 	{
// 		supplier: 'MITCHELL RUBBER EUROPE',
// 		claimNumber: 201179086,
// 	},
// 	{
// 		supplier: 'MITCHELL RUBBER EUROPE',
// 		claimNumber: 201179132,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201191633,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201184621,
// 	},
// 	{
// 		supplier: 'GRAZIANO TRANSMISSIONI S.p.A',
// 		claimNumber: 201182971,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201167294,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201204155,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201217580,
// 	},
// 	{
// 		supplier: 'BONY POLYMERS (P) LTD',
// 		claimNumber: 201182778,
// 	},
// 	{
// 		supplier: 'DK PACKING AND CASEMAKING LTD',
// 		claimNumber: 201168782,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS (USD) LTD',
// 		claimNumber: 201174627,
// 	},
// 	{
// 		supplier: 'DESAI ENGINNERS (INR)',
// 		claimNumber: 201180989,
// 	},
// 	{
// 		supplier: 'ELBE ITALIA SUD SRL',
// 		claimNumber: 201186150,
// 	},
// 	{
// 		supplier: 'ARGO-HYTOS LTD',
// 		claimNumber: 201185086,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201321052,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201202070,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201355978,
// 	},
// 	{
// 		supplier: 'GKN WHEELS NAGBOL',
// 		claimNumber: 201270504,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201213732,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201207433,
// 	},
// 	{
// 		supplier: 'WEBER-HYDRAULIK GMBH',
// 		claimNumber: 201189754,
// 	},
// 	{
// 		supplier: 'GIULIANI CYLINDERS',
// 		claimNumber: 201198875,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201211087,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201207784,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201202961,
// 	},
// 	{
// 		supplier: 'GIULIANI CYLINDERS',
// 		claimNumber: 201270887,
// 	},
// 	{
// 		supplier: 'WEBER-HYDRAULIK GMBH',
// 		claimNumber: 201215975,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201200378,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201275552,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201251708,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201252482,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201330023,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201350050,
// 	},
// 	{
// 		supplier: 'MP FILTRI UK LIMITED',
// 		claimNumber: 201322682,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201252926,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201240050,
// 	},
// 	{
// 		supplier: 'UNO Minda Limited',
// 		claimNumber: 201297756,
// 	},
// 	{
// 		supplier: 'FUYAO GLASS INDUSTRY GROUP (2414)',
// 		claimNumber: 201219558,
// 	},
// 	{
// 		supplier: 'ZUIDBERG FRONTLINE SYSTEMS',
// 		claimNumber: 201355991,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201241315,
// 	},
// 	{
// 		supplier: 'PROVENTIA OY',
// 		claimNumber: 201241311,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201241303,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201253774,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201253307,
// 	},
// 	{
// 		supplier: 'ADM PRESSINGS LIMITED',
// 		claimNumber: 201255943,
// 	},
// 	{
// 		supplier: 'FREUDENBERG SEALING TECHNOLOGIES',
// 		claimNumber: 201279183,
// 	},
// 	{
// 		supplier: 'PANCHAL MANUFACTURING CO PVT LTD',
// 		claimNumber: 201243041,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201261015,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201230091,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201236323,
// 	},
// 	{
// 		supplier: 'SGH (MOULDS)  LIMITED',
// 		claimNumber: 201270015,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201329548,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201235207,
// 	},
// 	{
// 		supplier: 'SMAT NORD SRL',
// 		claimNumber: 201245829,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201245850,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201306785,
// 	},
// 	{
// 		supplier: 'APEM COMPONENTS LTD',
// 		claimNumber: 201237169,
// 	},
// 	{
// 		supplier: 'DANFOSS POWER SOL LTD (EUR)',
// 		claimNumber: 201252348,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201323438,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201310408,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201293704,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201265142,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201267552,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201285279,
// 	},
// 	{
// 		supplier: 'ROTATIONAL MOULDINGS LTD',
// 		claimNumber: 201317663,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201288479,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201279554,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201287815,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201282967,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201289244,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL LTD',
// 		claimNumber: 201287304,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH. LTD (EUR)',
// 		claimNumber: 201311965,
// 	},
// 	{
// 		supplier: 'KNOTT-AVONRIDE LIMITED',
// 		claimNumber: 201315819,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201290861,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201303694,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201311384,
// 	},
// 	{
// 		supplier: 'PLAS-TECH THERMOFORMING LTD',
// 		claimNumber: 201319966,
// 	},
// 	{
// 		supplier: 'SMAT NORD SRL',
// 		claimNumber: 201319919,
// 	},
// 	{
// 		supplier: 'MANN + HUMMEL (UK) LTD',
// 		claimNumber: 201314631,
// 	},
// 	{
// 		supplier: 'FREUDENBERG SEALING TECHNOLOGIES',
// 		claimNumber: 201304699,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201292980,
// 	},
// 	{
// 		supplier: 'CATTON CONTROLS CABLES LTD',
// 		claimNumber: 201319640,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201330844,
// 	},
// 	{
// 		supplier: 'GRAMMER AG',
// 		claimNumber: 201317116,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201314445,
// 	},
// 	{
// 		supplier: 'DANA ITALIA SPA',
// 		claimNumber: 201319785,
// 	},
// 	{
// 		supplier: 'KNOTT-AVONRIDE LIMITED',
// 		claimNumber: 201300474,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201296370,
// 	},
// 	{
// 		supplier: 'WALTERSCHEID GMBH (EUR)',
// 		claimNumber: 201297176,
// 	},
// 	{
// 		supplier: 'STOP-CHOC LTD',
// 		claimNumber: 201301318,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201324145,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201324570,
// 	},
// 	{
// 		supplier: 'SMAT NORD SRL',
// 		claimNumber: 201328603,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201322023,
// 	},
// 	{
// 		supplier: 'IRACROFT LTD (GBP)',
// 		claimNumber: 201315763,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201322842,
// 	},
// 	{
// 		supplier: 'HYDROTECHNIK UK LTD (EUR)',
// 		claimNumber: 201313342,
// 	},
// 	{
// 		supplier: 'WEBER-HYDRAULIK GMBH',
// 		claimNumber: 201337381,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201320324,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201314739,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201311214,
// 	},
// 	{
// 		supplier: 'DONALDSON FILTER COMP (EUR)',
// 		claimNumber: 201305223,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201317999,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201328857,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201334053,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201334773,
// 	},
// 	{
// 		supplier: 'RAYNE PRECISION ENGINEERING',
// 		claimNumber: 201346229,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201312699,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201323186,
// 	},
// 	{
// 		supplier: 'IRACROFT LTD (GBP)',
// 		claimNumber: 201324050,
// 	},
// 	{
// 		supplier: 'SAFIM SPA',
// 		claimNumber: 201311983,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201343723,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201325408,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201350606,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201338515,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201324762,
// 	},
// 	{
// 		supplier: 'PROVENTIA OY',
// 		claimNumber: 201335262,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201337568,
// 	},
// 	{
// 		supplier: 'IRACROFT LTD (GBP)',
// 		claimNumber: 201354171,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201356035,
// 	},
// 	{
// 		supplier: 'GRAYHILL INC',
// 		claimNumber: 201354847,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201355254,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201340493,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201340621,
// 	},
// 	{
// 		supplier: 'SAFIM SPA',
// 		claimNumber: 201356049,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201147972,
// 	},
// 	{
// 		supplier: 'GATES HYDRAULICS  (EUR)',
// 		claimNumber: 201158297,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201158186,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201177206,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201174175,
// 	},
// 	{
// 		supplier: 'SENSATA TECH. HOLLAND BV (EUR)',
// 		claimNumber: 201155791,
// 	},
// 	{
// 		supplier: 'GRAZIANO TRANSMISSIONI S.p.A',
// 		claimNumber: 201174230,
// 	},
// 	{
// 		supplier: 'LH GROUP (COLEMAN)',
// 		claimNumber: 201194678,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201329078,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201242549,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201244394,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201256382,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201230898,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201231626,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201236830,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201340967,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201338243,
// 	},
// 	{
// 		supplier: 'Not assigned',
// 		claimNumber: 201241989,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201356456,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201356470,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201356471,
// 	},
// 	{
// 		supplier: 'DENSO MARSTON LTD.',
// 		claimNumber: 201330606,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201344537,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201356487,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201350994,
// 	},
// 	{
// 		supplier: 'TEX PLASTICS LTD',
// 		claimNumber: 201356460,
// 	},
// 	{
// 		supplier: 'BORG WARNER COOL. SYS. GMBH',
// 		claimNumber: 201154860,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201276855,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201200625,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201144293,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201137533,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201148189,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201155424,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201259943,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL LTD',
// 		claimNumber: 201176369,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201179851,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD  (GBP)',
// 		claimNumber: 201186229,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201203963,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201173720,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201175886,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201332653,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201217911,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201211579,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201289865,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201313717,
// 	},
// 	{
// 		supplier: 'PEREI LIGHTING',
// 		claimNumber: 201326416,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201328184,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201309397,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201328570,
// 	},
// 	{
// 		supplier: 'WABCO AUTOMOTIVE UK LTD',
// 		claimNumber: 201328572,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201323508,
// 	},
// 	{
// 		supplier: 'TRELLEBORG WHEEL SYSTEMS UK',
// 		claimNumber: 201122832,
// 	},
// 	{
// 		supplier: 'OPTIBELT (UK) LTD.',
// 		claimNumber: 201106749,
// 	},
// 	{
// 		supplier: 'MP FILTRI UK LIMITED',
// 		claimNumber: 201112838,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201121505,
// 	},
// 	{
// 		supplier: 'KINGSPAN WATER & ENERGY LTD',
// 		claimNumber: 201156755,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201293461,
// 	},
// 	{
// 		supplier: 'ALFRED HEYD GMBH',
// 		claimNumber: 201199902,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201254806,
// 	},
// 	{
// 		supplier: 'ARGO-HYTOS LTD',
// 		claimNumber: 201265193,
// 	},
// 	{
// 		supplier: 'WABCO AUTOMOTIVE UK LTD',
// 		claimNumber: 201084422,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201112536,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201112760,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201140935,
// 	},
// 	{
// 		supplier: 'D-LA PORTE SOHNE GMBH (EUR)',
// 		claimNumber: 201199713,
// 	},
// 	{
// 		supplier: 'SFC SOLUTIONS ITALY S.R.L.',
// 		claimNumber: 201199717,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201199722,
// 	},
// 	{
// 		supplier: 'ALFRED HEYD GMBH',
// 		claimNumber: 201199715,
// 	},
// 	{
// 		supplier: 'VALEO MAGYARORSZAG KFT (EUR)',
// 		claimNumber: 201247659,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201349391,
// 	},
// 	{
// 		supplier: 'UNO Minda Limited',
// 		claimNumber: 201174328,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201121348,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201120688,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201165497,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201145230,
// 	},
// 	{
// 		supplier: 'ACOUSTAPRODUCTS LIMITED',
// 		claimNumber: 201151984,
// 	},
// 	{
// 		supplier: 'LAM SPA  (EUR)',
// 		claimNumber: 201151983,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201168307,
// 	},
// 	{
// 		supplier: 'GRAZIANO TRASMISSIONI UK LTD',
// 		claimNumber: 201162855,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201150779,
// 	},
// 	{
// 		supplier: 'HELLA LTD (EUR)',
// 		claimNumber: 201156432,
// 	},
// 	{
// 		supplier: 'HYDRASPECMA SAMWON LTD (USD)',
// 		claimNumber: 201164182,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201192714,
// 	},
// 	{
// 		supplier: 'DENSO MARSTON LTD.',
// 		claimNumber: 201225095,
// 	},
// 	{
// 		supplier: 'DONALDSON SAS (EUR)',
// 		claimNumber: 201278480,
// 	},
// 	{
// 		supplier: 'TECNI-FORM LTD',
// 		claimNumber: 201303764,
// 	},
// 	{
// 		supplier: 'LH GROUP (COLEMAN)',
// 		claimNumber: 201312364,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201324329,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201238796,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201069802,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201065833,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201063601,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201070548,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201068291,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201074780,
// 	},
// 	{
// 		supplier: 'LAM SPA  (EUR)',
// 		claimNumber: 201063729,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201064427,
// 	},
// 	{
// 		supplier: 'SUMMIT ENGINEERING',
// 		claimNumber: 201068592,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201068262,
// 	},
// 	{
// 		supplier: 'COOPER STANDARD AUTO ITALY',
// 		claimNumber: 201095835,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201090118,
// 	},
// 	{
// 		supplier: 'WABCO AUTOMOTIVE UK LTD',
// 		claimNumber: 201084413,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201090831,
// 	},
// 	{
// 		supplier: 'THERMOTEC PLASTICS LIMITED',
// 		claimNumber: 201090843,
// 	},
// 	{
// 		supplier: 'HENGSTLER ZYLINDER GMBH (EUR)',
// 		claimNumber: 201090863,
// 	},
// 	{
// 		supplier: 'ROTATIONAL MOULDINGS LTD',
// 		claimNumber: 201090833,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201082128,
// 	},
// 	{
// 		supplier: 'UNO Minda Limited',
// 		claimNumber: 201131678,
// 	},
// 	{
// 		supplier: 'ARGO-HYTOS LTD',
// 		claimNumber: 201088413,
// 	},
// 	{
// 		supplier: 'ROSTON CASTINGS',
// 		claimNumber: 201096538,
// 	},
// 	{
// 		supplier: 'ZUIDBERG FRONTLINE SYSTEMS',
// 		claimNumber: 201140169,
// 	},
// 	{
// 		supplier: 'ACOUSTAPRODUCTS LIMITED',
// 		claimNumber: 201182232,
// 	},
// 	{
// 		supplier: 'TRELLEBORG WHEEL SYSTEMS UK',
// 		claimNumber: 201084649,
// 	},
// 	{
// 		supplier: 'GROTE INDUSTRIES EUROPE GMBH',
// 		claimNumber: 201080313,
// 	},
// 	{
// 		supplier: 'ROCKINGER AGRICULTURE GMBH',
// 		claimNumber: 201089488,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201091077,
// 	},
// 	{
// 		supplier: 'CHONGQING QINGLING ALUMINUM CASTING',
// 		claimNumber: 201095989,
// 	},
// 	{
// 		supplier: 'ROCKINGER AGRICULTURE GMBH',
// 		claimNumber: 201092599,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH. LTD (EUR)',
// 		claimNumber: 201111398,
// 	},
// 	{
// 		supplier: 'FUYAO GLASS INDUSTRY GROUP (2414)',
// 		claimNumber: 201105814,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201105815,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201110612,
// 	},
// 	{
// 		supplier: 'DANFOSS POWER SOL LTD (EUR)',
// 		claimNumber: 201127284,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201125330,
// 	},
// 	{
// 		supplier: 'JIANGSU HENGFU INDU TECH CO.,LTD.',
// 		claimNumber: 201102941,
// 	},
// 	{
// 		supplier: 'MANN + HUMMEL (UK) LTD',
// 		claimNumber: 201103841,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201130915,
// 	},
// 	{
// 		supplier: 'DENSO MARSTON LTD.',
// 		claimNumber: 201157370,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201115012,
// 	},
// 	{
// 		supplier: 'TECNI-FORM LTD',
// 		claimNumber: 201140836,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201136086,
// 	},
// 	{
// 		supplier: 'MERCURY MATERIAL MANGMNT. LTD',
// 		claimNumber: 201131086,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201128087,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201140784,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201140822,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201121183,
// 	},
// 	{
// 		supplier: 'GKN WHEELS NAGBOL',
// 		claimNumber: 201121162,
// 	},
// 	{
// 		supplier: 'ZUIDBERG FRONTLINE SYSTEMS',
// 		claimNumber: 201101652,
// 	},
// 	{
// 		supplier: 'MERCURY MATERIAL MANGMNT. LTD',
// 		claimNumber: 201119556,
// 	},
// 	{
// 		supplier: 'SOUTHCO MANUFACTURING LTD',
// 		claimNumber: 201112749,
// 	},
// 	{
// 		supplier: 'SMAT NORD SRL',
// 		claimNumber: 201131513,
// 	},
// 	{
// 		supplier: 'SMAT NORD SRL',
// 		claimNumber: 201134922,
// 	},
// 	{
// 		supplier: 'GATES HYDRAULICS  (EUR)',
// 		claimNumber: 201122606,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201122587,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201115253,
// 	},
// 	{
// 		supplier: 'RAYNE PRECISION ENGINEERING',
// 		claimNumber: 201106845,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201117255,
// 	},
// 	{
// 		supplier: 'RAYNE PRECISION ENGINEERING',
// 		claimNumber: 201133270,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201118694,
// 	},
// 	{
// 		supplier: 'RAYNE PRECISION ENGINEERING',
// 		claimNumber: 201126970,
// 	},
// 	{
// 		supplier: 'PEREI LIGHTING',
// 		claimNumber: 201260322,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201261772,
// 	},
// 	{
// 		supplier: 'DONALDSON SAS (EUR)',
// 		claimNumber: 201294082,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201262573,
// 	},
// 	{
// 		supplier: 'GKN AUTOSTRUCTURES LTD',
// 		claimNumber: 201119063,
// 	},
// 	{
// 		supplier: 'UNO Minda Limited',
// 		claimNumber: 201148721,
// 	},
// 	{
// 		supplier: 'OPTIBELT (UK) LTD.',
// 		claimNumber: 201222230,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201140882,
// 	},
// 	{
// 		supplier: 'WABCO AUTOMOTIVE UK LTD',
// 		claimNumber: 201140899,
// 	},
// 	{
// 		supplier: 'GKN WHEELS NAGBOL',
// 		claimNumber: 201145423,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201152895,
// 	},
// 	{
// 		supplier: 'HENGSTLER ZYLINDER GMBH (EUR)',
// 		claimNumber: 201163185,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201156974,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201123001,
// 	},
// 	{
// 		supplier: 'TECNI-FORM LTD',
// 		claimNumber: 201119771,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201152982,
// 	},
// 	{
// 		supplier: 'UNO Minda Limited',
// 		claimNumber: 201128958,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201121267,
// 	},
// 	{
// 		supplier: 'DONALDSON FILTER COMP (EUR)',
// 		claimNumber: 201128676,
// 	},
// 	{
// 		supplier: 'MP FILTRI UK LIMITED',
// 		claimNumber: 201130862,
// 	},
// 	{
// 		supplier: 'ZUIDBERG FRONTLINE SYSTEMS',
// 		claimNumber: 201143558,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201154749,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201135303,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201138878,
// 	},
// 	{
// 		supplier: 'UNO Minda Limited',
// 		claimNumber: 201139392,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201126021,
// 	},
// 	{
// 		supplier: 'BP FABRICATIONS',
// 		claimNumber: 201144537,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201132355,
// 	},
// 	{
// 		supplier: 'HENGSTLER ZYLINDER GMBH (EUR)',
// 		claimNumber: 201136074,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201131857,
// 	},
// 	{
// 		supplier: 'HELLA LTD (EUR)',
// 		claimNumber: 201129145,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201131885,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS',
// 		claimNumber: 201132694,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201140965,
// 	},
// 	{
// 		supplier: 'MP FILTRI UK LIMITED',
// 		claimNumber: 201150607,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL LTD',
// 		claimNumber: 201141193,
// 	},
// 	{
// 		supplier: 'BURGAFLEX UK LTD',
// 		claimNumber: 201166617,
// 	},
// 	{
// 		supplier: 'IRACROFT LTD (GBP)',
// 		claimNumber: 201136006,
// 	},
// 	{
// 		supplier: 'HYDAC TECH LTD (GBP)',
// 		claimNumber: 201141794,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201144458,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201162294,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201150986,
// 	},
// 	{
// 		supplier: 'PERMOID INDUSTRIES LTD',
// 		claimNumber: 201150546,
// 	},
// 	{
// 		supplier: 'MERCURY MATERIAL MANGMNT. LTD',
// 		claimNumber: 201196865,
// 	},
// 	{
// 		supplier: 'KINGSPAN WATER & ENERGY LTD',
// 		claimNumber: 201150249,
// 	},
// 	{
// 		supplier: 'GATES HYDRAULICS  (EUR)',
// 		claimNumber: 201159789,
// 	},
// 	{
// 		supplier: 'TRELLEBORG SEALING SOLUTIONS',
// 		claimNumber: 201158975,
// 	},
// 	{
// 		supplier: 'FLUICONNECTO UK LTD',
// 		claimNumber: 201174257,
// 	},
// 	{
// 		supplier: 'CHANGZHOU LINADI INTELLIGENT',
// 		claimNumber: 201233305,
// 	},
// 	{
// 		supplier: 'HENGSTLER ZYLINDER GMBH (EUR)',
// 		claimNumber: 201162036,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201169822,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201169851,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201161944,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201152790,
// 	},
// 	{
// 		supplier: 'GROTE INDUSTRIES EUROPE GMBH',
// 		claimNumber: 201167371,
// 	},
// 	{
// 		supplier: 'GROTE INDUSTRIES EUROPE GMBH',
// 		claimNumber: 201185337,
// 	},
// 	{
// 		supplier: 'GROTE INDUSTRIES EUROPE GMBH',
// 		claimNumber: 201216891,
// 	},
// 	{
// 		supplier: 'POLKIMA GLASS REINFORCED PLAS.',
// 		claimNumber: 201279121,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201167938,
// 	},
// 	{
// 		supplier: 'SMAT NORD SRL',
// 		claimNumber: 201165801,
// 	},
// 	{
// 		supplier: 'SENSATA TECH. HOLLAND BV (EUR)',
// 		claimNumber: 201181050,
// 	},
// 	{
// 		supplier: 'MERCURY MATERIAL MANGMNT. LTD',
// 		claimNumber: 201180089,
// 	},
// 	{
// 		supplier: 'WEBER-HYDRAULIK GMBH',
// 		claimNumber: 201203742,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201212731,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201195012,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201195021,
// 	},
// 	{
// 		supplier: 'LODI SPA',
// 		claimNumber: 201192390,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201288610,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201209240,
// 	},
// 	{
// 		supplier: 'SENSATA TECHNOLOGIES GMBH',
// 		claimNumber: 201306631,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201202882,
// 	},
// 	{
// 		supplier: 'BURGAFLEX UK LTD',
// 		claimNumber: 201265783,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201193449,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201279704,
// 	},
// 	{
// 		supplier: 'ADM PRESSINGS LIMITED',
// 		claimNumber: 201248295,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201200053,
// 	},
// 	{
// 		supplier: 'PROVENTIA OY',
// 		claimNumber: 201198210,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201196229,
// 	},
// 	{
// 		supplier: 'GKN AUTOSTRUCTURES LTD',
// 		claimNumber: 201201378,
// 	},
// 	{
// 		supplier: 'WALTERSCHEID GMBH (EUR)',
// 		claimNumber: 201245470,
// 	},
// 	{
// 		supplier: 'ELANDERS LTD',
// 		claimNumber: 201276452,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201214082,
// 	},
// 	{
// 		supplier: 'GROTE INDUSTRIES EUROPE GMBH',
// 		claimNumber: 201214173,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201234374,
// 	},
// 	{
// 		supplier: 'FASTER S.R.L',
// 		claimNumber: 201237656,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201248593,
// 	},
// 	{
// 		supplier: 'OPTIBELT (UK) LTD.',
// 		claimNumber: 201221349,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201254370,
// 	},
// 	{
// 		supplier: 'TRELLEBORG WHEEL SYSTEMS UK',
// 		claimNumber: 201239283,
// 	},
// 	{
// 		supplier: 'GRAMMER AG',
// 		claimNumber: 201223253,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201231396,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201267720,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201229982,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201242032,
// 	},
// 	{
// 		supplier: 'ZF FRIEDRICHSHAFEN AG (EUR)',
// 		claimNumber: 201241827,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201242018,
// 	},
// 	{
// 		supplier: 'ADM PRESSINGS LIMITED',
// 		claimNumber: 201241845,
// 	},
// 	{
// 		supplier: 'GKN WHEELS NAGBOL',
// 		claimNumber: 201241823,
// 	},
// 	{
// 		supplier: 'CHANGZHOU LINADI INTELLIGENT',
// 		claimNumber: 201242025,
// 	},
// 	{
// 		supplier: 'BMS MACHINING LIMITED',
// 		claimNumber: 201241841,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201237652,
// 	},
// 	{
// 		supplier: 'FASTER S.R.L',
// 		claimNumber: 201235263,
// 	},
// 	{
// 		supplier: 'ACOUSTAFOAM LTD',
// 		claimNumber: 201245671,
// 	},
// 	{
// 		supplier: 'ROTATIONAL MOULDINGS LTD',
// 		claimNumber: 201233123,
// 	},
// 	{
// 		supplier: 'TECNI-FORM LTD',
// 		claimNumber: 201235247,
// 	},
// 	{
// 		supplier: 'GRAZIANO TRANSMISSIONI S.p.A',
// 		claimNumber: 201243434,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH. LTD (EUR)',
// 		claimNumber: 201245861,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201239193,
// 	},
// 	{
// 		supplier: 'PIMSA AUTOMOTIVE UK LTD',
// 		claimNumber: 201238392,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201255153,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201296077,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201245425,
// 	},
// 	{
// 		supplier: 'MERCURY MATERIAL MANGMNT. LTD',
// 		claimNumber: 201268162,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201261727,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201250063,
// 	},
// 	{
// 		supplier: 'ARGO-HYTOS LTD',
// 		claimNumber: 201260822,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201264216,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201303337,
// 	},
// 	{
// 		supplier: 'C-TECH ENGINEERS PVT (INR)',
// 		claimNumber: 201257716,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201255056,
// 	},
// 	{
// 		supplier: 'RED DOT EUROPE LTD',
// 		claimNumber: 201268954,
// 	},
// 	{
// 		supplier: 'ECCO Safety Group',
// 		claimNumber: 201282857,
// 	},
// 	{
// 		supplier: 'IRACROFT LTD (GBP)',
// 		claimNumber: 201269520,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201307581,
// 	},
// 	{
// 		supplier: 'GRENVILLE ENGINEERING LTD',
// 		claimNumber: 201307557,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201307583,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201274812,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201280325,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201291788,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201291563,
// 	},
// 	{
// 		supplier: 'COOPER STANDARD AUTO ITALY',
// 		claimNumber: 201273177,
// 	},
// 	{
// 		supplier: 'SENSATA TECH. HOLLAND BV (EUR)',
// 		claimNumber: 201273200,
// 	},
// 	{
// 		supplier: 'CHELL ENGINEERING LTD',
// 		claimNumber: 201270867,
// 	},
// 	{
// 		supplier: 'THOS STOREY FAB. GROUP LTD',
// 		claimNumber: 201265707,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201295744,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201283652,
// 	},
// 	{
// 		supplier: 'TECNI-FORM LTD',
// 		claimNumber: 201268877,
// 	},
// 	{
// 		supplier: 'PARKINSON HARNESS TECH LTD',
// 		claimNumber: 201268895,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201273469,
// 	},
// 	{
// 		supplier: 'SAFIM SPA',
// 		claimNumber: 201281700,
// 	},
// 	{
// 		supplier: 'KINGSPAN WATER & ENERGY LTD',
// 		claimNumber: 201330981,
// 	},
// 	{
// 		supplier: 'SANDEN INTERNATIONAL LTD',
// 		claimNumber: 201293497,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201301315,
// 	},
// 	{
// 		supplier: 'LINECROSS LIMITED',
// 		claimNumber: 201293500,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201324927,
// 	},
// 	{
// 		supplier: 'ADM PRESSINGS LIMITED',
// 		claimNumber: 201351753,
// 	},
// 	{
// 		supplier: 'GRAZIANO TRASMISSIONI UK LTD',
// 		claimNumber: 201350696,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201297260,
// 	},
// 	{
// 		supplier: 'IRACROFT LTD (GBP)',
// 		claimNumber: 201334254,
// 	},
// 	{
// 		supplier: 'ROCKINGER AGRICULTURE GMBH',
// 		claimNumber: 201306377,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201306397,
// 	},
// 	{
// 		supplier: 'HENGSTLER ZYLINDER GMBH (EUR)',
// 		claimNumber: 201310096,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201304216,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201308894,
// 	},
// 	{
// 		supplier: 'ADM PRESSINGS LIMITED',
// 		claimNumber: 201315271,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201314008,
// 	},
// 	{
// 		supplier: 'WALTERSCHEID GMBH (EUR)',
// 		claimNumber: 201315086,
// 	},
// 	{
// 		supplier: 'AIRFAWN CONSULTANTS LTD',
// 		claimNumber: 201328310,
// 	},
// 	{
// 		supplier: 'ROCKINGER AGRICULTURE GMBH',
// 		claimNumber: 201341075,
// 	},
// 	{
// 		supplier: 'HYDRAFORCE HYDRAULICS (EUR)',
// 		claimNumber: 201348074,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201324741,
// 	},
// 	{
// 		supplier: 'TECNI-FORM LTD',
// 		claimNumber: 201328959,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201309658,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201333195,
// 	},
// 	{
// 		supplier: 'FAIRWAY SEALS LTD.',
// 		claimNumber: 201326699,
// 	},
// 	{
// 		supplier: 'SCHARMULLER GMBH',
// 		claimNumber: 201326846,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201334837,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201344490,
// 	},
// 	{
// 		supplier: 'BOSCH REXROTH LIMITED',
// 		claimNumber: 201328416,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201334209,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201342081,
// 	},
// 	{
// 		supplier: 'LH GROUP (COLEMAN)',
// 		claimNumber: 201345627,
// 	},
// 	{
// 		supplier: 'WALTERSCHEID GMBH (EUR)',
// 		claimNumber: 201345754,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201337856,
// 	},
// 	{
// 		supplier: 'AGJUNCTION',
// 		claimNumber: 201333557,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201336104,
// 	},
// 	{
// 		supplier: 'WALTERSCHEID GMBH (EUR)',
// 		claimNumber: 201336174,
// 	},
// 	{
// 		supplier: 'TYNESIDE SAFETY GLASS CO.LTD',
// 		claimNumber: 201350085,
// 	},
// 	{
// 		supplier: 'SENSATA TECH. HOLLAND BV (EUR)',
// 		claimNumber: 201351782,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201347367,
// 	},
// 	{
// 		supplier: 'ROCKINGER AGRICULTURE GMBH',
// 		claimNumber: 201340401,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201352453,
// 	},
// 	{
// 		supplier: 'COBO SPA',
// 		claimNumber: 201351072,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201348056,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE',
// 		claimNumber: 201347932,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201351207,
// 	},
// 	{
// 		supplier: 'SUPPLY TECH LTD (GBP)',
// 		claimNumber: 201354880,
// 	},
// 	{
// 		supplier: 'GROTE INDUSTRIES EUROPE GMBH',
// 		claimNumber: 201352931,
// 	},
// 	{
// 		supplier: 'BECKER INDUSTRIAL COATINGS LTD',
// 		claimNumber: 201352925,
// 	},
// 	{
// 		supplier: 'XL ENGINEERING LTD',
// 		claimNumber: 201354053,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201356616,
// 	},
// 	{
// 		supplier: 'HENGSTLER ZYLINDER GMBH (EUR)',
// 		claimNumber: 201356148,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201357270,
// 	},
// 	{
// 		supplier: 'GROTE INDUSTRIES EUROPE GMBH',
// 		claimNumber: 201357280,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201084884,
// 	},
// 	{
// 		supplier: 'HELLA LTD (EUR)',
// 		claimNumber: 201087236,
// 	},
// 	{
// 		supplier: 'AGCO GMBH',
// 		claimNumber: 201083248,
// 	},
// 	{
// 		supplier: 'GATE 7 LTD (GBP)',
// 		claimNumber: 201169725,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201126756,
// 	},
// 	{
// 		supplier: 'Not assigned',
// 		claimNumber: 201133338,
// 	},
// 	{
// 		supplier: 'GRAMMER AG',
// 		claimNumber: 201165501,
// 	},
// 	{
// 		supplier: 'BP FABRICATIONS',
// 		claimNumber: 201136787,
// 	},
// 	{
// 		supplier: 'GRAZIANO TRASMISSIONI UK LTD',
// 		claimNumber: 201145258,
// 	},
// 	{
// 		supplier: 'SMP POLAND SP ZOO',
// 		claimNumber: 201142997,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201158203,
// 	},
// 	{
// 		supplier: 'F.O.R. SPA',
// 		claimNumber: 201154683,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201225801,
// 	},
// 	{
// 		supplier: 'GRAZIANO TRANSMISSIONI S.p.A',
// 		claimNumber: 201190193,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201199009,
// 	},
// 	{
// 		supplier: 'SCHARMULLER GMBH',
// 		claimNumber: 201257968,
// 	},
// 	{
// 		supplier: 'CALIX AB (EUR)',
// 		claimNumber: 201230194,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201193566,
// 	},
// 	{
// 		supplier: 'THOMSON PETTIE LTD',
// 		claimNumber: 201209875,
// 	},
// 	{
// 		supplier: 'DOGA S.A.',
// 		claimNumber: 201209805,
// 	},
// 	{
// 		supplier: 'SOUTHCO MANUFACTURING LTD',
// 		claimNumber: 201248687,
// 	},
// 	{
// 		supplier: 'GATE 7 LTD (GBP)',
// 		claimNumber: 201220156,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201213580,
// 	},
// 	{
// 		supplier: 'THOS STOREY FAB. GROUP LTD',
// 		claimNumber: 201213614,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201305677,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201225783,
// 	},
// 	{
// 		supplier: 'PERMOID INDUSTRIES LTD',
// 		claimNumber: 201239583,
// 	},
// 	{
// 		supplier: 'CALIX AB (EUR)',
// 		claimNumber: 201248050,
// 	},
// 	{
// 		supplier: 'DONALDSON SAS (EUR)',
// 		claimNumber: 201262754,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201340736,
// 	},
// 	{
// 		supplier: 'DESAI ENGINNERS (INR)',
// 		claimNumber: 201284459,
// 	},
// 	{
// 		supplier: 'THOMSON PETTIE LTD',
// 		claimNumber: 201275055,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201275097,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201300790,
// 	},
// 	{
// 		supplier: 'MP FILTRI UK LIMITED',
// 		claimNumber: 201330578,
// 	},
// 	{
// 		supplier: 'BERGSTROM (EUROPE) LTD',
// 		claimNumber: 201341739,
// 	},
// 	{
// 		supplier: 'CARLING TECHNOLOGIES LTD',
// 		claimNumber: 201340945,
// 	},
// 	{
// 		supplier: 'ECCO Safety Group',
// 		claimNumber: 201327222,
// 	},
// 	{
// 		supplier: 'CALIX AB (EUR)',
// 		claimNumber: 201313056,
// 	},
// 	{
// 		supplier: 'ZUIDBERG FRONTLINE SYSTEMS',
// 		claimNumber: 201313055,
// 	},
// 	{
// 		supplier: 'CALIX AB (EUR)',
// 		claimNumber: 201274028,
// 	},
// 	{
// 		supplier: 'CALIX AB (EUR)',
// 		claimNumber: 201303650,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201295700,
// 	},
// 	{
// 		supplier: 'TEX PLASTICS LTD',
// 		claimNumber: 201291030,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201278476,
// 	},
// 	{
// 		supplier: 'MICROLISE LTD',
// 		claimNumber: 201354492,
// 	},
// 	{
// 		supplier: 'SCHARMULLER GMBH',
// 		claimNumber: 201357514,
// 	},
// 	{
// 		supplier: 'SCHARMULLER GMBH',
// 		claimNumber: 201357515,
// 	},
// 	{
// 		supplier: 'DONALDSON SAS (EUR)',
// 		claimNumber: 201316142,
// 	},
// 	{
// 		supplier: 'ZUIDBERG FRONTLINE SYSTEMS',
// 		claimNumber: 201262909,
// 	},
// 	{
// 		supplier: 'WALTERSCHEID GMBH (EUR)',
// 		claimNumber: 201274716,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201327221,
// 	},
// 	{
// 		supplier: 'GATES HYDRAULICS  (EUR)',
// 		claimNumber: 201321219,
// 	},
// 	{
// 		supplier: 'WALTERSCHEID GMBH (EUR)',
// 		claimNumber: 201322560,
// 	},
// 	{
// 		supplier: 'TRIMARK EUROPE LTD',
// 		claimNumber: 201329271,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201329184,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201088629,
// 	},
// 	{
// 		supplier: 'ROCKINGER AGRICULTURE GMBH',
// 		claimNumber: 201074993,
// 	},
// 	{
// 		supplier: 'GKN AUTOSTRUCTURES LTD',
// 		claimNumber: 201108071,
// 	},
// 	{
// 		supplier: 'IMPERIAL AUTO INDUSTRIES LTD',
// 		claimNumber: 201108078,
// 	},
// 	{
// 		supplier: 'SPICER DRIVESHAFT   (EURO)',
// 		claimNumber: 201095384,
// 	},
// 	{
// 		supplier: 'OPTIMAS OE SOLUTIONS LTD',
// 		claimNumber: 201095841,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201103428,
// 	},
// 	{
// 		supplier: 'PARKER HANNIFIN LTD (GBP)',
// 		claimNumber: 201103766,
// 	},
// 	{
// 		supplier: 'BROADWATER MOULDINGS LTD',
// 		claimNumber: 201143204,
// 	},
// 	{
// 		supplier: 'GKN WHEELS NAGBOL',
// 		claimNumber: 201124649,
// 	},
// 	{
// 		supplier: 'JCB Internally Manufactured Compone',
// 		claimNumber: 201130833,
// 	},
// 	{
// 		supplier: 'CATTON CONTROLS CABLES LTD',
// 		claimNumber: 201130912,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201130878,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201130857,
// 	},
// 	{
// 		supplier: 'BROADWATER MOULDINGS LTD',
// 		claimNumber: 201120579,
// 	},
// 	{
// 		supplier: 'QINGDAO SANHESHAN PRECISION CASTING',
// 		claimNumber: 201225201,
// 	},
// 	{
// 		supplier: 'GRAZIANO TRANSMISSIONI S.p.A',
// 		claimNumber: 201149723,
// 	},
// 	{
// 		supplier: 'PROVENTIA OY',
// 		claimNumber: 201169224,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201174616,
// 	},
// 	{
// 		supplier: 'SGH (MOULDS)  LIMITED',
// 		claimNumber: 201184558,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201223451,
// 	},
// 	{
// 		supplier: 'EUROTEC INTERNATIONAL PLC',
// 		claimNumber: 201171436,
// 	},
// 	{
// 		supplier: 'SAMVARDHANA MOTHERSON INTERNATIONAL',
// 		claimNumber: 201199710,
// 	},
// 	{
// 		supplier: 'LODI SPA',
// 		claimNumber: 201202097,
// 	},
// 	{
// 		supplier: 'ELOBAU ELEKTRO GMBH',
// 		claimNumber: 201246546,
// 	},
// 	{
// 		supplier: 'GKN WHEELS NAGBOL',
// 		claimNumber: 201199472,
// 	},
// 	{
// 		supplier: 'TECNI-FORM LTD',
// 		claimNumber: 201238228,
// 	},
// 	{
// 		supplier: 'DANA ITALIA SPA',
// 		claimNumber: 201268537,
// 	},
// 	{
// 		supplier: 'LEONI WIRING SYSTEMS UK (EUR)',
// 		claimNumber: 201268591,
// 	},
// 	{
// 		supplier: 'DENSO MARSTON LTD.',
// 		claimNumber: 201297207,
// 	},
// 	{
// 		supplier: 'ROCKINGER AGRICULTURE GMBH',
// 		claimNumber: 201287174,
// 	},
// 	{
// 		supplier: 'GKN WHEELS NAGBOL',
// 		claimNumber: 201299028,
// 	},
// 	{
// 		supplier: 'THOMSON PETTIE LTD',
// 		claimNumber: 201287628,
// 	},
// 	{
// 		supplier: 'ECCO SAFETY GROUP UK',
// 		claimNumber: 201296133,
// 	},
// 	{
// 		supplier: 'PIMSA AUTOMOTIVE UK LTD',
// 		claimNumber: 201289297,
// 	},
// 	{
// 		supplier: 'KNORR-BREMSE SYSTEMS FOR COMMERCIAL',
// 		claimNumber: 201291639,
// 	},
// 	{
// 		supplier: 'Not assigned',
// 		claimNumber: 201341648,
// 	},
// 	{
// 		supplier: 'BLACKWOOD ENG LTD (USD)',
// 		claimNumber: 201343368,
// 	},
// 	{
// 		supplier: 'WALTERSCHEID GMBH (EUR)',
// 		claimNumber: 201314011,
// 	},
// 	{
// 		supplier: 'AGCO POWER INC',
// 		claimNumber: 201305900,
// 	},
// 	{
// 		supplier: 'GATES HYDRAULICS  (EUR)',
// 		claimNumber: 201305884,
// 	},
// 	{
// 		supplier: 'BP FABRICATIONS',
// 		claimNumber: 201311190,
// 	},
// 	{
// 		supplier: 'WALTERSCHEID GMBH (EUR)',
// 		claimNumber: 201312551,
// 	},
// 	{
// 		supplier: 'OAKBRAY LTD  (GBP)',
// 		claimNumber: 201345043,
// 	},
// 	{
// 		supplier: 'WALTERSCHEID GMBH (EUR)',
// 		claimNumber: 201308870,
// 	},
// 	{
// 		supplier: 'XL ENGINEERING LTD',
// 		claimNumber: 201305942,
// 	},
// 	{
// 		supplier: 'WALTERSCHEID GMBH (EUR)',
// 		claimNumber: 201308835,
// 	},
// 	{
// 		supplier: 'BROADWATER MOULDINGS LTD',
// 		claimNumber: 201339293,
// 	},
// 	{
// 		supplier: 'WALTERSCHEID GMBH (EUR)',
// 		claimNumber: 201327905,
// 	},
// ]

// let emUpdate = new CronJob('0 18 08 * * *', async function () {
// 	try {
// 		for (let claim of emlpClaims) {
// 			let found = await Claim.find({
// 				claimNumber: JSON.stringify(claim.claimNumber),
// 			})
// 			// console.log(found)

// 			if (found.length > 0) {
// 				console.log(found[0]._id)
// 				let id = found[0]._id
// 				await Claim.findByIdAndUpdate(id, {
// 					supplier: claim.supplier,
// 				})
// 			}
// 		}
// 	} catch (error) {
// 		console.log(error)
// 	}
// })

// emUpdate.start()
